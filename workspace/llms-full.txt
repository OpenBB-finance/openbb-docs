---
title: Copilot Basics
sidebar_position: 7
description: Learn the basics of OpenBB Copilot interface and functionality
keywords:
- OpenBB Copilot
- copilot basics
- AI assistant
- interface
- prompt library
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Copilot Basics | OpenBB Workspace Docs" />

The OpenBB Copilot is an AI-powered companion seamlessly integrated into the OpenBB Workspace, designed to enhance and accelerate your financial analysis workflow.

This sophisticated assistant understands natural language queries, retrieves data from multiple sources, performs complex analysis, and generates actionable insights.

Built for financial professionals, the Copilot transforms your workflow by accelerating analysis and providing context-aware insights based on your specific datasets and workspace configuration.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="OpenBB Copilot Interface"
    src="https://openbb-cms.directus.app/assets/0a5e0075-7c50-44cb-8d45-2be1817deab5.png"
    width="100%"
  />
</div>

## Structure

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Copilot interface structure"
    src="https://openbb-cms.directus.app/assets/d7efdb97-fecd-4d58-8094-84fa82bf4bd4.png"
    width="40%"
  />
</div>

The Copilot interface is designed for intuitive interaction with a clean three-section layout:

- **Header:** At the top, you'll find controls to manage your conversation. You can see which chat you're in, start a new one, clear the history, expand to full-screen mode, or hide the agent entirely.

- **Body:** The main chat window where your conversation takes place. It displays the Copilot's answers, its step-by-step reasoning, and any output like charts, tables, or code. The chat automatically scrolls, keeping everything in chronological order. Hover over a message to see its timestamp.

- **Footer:** Here, you can manage the data and widgets the Copilot uses as context for its answers. You can also add your own custom AI agents or open your prompt library.

## Full screen AI-chat

You can resize the AI panel by dragging the border.

In side-panel mode, it provides quick access for simple queries while maintaining your primary workspace view.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Full screen AI-chat"
    src="https://openbb-cms.directus.app/assets/1f9ba730-2516-4eac-b7c9-ca6e9382ba78.png"
    width="100%"
  />
</div>

When expanded to full-screen mode, you gain maximum real estate for complex conversations, detailed reasoning steps, and large artifacts like comprehensive charts or extensive data tables.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Full screen AI-chat"
    src="https://openbb-cms.directus.app/assets/7aa420b1-01b8-4785-b2d9-588ddd414842.png"
    width="100%"
  />
</div>

This flexibility allows seamless transitions between quick consultations and deep analytical sessions without losing context or interrupting your workflow.

You can also hide the AI agent entirely if you want to work solely with the dashboard.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="AI agent hidden"
    src="https://openbb-cms.directus.app/assets/9e9a76dc-7e4a-4e04-9211-086ee147c6c1.png"
    width="100%"
  />
</div>

## Prompt library

The integrated prompt library serves as a productivity multiplier by storing and organizing your most valuable queries. You can save complex prompts and even tag widgets, to ensure the right context is utilized for the right prompt.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Prompt library"
    src="https://openbb-cms.directus.app/assets/f145bb2d-89bf-49f9-8fd7-af24d78e4dff.png"
    width="100%"
  />
</div>

## Model

The OpenBB Copilot is specifically optimized for financial analysis and data interpretation tasks, leveraging the latest models from OpenAI.

For enterprise deployments, OpenBB provides seamless integration with your organization's Azure OpenAI.

This ensures compliance with internal security and data sovereignty policies.

If you would like full control over your agent capabilities, here's [our open source repository](https://github.com/OpenBB-finance/agents-for-openbb) with examples of AI custom agents that you can build and integrate into the OpenBB Workspace.


---

---
title: Context Management
sidebar_position: 8
description: Understanding how OpenBB Copilot manages and prioritizes context
keywords:
- context management
- explicit context
- dashboard context
- global retrieval
- conversation history
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Context Management | OpenBB Workspace Docs" />

The Copilot employs a sophisticated context understanding system that prioritizes and processes multiple information sources simultaneously.

This hierarchical approach ensures that the most relevant and specific data takes precedence when generating responses, while still maintaining awareness of broader workspace context and conversation history.

## Priority

The agent prioritizes context in the following order:

| Priority | Context Type | Description |
|---|---|---|
| 1 | Explicit | Widgets added to context specifically. |
| 2 | MCP tool | Active MCP tools connected to the Copilot |
| 3 | Attached files | Files uploaded directly to the Copilot |
| 4 | Dashboard | All widgets currently on your dashboard (in all tabs). |
| 5 | Conversation | The history of your current conversation. |
| 6 | Global | All widgets available within the OpenBB Workspace. If Global Data enabled. |
| 7 | Web search | Retrieve infromation from the web. If Web Search enabled. |

## Context Types

### Explicit Context

Explicit context represents the highest priority information source, allowing you to precisely direct the Copilot's attention to specific datasets or widgets. This mechanism is particularly powerful for ensuring accuracy when working with multiple similar datasets or when you need analysis focused on a specific dataset.

When you click on the "Add to context" button on any widget you're creating a direct reference that the Copilot will prioritize above all other available information. After sending the prompt, that widget will remain in context.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Explicit context"
    src="https://openbb-cms.directus.app/assets/24947294-2053-4efc-a68b-7ec90bf9875c.png"
    width="100%"
  />
</div>

When you use the "@" symbol followed by a widget name and the prompt is sent, the widget will disappear from context. This is meant to be a quick tag reference.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Explicit context with @"
    src="https://openbb-cms.directus.app/assets/3ed47f6f-52f2-4515-b401-16bc8d6a971a.png"
    width="60%"
  />
</div>

### MCP Tools

The second highest priority is active MCP tools connected to OpenBB Workspace. For more details, see the MCP tools documentation [here](/workspace/analysts/ai-features/mcp-tools).

Depending on your use case, MCP tools offer a powerful way to connect to third-party data providers or specialized financial tools using a standardized protocol. This would eliminate the need for custom development inside OpenBB Workspace.

To use MCP tools, make sure to configure it (see how to do it [here](/workspace/analysts/ai-features/mcp-tools#configure-your-mcp-servers), and then select all the desired MCP tools.


<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Attached files"
    src="https://openbb-cms.directus.app/assets/31809471-52b2-4dcb-a5f0-9276def2ae29.png"
    width="60%"
  />
</div>

When enabled, Copilot gains access to all active MCP tools. You can also explicitly call a specific MCP tool to guarantee it’s invoked.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Attached files"
    src="https://openbb-cms.directus.app/assets/0a77e58a-6c9f-4cc8-8983-ec8668ecc1c6.png"
    width="60%"
  />
</div>


### Attached Files

The attachment system enables the Copilot to process documents and datasets that aren't part of your current workspace widgets. Supported file types include PDF, Excel, CSV, and various other document formats.

The Copilot automatically extracts and indexes content from attached files, making them searchable and referenceable throughout your conversation. This capability is essential for performing ad-hoc analysis or incorporating external datasets and documents into your workflow.

Please note that for PDF files, text must be selectable as Optical Character Recognition (OCR) is not supported. However, you can integrate your own agent that performs OCR.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Attached files"
    src="https://openbb-cms.directus.app/assets/f3a3ab07-4ecf-4b76-af74-cd2bb1f4b3b2.png"
    width="60%"
  />
</div>

### Dashboard Context

The dashboard context provides the Copilot with comprehensive awareness of your currently active dashboard. All widgets on your active dashboard become automatically available as data sources, allowing the Copilot to understand the broader context of your work session. It also has access to the widgets metadata and the current parameters selected.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Dashboard context"
    src="https://openbb-cms.directus.app/assets/2fc343e5-6eb2-4ef6-ba10-f687868bdff4.png"
    width="100%"
  />
</div>

### Conversation History

Conversational context enables natural, iterative analysis by maintaining awareness of your entire dialogue history within the current session.

The Copilot tracks your explicit questions and its responses. This memory allows for follow-up queries, refinement of analysis parameters, and building upon previous insights without needing to re-establish context.

The system understands references to "the previous chart", "that analysis", or "the data we discussed" and can seamlessly continue complex analytical workflows across multiple conversation turns.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Conversation history"
    src="https://openbb-cms.directus.app/assets/49ed1729-674a-4d45-bf73-ba9bd3918bed.png"
    width="70%"
  />
</div>

### Global Retrieval (ON/OFF flag)

The global retrieval system provides the Copilot with access to the entire OpenBB Workspace widget library, extending far beyond your current dashboard widgets.

When your current dashboard doesn't contain the specific data or analysis tool needed to answer a query, the Copilot can automatically identify and utilize the appropriate widgets from the entire widget library, effectively expanding your analytical capabilities on-demand without manual widget selection.

This is only possible due to the metadata associated with each widget and is why it's important to invest time in specifying the metadata carefully.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Global retrieval"
    src="https://openbb-cms.directus.app/assets/f5661493-50ec-45c0-931a-8abd70d3bc9a.png"
    width="60%"
  />
</div>

### Web Search (ON/OFF flag)

The web search capability enables the Copilot to access real-time information from across the internet when:

- The available workspace data is insufficient to fully answer your query.
- The user asks to look for the information on the web.

This feature automatically activates as a fallback mechanism, ensuring comprehensive responses even when dealing with breaking news, recent market developments, or information not available in your current workspace widgets.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Web search"
    src="https://openbb-cms.directus.app/assets/3dffe668-2114-4c4c-b822-395da193f2a0.png"
    width="100%"
  />
</div>


---

---
title: Data Handling
sidebar_position: 9
description: How OpenBB Copilot processes structured and unstructured data
keywords:
- data handling
- structured data
- unstructured data
- AgGrid
- Plotly
- document processing
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Data Handling | OpenBB Workspace Docs" />

## Widget interaction

Dynamic parameter modification represents one of the OpenBB's Copilot most powerful capabilities.

The system understands the parameter schemas of each widget and can intelligently modify settings like date ranges, asset symbols, calculation periods, and analysis parameters to match your specific requirements.

This eliminates the need for manual widget configuration and enables the Copilot to perform iterative analysis with different parameters automatically, such as comparing the same analysis across different time periods or asset classes within a single conversation.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Widget parameters"
    src="https://openbb-cms.directus.app/assets/1c0c7c36-30e8-4b89-b9ad-0b97694f2699.png"
    width="100%"
  />
</div>

## Structured data

The Copilot excels at processing and analyzing structured financial datasets through multiple specialized capabilities:

- **Table widgets:** A natural language to SQL translation tool allows you to query tabular data from your widgets using plain English. Once your data is loaded in a tabular format, `text2sql` converts your questions into SQL queries under the hood and retrieves specific information from these tables. This allows you to explore and analyze your data through simple natural language questions.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="text2sql querying tabular data"
    src="https://openbb-cms.directus.app/assets/14b3bf0d-7569-4b31-9c4b-24053582b211.png"
    width="100%"
  />
</div>

- **Plotly widgets:** Full-featured charting engine that not only generates interactive visualizations but also allows developers to provide the underlying data. The Copilot can extract specific data points, and create derivative analyses from existing visualizations. The AI agent will have better results in case the Plotly widget has raw data associated with it.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Plotly chart with raw data switch"
    src="https://openbb-cms.directus.app/assets/0c9f06a6-c849-42e1-b4a0-5e572a7ff4b8.png"
    width="100%"
  />
</div>

## Unstructured data

The Copilot's unstructured data processing capabilities enable comprehensive analysis of diverse document types and media:

- **Document Processing (MD/PDF):** Advanced text extraction and comprehension. The system maintains document structure understanding, preserving context around tables and hierarchical information. This utilizes a sophisticated retrieval system that chunks large documents intelligently, maintains semantic relationships, and provides precise citations. The system can cross-reference information across multiple documents and identify contradictions or supporting evidence.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Document processing with citations"
    src="https://openbb-cms.directus.app/assets/583b82f5-11c0-44d8-b286-4e6b3c1b364c.png"
    width="100%"
  />
</div>

- **Web search:**: When the user provides a URL to the AI agent, it converts the web page to markdown for it to be parsed by the model - as done above.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Web search markdown conversion"
    src="https://openbb-cms.directus.app/assets/e08c4afc-1f5c-48eb-8e21-f8a716c7e9a2.png"
    width="100%"
  />
</div>

- **Image Analysis:** Image processing capabilities for charts, screenshots, financial diagrams, and infographics. The Copilot can extract data from visual representations, understand chart types, and incorporate visual information into broader analytical workflows.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Image analysis extracting data from charts"
    src="https://openbb-cms.directus.app/assets/8ec86d09-faa1-4ee4-8820-76e93b8b1fae.png"
    width="100%"
  />
</div>


---

---
title: Output Formats
sidebar_position: 12
description: Understanding OpenBB Copilot's output formats and capabilities
keywords:
- output formats
- citations
- create widgets
- user feedback
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Output Formats | OpenBB Workspace Docs" />

The Copilot's output system delivers comprehensive, contextual responses that synthesize all available information into actionable insights. Each response is structured to provide immediate answers while supporting deeper investigation, combining direct responses with supporting evidence, data visualizations, and clear pathways for follow-up analysis.

## Citations

Comprehensive citation system ensures full traceability and verification of all information sources used in responses. The citation system provides different levels of detail based on source type:

- **Widget citations:** Direct links to widgets with parameters selected. Smart linking enables "Scroll to widget" functionality for existing dashboard widgets. If the widget doesn't exist in the dashboard or has modified parameters the linking will provide a "Add widget to dashboard" options to facilitate workspace workflow.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Widget citations"
    src="https://openbb-cms.directus.app/assets/26f4da06-acc4-4aa2-8540-d56cec931f99.png"
    width="100%"
  />
</div>

- **Document citations:** Precise page and section references for PDF documents with automatic highlighting of relevant content areas.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Document citations"
    src="https://openbb-cms.directus.app/assets/05dfd0b0-b3b5-41a5-b916-0f89a8e50dd1.png"
    width="100%"
  />
</div>

- **Web citations:** Full URL references when web pages are utilized.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Web citations"
    src="https://openbb-cms.directus.app/assets/6073a901-0005-4927-8951-021243333c48.png"
    width="100%"
  />
</div>

## Create widgets from AI output

The widget creation system enables seamless integration of Copilot-generated content into your workspace environment.

This capability transforms temporary conversational outputs into permanent analytical assets that can be referenced, shared, and incorporated into ongoing workflows.

The system supports multiple artifact types including formatted text summaries, interactive data tables with sorting and filtering capabilities, and fully functional charts with preserved interactivity.

- Text widget:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Text widget from AI output"
    src="https://openbb-cms.directus.app/assets/517d6934-6d89-44df-ba5b-995520bcb1e6.png"
    width="100%"
  />
</div>

- Table widget:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Table widget from AI output"
    src="https://openbb-cms.directus.app/assets/c987377c-1dc9-4a96-b590-3694a6c764b4.png"
    width="100%"
  />
</div>

- Chart widget:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Chart widget from AI output"
    src="https://openbb-cms.directus.app/assets/9e7f2d80-1bd1-4238-bffc-099598c995a6.png"
    width="100%"
  />
</div>

## User feedback loop

The thumbs up and down buttons in the agent output allow the user to provide feedback in terms of their experience with the copilot. That data can be utilized to create a flywheel that allows developers to understand how the AI agent can be improved.

While the thumbs up does not prompt the user for any additional details.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Thumbs up"
    src="https://openbb-cms.directus.app/assets/fc1ea4d0-e0b0-4669-ae40-23871ae67790.png"
    width="80%"
  />
</div>

The thumbs down asks for clarification of what went wrong.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Thumbs down"
    src="https://openbb-cms.directus.app/assets/e89e9f77-6d52-4921-8f81-b73d39260d6f.png"
    width="80%"
  />
</div>


---

---
title: Step-by-Step Reasoning
sidebar_position: 11
description: Understanding the transparent reasoning process of OpenBB Copilot
keywords:
- step-by-step reasoning
- planning
- querying widgets
- intermediate artifacts
- transparency
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Step-by-Step Reasoning | OpenBB Workspace Docs" />

Transparency and auditability are fundamental to the OpenBB's Copilot design, with comprehensive step-by-step reasoning displayed for every analysis.

This detailed process visibility enables users to understand the logical flow, verify data sources, identify potential biases, and ensure compliance with analytical standards.

The reasoning display serves both educational and quality assurance purposes, building user confidence while maintaining the ability to audit and reproduce analytical processes.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Step-by-step reasoning"
    src="https://openbb-cms.directus.app/assets/93bf729b-3034-487a-9c1a-06d2d606f30e.png"
    width="80%"
  />
</div>

## Planning

The planning phase demonstrates the Copilot's tactical thinking by decomposing complex analytical requests into logical, sequential sub-tasks. This planning process considers data dependencies, optimal execution order, and resource requirements.

The displayed plan serves as a roadmap that users can review before execution, ensuring alignment with analytical objectives and providing clear expectations for the upcoming analysis workflow.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Planning"
    src="https://openbb-cms.directus.app/assets/66e6496f-f9e0-4464-8e7c-0b720f0ff40f.png"
    width="80%"
  />
</div>

## Querying widgets

Widget query transparency provides complete visibility into data retrieval operations, including the specific widget accessed, all parameters used, and data source information.

This documentation enables users to understand exactly what data was retrieved, verify parameter settings, and reproduce the analysis independently. The system also displays any parameter modifications made automatically, ensuring full awareness of how the Copilot adapted widget configurations to meet query requirements.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Querying widgets"
    src="https://openbb-cms.directus.app/assets/2086a113-4dea-4693-a298-9643973d5782.png"
    width="80%"
  />
</div>

## Intermediate result artifact

Intermediate artifacts provide crucial visibility into the Copilot's analytical methodology by displaying generated code, SQL queries, calculation formulas, and other technical implementations.

These artifacts serve multiple purposes: enabling technical review and validation, supporting learning and knowledge transfer, facilitating debugging and optimization, and ensuring compliance with analytical standards.

Users can examine and reuse these artifacts, treating them as valuable analytical assets beyond their immediate application.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Intermediate result artifact"
    src="https://openbb-cms.directus.app/assets/61c7d66b-5f96-4bab-8504-a603ad4f04cb.png"
    width="80%"
  />
</div>

## Artifact generated

Final artifacts represent the culmination of the analytical process, displayed with complete context about their creation methodology. The step-by-step reasoning (status updates) maintain full provenance information, including data sources, transformation steps, and parameter settings used in their generation.

The system preserves the relationship between artifacts and their creation process, enabling users to understand not just what was created, but how and why, supporting both immediate use and future reference or modification.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Final artifact"
    src="https://openbb-cms.directus.app/assets/d1edea10-1940-422f-99dd-d6e7cc972e3d.png"
    width="80%"
  />
</div>


---

---
title: Generative UI (Beta)
sidebar_position: 13
description: Understanding the Generative UI capabilities in OpenBB Copilot
keywords:
  - generative ui
  - widgets
  - dynamic creation
  - widget parameters
  - beta features
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Generative UI (Beta) | OpenBB Workspace Docs" />

When this feature is turned ON, copilot can manipulate widgets on the dashboard.

## Update widget parameters

The system understands the parameter schemas of each widget and based on a user prompt it can automatically update the parameters used in widgets on the dashboard.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
    <img
    className="pro-border-gradient"
    alt="Widget parameters"
    src="https://openbb-cms.directus.app/assets/82a99cb3-61ea-47cb-89f2-4eb1e888861a.png"
    width="100%"
  />
</div>

## Add widgets from Global Data

If global data is turned on, and the user asks information that the copilot believes exists in one of the widgets in the widget library - then that widget gets automatically added to the dashboard.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Widget parameters"
    src="https://openbb-cms.directus.app/assets/b5798412-cba3-4deb-898c-dde7ccd636c1.png"
    width="100%"
  />
</div>

## Add markdown note widget

The copilot can also add any type of text into a markdown widget automatically on-the-fly.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    alt="Widget parameters"
    src="https://openbb-cms.directus.app/assets/dc0391d6-283f-4a8c-8a83-ddb3b0ea7178.png"
    width="100%"
  />
</div>

Support to add static artifacts (tables or charts) on-the-fly is still not supported.


---

---
title: MCP Tools
sidebar_position: 11
description: Model Context Protocol (MCP) tools integration in OpenBB Copilot
keywords:
- MCP
- Model Context Protocol
- tools
- integration
- external tools
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="MCP Tools | OpenBB Workspace Docs" />

Model Context Protocol (MCP) integration enables seamless connection to third-party data providers, analytical services, and specialized financial tools without requiring custom development within the OpenBB Workspace.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/9e4121a3-a422-41fb-aaac-888f66b18fb2.png"
    width="100%"
  />
</div>

We utilize the [use-mcp library](https://github.com/modelcontextprotocol/use-mcp) and support both MCP and SSE protocols, but not STDIO. If you are interested in STDIO support, we recommend exploring solutions like [https://github.com/supercorp-ai/supergateway](https://github.com/supercorp-ai/supergateway).

### Configure your MCP Servers

Clicking this button opens the MCP server enable/disable menu.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/2d50c181-6fa0-4ec4-81b6-3faa936af17e.png"
    width="40%"
  />
</div>

Here you'll find the "+" icon that allows you to add or edit MCP servers.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/861831f2-9bfc-41d2-bdd7-bc673ad39656.png"
    width="60%"
  />
</div>

Clicking the "+" icon opens the MCP Servers configuration dialog.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/1d12fdc5-4424-4858-8c34-85db9c18ba2e.png"
    width="100%"
  />
</div>

Within this dialog, clicking "Add Server" opens the following pop-up window.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/15e88b0c-d9d0-4697-87f0-2c82f0213d0f.png"
    width="100%"
  />
</div>

Clicking "Add" initiates the connection, regardless of OAuth configuration.

Here's how OAuth appears when connecting to [Smithery.ai](https://smithery.ai/), a directory containing over 6,000 MCP servers.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/0ef5c823-a1fe-4fec-9d17-9165e0d282b1.png"
    width="100%"
  />
</div>

After connecting, you'll return to the Workspace and see "Authenticating..." displayed.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/2b3b1671-20c3-46de-9985-5c55ba22c2c5.png"
    width="100%"
  />
</div>

In the MCP Servers Configuration dialog, clicking on a successfully connected server displays the discovered tools. You can then open these tools to view their descriptions.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/3d2e53ed-5d63-46e8-b369-d0e19c7017ef.png"
    width="100%"
  />
</div>

### Select MCP Server tools

With the MCP Tools dialog open, you can enable or disable specific MCP tools for Copilot access.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/861831f2-9bfc-41d2-bdd7-bc673ad39656.png"
    width="100%"
  />
</div>

Once an MCP Server is successfully connected, you can:

1. Select all or none of the tools of a specific MCP Server.

This toggles all fine-grained tool-level controls simultaneously. It's the most efficient way to exclude an MCP Server from Copilot's context.

2. Turn ON/OFF a specific set of tools from an MCP Server.

Note: Enabling all tools doesn't guarantee Copilot will use every tool; rather, it makes them available for selection. This granular control helps narrow OpenBB Copilot's context to what's most relevant to your needs.

---

If the MCP Server becomes disconnected, it will appear as disabled, as shown below:

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/d983cab2-9cf0-4d2a-85d2-0226860b890d.png"
    width="100%"
  />
</div>

### MCP in action

When you submit a query to Copilot with MCP tools enabled, it can utilize one or more tools based on your prompt, including sequential tool usage when necessary.

For example, accessing OpenBB documentation requires two tools from the same MCP Server. Copilot automatically determines and executes this sequence on your behalf.

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/5a9ef8ee-89e0-4f7c-853c-77fda234de00.png"
    width="100%"
  />
</div>

### Matching widget to MCP tools

As shown above, in the reasoning step, you can see when and at which point the MCP tool was called. In addition, you can configure a widget that shares identical metadata, or what we refer to as “matching”, to the corresponding MCP tool.

Once a matching widget has been set up, a citation marked with an asterisk (*) will appear at the end whenever the MCP tool is used. 

<img className="pro-border-gradient" width="800" alt="Widget hover tooltip showing option to add to dashboard" src="https://openbb-cms.directus.app/assets/d2c50edb-43e2-4771-9125-b31117501a61.png" />


Additionally, when you click “Add matching widget to dashboard,” the widget will be automatically added to your current dashboard, using the same parameters applied by Copilot.



<img className="pro-border-gradient" width="800" alt="Interactive widget dashboard showing parameters, charting, and OpenBB properties" src="https://openbb-cms.directus.app/assets/a719abc4-9b2f-41c7-b1a8-dd84fc707b77.png" />

---

---
title: Orchestrator Mode (Beta)
sidebar_position: 14
description: Understanding OpenBB Copilot's Orchestrator Mode for multi-agent workflows
keywords:
- Orchestrator Mode
- Multi-agent
- Workflow coordination
- Task delegation
- Agent routing
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Orchestrator Mode | OpenBB Workspace Docs" />

# Orchestrator Mode (Beta)

Orchestrator Mode enables OpenBB Copilot to coordinate with specialized AI agents for complex analytical workflows. When activated, OpenBB Copilot becomes a central coordinator that evaluates user requests, identifies the most appropriate agents for specific tasks, and delegates work to optimize results.

## Activating Orchestrator Mode

After adding AI agents to your workspace, you'll see agent management settings showing available agents:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/d8223d51-17a4-4b47-914b-ff5656316fd0.png" alt="OpenBB Copilot as single enabled agent" width="40%" />
</div>

Initially, OpenBB Copilot operates as the only enabled agent. To activate Orchestrator Mode, toggle the switch next to OpenBB Copilot. This enables the copilot to delegate tasks to other available agents based on request complexity and agent specialization.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/c6a46df6-d572-414c-8cb4-c74e70ae0a1a.png" alt="Orchestrator Mode activated" width="40%" />
</div>

## Agent Detection and Routing

The orchestrator systematically evaluates available agents before processing user requests. It scans agent descriptions for domain-specific expertise that matches the user query and checks agent capabilities for specialized functions like data processing, mathematical calculations, or document analysis.

Task categorization determines the optimal assignment approach. Preprocessing tasks include query optimization and prompt enhancement. Domain-specific tasks involve financial analysis, technical documentation, or mathematical computations. Processing tasks handle data transformation and content generation. Post-processing tasks manage output formatting and quality assurance.

Agent selection follows a hierarchy of matching criteria. Primary matches occur when agent descriptions directly mention the task domain. Feature matches identify agents with relevant capabilities for the request. Specialization advantages favor agents offering superior expertise compared to general processing capabilities.

## Direct Agent Interaction vs. Orchestration

Users can interact with agents directly or through orchestration. Direct interaction addresses the specific agent with targeted requests:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/5ad54690-5aa4-42d6-a0d7-c7a31fe19d58.png" alt="Direct agent interaction example" width="100%" />
</div>

With Orchestrator Mode activated, users can submit general requests to OpenBB Copilot. The orchestrator analyzes the request and determines whether specialized agent assistance would improve results.

For example, a minimal or unclear prompt triggers automatic routing to a prompt optimization agent:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/8a4b0c74-82b4-4e1c-ae2c-d905cf880d39.png" alt="Orchestrator routing to prompt optimizer" width="100%" />
</div>

Or routing to an agent that is better suitable to parse specific data (like FOMC document):

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/6486184f-2b36-44cf-829a-aa46bf1e41d5.png" alt="Orchestrator routing to FOMC Agent" width="100%" />
</div>

## Orchestration OFF

When Orchestrator Mode is disabled, OpenBB Copilot cannot utilize any available sub-agents regardless of their specializations:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/f16d219e-98f2-487e-9969-9164377c87de.png" alt="Orchestrator Mode disabled limiting agent access" width="100%" />
</div>


## Task Delegation Process

The orchestrator follows structured delegation protocols. Single agent assignments handle complete tasks where one agent possesses all required expertise. The orchestrator sets direct response parameters, meaning the assigned agent's output appears directly to users without additional processing.

Multi-agent workflows coordinate complex requests requiring multiple specializations. The orchestrator breaks requests into discrete components, determines optimal execution sequences, and manages dependencies between tasks. Some tasks must complete before others begin, while parallel execution improves response speed for independent operations.

When delegating tasks, the orchestrator provides agents with specific context including relevant data, constraints, formatting requirements, and success criteria. This ensures agents have sufficient information to complete their assigned portions effectively.

## Response Coordination

Single agent responses appear directly when the orchestrator delegates complete responsibility to one specialized agent. This reduces latency for straightforward requests while maintaining orchestration capabilities for complex workflows.

Multi-agent responses require coordination and synthesis. The orchestrator ensures consistent formatting across agent contributions, eliminates redundancy, and maintains logical narrative flow. Error recovery mechanisms attempt alternative strategies when agents cannot complete assigned tasks.

## Memory and Context Management

The orchestrator maintains awareness of previous interactions and conversation history. It remembers recent widget additions, data retrievals, and analytical approaches to inform current delegation decisions. This contextual awareness prevents duplicate work and enables references to "this data" or "the previous analysis."

When users reference earlier work, the orchestrator identifies the specific context and ensures relevant agents have access to that information. The system builds upon previous analyses rather than starting fresh for each request.

## Best Practices

Provide clear context about analytical objectives when submitting requests that might benefit from specialized expertise. Specify data sources, time frames, and analytical approaches when you have preferences about task completion methods.

Reference specific data, widgets, or previous analyses when building upon earlier work. The orchestrator uses these references to maintain context continuity and optimize agent selection for follow-up tasks.

Break down extremely complex queries into logical components when the orchestrator's automatic decomposition might not match your intended approach. While orchestration handles multi-step workflows effectively, clearer initial requests lead to more efficient delegation.


---

---
title: Apps
sidebar_position: 4
description: Discover and use OpenBB Apps - pre-configured dashboard templates with integrated AI agents and custom prompts for optimized analytical workflows.
keywords:
- OpenBB Apps
- Dashboard Templates
- AI Agents
- Custom Prompts
- Workflow Optimization
- Financial Analysis
- Portfolio Management
- Market Research
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps | OpenBB Workspace Docs" />

# Apps

Apps in OpenBB Workspace are pre-configured dashboard templates that combine widgets, pre-selected AI agents, and custom prompts to create optimized analytical workflows. Unlike individual dashboards that you build from scratch, Apps provide instant access to complete analytical environments designed for specific use cases.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="OpenBB Workspace Multiple Applications View"
    src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png"
    width="800"
  />
</div>

## What are Apps?

Apps function as analytical templates that combine three core components: widgets, prompts, and pre-selected agents.

### Widgets

Apps include curated sets of widgets that are specifically optimized for their analytical workflow. These widgets come with parameter synchronization, automatically linking shared parameters to maintain analytical coherence across all components. The layout design positions and sizes widgets optimally for data visualization and workflow efficiency.

### Prompts

An App can include a custom library of pre-written prompts tailored to its analytical focus. These prompts provide app-aware AI instructions and enable more effective interactions with the specialized agent. E.g.:

- "Please analyze my current portfolio holdings. What are the top 5 positions by weight? Are there any concentration risks I should be aware of?"
- "What are the strongest correlations between my portfolio holdings? Which positions might provide good diversification benefits?"
- "What is my current sector exposure compared to market benchmarks? What are the risks and opportunities in my current allocation?"

These prompts are specifically crafted for the App's analytical context, enabling consistent analysis approaches and more targeted AI assistance.

### Agents

Apps can advertise a particular AI agent that is optimized for its analytical domain. When you click on an App with a specified agent ID, OpenBB Workspace automatically selects the corresponding AI agent.

## How Apps Differ from Dashboards

While dashboards are blank canvases that you customize entirely yourself, Apps provide structured starting points:

| **Apps** | **Dashboards** |
|----------|----------------|
| Pre-configured templates with specific analytical purpose | Blank canvas for custom configuration |
| Widgets with pre-linked parameters | Manual parameter configuration required |
| Come with curated prompt libraries | Start with no predefined prompts |
| Designed by domain experts for specific workflows | General-purpose analytical workspace |

Once you click on an App, it gets immediately rendered as a dashboard that you can also customize.

## Apps Gallery

To see Apps examples that you can do, check [our solutions page](https://openbb.co/solutions).

Here's an example of a Portfolio Risk Management dashboard (converted from an App).

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    width="800"
    alt="Portfolio Risk Management Dashboard"
    src="https://openbb-cms.directus.app/assets/b1d5b799-3abe-4d45-b04c-601e2b652b18.png"
  />
</div>


---

---
title: Dashboards Overview
sidebar_position: 0
description: Learn how to create, manage, and share interactive dashboards in OpenBB Workspace
keywords:
- dashboards
- data visualization
- financial analysis
- widgets
- collaboration
- reporting
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dashboards - OpenBB Workspace Docs" />

# Dashboards

Dashboards are the interactive environments where you bring financial data to life in OpenBB Workspace. They let you organize multiple widgets into cohesive analytical views, combining visualization and analysis in a flexible layout tailored to your needs.

## What are Dashboards?

Dashboards provide a canvas where you arrange and organize multiple data widgets into cohesive analytical views. They enable you to create custom layouts for different analysis workflows, monitor real-time market data and indicators, share insights with team members, and generate professional reports for documentation and presentations.

The flexible layout system allows you to drag and drop widgets exactly where you need them, resizing and arranging components to emphasize important data and create visual hierarchies that match your analytical priorities. Dashboards refresh automatically so that your analysis always reflects current data conditions. Collaboration is built into the application through dashboard sharing capabilities. Team members can view shared dashboards and create their own copies for further customization while preserving the original configuration.

## Dashboard Folders

Organize your analytical workspace by creating folders in the left sidebar to group related dashboards together. This organizational structure helps maintain clarity and efficiency as your collection of dashboards grows.

To create a new folder, click the "+" icon in the sidebar and select "New Folder". Name your folder descriptively to reflect its contents, such as "Portfolio Analysis", "Market Research", or "Daily Reports". You can then drag and drop existing dashboards into these folders or use the "Move to" option from the dashboard's ellipsis menu.

Folders can be nested to create hierarchical organization structures that match your workflow. For example, you might have a main "Research" folder with subfolders for different sectors or asset classes. This flexibility allows you to maintain a clean, navigable workspace even with dozens or hundreds of dashboards.

## Dashboard Management

Access the management options through the ellipsis menu next to each dashboard in the sidebar:

- **Rename** - Customize dashboard names for better organization
- **Move to** - Organize dashboards into folders for structured workflows
- **Duplicate** - Create copies with all widgets and settings intact
- **Open in new window** - Expand across multiple monitors
- **Share** - Collaborate with team members
- **Delete** - Remove unused dashboards
<!-- - **Export PDF** - Generate static PDF from the dashboard -->
<!-- - **Export Excel** - Generate .xlsx file with data or formulas from the dashboard (based on existing table widget) -->
- **Refresh data** - Update all widget data immediately

## Dashboard Actions

Right-clicking anywhere on the dashboard canvas provides quick access to essential functions:

- **Add widget** - Quickly add a new widget to your dashboard
- **Add data** - Import new data sources directly from the dashboard
- **Refresh data** - Update all widget data with the latest information
- **Refresh backends** - Reload backend connections and configurations (good for development purposes)
- **Export apps.json** - Export your dashboard configuration as an `apps.json`
- **Disable grouping** - Toggle widget grouping functionality

## Creating Your First Dashboard

1. Click the "+" button in the sidebar to create a new dashboard
2. Give your dashboard a descriptive name
3. Add widgets by clicking the "Add Widget" button (or right clicking and selecting "Add Widget")
4. Arrange widgets by dragging them to desired positions
5. Resize widgets to create your optimal layout
6. Add a navigation bar widget so you can separate widgets based on different categories
7. Save your dashboard to preserve your configuration


<!-- Theo: I commented out this flow for the analyst for it to be replaced with the app-studio flow. The current flow is a bit too developer-ish -->

<!-- If you are happy with your dashboard, you can actually turn this into an App template.

## Apps to Dashboards

Apps in OpenBB Workspace function as dashboard templates that provide instant access to pre-configured analytical environments. When you click on an app, you're essentially creating a new dashboard from a carefully crafted template that someone has already designed and optimized.

This template approach offers significant advantages for getting started with complex analysis. The app provides all relevant widgets pre-selected and intelligently grouped together, with appropriate sizing and positioning already configured. You receive a complete analytical framework immediately, but retain full control to customize, add, remove, or rearrange any elements to match your specific needs.

Apps serve as both starting points for new analysis and examples of best practices in dashboard design. They demonstrate effective widget combinations, logical data groupings, and optimal layouts for specific analytical scenarios. -->


---

---
title: Excel Add-in Installation
sidebar_position: 14
description: This page presents the general requirements and the steps to install the OpenBB Add-in for Excel. The OpenBB Add-in for Excel is available on Windows, Mac, and Excel on the web. It can be installed by an administrator or by individual users.
keywords:
- Microsoft Excel
- Add-in
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Getting Started | OpenBB Add-in for Excel Docs" />

## Requirements

- The OpenBB Add-in for Excel is available on the following platforms: Windows (Microsoft 365), Mac (Microsoft 365), Excel on the web.
- Access to OpenBB Workspace. If you don't have access you can sign up [here](https://my.openbb.co/app/pro).

## Installation

<div style={{display: 'flex', justifyContent: 'center'}}>
    <iframe
        style={{width: '800px', height: '450px', display: 'block', margin: '0 auto'}}
        src="https://www.youtube.com/embed/Rn3M36H_6Cw?si=6PdxyssA21461hUr)"
        title="YouTube video player"
        frameBorder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    />
</div>

The OpenBB Add-in for Excel is available on the [Microsoft AppSource](https://appsource.microsoft.com/product/office/wa200006381?tab=overview). It can be installed by an administrator or by individual users.

### Individual user

1. Open Microsoft Excel.
2. Go to **Home** tab.
3. Click in the **Add-ins** button and then **More add-ins**.
4. In the **Office Add-ins** dialog box **STORE** tab, search for **OpenBB** and select the add-in.
5. Click **Add**.

### Administrator

1. Go to Microsoft 365 admin center.
2. Click **Settings** > **Integrated apps**.
3. Click **Get apps**.
4. Search for **OpenBB** and select the add-in.
5. Click **Get in now**.
6. Go through the deployment wizard to complete the installation.


---

---
title: Excel Add-in Overview  
sidebar_position: 4
description: The OpenBB Add-in for Excel is a powerful integration that enables direct access to financial data within Microsoft Excel. This seamless integration allows you to create sophisticated financial models and perform comprehensive analysis without leaving your spreadsheet environment.
keywords:
- excel add-in
- financial data integration
- dynamic widgets
- excel formulas
- dashboard export
- financial modeling
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OpenBB Add-in for Excel Docs" />

The OpenBB Add-in for Excel enables enterprise users to access all available data from their OpenBB Workspace through interactive widgets.

## OpenBB Widgets

Enterprise users with access to the OpenBB Add-in for Excel can utilize the **Excel formula** option in their widget settings to access widget data directly in Excel.

<center>
<img src="https://openbb-cms.directus.app/assets/cf39abef-9a93-42fa-b98f-d1e7a2e38c77.png" alt="Excel formula dropdown in widget settings" width="900px" />
</center>

### Dynamic Widgets with Implicit Parameters

When accessing the **Excel formula** dropdown, users will see the following interface:

<center>
<img src="https://openbb-cms.directus.app/assets/fd7f2baf-edd3-48b9-a3d8-6bc3f33c0c68.png" alt="Excel formula interface" width="900px" />
</center>

The interface displays the widget name, backend information, and the corresponding Excel formula. For example:

```excel
=OBB.WIDGET("DTCC Trades","swap_rate_levels_custom_obb",{"currency","USD";"swap_type","OIS";"period","1y"})
```

Note: The formula is displayed with indentation for better readability, but when copied to the clipboard, it will be formatted as a single line for Excel compatibility.

Here's how it appears in Excel:

<center>
<img src="https://openbb-cms.directus.app/assets/7478fdf5-de07-472b-993f-45bfbef4b1e2.png" alt="Excel formula implementation" width="600px" />
</center>

### Dynamic Widgets with Explicit Parameters

Users can enable an alternative mode by selecting the "with explicit parameters" checkbox. This mode separates the parameters from the formula, creating a more flexible widget-like experience in Excel.

<center>
<img src="https://openbb-cms.directus.app/assets/22ce67c6-efec-4021-886d-0452891a2af9.png" alt="Explicit parameters interface" width="900px" />
</center>

Implementation example:

<center>
<img src="https://openbb-cms.directus.app/assets/aa48622e-a634-4565-a5e4-03ee0cfd5a3a.png" alt="Explicit parameters in Excel" width="600px" />
</center>

Note: The formula and parameters are initially set to cell A1, but users can modify the formula parameters to reference different cell ranges based on their specific needs.

## Dashboard to Excel Export

Users can export entire dashboard data to Excel using the left sidebar export functionality.

<center>
<img src="https://openbb-cms.directus.app/assets/6bf99ebf-7c9e-4a3a-b83b-ee5b466ffd9c.png" alt="Dashboard export options" width="400px" />
</center>

Three export options are available:

<center>
<img src="https://openbb-cms.directus.app/assets/eb099308-327b-4bb5-8e5c-1e9d45534512.png" alt="Export options menu" width="400px" />
</center>

The first worksheet of the exported Excel file contains comprehensive dashboard information:

<center>
<img src="https://openbb-cms.directus.app/assets/c4f4973d-5f8e-411c-a238-370eb0f45ea9.png" alt="Dashboard information in Excel" width="900px" />
</center>

This includes:
- Widget metadata
- Parameter configurations
- Dashboard name
- Export timestamp

### Static Data Export

When exporting in static data mode, a progress dialog appears to indicate the export status:

<center>
<img src="https://openbb-cms.directus.app/assets/db4784db-630e-458c-b60e-699a4444e054.png" alt="Static data export progress" width="400px" />
</center>

Each OpenBB widget is exported to a separate worksheet, containing both the parameters used and the corresponding data:

<center>
<img src="https://openbb-cms.directus.app/assets/a9864e6d-16cc-468f-8045-4e3b1689d6c4.png" alt="Widget data in Excel" width="600px" />
</center>

### Dynamic Export

For dynamic exports (both implicit and explicit parameter modes), the exported Excel file will utilize the OpenBB Add-in formulas as described in the previous sections.

---

---
title: OBB.GET
sidebar_position: 15
description: Extract and slice specific data from Excel ranges using labels or indices
keywords:
- Microsoft Excel
- Add-in
- Advanced
- Slice data
- Data slicer
- Get specific fields
- Data extraction
- Excel ranges
---

<!-- markdownlint-disable MD033 -->
import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OBB.GET | OpenBB Add-in for Excel Docs" />

The `OBB.GET` function is a powerful data extraction tool that allows you to precisely slice and extract specific portions of data from any array or range in Excel. It's particularly useful when working with data returned by other OpenBB functions, enabling you to focus on exactly the information you need.

## Key Features

- Extract specific rows, columns, or both from any data range
- Use either labels (like dates or column names) or numeric indices
- Support for single values, ranges, and arrays
- Negative indexing for accessing data from the end
- Flexible input formats for dates and text

## Syntax

```excel
=OBB.GET(array, [rows], [columns])
```

### Parameters

| Parameter | Type | Description | Required | Examples |
|-----------|------|-------------|----------|----------|
| array | Any | The source data range to slice. This can be any array, including results from other OBB functions. | Yes | `A1:D3`, `OBB.WIDGET(...)` |
| rows | Any | Row selection using labels or indices. Can be a single value, range, or array. | No | `"2023/09/30"`, `2`, `{1,3}`, `-1` |
| columns | Any | Column selection using labels or indices. Can be a single value, range, or array. | No | `"revenue"`, `3`, `{"A","C"}` |

### Return Value

Returns a subset of the input array based on the specified row and column selections. The return type matches the input data type.

## Examples

Suppose you have the following financial data in cells A1:D3:

| period_ending | revenue            | cost_of_revenue    | gross_profit       |
|---------------|--------------------|--------------------|--------------------|
| 2023/09/30    | 383 285 000 000.00 | 214 137 000 000.00 | 169 148 000 000.00 |
| 2022/09/24    | 394 328 000 000.00 | 223 546 000 000.00 | 170 782 000 000.00 |
| 2021/09/25    | 365 817 000 000.00 | 212 981 000 000.00 | 152 836 000 000.00 |

### Common Use Cases

1. **Get a Single Row by Date**

```excel
=OBB.GET(A1:D3, "2023/09/30")
```

Returns the entire row for September 30, 2023.

2. **Get a Single Column by Name**

```excel
=OBB.GET(A1:D3, , "revenue")
```

Returns all revenue values.

3. **Get a Single Cell by Index**

```excel
=OBB.GET(A1:D3, 2, 3)
```

Returns the value at row 2, column 3 (cost_of_revenue for 2022/09/24).

4. **Get Multiple Rows and Columns**

```excel
=OBB.GET(A1:D3, {"2023/09/30", "2021/09/25"}, {"cost_of_revenue", "gross_profit"})
```

Returns a 2x2 array with cost_of_revenue and gross_profit for 2023 and 2021.

5. **Using Negative Indices**

```excel
=OBB.GET(A1:D3, -1, -2)
```

Returns the last row and second-to-last column (gross_profit for 2021/09/25).

### Advanced Usage

1. **Using Cell References for Selections**

```excel
=OBB.GET(A1:D3, E1:E2, F1:F2)
```

Where E1:E2 contains dates and F1:F2 contains column names.

2. **Combining with Other OBB Functions**

```excel
=OBB.GET(OBB.WIDGET("My backend", "income_statement", {"ticker","AAPL";"year","2023"}), "2023/09/30", "revenue")
```

Directly extracts revenue from the income statement widget result.

## Best Practices

1. **Date Formats**
   - Use `YYYY/MM/DD` format for date labels
   - Use Excel's DATE function: `DATE(2023,9,30)`
   - Ensure dates match exactly with the data

2. **Column Names**
   - Use exact column names as they appear in the data
   - Case-sensitive matching
   - Include underscores and spaces exactly as in the data

3. **Performance**
   - For large datasets, prefer using indices over labels
   - Use cell references for repeated selections
   - Avoid unnecessary array operations

## Troubleshooting

| Issue | Solution |
|-------|----------|
| #N/A error | Verify that the row/column labels exist in the data |
| #VALUE! error | Check that the array parameter is valid |
| Empty result | Confirm that the selection criteria match the data format |
| Date not found | Ensure date format matches exactly (YYYY/MM/DD) |

## Notes

- When using date labels, ensure consistent date formatting across your workbook
- Column names are case-sensitive
- The function preserves the original data types of the selected cells
- Empty or invalid selections will return appropriate error values
- For best performance with large datasets, consider using numeric indices instead of labels


---

---
title: OBB.WIDGET
sidebar_position: 16
description: This page provides an overview of the basics of the OpenBB add-in for Microsoft Excel. It covers the basic usage of the add-in and the available functions.
keywords:
  - Microsoft Excel
  - Add-in
  - Basics
  - Examples
  - Functions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OBB.WIDGET | OpenBB Add-in for Excel Docs" />

This is the most important formula that is available, as it allows you to access any dataset available from the OpenBB workspace.

:::info

- Make sure your backend's CORS settings allow requests coming from [https://excel.openbb.co](https://excel.openbb.co).
- Requests via HTTP will be blocked by Excel. So if you are using the Add-in for Excel on Mac or Office on the web with Safari browser you need to run your backend via HTTPS.

:::

It has the following format:

```excel
=OBB.WIDGET(<BACKEND NAME>,<WIDGET ID> or <WIDGET NAME>, <PARAMETERS (OPTIONAL)>)
```

Where parameters, shows up as `{"param1","value1";"param2","value2"; ...}`.

Here are a few examples:

```excel
=OBB.WIDGET("DTCC Trades","swap_rate_levels_custom_obb",{"currency","USD";"swap_type","OIS";"period","1y"})
```

```excel
=OBB.WIDGET("DTCC Trades","Swap Trades",{"currency","USD";"date","2025-04-15";"cleared_only","true";"include_starting","false"})
```

```excel
=OBB.WIDGET("OpenBB Platform","economy_pce_fred_obb",{"category","personal_income";"provider","fred"})
```

```excel
=OBB.WIDGET("Custom Backend","Portugal CPI since 2000")
```

### Explicit parameters

The easiest way to pass optional parameters is to write them into cells and reference them in the function.

For example,

```excel
=OBB.WIDGET("DTCC Trades","swap_rate_levels_custom_obb",{"currency","USD";"swap_type","OIS";"period","1y"})
```

can be rewritten as:

```excel
=OBB.WIDGET("DTCC Trades","swap_rate_levels_custom_obb",A1:B3)
```

where:

- A1 contains "currency" and B1 "USD"
- A2 contains "swap_type" and B2 "OIS"
- A3 contains "period" and B3 "1y"



---

---
title: Troubleshooting
sidebar_position: 17
description: Common issues and solutions for the OpenBB Add-in for Excel, including error handling, installation problems, and connection troubleshooting.
keywords:
  - Microsoft Excel
  - Excel Add-in
  - Troubleshooting
  - Error Handling
  - Permission Error
  - Connection Issues
  - Duplicate Ribbon
  - Excel Help
  - OpenBB Support
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Troubleshooting | OpenBB Add-in for Excel Docs" />

If you face specific issues while using the add-in and the solutions provided here don't resolve them, don't hesitate to reach out to us for further assistance. You can contact us through [support@openbb.finance](mailto:support@openbb.finance).

### #VALUE! Error

If you encounter a '#VALUE!' error when running an OBB function, first verify that you are using the correct syntax. Either [OBB.WIDGET](obb-widget) or [OBB.GET](obb-get).

- If you have just opened your workbook and see this error, try recalculating the cell - this is a known issue with Excel add-ins that sometimes requires a refresh.

### Add-in Not Available

If the OBB functions are not appearing after installation, try these troubleshooting steps:

- Verify that the OpenBB Add-in appears in your Excel ribbon
- If not visible, go to **Insert** > **Get Add-ins** > **My Add-ins**, hover over the OpenBB add-in, click '...', remove it, and reinstall
- If the issue persists, restart your computer or [clear the Office cache](https://learn.microsoft.com/en-us/office/dev/add-ins/testing/clear-cache)

### Permission Error

If you see the message "You don't have permission to use this add-in. Contact your system administrator to request access", try these solutions:

- Confirm that your account has the necessary permissions to use the add-in
- If permissions are correct, try restarting your computer or [clearing the Office cache](https://learn.microsoft.com/en-us/office/dev/add-ins/testing/clear-cache)

### Duplicate Ribbon Tab

If you notice duplicate 'OpenBB' tabs in the ribbon after editing a workbook in both browser and desktop versions, this is a known Excel issue. While there's no permanent fix, you can resolve it using these workarounds:

- **Windows users**: Go to File > Info > Inspect Workbook > Check 'Task Pane Add-ins' > Click 'OK'. This will remove the duplicate add-in reference created by Excel in the browser

- **Mac users**: 
  1. Rename your file from .xlsx to .zip
  2. Use WinZip for Mac to unzip the file (the default unzip tool won't work for this)
  3. Delete the webextension1.xml file from the webextensions folder
  4. Rename the file back to .xlsx

### Connection Issues

If you're unable to retrieve data through OBB.WIDGET from your backend, check these common issues:

- Ensure your backend server is running and accessible from your network
- For Mac or Safari users: Verify that your backend is using HTTPS with a valid SSL certificate


---

---
title: AI-generated Widgets
sidebar_position: 5
description: Learn how to use AI agent outputs as widgets in your OpenBB dashboard
keywords:
- AI
- Widgets
- Dashboard
- Agent Outputs
- Persistence
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI-generated Widgets | OpenBB Workspace Docs" />

OpenBB's AI agents can generate various types of outputs such as text, tables, and charts. These outputs can be saved as widgets in your dashboard for future reference and analysis.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img
    className="pro-border-gradient"
    src="https://openbb-cms.directus.app/assets/1453ffb5-a51f-4967-944d-a651d4fa57d9.png"
    alt="Dashboard showing AI-generated widgets and analysis outputs"
    width="100%"
  />
</div>

To save an AI agent's output as a widget:

1. Run your desired AI analysis command

    <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
      <img
        className="pro-border-gradient"
        src="https://openbb-cms.directus.app/assets/e9db86df-be8f-42b6-8999-fe02bafffcf0.png"
        alt="Terminal showing AI analysis command execution"
        width="100%"
      />
    </div>

2. When the output is displayed, look for the "Create widget from X" button

   <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
     <img
       className="pro-border-gradient"
       src="https://openbb-cms.directus.app/assets/fc32872b-68b4-4ba3-aa63-04a0846c644d.png"
       alt="AI analysis output with 'Create widget' button highlighted"
       width="100%"
     />
   </div>

3. Click the button to add the output to your dashboard

   <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
     <img
       className="pro-border-gradient"
       src="https://openbb-cms.directus.app/assets/8cd1d032-6685-4178-bb49-c3807f870094.png"
       alt="Widget creation dialog showing name and description fields"
       width="100%"
     />
   </div>

4. Edit the name and description that have been selected based on AI
   <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
     <img
       className="pro-border-gradient"
       src="https://openbb-cms.directus.app/assets/2d2d2d3b-3ac5-49d4-9d3b-b289cb5b5fdc.png"
       alt="Widget settings panel with editable metadata fields"
       width="100%"
     />
   </div>

5. Making it persistent

    The widget will be only accessible for this session. To ensure your AI-generated widgets persist across sessions:

    1. Open the widget settings by clicking the gear icon on the widget
        <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
          <img
            className="pro-border-gradient"
            alt="Widget with gear icon for accessing settings"
            src="https://openbb-cms.directus.app/assets/0b1c5e6e-76bd-48ec-9c20-0ccd1b042036.png"
            width="100%"
          />
        </div>

    2. Edit the widget metadata: Name, description, category, subcategory and source

       <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
         <img
           className="pro-border-gradient"
           alt="Widget metadata editing form with fields for name, description, category, subcategory and source"
           src="https://openbb-cms.directus.app/assets/658af726-3c62-4d9b-b38b-491e53fbc21f.png"
           width="100%"
         />
       </div>

    3. Save the changes

        The widget will now persist in your dashboard and can be accessed in future sessions.


---

---
title: Core Widgets
sidebar_position: 2
description: Essential widgets that form the foundation of every OpenBB dashboard - navigation, notes, data integration, and productivity tools.
keywords:
- core widgets
- dashboard essentials
- navigation widgets
- note widgets
- API integration
- RSS feeds
- productivity tools
- data connectors
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Core Widgets | OpenBB Workspace Docs" />

OpenBB's core widgets form the foundation of your financial analysis workspace. These essential components enable you to organize information, capture insights, and integrate external data sources within a unified interface, creating a powerful environment for financial analysis and decision-making.

## Navigation Bar

The Navigation Bar serves as your dashboard's command center, providing tab-based organization for complex information. This powerful tool enables you to:

- Create and manage multiple tabs for different analysis contexts
- Organize information into logical sections
- Separate research from analysis
- Track different market sectors
- Monitor various portfolios

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Navigation bar interface showing multiple tabs"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/navigation_bar.png"
    width="600"
  />
</div>

## Note Widget

The Note widget transforms your dashboard into a dynamic research canvas, enabling you to capture and organize your insights effectively. This versatile tool allows you to:

- Document real-time insights during market analysis
- Record key findings and observations
- Store and organize prompts for AI-powered analysis
- Create a searchable knowledge base of your research

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Note widget interface showing text editing capabilities"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/note_widget.png"
    width="600"
  />
</div>

## Website and Iframe Widget

The Website widget brings external data sources directly into your dashboard, creating a unified research environment. This powerful integration enables you to:

- Access and interact with external websites without leaving OpenBB
- Compare data from multiple sources side by side
- Create a comprehensive research workspace
- Maintain context while analyzing multiple data sources

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Website widget showing embedded webpage"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/website.png"
    width="600"
  />
</div>

> **Note:** Some websites may restrict embedding. OpenBB automatically checks and only displays websites that permit embedding.

## RSS Feeds Widget

The RSS Feeds widget serves as your personal news aggregator within OpenBB, keeping you informed with market-moving information. This essential tool provides:

- Curated financial news from top sources
- Customizable news feed preferences
- Real-time market updates
- Integrated news analysis within your research workflow

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="RSS Feeds widget showing news headlines"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/rss.png"
    width="600"
  />
</div>

## Clock Widget

The Clock widget helps you track global market hours and coordinate across time zones, essential for international trading and analysis. This tool is particularly valuable for:

- Monitoring market open/close times across different regions
- Coordinating with international teams
- Planning trades across multiple time zones
- Staying aware of global market events

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Clock widget showing multiple time zones"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/clock.png"
    width="600"
  />
</div>


---

---
title: Interacting With Data
sidebar_position: 3
description: Learn how to work with tables and charts in OpenBB Workspace, including parameter selection and synchronization across widgets.
keywords:
- data interaction
- table widgets
- chart widgets
- parameter linking
- AgGrid
- Plotly
- TradingView
- data visualization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Interacting With Data | OpenBB Workspace Docs" />

OpenBB Workspace provides powerful tools for analysts to explore and visualize financial data through interactive tables and charts.

## Working With Parameters

Parameters are the foundation of interactive analysis in OpenBB Workspace, allowing you to customize what data your widgets display.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Parameter selection interface"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/parameters.jpg"
    width="800"
  />
</div>

Input parameters let you focus your analysis by setting date ranges, selecting specific tickers, or applying filters that narrow down the dataset to exactly what you need.

### Grouping Widgets Through Parameter Linking

A powerful feature of parameters is their ability to be linked across multiple widgets. When widgets share parameter names and options, changing a value in one widget automatically updates all linked widgets, creating a cohesive analytical experience.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Parameter linking across widgets"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/parameter-grouping.jpg"
    width="800"
  />
</div>

For example, when you change a ticker symbol or date range in one widget, all widgets in the same group that use that parameter will update automatically. This synchronization ensures your entire analysis remains focused on the same context without manual intervention.

This capability transforms your dashboard from a collection of isolated visualizations into an intelligent, responsive workspace where your analytical focus drives all data presentation.

## Interactive Tables

Interactive tables provide powerful data manipulation capabilities for detailed financial analysis. These tables have professional-grade features that allow you to explore and analyze large datasets.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="selection-charting"
    src="https://openbb-assets.s3.amazonaws.com/docs/pro/selection-charting-1.png"
    width="900"
  />
</div>

### Key Features

- **Column Management**: Resize and reorder to focus on relevant data
- **Sorting and filtering**: Click column headers to sort and filter data
- **Data Selection**: Select specific data points or ranges to generate visualizations
- **Sparklines**: Visualize trends directly within table cells using line, area, and bar sparklines
- **Hover Cards**: Access additional context and detailed information on specific data points
- **Chart-view Mode**: Transform the entire table into a dynamic chart with a single click

### Table to Chart Conversion

The widget interface supports conversion between table and chart views, enabling you to switch between detailed data exploration and visual trend analysis as needed.

1. **Selection-based Charting**: Select desired data points, choose a chart type, and generate visualizations instantly
2. **Chart-view Mode**: Access the "Chart-view" icon to transform the entire table into a dynamic chart

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="chartview"
    src="https://openbb-assets.s3.amazonaws.com/docs/pro/chartview-setting.png"
    width="900"
  />
</div>

### Chart Customization

You can change the chart settings by clicking on the three dots and then the `Chart Settings` in the dropdown menu.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="chart"
    src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings.png"
    width="400"
  />
</div>

Here you can change the chart type, the chart settings, and some other settings in each tab.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="chart"
    src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings+2.png"
    width="400"
  />
</div>

The customization interface provides three main configuration areas:

- **Visual Customization**: Modify chart appearance, including titles, colors, and styling elements.
- **Data Series Management**: Control the visibility and configuration of data series.
- **Chart Type Selection**: Choose from various chart types to best represent your data.

Example of a customized chart with multiple visualization types:

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Customized chart example"
    src="https://openbb-assets.s3.amazonaws.com/docs/pro/combo-chart.png"
    width="800"
  />
</div>

The final example demonstrates how to combine different chart types for enhanced data visualization.

## Plotly Charts

Plotly charts give your developers complete freedom to create the right visualization for your data, whether you need a simple line chart or a complex 3D plot. The integration is straightforward, with charts automatically adapting to your workspace theme in both light and dark modes.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Plotly Chart with Raw Data Switch"
    src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/plotly+switch.png"
    width="900"
  />
</div>

As a user you will find everything you need for in-depth analysis: interactive toolbars with drawing tools and annotations.

### Raw Data Toggle

The raw data toggle is particularly useful for AI-assisted analysis. With a simple switch in the top-right corner, you can move between the visual representation and the underlying dataset. This gives the AI copilot direct access to the numbers behind the chart while keeping your dashboard clean and focused on insights.

## TradingView Charts

TradingView charts bring professional trading visualization tools directly into your workspace, using the same interface that traders around the world rely on for their analysis.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="TradingView Chart Example"
    src="https://openbb-cms.directus.app/assets/1e1dff4c-8698-4a82-9863-31e911e7cf3b.png"
    width="900"
  />
</div>

You get the full TradingView experience: real-time and historical market data, technical indicators, and all the drawing tools you need for your analysis. Whether you're drawing trend lines, applying Fibonacci retracement levels, or highlighting chart patterns, everything works just like it does in the native TradingView platform. The ability to switch between timeframes makes it easy to zoom in on short-term movements or step back for a broader market view.


---

---
title: Overview
sidebar_position: 1
description: Understanding widgets - the building blocks of OpenBB Workspace dashboards that transform raw data into actionable insights.
keywords:
- widgets
- data visualization
- dashboard components
- financial widgets
- widget metadata
- widget parameters
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Widgets Overview | OpenBB Workspace Docs" />

Widgets are the fundamental building blocks of OpenBB Workspace, transforming raw financial data into interactive, visual components that drive your analysis. Each widget is a self-contained unit that combines data, visualization, and interactivity into a powerful analytical tool.

## What is a Widget?

A widget is more than just a chart or table – it's a data container designed to answer a specific analytical question.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Widget Metadata Structure and Components"
    src="https://openbb-cms.directus.app/assets/132e5cda-b062-4094-8036-8c2d41db1527.png"
    width="800"
  />
</div>

## Anatomy of a Widget

Every widget in OpenBB Workspace consists of four essential components that work together:

### 1. Data Source

The foundation of every widget – where the information comes from. This could be: data feeds, databases, custom data from your organization, static files you've uploaded and more.

### 2. Metadata Layer

The information that makes widgets discoverable and usable:

- **Title**: Clear identification of what the widget shows
- **Description**: Context about the data and its purpose
- **Category**: Logical grouping (e.g., Equity, Fixed Income, Macro)
- **Sub-category**: Further classification for better navigation
- **Source**: Attribution and data provenance

### 3. Visual Presentation

How the data comes to life on your dashboard:

- **Tables**: For detailed, sortable and filterable data exploration
- **Charts**: For visual analysis and trend/pattern recognition
- **PDFs**: For reports and static documents
- **Custom Views**: Tailored to specific data types

### 4. Parameters

Interactive elements that customize what data your widget displays. Input parameters allow you to focus your analysis by setting date ranges, selecting specific tickers, or applying filters that narrow down the dataset to exactly what you need.

Parameters that are linked via the grouping mechanism create synchronization across multiple widgets on your dashboard. When you change a ticker symbol or date range in one widget, all widgets in the group sharing that parameter will update automatically. This creates a cohesive experience where your dashboard responds automatically to your actions.

### 5. Widget Controls

Widget controls are specific to each widget type. They provide specialized functionality that matches the data and visualization format. These widget-specific controls give you powerful ways to interact with and manipulate your data directly within each widget.

#### Universal controls

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Universal Widget Controls"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/universal-controls.jpg"
    width="800"
  />
</div>

Universal controls available across most widget types include refresh settings for managing data update frequency, export options for saving data in formats like CSV, JSON, and Excel, and view toggles that let you switch between visual representations and raw data tables.

#### Table widgets

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Table Widget Controls"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/table-controls.jpg"
    width="800"
  />
</div>

Table widgets powered offer advanced data manipulation capabilities including column sorting, filtering, and grouping functions that let you slice and dice your data without leaving the widget. You can create custom filters, sort by multiple columns, and group data by categories to uncover patterns and insights within large datasets.
Table widgets also generate Excel Add-in formulas automatically, allowing you to pull the same data directly into spreadsheets for hybrid analysis workflows.

#### Chart widgets

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Chart Widget Controls"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/tv-controls.jpg"
    width="800"
  />
</div>

Chart widgets, particularly those using TradingView integration, provide sophisticated analytical tools including technical indicator overlays, and timeframe adjustments. Plotly charts allow to render any figure that is supported by Plotly.

## How Widgets Work

Widgets operate on a simple yet powerful principle: they connect to data sources, apply your configurations, and render the results in real-time. Here's their data flow:

1. **Request**: Widget queries the data source with your parameters
2. **Processing**: Data sources prepare the data
3. **Delivery**: Formatted data returns to the widget
4. **Rendering**: Widget displays the information visually
5. **Interaction**: You can interact with the data in the widget

Beyond this data flow, widgets exhibit two powerful features that transform them from simple displays into intelligent analytical tools.

**Parameter linking** creates synchronization across your dashboard. When widgets share parameter names, changing a ticker symbol or date range in one widget automatically updates all linked widgets.

**AI-readable metadata** exposes the widget metadata to AI agents so that they can interpret and act upon it. Unlike screen scraping, AI agents understand the underlying data source, parameter structure, and query methods for each widget. This understanding allows agents to dynamically request data with different parameters to answer your specific questions, accessing source datasets behind each widget rather than only the information that is currently displayed.

## Your Widget Library

OpenBB Workspace enables you to build a scalable library of widgets, instantly searchable and logically categorized to match your analytical workflow. This library centralizes your financial data visualizations, making them easily discoverable through search and category navigation.

Bring up the Widget Library search interface by either:

- Clicking the search field in the top left of the Workspace UI
- Pressing `Cmd+K` (Mac) or `Ctrl+K` (Windows) keyboard shortcut
- Clicking the plus `+` icon in the bottom right of any dashboard
- Clicking the "Add Widget" button on any dashboard

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Widget Library Interface"
    src="https://openbb-web-assets.s3.us-east-1.amazonaws.com/docs/screenshots/widget-library.jpg"
    width="800"
  />
</div>

Widgets are grouped in ways that reflect real-world analytical workflows. Whether analyzing portfolios, tracking macro trends, or researching equities, relevant widgets are organized for quick access.

Example: Searching for an equity widget, for example, gives you immediate access to price data, fundamentals, options chains, and analyst estimates. For portfolio analysis, position tracking, performance attribution, and risk metrics are grouped together.

By organizing widgets through consistent metadata and categories, OpenBB Workspace reduces the time spent searching for data, allowing you to focus on analysis. The system supports new data sources and custom integrations while maintaining a clear structure that keeps thousands of widgets manageable and accessible.


---

---
title: Sandbox Widgets
sidebar_position: 6
description: Explore OpenBB's pre-built demonstration widgets that showcase application capabilities upon login.
keywords:
- sandbox widgets
- demo widgets
- demonstration
- application showcase
- getting started
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Sandbox Widgets | OpenBB Workspace Docs" />

When you first log into OpenBB Workspace on [`pro.openbb.co`](https://pro.openbb.co), you'll discover a collection of pre-built widgets already available in your workspace. These demonstration widgets serve a single purpose: to showcase what OpenBB is capable of achieving as an analytical application.

#### Purpose

These out-of-the-box widgets provide immediate examples of OpenBB's analytical capabilities without requiring any setup or configuration. They demonstrate the application's potential through realistic financial data scenarios and interactive functionality, giving you an instant understanding of what's possible within the workspace environment.

#### Demonstration Value

The pre-built widgets highlight OpenBB's core strengths in financial analysis, data visualization, and workflow integration. They showcase different widget types, parameter linking capabilities, AI agent integration, and the overall user experience you can expect when building your own analytical dashboards.

#### Important Understanding

These widgets exist purely for demonstration purposes. They illustrate the application's capabilities and provide inspiration for your own analytical workflows, but they are not intended as production tools for actual financial analysis or decision-making.

The real value of OpenBB Workspace comes from connecting your own data sources, building custom widgets tailored to your specific analytical needs, and creating dashboards that reflect your unique research methodology and investment process.


---

---
title: Static Files
sidebar_position: 4
description: Upload and integrate your own files into OpenBB Workspace - transform spreadsheets, PDFs, and images into interactive dashboard widgets.
keywords:
- file upload
- static files
- custom data
- spreadsheet widgets
- PDF widgets
- image widgets
- proprietary data
- file integration
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Static Files | OpenBB Workspace Docs" />

OpenBB provides an intuitive way to import data through file uploads. This feature supports a wide range of file formats, allowing you to integrate both structured and unstructured data into your analysis workflow.

## File Upload Process

The file upload interface is straightforward. You can either drag and drop them onto the dashboard or select files individually in the Add Data pop-up window. This flexibility supports importing multiple files simultaneously, regardless of their format.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="File upload interface showing the Add Data pop-up"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/upload_file.png"
    width="600"
  />
</div>

To ensure optimal performance for all application users, OpenBB maintains a 25MB file size limit.

### Metadata Management

Upon uploading your files, OpenBB automatically generates initial metadata for the widget, including the name and description. You might want to adjust these fields to better reflect the nuances of your data. Note that Enterprise customers can customize this automatic metadata generation feature.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Metadata configuration interface"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/metadata.png"
    width="600"
  />
</div>

### Accessing Uploaded Data

Once you've uploaded and configured your data, you can access the resulting widget through two primary methods:

1. The Search feature, which provides quick access to all your widgets
2. The Data Connector page, which offers a comprehensive view of your data sources

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Search interface showing widget results"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/search_widget.png"
    width="600"
  />
</div>

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Data Connector interface showing available widgets"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/data_connector_widget.png"
    width="600"
  />
</div>

## Supported File Types

OpenBB supports two main categories of data files, each with specific use cases and visualization capabilities.

### Structured Data

Structured data files, including XLSX, JSON, and CSV formats, are ideal for quantitative analysis and data processing. Currently, XLSX files are limited to single-sheet imports. The system automatically converts these files into interactive widgets that display your data in a clear, organized format.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Example of structured data visualization"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/structured_data.png"
    width="600"
  />
</div>

### Unstructured Data

OpenBB supports three types of unstructured data, each serving different analytical needs:

- Images (PNG and JPG): Perfect for visual analysis and documentation
- PDF Documents: Ideal for research papers, reports, and documentation
- Text Files (like TXT and DOCX): Suitable for notes, research, and qualitative analysis

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img
    className="pro-border-gradient"
    alt="Example of unstructured data visualization"
    src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/unstructured_data.png"
    width="600"
  />
</div>

Note that scanned images are better handled when uploaded as images (PNG or JPG) rather than PDFs.


---

---
title: Agents Integration
sidebar_position: 6
description: How to integrate your own AI agent service with OpenBB Workspace
keywords:
- AI
- Agents
- Integration
- SSE
- agents.json
- QueryRequest
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Agents Integration | OpenBB Workspace Docs" />

Integrate your own AI agent service with OpenBB Workspace using a simple HTTP contract. Your service accepts POST requests, streams responses back to Workspace and can access dashboard data when enabled.

## Architecture

- `/agents.json`: the metadata endpoint. Returns agent metadata and capabilities (name, description, image, URL of the query endpoint, features that the agent implements).
- `/query`: the query endpoint. Receives a `QueryRequest` and streams responses via Server‑Sent Events (SSE).

Recommended stack: FastAPI with `EventSourceResponse` from `sse_starlette` and OpenBB AI SDK (`openbb-ai`), although any framework that supports streaming SSEs in response to a POST request should work.

See this repository to [get started](https://github.com/OpenBB-finance/agents-for-openbb).

## Adding an Agent in Workspace

1. Deploy your service (locally or remote).

2. In Workspace, click on the copilot and on the plus or pencil icon.

    <img className="pro-border-gradient" width="400" alt="No tab no param primary" src="https://openbb-cms.directus.app/assets/412540b0-ef86-4285-8303-b9faf83bdc66.png" />

3. Enter your base URL; Workspace fetches `/agents.json` and uses `/query` for conversations.

    <img className="pro-border-gradient" width="800" alt="No tab no param primary" src="https://openbb-cms.directus.app/assets/ce3bebd7-98cf-4598-9d6c-68a2ecc1ba1c.png" />

Ensure CORS settings are correct and SSE are configured on your service.

## Example

Simplistic example that allows users to communicate with an agent that can optimize the user prompt. The code is open source [and available here](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/20-financial-prompt-optimizer).

<img className="pro-border-gradient" width="800" alt="No tab no param primary" src="https://openbb-cms.directus.app/assets/d2eaa645-eb6e-4411-b9d1-74b70409483a.png" />

This agent does nothing else - it doesn't parse data added to context, doesn't pass data in the dashboard, doesn't share step-by-step reasoning or citations, doesn't create artifacts, etc. We will dive on each of these features in the AI features tab.

```python
from typing import AsyncGenerator
import openai

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from sse_starlette.sse import EventSourceResponse

from openbb_ai.models import MessageChunkSSE, QueryRequest
from openbb_ai import message_chunk

from openai.types.chat import (
    ChatCompletionMessageParam,
    ChatCompletionUserMessageParam,
    ChatCompletionAssistantMessageParam,
    ChatCompletionSystemMessageParam,
)


app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/agents.json")
def get_copilot_description():
    """Agent descriptor for the OpenBB Workspace."""
    return JSONResponse(
        content={
            "financial_prompt_optimizer": {
                "name": "Financial Prompt Optimizer",
                "description": "Optimizes a user's prompt for finance: clearer, more specific, and actionable.",
                "image": "https://github.com/OpenBB-finance/copilot-for-terminal-pro/assets/14093308/7da2a512-93b9-478d-90bc-b8c3dd0cabcf",
                "endpoints": {"query": "http://localhost:7777/v1/query"},
                "features": {
                    "streaming": True,
                    "widget-dashboard-select": False,
                    "widget-dashboard-search": False,
                },
            }
        }
    )


@app.post("/v1/query")
async def query(request: QueryRequest) -> EventSourceResponse:
    """Stream a concise optimized prompt and rationale."""

    openai_messages: list[ChatCompletionMessageParam] = [
        ChatCompletionSystemMessageParam(
            role="system",
            content=(
                "You are a concise Financial Prompt Optimizer.\n"
                "Rewrite the user's prompt to be clearer, more specific, and immediately actionable for financial analysis.\n"
                "Always return exactly the improved prompt:\n"
                "Optimized Prompt: <detailed improved prompt with step-by-step>\n"
            ),
        )
    ]

    for message in request.messages:
        if message.role == "human":
            openai_messages.append(
                ChatCompletionUserMessageParam(role="user", content=message.content)
            )
        elif message.role == "ai" and isinstance(message.content, str):
            openai_messages.append(
                ChatCompletionAssistantMessageParam(
                    role="assistant", content=message.content
                )
            )

    async def execution_loop() -> AsyncGenerator[MessageChunkSSE, None]:
        client = openai.AsyncOpenAI()
        async for event in await client.chat.completions.create(
            model="gpt-4o",
            messages=openai_messages,
            stream=True,
        ):
            if chunk := event.choices[0].delta.content:
                yield message_chunk(chunk)

    return EventSourceResponse(
        content=(
            event.model_dump(exclude_none=True) async for event in execution_loop()
        ),
        media_type="text/event-stream",
    )


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("main:app", host="0.0.0.0", port=7777, reload=True)
```


---

---
title: Citations for documents
sidebar_position: 5
description: Add document-specific citations with PDF text highlighting for source attribution
keywords:
- citations
- documents
- PDF
- highlighting
- pdfplumber
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Citations for documents | OpenBB Workspace Docs" />

Extract and cite specific content from PDF documents with precise text highlighting. Use `pdfplumber` to get text positions and create visual citations in Workspace.

Reference implementation [in this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/vanilla-agent-pdf-citations).

<img className="pro-border-gradient" width="800" alt="Document Citations" src="https://openbb-cms.directus.app/assets/c47a15c0-562c-4fc1-a221-a11cef487826.png" />

## Architecture

This pattern extends widget citations by adding document-level text extraction and positioning. Extract PDF content with character-level precision for accurate highlighting.

`agents.json` configuration:

```python
return JSONResponse(content={
  "vanilla_agent_pdf_citations": {
    "name": "Vanilla Agent PDF Citations",
    "description": "A vanilla agent that handles PDF data with citation support.",
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "streaming": True,
      "widget-dashboard-select": True,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Extract PDF content when widget data contains PDF format
- Use `pdfplumber` to get text with character positions
- Store text positions for citation highlighting
- Create multiple citation types:
  - Basic widget citation for data source
  - Highlighted citation for specific text passages
- Stream citations with bounding boxes for visual highlighting

### OpenBB AI SDK

- `CitationHighlightBoundingBox`: Precise text highlighting with coordinates
- `PdfDataFormat`: Identifies PDF content in widget data
- `quote_bounding_boxes`: Attach visual highlights to citations
- Text position tracking: `x0`, `top`, `x1`, `bottom` for accurate placement

## Core logic

Extract PDF text with positions for precise highlighting:

```python
import pdfplumber
from openbb_ai import cite, citations
from openbb_ai.models import CitationHighlightBoundingBox

def extract_pdf_with_positions(pdf_bytes: bytes) -> Tuple[str, List[Dict[str, Any]]]:
    """Extract text and positions from PDF."""
    document_text = ""
    text_positions = []

    with pdfplumber.open(io.BytesIO(pdf_bytes)) as pdf:
        for page_num, page in enumerate(pdf.pages, 1):
            # Extract character-level data for positioning
            if page.chars:
                # Group characters into lines
                lines = {}
                for char in page.chars:
                    y = round(char['top'])
                    if y not in lines:
                        lines[y] = {'chars': [], 'x0': char['x0'], 'x1': char['x1']}
                    lines[y]['chars'].append(char['text'])
                    lines[y]['x0'] = min(lines[y]['x0'], char['x0'])
                    lines[y]['x1'] = max(lines[y]['x1'], char['x1'])

                # Get first meaningful line for citation
                sorted_lines = sorted(lines.items())
                for y_pos, line_data in sorted_lines[:5]:
                    line_text = ''.join(line_data['chars']).strip()
                    if line_text and len(line_text) > 10:
                        text_positions.append({
                            'text': line_text,
                            'page': page_num,
                            'x0': line_data['x0'],
                            'top': y_pos,
                            'x1': line_data['x1'],
                            'bottom': y_pos + 12
                        })
                        break

            # Extract full text for context
            page_text = page.extract_text()
            if page_text:
                document_text += page_text + "\\n\\n"

    return document_text, text_positions
```

Create citations with line/word level highlighting in the PDF:

```python
async def handle_widget_data(data: list[DataContent | DataFileReferences]):
    """Process widget data and create PDF citations."""

    widget_text, pdf_text_positions = await handle_widget_data(message.data)
    context_str += widget_text

    # Create citations for widget data
    for widget_data_request in message.input_arguments["data_sources"]:
        widget = matching_widgets[0]

        # Basic widget citation
        basic_citation = cite(
            widget=widget,
            input_arguments=widget_data_request["input_args"],
        )
        citations_list.append(basic_citation)

        # PDF citation with highlighting
        if pdf_text_positions and len(pdf_text_positions) > 0:
            first_line = pdf_text_positions[0]

            pdf_citation = cite(
                widget=widget,
                input_arguments=widget_data_request["input_args"],
                extra_details={
                    "Page": first_line['page'],
                    "Reference": "First sentence of document"
                }
            )

            # Add precise text highlighting
            pdf_citation.quote_bounding_boxes = [[
                CitationHighlightBoundingBox(
                    text=first_line['text'][:100],
                    page=first_line['page'],
                    x0=first_line['x0'],
                    top=first_line['top'],
                    x1=first_line['x1'],
                    bottom=first_line['bottom']
                )
            ]]

            citations_list.append(pdf_citation)
```


---

---
title: Create charts
sidebar_position: 6
description: Stream inline charts as part of your agent’s response
keywords:
- charts
- visualization
- artifacts
- SSE
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Create charts | OpenBB Workspace Docs" />

Stream visualizations (line, bar, scatter, pie, donut) with `chart(...)`. Charts appear below the message that emitted them.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/33-vanilla-agent-charts/vanilla_agent_charts/main.py).

<img className="pro-border-gradient" width="800" alt="Charts" src="https://openbb-cms.directus.app/assets/e9d93282-20cb-4b3a-bf58-17032191e82a.png" />

## Architecture

Emit chart artifacts so visualizations render below the answer. The example shows multiple chart types in one response.

`agents.json` configuration with `widget-dashboard-select` feature enabled:

```python
return JSONResponse(content={
  "vanilla_agent_charts": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "widget-dashboard-select": False,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Process user request and prepare data for visualization
- Stream explanatory text with `message_chunk()`
- Create chart data as list of dictionaries
- Choose appropriate chart type based on data characteristics:
  - **Line/Bar/Scatter**: Use `x_key` and `y_keys` for XY data
  - **Pie/Donut**: Use `angle_key` for values, `callout_label_key` for labels
- Emit `chart()` artifacts with proper configuration
- Charts render interactively below streamed content

### OpenBB AI SDK

- `chart(type, data, x_key, y_keys, name, description)`: Creates `MessageArtifactSSE` for chart display
- Chart types: `"line"`, `"bar"`, `"scatter"`, `"pie"`, `"donut"`
- Chart parameters handled by specific models:
  - `LineChartParameters`, `BarChartParameters`, `ScatterChartParameters`
  - `PieChartParameters`, `DonutChartParameters`
- `message_chunk(text)`: Streams explanatory text around charts
- Charts support interactive features like zoom, hover, and data export

## Core logic

```python
from openbb_ai import message_chunk, chart
from openbb_ai.models import QueryRequest
import datetime

async def query(request: QueryRequest) -> EventSourceResponse:
    async def execution_loop():
        # Stream introduction
        yield message_chunk("Let me create some visualizations to illustrate the data trends.\n\n").model_dump()

        # Prepare time series data
        price_data = [
            {"date": "2024-01-01", "price": 150.0, "volume": 1200000},
            {"date": "2024-01-02", "price": 152.5, "volume": 1350000},
            {"date": "2024-01-03", "price": 148.2, "volume": 1100000},
            {"date": "2024-01-04", "price": 155.8, "volume": 1450000},
        ]

        # Create line chart for price trend
        yield chart(
            type="line",
            data=price_data,
            x_key="date",
            y_keys=["price"],
            name="Stock Price Trend",
            description="Daily stock price movement over time"
        ).model_dump()

        yield message_chunk("\n\nThe line chart shows an overall upward trend. Now let's look at volume distribution:\n\n").model_dump()

        # Create bar chart for volume
        yield chart(
            type="bar",
            data=price_data,
            x_key="date",
            y_keys=["volume"],
            name="Trading Volume",
            description="Daily trading volume by date"
        ).model_dump()

        # Portfolio allocation pie chart
        portfolio_data = [
            {"asset": "Stocks", "allocation": 60},
            {"asset": "Bonds", "allocation": 25},
            {"asset": "Cash", "allocation": 10},
            {"asset": "Real Estate", "allocation": 5}
        ]

        yield message_chunk("\n\nHere's the portfolio allocation breakdown:\n\n").model_dump()

        yield chart(
            type="pie",
            data=portfolio_data,
            angle_key="allocation",
            callout_label_key="asset",
            name="Portfolio Allocation",
            description="Investment portfolio distribution by asset class"
        ).model_dump()

    return EventSourceResponse(execution_loop(), media_type="text/event-stream")
```


---

---
title: Create tables
sidebar_position: 5
description: Stream tabular data as an artifact in the conversation
keywords:
- tables
- artifacts
- SSE
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Create tables | OpenBB Workspace Docs" />

Emit a table artifact with `table(...)`. Provide an array of objects; column names are inferred from object keys.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/34-vanilla-agent-tables/vanilla_agent_tables/main.py).

<img className="pro-border-gradient" width="800" alt="Tables" src="https://openbb-cms.directus.app/assets/9024844b-2b40-4878-80d0-4be2309a8297.png" />

## Architecture

Emit table artifacts in-line so tabular data renders below the answer.

`agents.json` configuration:

```python
return JSONResponse(content={
  "vanilla_agent_tables": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "widget-dashboard-select": False,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Process user request and generate data (from widgets, analysis, or computation)
- Stream explanatory text with `message_chunk()`
- Create table data as list of dictionaries (column names from object keys)
- Emit `table()` artifact with data, name, and description
- Table renders below the streamed text in Workspace UI
- Continue with additional content or complete response

### OpenBB AI SDK

- `table(data, name, description)`: Creates `MessageArtifactSSE` for table display
  - `data`: List of dictionaries where keys become column headers
  - `name`: Table title displayed in UI
  - `description`: Optional table description
- `message_chunk(text)`: Streams explanatory text before/after tables
- Tables automatically handle data formatting and sorting in UI

## Core logic

```python
from openbb_ai import message_chunk, table
from openbb_ai.models import QueryRequest

async def query(request: QueryRequest) -> EventSourceResponse:
    async def execution_loop():
        # Stream introduction
        yield message_chunk("Let me analyze the financial data and create a summary table.\n\n").model_dump()

        # Generate or process data (from widgets, calculations, etc.)
        financial_data = [
            {"symbol": "AAPL", "price": 150.25, "change": 2.5, "volume": 1200000},
            {"symbol": "MSFT", "price": 280.75, "change": -1.2, "volume": 890000},
            {"symbol": "GOOGL", "price": 2650.80, "change": 15.3, "volume": 560000},
        ]

        # Create table artifact
        yield table(
            data=financial_data,
            name="Stock Market Summary",
            description="Current stock prices with daily changes and trading volume"
        ).model_dump()

        # Stream additional analysis
        yield message_chunk("\n\nThe table above shows the current market status. AAPL and GOOGL are up, while MSFT is down slightly.").model_dump()

    return EventSourceResponse(execution_loop(), media_type="text/event-stream")
```


---

---
title: Custom agent features
sidebar_position: 7
description: Configure and manage custom agent features based on workspace options
keywords:
- features
- configuration
- workspace options
- custom agents
- SSE
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Custom agent features | OpenBB Workspace Docs" />

Create agents that can dynamically enable or disable features based on workspace configuration. Agents can access user preferences through `workspace_options` and respond accordingly.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/37-vanilla-agent-custom-features).

<img className="pro-border-gradient" width="500" alt="Custom agent features - on and off" src="https://openbb-cms.directus.app/assets/f304643a-654b-4156-a4c4-dea934d18012.png" />

<img className="pro-border-gradient" width="500" alt="Custom agent features - on and on" src="https://openbb-cms.directus.app/assets/aa51354c-b611-4c99-829c-cf6e35eb884b.png" />

## Architecture

Configure custom features in your agent's descriptor and access them through the query request payload. Features can have default states, descriptions, and labels.

`agents.json` configuration with custom features:

```python
return JSONResponse(content={
    "vanilla_agent_custom_features": {
        "name": "Vanilla Agent Custom Features",
        "description": "A simple agent that reports its feature status.",
        "endpoints": {"query": "/v1/query"},
        "features": {
            "streaming": True,
            "widget-dashboard-select": False,
            "widget-dashboard-search": False,
            "deep-research": {
                "label": "Deep Research",
                "default": False,
                "description": "Allows the copilot to do deep research",
            },
            "web-search": {
                "label": "Web Search", 
                "default": True,
                "description": "Allows the copilot to search the web.",
            },
        },
    }
})
```

### Feature configuration

- **Simple features**: Boolean values for basic on/off features
- **Complex features**: Objects with `label`, `default`, and `description` properties
- **Built-in features**: Standard features like `streaming`, `widget-dashboard-select`, `widget-dashboard-search`
- **Custom features**: User-defined features with custom behavior

### Query flow

- User enables/disables features in workspace settings
- Features are passed to agent via `workspace_options` in request payload
- Agent checks enabled features and adjusts behavior accordingly
- Agent can report feature status back to user
- Response content varies based on active features

### OpenBB AI SDK

- `QueryRequest.workspace_options`: List of enabled feature names
- `message_chunk(text)`: Streams response content with feature-aware messaging
- Feature checking via simple list membership: `"feature-name" in workspace_options`

## Core logic

```python
from typing import AsyncGenerator
from openbb_ai import message_chunk
from openbb_ai.models import MessageChunkSSE, QueryRequest
from fastapi.responses import JSONResponse
from sse_starlette.sse import EventSourceResponse

@app.post("/v1/query")
async def query(request: QueryRequest) -> EventSourceResponse:
    # Access workspace options from request payload
    workspace_options = getattr(request, "workspace_options", [])

    # Check which features are enabled
    deep_research_enabled = "deep-research" in workspace_options
    web_search_enabled = "web-search" in workspace_options

    # Build feature status message
    features_msg = (
        f"- Deep Research: {'✅ Enabled' if deep_research_enabled else '❌ Disabled'}\n"
        f"- Web Search: {'✅ Enabled' if web_search_enabled else '❌ Disabled'}"
    )

    # Include feature status in system prompt
    openai_messages = [
        {
            "role": "system",
            "content": (
                "You are a simple greeting agent.\n"
                "Greet the user and let them know their current feature settings:\n"
                f"{features_msg}\n"
                "Keep your response brief and friendly."
            ),
        }
    ]

    # Add conversation history
    for message in request.messages:
        if message.role == "human":
            openai_messages.append({"role": "user", "content": message.content})
        elif message.role == "ai" and isinstance(message.content, str):
            openai_messages.append({"role": "assistant", "content": message.content})

    async def execution_loop() -> AsyncGenerator[MessageChunkSSE, None]:
        client = openai.AsyncOpenAI()
        async for event in await client.chat.completions.create(
            model="gpt-4o",
            messages=openai_messages,
            stream=True,
        ):
            if chunk := event.choices[0].delta.content:
                yield message_chunk(chunk)

    return EventSourceResponse(
        content=(
            event.model_dump(exclude_none=True) async for event in execution_loop()
        ),
        media_type="text/event-stream",
    )
```

## Feature types

### Boolean features
Simple on/off switches in the agent descriptor:
```python
"features": {
    "streaming": True,
    "some-feature": False
}
```

### Complex features
Rich feature objects with metadata:
```python
"features": {
    "research-mode": {
        "label": "Research Mode",
        "default": True,
        "description": "Enables comprehensive research capabilities"
    }
}
```

### Conditional behavior
Adjust agent behavior based on enabled features:
```python
workspace_options = getattr(request, "workspace_options", [])

if "research-mode" in workspace_options:
    # Enable research capabilities
    pass

if "web-search" in workspace_options:
    # Enable web search functionality
    pass
```

---

---
title: Highlight widget citations
sidebar_position: 4
description: Cite widget data sources in your responses and display them in Workspace
keywords:
- citations
- cite
- widgets
- provenance
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Highlight widget citations | OpenBB Workspace Docs" />

After retrieving widget data, attribute outputs to their sources. Build `cite(...)` entries and stream them with `citations(...)` so Workspace shows a citations panel next to the answer.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/32-vanilla-agent-raw-widget-data-citations/vanilla_agent_raw_context_citations/main.py).

<img className="pro-border-gradient" width="800" alt="Citations" src="https://openbb-cms.directus.app/assets/0af85f66-b91f-476d-a231-973442a29957.png" />

## Architecture

This pattern extends "Parse widget data" by adding attribution. After data retrieval, emit citations to show provenance in Workspace.

`agents.json` configuration with `widget-dashboard-select` feature enabled:

```python
return JSONResponse(content={
  "vanilla_agent_raw_widget_data_citations": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "streaming": True,
      "widget-dashboard-select": True,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Early exit: fetch widget data when human message contains `widgets.primary`
- On subsequent tool message:
  - Process widget data and include in LLM context
  - Match widget UUIDs from tool `input_arguments` to `request.widgets.primary`
  - Build `cite()` objects for each data source used
  - Stream citations with `citations()` after LLM response
- Citations appear in Workspace UI panel for source verification

### OpenBB AI SDK

- `cite(widget, input_arguments, extra_details)`: Creates `Citation` objects
- `citations(citation_list)`: Emits `CitationCollectionSSE` events
- `Citation`: Links outputs to data sources with metadata
- `SourceInfo`: Provides detailed source attribution data

## Core logic

Build citations by matching the tool input arguments to widgets in the request:

```python
from openbb_ai import cite, citations
from openbb_ai.models import Citation, CitationHighlightBoundingBox

async def execution_loop():
    # ... stream LLM response ...

    # Build citations after response
    citations_list = []

    # Process tool message to find data sources
    for message in request.messages:
        if message.role == "tool":
            for widget_data_request in message.input_arguments["data_sources"]:
                # Match widget by UUID
                matching_widgets = [
                    w for w in request.widgets.primary
                    if str(w.uuid) == widget_data_request["widget_uuid"]
                ]

                if matching_widgets:
                    widget = matching_widgets[0]
                    citation = cite(
                        widget=widget,
                        input_arguments=widget_data_request["input_args"],
                        extra_details={
                            "Widget Name": widget.name,
                            "Data Source": widget.type,
                            "Parameters Used": widget_data_request["input_args"]
                        }
                    )

                    citations_list.append(citation)

    # Emit citations for UI display
    if citations_list:
        yield citations(citations_list).model_dump()
```


---

---
title: Interact with dashboard
sidebar_position: 7
description: Receive full dashboard widget metadata and conditionally fetch data
keywords:
- dashboard widgets
- widget-dashboard-search
- WidgetRequest
- get_widget_data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Interact with dashboard | OpenBB Workspace Docs" />

Receive the list of widgets on the current dashboard (`secondary`) and any explicitly selected (`primary`). Summarize what’s available and fetch data for a chosen widget.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/40-vanilla-agent-dashboard-widgets/vanilla_agent_dashboard_widgets/main.py).

Example that highlights that the agent has access to data on the dashboard (secondary) and that there are no tabs.

<img className="pro-border-gradient" width="800" alt="No tab no param no primary" src="https://openbb-cms.directus.app/assets/2dbcd500-a801-415f-a6d2-2052fa9abc17.png" />

Example that highlights that the agent still has access to data on the dashboard (secondary) but also has explicit context (primary) as a multi-file viewer widget.

<img className="pro-border-gradient" width="800" alt="No tab no param primary" src="https://openbb-cms.directus.app/assets/16b8ea4b-9dc4-487e-b9ac-14b573602684.png" />

Example that highlights that the agent has access to data that lives on the dashboard (and on all the tabs!).

<img className="pro-border-gradient" width="800" alt="Tab params" src="https://openbb-cms.directus.app/assets/a12edb2e-cf15-49ca-bb99-b8468fdfe65d.png" />

## Architecture

Receive dashboard metadata and selected widgets, summarize what's available, and fetch a sample widget's data.

`agents.json` configuration with `widget-dashboard-select` enabled so it accepts explicit context and `widget-dashboard-search` so it can retrieve widgets from the dashboard.

```python
return JSONResponse(content={
  "vanilla_agent_dashboard_widgets": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "widget-dashboard-select": True,
      "widget-dashboard-search": True,
    },
  }
})
```

### Query flow

- Access both `widgets.primary` (user-selected) and `widgets.secondary` (dashboard) widget collections
- Combine widget lists for comprehensive dashboard overview
- Check `workspace_state.current_dashboard_info` for tab information
- Stream formatted widget inventory with `message_chunk()`:
  - Widget names, types, and parameter configurations
  - Tab organization if present
  - Data availability status
- Demonstrate data retrieval by fetching sample widget with `get_widget_data()`
- Process returned data and show preview with metadata

### OpenBB AI SDK

- `WidgetCollection`: Contains `primary`, `secondary`, and `extra` widget groups
- `Widget`: Individual widget with `uuid`, `name`, `type`, and `params`
- `WidgetParam`: Parameter definition with `name`, `type`, `current_value`
- `get_widget_data(widget_requests)`: Fetches data from specified widgets
- `WorkspaceState`: Provides dashboard context and tab information
- `message_chunk(text)`: Streams widget summaries and data previews

## Core logic

Unify primary and secondary widgets, render a summary, then fetch data for one widget:

```python
from openbb_ai import get_widget_data, WidgetRequest, message_chunk
from openbb_ai.models import QueryRequest

async def query(request: QueryRequest) -> EventSourceResponse:
    async def execution_loop():
        # Combine all available widgets
        all_widgets = []
        primary_count = 0
        secondary_count = 0

        if request.widgets:
            if request.widgets.primary:
                all_widgets.extend(request.widgets.primary)
                primary_count = len(request.widgets.primary)
            if request.widgets.secondary:
                all_widgets.extend(request.widgets.secondary)
                secondary_count = len(request.widgets.secondary)

        if not all_widgets:
            yield message_chunk("No widgets found on your dashboard.").model_dump()
            return

        # Stream dashboard overview
        dashboard_info = ""
        if request.workspace_state and request.workspace_state.current_dashboard_info:
            dashboard_name = request.workspace_state.current_dashboard_info.name
            tab_count = len(request.workspace_state.current_dashboard_info.tabs)
            dashboard_info = f"Dashboard: **{dashboard_name}** ({tab_count} tabs)\n\n"

        widget_summary = f"""# Dashboard Widget Analysis

{dashboard_info}## Widget Inventory
- **Selected widgets (primary)**: {primary_count}
- **Dashboard widgets (secondary)**: {secondary_count}
- **Total available**: {len(all_widgets)}

## Available Widgets
"""

        for i, widget in enumerate(all_widgets[:5]):  # Show first 5
            widget_type = "🎯 Selected" if i < primary_count else "📊 Dashboard"
            param_count = len(widget.params) if widget.params else 0
            widget_summary += f"- **{widget.name}** ({widget_type}) - {param_count} parameters\n"

        if len(all_widgets) > 5:
            widget_summary += f"- ... and {len(all_widgets) - 5} more widgets\n"

        yield message_chunk(widget_summary + "\n").model_dump()

        # Demonstrate data retrieval with last widget
        if all_widgets:
            sample_widget = all_widgets[-1]
            yield message_chunk(f"Let me fetch data from **{sample_widget.name}** as an example:\n\n").model_dump()

            yield get_widget_data([
                WidgetRequest(
                    widget=sample_widget,
                    input_arguments={p.name: p.current_value for p in sample_widget.params} if sample_widget.params else {}
                )
            ]).model_dump()

    return EventSourceResponse(execution_loop(), media_type="text/event-stream")
```


---

---
title: Parse PDF context
sidebar_position: 3
description: Parse PDF content from widget data and cite sources
keywords:
- PDF
- DataContent
- PdfDataFormat
- citations
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Parse PDF context | OpenBB Workspace Docs" />

Extract text from PDF inputs supplied via widget data and append it to the model context. Optionally add citation highlights to reference quotes within the PDF.

Reference implementation [here](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/35-vanilla-agent-pdf/vanilla_agent_pdf/main.py).

<img className="pro-border-gradient" width="800" alt="Parse PDF" src="https://openbb-cms.directus.app/assets/b9e323b3-9416-4452-9d32-f6d6b8b50443.png" />

## Architecture

Handle PDF data delivered by the UI through the widget data tool. Support both URL and base64 PDFs and add text to the LLM context.

`agents.json` configuration with `widget-dashboard-select` feature enabled:

```python
return JSONResponse(content={
  "vanilla_agent_pdf": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "widget-dashboard-select": True,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow
- Check for human message with `widgets.primary` containing PDF data
- Early exit: yield `get_widget_data()` for UI execution
- On subsequent tool message:
  - Iterate through `DataContent` items
  - Detect `PdfDataFormat` using `isinstance()` check
  - Handle both `SingleDataContent` (base64) and `SingleFileReference` (URL)
  - Extract text using `pdfplumber.open()` with `io.BytesIO()`
  - Append extracted text to context string
  - Process with LLM and stream response
- Optionally create `cite()` with `CitationHighlightBoundingBox` for text highlighting

### OpenBB AI SDK
- `PdfDataFormat`: Identifies PDF content in widget data
- `SingleDataContent`: Contains base64-encoded PDF data
- `SingleFileReference`: Contains URL reference to PDF
- `DataContent`/`DataFileReferences`: Containers for data items
- `CitationHighlightBoundingBox`: Defines text highlighting coordinates
- `cite(widget, input_arguments, extra_details)`: Creates citations with bounding boxes
- `get_widget_data()`: Requests PDF data from widgets

## Core logic

Detect PDF data, extract text, and accumulate as context:

```python
import base64
import io
import pdfplumber
import httpx
from openbb_ai import get_widget_data, cite, citations
from openbb_ai.models import (
    QueryRequest, WidgetRequest, PdfDataFormat, 
    SingleDataContent, SingleFileReference, 
    DataContent, DataFileReferences,
    CitationHighlightBoundingBox
)

async def _download_file(url: str) -> bytes:
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        return response.content

async def _get_pdf_text(item) -> str:
    if isinstance(item, SingleDataContent):
        # Handle base64 PDF
        file_content = base64.b64decode(item.content)
    elif isinstance(item, SingleFileReference):
        # Handle URL PDF
        file_content = await _download_file(str(item.url))
    
    with pdfplumber.open(io.BytesIO(file_content)) as pdf:
        document_text = ""
        for page in pdf.pages:
            document_text += page.extract_text() + "\n\n"
    return document_text

async def handle_widget_data(data: list[DataContent | DataFileReferences]) -> str:
    result_str = "--- PDF Content ---\n"
    for result_item in data:
        for item in result_item.items:
            if isinstance(item.data_format, PdfDataFormat):
                result_str += f"===== {item.data_format.filename} =====\n"
                result_str += await _get_pdf_text(item)
                result_str += "------\n"
            else:
                result_str += str(item.content) + "\n"
    return result_str
```

Add citation highlights with bounding boxes:

```python
# Create citations with text highlighting
citations_list = []
for widget in request.widgets.primary:
    citation = cite(
        widget=widget,
        input_arguments={p.name: p.current_value for p in widget.params},
        extra_details={"filename": "document.pdf"}
    )
    
    # Add bounding boxes for specific text regions
    citation.quote_bounding_boxes = [
        [
            CitationHighlightBoundingBox(
                text="Key financial metrics",
                page=1,
                x0=72.0, top=117, x1=259, bottom=135
            ),
            CitationHighlightBoundingBox(
                text="Revenue increased 15%", 
                page=1,
                x0=110.0, top=140, x1=275, bottom=160
            )
        ]
    ]
    citations_list.append(citation)

if citations_list:
    yield citations(citations_list).model_dump()
```



---

---
title: Parse widget data
sidebar_position: 2
description: Retrieve data from selected widgets and pass it as raw context to your LLM
keywords:
- widgets
- get_widget_data
- WidgetRequest
- SSE
- OpenAI
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Parse widget data | OpenBB Workspace Docs" />

Retrieve data for user‑selected widgets and pass it to your model. Enable `widget-dashboard-select` and call `get_widget_data` when the latest user message arrives.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/30-vanilla-agent-raw-widget-data/vanilla_agent_raw_context/main.py).

<img className="pro-border-gradient" width="800" alt="Raw reply without context" src="https://openbb-cms.directus.app/assets/7bbbc4c9-7cd2-4bb0-9ad9-641588cf541e.png" />

## Architecture

This pattern uses a minimal FastAPI backend with two endpoints and OpenBB AI SDK helpers to retrieve widget data and stream results.

`agents.json` configuration with `widget-dashboard-select` feature enabled:

```python
return JSONResponse(content={
  "vanilla_agent_raw_context": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "widget-dashboard-select": True,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Check if latest message is human with `widgets.primary` populated
- Build `WidgetRequest` objects with current parameter values
- Early exit: yield `get_widget_data()` SSE immediately for UI to execute
- On subsequent request with tool results:
  - Parse `DataContent` items from tool message
  - Extract and format widget data into context string
  - Append context to user messages for LLM processing
  - Stream LLM response with `message_chunk()`

### OpenBB AI SDK

- `get_widget_data(widget_requests)`: Creates `FunctionCallSSE` for widget data retrieval
- `WidgetRequest(widget, input_arguments)`: Specifies widget and parameter values
- `Widget`: Contains widget metadata (uuid, name, type, params)
- `WidgetParam`: Individual parameter with name, type, current_value
- `DataContent`: Container for widget response data
- `message_chunk(text)`: Creates `MessageChunkSSE` for streaming text

## Core logic

```python
from openbb_ai import get_widget_data, WidgetRequest, message_chunk

@app.post("/v1/query")
async def query(request: QueryRequest) -> EventSourceResponse:
    if (
        request.messages[-1].role == "human"
        and request.widgets
        and request.widgets.primary
    ):
        widget_requests = [
            WidgetRequest(
                widget=w,
                input_arguments={p.name: p.current_value for p in w.params},
            )
            for w in request.widgets.primary
        ]

        async def retrieve_widget_data():
            # Function-call SSE that Workspace interprets and executes
            yield get_widget_data(widget_requests).model_dump()

        return EventSourceResponse(retrieve_widget_data(), media_type="text/event-stream")

    # Process tool message with widget data
    openai_messages = [
        ChatCompletionSystemMessageParam(
            role="system",
            content="You are a helpful financial assistant."
        )
    ]

    context_str = ""
    for message in request.messages:
        if message.role == "human":
            openai_messages.append(
                ChatCompletionUserMessageParam(role="user", content=message.content)
            )
        elif message.role == "tool":
            # Extract widget data from latest tool result
            for data_content in message.data:
                for item in data_content.items:
                    context_str += str(item.content) + "\n"

    # Append context to last user message
    if context_str and openai_messages:
        openai_messages[-1]["content"] += "\n\nContext:\n" + context_str

    async def execution_loop():
        async for event in await client.chat.completions.create(
            model="gpt-4o",
            messages=openai_messages,
            stream=True
        ):
            if chunk := event.choices[0].delta.content:
                yield message_chunk(chunk).model_dump()

    return EventSourceResponse(execution_loop(), media_type="text/event-stream")
```

## Dashboard widgets vs explicit context

The example above uses `request.widgets.primary` which contains widgets explicitly selected by the user. If you want to access all widgets available on the current dashboard instead, you can use `request.widgets.secondary`:

```python
# Access dashboard widgets instead of explicit context
if (
    request.messages[-1].role == "human"
    and request.widgets
    and request.widgets.secondary  # Dashboard widgets
):
    widget_requests = [
        WidgetRequest(
            widget=w,
            input_arguments={p.name: p.current_value for p in w.params},
        )
        for w in request.widgets.secondary  # Use secondary instead of primary
    ]
```

**Important**: To access dashboard widgets, you must enable the `widget-dashboard-search` feature in your `agents.json`:

```python
"features": {
    ...
    "widget-dashboard-search": True,   # Dashboard widgets
}
```

This gives your agent broader context about the user's dashboard setup and available data sources, rather than just the widgets they've explicitly selected.


---

---
title: Share step-by-step reasoning
sidebar_position: 1
description: Stream status updates alongside model output during long operations
keywords:
- reasoning_step
- SSE
- status updates
- progress
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI Features — Share step-by-step reasoning | OpenBB Workspace Docs" />

Stream status updates with `reasoning_step` so users can track multi‑stage actions (fetching data, running tools, post‑processing) as tokens arrive.

Reference implementation in [this GitHub repository](https://github.com/OpenBB-finance/agents-for-openbb/tree/main/31-vanilla-agent-reasoning-steps/vanilla_agent_reasoning_steps/main.py).

<img className="pro-border-gradient" width="800" alt="Reasoning" src="https://openbb-cms.directus.app/assets/eaf36840-a06d-4958-9e0d-cb2570e5a08e.png" />

## Architecture

Stream status updates alongside tokens so users see what the agent is doing.

`agents.json` configuration:

```python
return JSONResponse(content={
  "vanilla_agent_reasoning_steps": {
    "endpoints": {"query": "http://localhost:7777/v1/query"},
    "features": {
      "streaming": True,
      "widget-dashboard-select": False,
      "widget-dashboard-search": False,
    },
  }
})
```

### Query flow

- Parse `QueryRequest.messages` and convert to OpenAI-compatible format
- Add system message to define agent role and capabilities
- Emit `reasoning_step()` at key processing stages:
  - Before starting LLM processing
  - During data preparation or analysis steps
  - After completing major operations
- Stream LLM response tokens with `message_chunk()`
- Send final reasoning step upon completion

### OpenBB AI SDK

- `reasoning_step(event_type, message, details)`: Creates `StatusUpdateSSE` events
  - `event_type`: `"INFO"`, `"SUCCESS"`, `"WARNING"`, `"ERROR"`
  - `message`: Human-readable status description
  - `details`: Optional dictionary with key-value pairs for additional context
- `message_chunk(text)`: Creates `MessageChunkSSE` for streaming LLM output
- `LlmClientMessage`: Handles message conversion between formats

## Core logic

```python
from openbb_ai import reasoning_step, message_chunk
from openbb_ai.models import QueryRequest, LlmClientMessage
from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam

async def query(request: QueryRequest) -> EventSourceResponse:
    # Convert messages to OpenAI format
    openai_messages = [
        ChatCompletionSystemMessageParam(
            role="system",
            content="You are a helpful financial assistant."
        )
    ]

    for message in request.messages:
        if message.role == "human":
            openai_messages.append(
                ChatCompletionUserMessageParam(role="user", content=message.content)
            )

    async def execution_loop():
        # Pre-processing reasoning
        yield reasoning_step(
            event_type="INFO",
            message="Processing your request...",
            details={"total_messages": len(request.messages)}
        ).model_dump()

        # Stream LLM response
        yield reasoning_step(
            event_type="INFO",
            message="Generating response..."
        ).model_dump()

        async for event in await client.chat.completions.create(
            model="gpt-4o",
            messages=openai_messages,
            stream=True
        ):
            if chunk := event.choices[0].delta.content:
                yield message_chunk(chunk).model_dump()

        # Completion reasoning
        yield reasoning_step(
            event_type="SUCCESS",
            message="Response generated successfully!"
        ).model_dump()

    return EventSourceResponse(execution_loop(), media_type="text/event-stream")
```


---

---
title: Apps
sidebar_position: 33
description: Create and customize your own OpenBB Apps for optimized workflows
keywords:
- OpenBB Apps
- Custom Apps
- Workflow Optimization
- Dashboard Templates
- AI Agents
- Data Integration
- Custom Solutions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps | OpenBB Workspace Docs" />

OpenBB Apps are powerful, customizable solutions that combine data widgets, prompts and AI agents to create optimized workflows for your specific needs.

<div style={{display: 'flex-col', justifyContent: 'center'}}>
  <img width="800" alt="PWA" src="https://openbb-cms.directus.app/assets/b1d5b799-3abe-4d45-b04c-601e2b652b18.png" />
</div>

Built on the principle that there's no one-size-fits-all approach to financial analysis, Apps empower you to own your workflows end-to-end.

## Creating Your Own App

1. Integrate your data widgets in OpenBB Workspace.
2. Organize them in a certain layout
3. Group widgets together and/or change their display (e.g. table or charts)
4. Right click on the dashboard and select "Export apps.json".

<img className="pro-border-gradient" width="800" alt="OpenBB Apps Example" src="https://openbb-cms.directus.app/assets/fd20914a-5557-43fd-a320-96dec1e70a38.png" />

5. This will create a `apps.json` file with your configuration.

<img className="pro-border-gradient" width="800" alt="OpenBB Apps Example" src="https://openbb-cms.directus.app/assets/2250bf63-e7e9-447d-b2e3-14d71d23fe92.png" />

This is what you should expect as a file:

```json
[
  {
    "name": "Fama French Factors and Research Portfolio",
    "img": "https://github.com/user-attachments/assets/8b2409d6-5ddc-4cbc-b20c-89a29b1bd923",
    "img_dark": "",
    "img_light": "",
    "description": "Examine sample portfolio holdings distribution across countries, sectors, and industries, while also understanding how different assets correlate with each other over various time periods. This app provides insights into how portfolios respond to different market factors using Fama-French analysis, helping investors understand their portfolio's underlying drivers of returns and risk exposures.",
    "allowCustomization": true,
    "tabs": {
      "reference-data": {
        "id": "reference-data",
        "name": "Reference Data",
        "layout": [
          {
            "i": "fama_french_info_custom_obb",
            "x": 0,
            "y": 2,
            "w": 12,
            "h": 25
          },
          {
            "i": "load_factors_custom_obb",
            "x": 12,
            "y": 13,
            "w": 28,
            "h": 14,
            "state": {
              "params": {
                "frequency": "monthly",
                "start_date": "2021-01-01",
                "end_date": "2025-03-27"
              },
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          },
          {
            "i": "load_portfolios_custom_obb",
            "x": 12,
            "y": 2,
            "w": 28,
            "h": 11,
            "state": {
              "params": {
                "portfolio": "Portfolios_Formed_on_OP",
                "start_date": "2021-01-01",
                "end_date": "2025-03-27"
              },
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "portfolio-price--performance": {
        "id": "portfolio-price--performance",
        "name": "Portfolio Price & Performance",
        "layout": [
          {
            "i": "portfolio_unit_price_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 24,
            "state": {
              "params": {
                "portfolio": "Client 2",
                "returns": "True"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "portfolio-region-and-sector-exposure": {
        "id": "portfolio-region-and-sector-exposure",
        "name": "Portfolio Region and Sector Exposure",
        "layout": [
          {
            "i": "portfolio_sectors_custom_obb",
            "x": 0,
            "y": 13,
            "w": 19,
            "h": 14,
            "state": {
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          },
          {
            "i": "portfolio_countries_custom_obb",
            "x": 0,
            "y": 2,
            "w": 19,
            "h": 11,
            "state": {
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          },
          {
            "i": "portfolio_industries_custom_obb",
            "x": 19,
            "y": 2,
            "w": 21,
            "h": 25,
            "state": {
              "params": {
                "portfolio": "Client 3"
              },
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          }
        ]
      },
      "portfolio-holdings": {
        "id": "portfolio-holdings",
        "name": "Portfolio Holdings",
        "layout": [
          {
            "i": "portfolio_holdings_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 25,
            "state": {
              "params": {
                "portfolio": "Client 2"
              },
              "chartView": {
                "enabled": true,
                "chartType": "bar"
              }
            }
          }
        ]
      },
      "portfolio-holdings-correlations": {
        "id": "portfolio-holdings-correlations",
        "name": "Portfolio Holdings Correlations",
        "layout": [
          {
            "i": "holdings_correlation_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 26,
            "state": {
              "params": {
                "portfolio": "Client 2"
              }
            }
          }
        ]
      },
      "portfolio-factor-correlations": {
        "id": "portfolio-factor-correlations",
        "name": "Portfolio Factor Attributions",
        "layout": [
          {
            "i": "portfolio_factors_custom_obb",
            "x": 0,
            "y": 2,
            "w": 30,
            "h": 20,
            "state": {
              "params": {
                "portfolio": "Client 2"
              }
            }
          }
        ]
      }
    },
    "groups": [
      {
        "name": "Group 3",
        "type": "param",
        "paramName": "frequency",
        "defaultValue": "monthly",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 2",
        "type": "param",
        "paramName": "start_date",
        "defaultValue": "2021-01-01",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 4",
        "type": "param",
        "paramName": "end_date",
        "defaultValue": "2025-03-27",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 5",
        "type": "param",
        "paramName": "region",
        "defaultValue": "america",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 6",
        "type": "endpointParam",
        "paramName": "factor",
        "defaultValue": "america",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 7",
        "type": "param",
        "paramName": "portfolio",
        "defaultValue": "Client 1",
        "widgetIds": [
          "portfolio_sectors_custom_obb",
          "portfolio_countries_custom_obb",
          "portfolio_industries_custom_obb",
          "portfolio_holdings_custom_obb",
          "portfolio_unit_price_custom_obb",
          "holdings_correlation_custom_obb",
          "portfolio_factors_custom_obb"
        ]
      }
    ],
    "prompts": [
      "Please analyze my current portfolio holdings. What are the top 5 positions by weight? Are there any concentration risks I should be aware of? How has each position performed over the last month?",
      "What are the strongest correlations between my portfolio holdings? Which positions might provide good diversification benefits? How do my holdings correlate with major market factors?",
      "What is my current sector exposure? Are there any sectors where I'm over or underweight compared to the market? What are the risks and opportunities in my current sector allocation?",
      "How does my portfolio respond to different market factors? What are my current factor exposures? Are there any factor tilts I should consider adjusting?"
    ]
  }
]


---

---
title: Data Integration
sidebar_position: 1
description: Learn how to integrate your own data sources and APIs into OpenBB Workspace with a custom backend solution.
keywords:
  - Data Integration
  - Custom Backend
  - API Endpoints
  - Widget Configuration
  - Data Connectors
  - User Interface
  - Real-time Updates
  - Single Widget
  - Data Key Parameter
  - Nested JSON
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';
import TutorialVideo from '@site/src/components/General/TutorialVideo.tsx';

<HeadTitle title="Data Integration | OpenBB Workspace Docs" />

OpenBB Workspace provides a powerful custom backend feature that enables you to integrate your own data sources and APIs directly into the platform. This integration capability allows you to:

- Create personalized widgets that display your custom data
- Leverage OpenBB's AI agents with your proprietary data
- Build a seamless workflow between your data sources and OpenBB's analysis tools

A custom backend is an API that returns data in a format that OpenBB Workspace understands, with specifications defined in a `widgets.json` file. This approach gives you complete flexibility in choosing your technology stack while ensuring compatibility with OpenBB Workspace.

<TutorialVideo
  youtubeLink="https://www.youtube.com/embed/BbAGb-fciIc?si=IM_WJ9miEaqFKJAN"
  videoLegend="Learn how to integrate your custom backend with OpenBB Workspace"
/>

## Getting Started: Hello World Example

Let's walk through a simple example to demonstrate how to integrate a custom backend. We'll create a basic "Hello World" application that you can use as a template for your own integrations.

The complete example code is available in our [GitHub repository](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/getting-started/hello-world).

### 0. Prerequisites

Before we begin, ensure you have the following installed:

```bash
pip install fastapi uvicorn
```

### 1. Create the API Server

Create a `main.py` file with the following code:

```python
# Import required libraries
import json
from pathlib import Path
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# Initialize FastAPI application with metadata
app = FastAPI(
    title="Hello World",
    description="Hello World app for OpenBB Workspace",
    version="0.0.1"
)

# Define allowed origins for CORS (Cross-Origin Resource Sharing)
# This restricts which domains can access the API
origins = [
    "https://pro.openbb.co",
]

# Configure CORS middleware to handle cross-origin requests
# This allows the specified origins to make requests to the API
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

@app.get("/")
def read_root():
    """Root endpoint that returns basic information about the API"""
    return {"Info": "Hello World example"}

# Widgets configuration file for the OpenBB Workspace
# it contains the information and configuration about all the
# widgets that will be displayed in the OpenBB Workspace
@app.get("/widgets.json")
def get_widgets():
    """Widgets configuration file for the OpenBB Workspace

    Returns:
        JSONResponse: The contents of widgets.json file
    """
    # Read and return the widgets configuration file
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "widgets.json").open())
    )

# Apps configuration file for the OpenBB Workspace
# it contains the information and configuration about all the
# apps that will be displayed in the OpenBB Workspace
@app.get("/apps.json")
def get_apps():
    """Apps configuration file for the OpenBB Workspace

    Returns:
        JSONResponse: The contents of apps.json file
    """
    # Read and return the apps configuration file
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "apps.json").open())
    )

# Hello World endpoint - for it to be recognized by the OpenBB Workspace
# it needs to be added to the widgets.json file endpoint
@app.get("/hello_world")
def hello_world(name: str = ""):
    """Returns a personalized greeting message.

    Args:
        name (str, optional): Name to include in the greeting. Defaults to empty string.

    Returns:
        str: A greeting message with the provided name in markdown format.
    """
    # Return a markdown-formatted greeting with the provided name
    return f"# Hello World {name}"
```

### 2. Configure Widgets

Create a `widgets.json` file to define your widget's properties. This file is your main configuration and defines widget properties such as name, description, category, endpoint, type of widget, and other information. Each widget will be defined in this file:

```json
{
  "hello_world": {
    "name": "Hello World",
    "description": "A simple markdown widget that displays Hello World",
    "category": "Hello World",
    "type": "markdown",
    "endpoint": "hello_world",
    "gridData": { "w": 12, "h": 4 },
    "source": "None",
    "params": [
      {
        "paramName": "name",
        "value": "",
        "label": "Name",
        "type": "text",
        "description": "Enter your name"
      }
    ]
  }
}
```

### 3. Configure App Layout (Optional)

Create an `apps.json` file to define the app's layout. This makes it so that there is a new App on OpenBB with a single markdown widget that says Hello World:

```json
[
  {
    "name": "Hello World",
    "img": "",
    "img_dark": "",
    "img_light": "",
    "description": "Hello World template",
    "allowCustomization": true,
    "tabs": {
      "": {
        "id": "",
        "name": "",
        "layout": [
          {
            "i": "hello_world",
            "x": 0,
            "y": 0,
            "w": 12,
            "h": 4,
            "state": {
              "params": {
                "name": ""
              }
            }
          }
        ]
      }
    },
    "groups": []
  }
]
```

### 4. Run the Application

Your project structure should look like this:

```
backend/
├── main.py
├── widgets.json
└── apps.json
```

Start the server with:

```bash
uvicorn main:app --reload --host 0.0.0.0 --port 7779
```

You should see output similar to:

```bash
$ uvicorn main:app --reload --host 0.0.0.0 --port 7779
INFO:     Uvicorn running on http://0.0.0.0:7779 (Press CTRL+C to quit)
INFO:     Started reloader process [59166] using WatchFiles
INFO:     Started server process [59168]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

The application will be available at `http://127.0.0.1:7779`.

### 5. Add to OpenBB

You can then add this backend to OpenBB Workspace by right clicking on the dashboard and clicking "Add data", and do the following:

<img width="800" alt="Apps" src="https://openbb-cms.directus.app/assets/80898c79-cb04-4361-afdd-945eb3e531be.png" />

### 6. Set up Authentication / or API keys

Generally, it’s recommended to enable authentication for your backend to ensure secure access. Another common use case is when connecting to a third-party data provider that requires an API key. To handle this securely, we recommend including the key in a custom header (for example, X-API-KEY).

Here are some benefits of using a custom header:
- Security: you can keep credentials or API keys out of URLs and logs.
- Flexibility: this method supports multiple API keys / credentials per request.

Here’s an example of how you can add this to your main.py:

```
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
import os

# Load environment variables from .env file (recommended)
load_dotenv()

app = FastAPI(title="Custom Header Example", version="0.0.1")

@app.get("/secure_hello")
def secure_hello(request: Request, name: str = ""):
    """Returns a personalized message if the correct API key is provided."""

    # -------------------------------------------------------------------------
    # NOTE:
    # It is recommended to set your API keys as environment variables.
    # Example: create a `.env` file with the line below:
    # VALID_API_KEYS=my-secret-key,another-valid-key
    #
    # For quick local testing, you can also define keys directly in code:
    # valid_api_keys = ["my-secret-key", "another-valid-key"]
    # (Make sure to comment out the environment variable line below.)
    # -------------------------------------------------------------------------
    
    # Get allowed API keys from environment variables
    valid_api_keys = os.getenv("VALID_API_KEYS", "").split(",")

    # Get API key from header
    api_key = request.headers.get("X-API-KEY")

    if not api_key:
        raise HTTPException(
            status_code=401,
            detail="API key required. Please include 'X-API-KEY' in the request headers."
        )

    # Validate provided API key
    if api_key.strip() not in [k.strip() for k in valid_api_keys]:
        raise HTTPException(status_code=403, detail="Invalid API key")

    # Return a markdown-formatted greeting
    return f"# Hello {name}, your API key is valid!"

```

Once configured, you can add your header values in the following way. These values will then be automatically passed along with any subsequent API calls.

<img width="800" alt="Authentication" src="https://openbb-cms.directus.app/assets/70cb3454-bf1b-41eb-af52-85bdebfd75f4.png" />


<img width="800" alt="Authentication-Key-Value-Pair" src="https://openbb-cms.directus.app/assets/026b8815-555f-42dd-b3a0-25f991f4ca5e.png" />


### 7. Voila

<img width="800" alt="Apps" src="https://openbb-cms.directus.app/assets/b34f315c-0f17-4e14-9b0d-0288d1cf7a5c.png" />

## Reference Backend

The [reference backend](https://github.com/OpenBB-finance/backends-for-openbb/tree/main/getting-started/reference-backend) serves as a comprehensive example repository showcasing implementations of most widget types and configuration patterns available in OpenBB Workspace.

This backend provides practical examples for:

- **Complete Widget Type Coverage**: Examples for table, chart, metric, markdown, file viewer, and specialized widget implementations
- **Advanced Configuration Patterns**: Demonstrations of parameter linking, dynamic dropdowns, render functions, and custom formatting
- **Real-world Data Integration**: Working examples with external APIs, data transformation, and error handling
- **Best Practice Implementations**: Production-ready code patterns with proper authentication, caching, and performance optimization

The reference backend functions both as a learning resource and a foundation for your own backend development. You can clone the repository, study the implementations, and adapt the patterns to your specific data sources and analytical requirements.

Whether you're implementing your first widget or exploring advanced features like sparklines and custom formatters, the reference backend provides tested, documented examples that demonstrate the full capabilities of the OpenBB integration framework.


---

---
title: agents.json Reference
sidebar_position: 3
description: Complete reference guide for configuring custom AI agents in OpenBB Workspace using the agents.json endpoint
keywords:
- agents.json
- AI configuration
- custom agents
- agent metadata
- OpenBB AI SDK
- agent features
- SSE
- streaming
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="agents.json Reference | OpenBB Workspace Docs" />

The `agents.json` endpoint is an important component of custom AI agent integration in OpenBB Workspace. This endpoint provides metadata and configuration information that tells the workspace how to interact with your custom agent.

When you add a custom AI agent to OpenBB Workspace, the system first queries your agent's `/agents.json` endpoint to discover its capabilities, configuration, and how to communicate with it. This configuration acts as a contract between your agent and the workspace.

The `agents.json` endpoint should return a JSON object with your agent(s) configuration. The endpoint must:

- Be accessible via HTTP GET request
- Return `Content-Type: application/json`
- Respond with a valid JSON structure
- Be available at the path `/agents.json` relative to your agent's base URL

Example:

```json
{
  "financial_prompt_optimizer": {
      "name": "Financial Prompt Optimizer",
      "description": "Optimizes a user's prompt for finance: clearer, more specific, and actionable.",
      "image": "https://github.com/OpenBB-finance/copilot-for-terminal-pro/assets/14093308/7da2a512-93b9-478d-90bc-b8c3dd0cabcf",
      "endpoints": {"query": "http://localhost:7777/v1/query"},
      "features": {
          "streaming": true,
          "widget-dashboard-select": false,
          "widget-dashboard-search": false,
      },
  }
}
```

See more examples in the [Complete Examples section](#complete-examples).

See the JSON Schema definition in the [JsonSchema section](#jsonschema).

## Field Reference

### `agent_id`: Unique ID of the agent

The `agent_id` serves as a unique identifier for your agent within the OpenBB Workspace. This should be a lowercase string with hyphens replacing spaces, following standard slug conventions. The agent ID becomes the object key in the JSON response.

| Argument   | Type   | Required | Default | Example                        |
| ---------- | ------ | -------- | ------- | ------------------------------ |
| `agent_id` | string | Yes      | `null`  | `"financial_prompt_optimizer"` |

### `name`: Human-readable name

The `name` field specifies the human-readable display name for your agent that appears in the OpenBB Workspace user interface. This should be a clear, descriptive title that helps users understand what your agent does.

| Argument | Type   | Required | Default | Example                        |
| -------- | ------ | -------- | ------- | ------------------------------ |
| `name`   | string | Yes      | `null`  | `"Financial Prompt Optimizer"` |

### `description`: Human-readable description

The `description` provides a brief overview of your agent's capabilities and intended purpose. This text helps users understand when and how to use your agent effectively, and it's displayed as the welcome AI agent message when the chat is empty. It is important to keep it concise but informative.

If multi-orchestrator mode is enabled, then this description will be utilized by the main OpenBB Copilot to understand in what situations it should trigger this agent. So highlighting the capabilities and when to use a custom agent on its description is recommended.

| Argument      | Type   | Required | Default | Example                                                                            |
| ------------- | ------ | -------- | ------- | ---------------------------------------------------------------------------------- |
| `description` | string | Yes      | `null`  | `"Optimizes a user's prompt for finance: clearer, more specific, and actionable."` |

### `image`: Image thumbnail

The image field accepts a URL pointing to your agent's logo or avatar image. For optimal display in the OpenBB Workspace interface, use a square image with dimensions of at least 256x256 pixels. The image should be hosted on a publicly accessible URL.

| Argument | Type   | Required | Default | Example                                |
| -------- | ------ | -------- | ------- | -------------------------------------- |
| `image`  | string | No       | `null`  | `"https://example.com/agent-logo.png"` |

### `endpoints`: Communication endpoints

The query endpoint specifies where OpenBB Workspace should send user queries and interactions. This can be either a relative path like `"/query"` (if your agent runs on the same domain) or a full URL pointing to your agent's query handler like `"http://localhost:7777/v1/query"`.

This endpoint must accept POST requests and handle the QueryRequest format.

| Argument          | Type   | Required | Default | Example                                          |
| ----------------- | ------ | -------- | ------- | ------------------------------------------------ |
| `endpoints`       | object | Yes      | `null`  | `{"query": "http://localhost:7777/v1/query"}`    |
| `endpoints.query` | string | Yes      | `null`  | `"/query"` or `"http://localhost:7777/v1/query"` |

### `features`: Features that your agent advertises

Configuration object that declares the capabilities that your agent advertises to OpenBB Workspace. This allows the workspace to understand what features your agent supports and how to interact with it effectively.

| Argument             | Type    | Required | Default | Example                                                 |
| -------------------- | ------- | -------- | ------- | ------------------------------------------------------- |
| `features`           | object  | Yes      | `null`  | `{"streaming": true, "widget-dashboard-select": false}` |

See continuation of this section for details on each feature.

#### `streaming`: Streaming responses

The streaming feature enables Server-Sent Events (SSE) for your agent's responses, allowing real-time streaming of content back to users. This provides a better user experience with progressive response rendering. This feature defaults to `True` for all agents even if not explicitly set.

| Argument    | Type    | Required | Default | Example |
| ----------- | ------- | -------- | ------- | ------- |
| `streaming` | boolean | No       | `true`  | `true`  |

#### `widget-dashboard-select`: Explicit context widgets

This feature grants your agent access to explicit context widgets (primary) - those that are currently selected or explicitly chosen by the user in the dashboard. When enabled, your agent will receive these widgets in the `widgets.primary` collection of the `QueryRequest`, allowing you to fetch and analyze their data.

| Argument                  | Type    | Required | Default | Example |
| ------------------------- | ------- | -------- | ------- | ------- |
| `widget-dashboard-select` | boolean | No       | `false` | `true`  |

#### `widget-dashboard-search`: Dashboard context widgets

This feature provides your agent with access to all widgets available on the current dashboard, not just the selected ones. When enabled, these widgets appear in the `widgets.secondary` collection of the `QueryRequest`, giving your agent broader context about the user's dashboard setup and available data sources.

| Argument                  | Type    | Required | Default | Example |
| ------------------------- | ------- | -------- | ------- | ------- |
| `widget-dashboard-search` | boolean | No       | `false` | `true`  |

## JsonSchema

```jsonschema
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "patternProperties": {
    "^[a-z0-9-]+$": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "minLength": 1
        },
        "image": {
          "type": ["string", "null"],
          "format": "uri"
        },
        "endpoints": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": ["query"],
          "additionalProperties": false
        },
        "features": {
          "type": "object",
          "properties": {
            "streaming": {
              "type": "boolean",
              "default": true
            },
            "widget-dashboard-select": {
              "type": "boolean",
              "default": false
            },
            "widget-dashboard-search": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": true
        }
      },
      "required": ["name", "description", "endpoints", "features"],
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}
```

## Complete Examples

### Basic Agent Configuration

```json
{
  "vanilla-agent": {
    "name": "Vanilla Agent",
    "description": "A basic agent that processes user queries",
    "image": "https://api.example.com/static/agent-logo.png",
    "endpoints": {
      "query": "/query"
    },
    "features": {
      "streaming": true,
      "widget-dashboard-select": false,
      "widget-dashboard-search": false
    }
  }
}
```

### Agent with Widget Access

```json
{
  "data-analysis-agent": {
    "name": "Data Analysis Agent",
    "description": "An agent that can access and analyze dashboard widget data",
    "image": "https://api.example.com/static/data-agent-logo.png",
    "endpoints": {
      "query": "http://localhost:8000/v1/query"
    },
    "features": {
      "streaming": true,
      "widget-dashboard-select": true,
      "widget-dashboard-search": true
    }
  }
}
```

### Multiple Agents Configuration

```json
{
  "general-assistant": {
    "name": "General Assistant",
    "description": "General-purpose financial assistant",
    "endpoints": {
      "query": "http://localhost:7777/general/query"
    },
    "features": {
      "streaming": true,
      "widget-dashboard-select": true,
      "widget-dashboard-search": false
    }
  },
  "market-analyst": {
    "name": "Market Analyst",
    "description": "Specialized in market analysis with dashboard data access",
    "image": "https://api.example.com/analyst-logo.png",
    "endpoints": {
      "query": "http://localhost:7777/analyst/query"
    },
    "features": {
      "streaming": true,
      "widget-dashboard-select": true,
      "widget-dashboard-search": true
    }
  },
  "research-assistant": {
    "name": "Research Assistant",
    "description": "Financial research and data processing",
    "endpoints": {
      "query": "http://localhost:7777/research/query"
    },
    "features": {
      "streaming": true,
      "widget-dashboard-select": false,
      "widget-dashboard-search": false
    }
  }
}
```


---

---
title: apps.json Reference
sidebar_position: 2
description: Learn about the structure and configuration of apps.json for creating custom applications in OpenBB Workspace
keywords:
- apps.json
- workspace configuration
- custom apps
- widget layout
- app configuration
- FastAPI endpoint
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps.json Reference | OpenBB Workspace Docs" />

While it is expected for users to create their apps.json from the UI directly, as demonstrated in [Apps](/workspace/analysts/apps). The `apps.json` file follows this structure:

| Property | Type | Description |
|----------|------|-------------|
| `name` | string | The name of your app |
| `description` | string | A detailed description of what your app does |
| `img` | string | URL to the app's thumbnail image |
| `img_dark` | string | Optional URL to the app's thumbnail for dark mode |
| `img_light` | string | Optional URL to the app's thumbnail for light mode |
| `allowCustomization` | boolean | Whether users can customize the app |
| `selected_agent` | string | Optional ID of the default AI agent for this app |
| `authentication` | string | Optional authentication requirements |
| `tabs` | object | Collection of tabs, each with an ID, name, and layout configuration |
| `groups` | array | Defines synchronized parameter groups for widgets. |
| `prompts` | array | A list of suggested prompts for the current agent. |

Each tab contains:
- `id`: Unique identifier for the tab
- `name`: Display name for the tab
- `layout`: Array of widget configurations with positioning and state

Each group contains:
- `name`: Display name for the group
- `type`: Type of grouping (e.g., `param`, `endpointParam`).
- `paramName`: The parameter being synchronized
- `widgetIds`: Array of widget IDs in this group
- `defaultValue`: Default value for the parameter

Each prompt is a `string` that represents a question.

For example:

```json

"prompts": [
    "What is the latest CPI inflation momentum?",
    "Show me the year-over-year Core CPI.",
    "What was the last Non-Farm Payrolls (NFP) number?",
    "Plot the 2-year and 10-year Treasury yields.",
    "What is the current 30-year Treasury yield?"
]
```

Each layout contains a reference to a widget:
- `i`: The id of the widget - This will be used to identify the widget in the app (if the widget endpoint is "test/widget_1 the id will be test_widget_1")
- `x`: The x position of the widget
- `y`: The y position of the widget
- `w`: The width of the widget
- `h`: The height of the widget
- `state`: The state of the widget

### Setting up the Apps endpoint

To serve custom apps, you need to define an endpoint in your FastAPI application that returns the content of your `apps.json` file.

Here's how to define the `/apps.json` endpoint in your FastAPI application:

```python
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/apps.json")
async def get_apps():
    # Load your apps.json file
    with open("path/to/your/apps.json", "r") as f:
        apps_config = json.load(f)
    return JSONResponse(content=apps_config)
```

Your custom apps will appear in the OpenBB Workspace under the "Apps" tab in the "My Apps" section, as shown in here:

<img width="800" alt="OpenBB Workspace Multiple Applications View" src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png" />

**Note**: The ideal image size is 250x200px

Remember, the best part is that you can build your own apps tailored to your specific needs.

## Examples

### DTCC Trade Apps

<details>
<summary mdxType="summary">DTCC Trade App Example</summary>

```json
[
  {
    "name": "DTCC Swaps Trade Repository",
    "img": "https://media.licdn.com/dms/image/v2/C4D12AQG0nFj-PESmJg/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1632343844606?e=2147483647&v=beta&t=M9BQQUK_UbW2fIIPNAs_kZ8iVCI1IKqjU3cKcOpbMG4",
    "img_dark": "",
    "img_light": "",
    "description": "A demonstration application utilizing data from the DTCC Trade Repository.",
    "allowCustomization": true,
    "tabs": {
      "": {
        "id": "",
        "name": "",
        "layout": [
          {
            "i": "swap_rate_levels_custom_obb",
            "x": 0,
            "y": 0,
            "w": 20,
            "h": 11,
            "state": {
              "params": {
                "tenor": [
                  "2s10s",
                  "1s5s"
                ]
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "line",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "line": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "connectMissingData": true,
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "legend": {
                      "enabled": true,
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10
                        },
                        "paddingX": 10,
                        "paddingY": 10
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Interest Rate Levels (%)"
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "bubble": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "date",
                    "ois_one_year_five_year_spread",
                    "ois_two_year_ten_year_spread"
                  ]
                },
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1",
                  "sort": {
                    "sortModel": [
                      {
                        "colId": "date",
                        "sort": "asc"
                      }
                    ]
                  },
                  "columnPinning": {
                    "leftColIds": [
                      "date"
                    ],
                    "rightColIds": []
                  }
                }
              }
            }
          },
          {
            "i": "swap_rate_volume_custom_obb",
            "x": 20,
            "y": 0,
            "w": 19,
            "h": 11,
            "state": {
              "params": {
                "bucket": []
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "customCombo",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "maxHeight": 50,
                      "spacing": 10,
                      "item": {
                        "paddingX": 18,
                        "paddingY": 5,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 10
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "line": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "strokeOpacity": 0.7,
                      "marker": {
                        "enabled": false
                      },
                      "lineDash": [0],
                      "strokeWidth": 2
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "bubble": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "date",
                    "libor_volume",
                    "ois_volume",
                    "total_5d_ma_volume"
                  ]
                },
                "suppressChartRanges": true,
                "seriesChartTypes": [
                  {
                    "colId": "libor_volume",
                    "chartType": "groupedColumn",
                    "secondaryAxis": false
                  },
                  {
                    "colId": "ois_volume",
                    "chartType": "groupedColumn",
                    "secondaryAxis": false
                  },
                  {
                    "colId": "total_5d_ma_volume",
                    "chartType": "line",
                    "secondaryAxis": false
                  }
                ]
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1",
                  "cellSelection": {
                    "cellRanges": [
                      {
                        "startRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "endRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "colIds": [
                          "libor_volume"
                        ],
                        "startColId": "libor_volume"
                      }
                    ]
                  },
                  "columnPinning": {
                    "leftColIds": [
                      "date"
                    ],
                    "rightColIds": []
                  },
                  "focusedCell": {
                    "colId": "libor_volume",
                    "rowIndex": 0,
                    "rowPinned": null
                  },
                  "rangeSelection": {
                    "cellRanges": [
                      {
                        "startRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "endRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "colIds": [
                          "libor_volume"
                        ],
                        "startColId": "libor_volume"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "i": "trade_distribution_custom_obb",
            "x": 0,
            "y": 11,
            "w": 20,
            "h": 14,
            "state": {
              "params": {
                "swap_type": "OIS"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "groupedColumn",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "line": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "bubble": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Distribution Of Trades On Date ($)"
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "one_to_three_year",
                    "three_to_four_year",
                    "four_to_five_year",
                    "five_to_seven_year",
                    "seven_to_ten_year",
                    "ten_to_fifteen_year",
                    "fifteen_to_twenty_year"
                  ]
                },
                "switchCategorySeries": true,
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1"
                }
              }
            }
          },
          {
            "i": "swap_trades_custom_obb",
            "x": 20,
            "y": 11,
            "w": 19,
            "h": 14,
            "state": {
              "params": {
                "cleared_only": "false",
                "include_starting": "false"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "line",
                "chartOptions": {
                  "bubble": {
                    "legend": {
                      "enabled": true
                    },
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 17
                      }
                    },
                    "paired": true
                  },
                  "line": {
                    "legend": {
                      "enabled": true,
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 2
                        },
                        "paddingX": 10
                      },
                      "spacing": 21
                    },
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 13
                      },
                      "strokeWidth": 0,
                      "connectMissingData": true,
                      "strokeOpacity": 1
                    },
                    "padding": {
                      "top": 16,
                      "right": 20,
                      "bottom": 9,
                      "left": 9
                    },
                    "axes": {
                      "category": {
                        "bottom": {
                          "label": {
                            "spacing": 9
                          }
                        },
                        "top": {
                          "label": {
                            "spacing": 9
                          }
                        }
                      },
                      "number": {
                        "bottom": {
                          "gridLine": {
                            "enabled": false
                          },
                          "tick": {
                            "enabled": true,
                            "size": 5,
                            "width": 2
                          },
                          "label": {
                            "spacing": 7
                          },
                          "title": {
                            "enabled": false,
                            "text": "Time To Maturity"
                          }
                        },
                        "top": {
                          "gridLine": {
                            "enabled": false
                          },
                          "tick": {
                            "enabled": true,
                            "size": 5,
                            "width": 2
                          },
                          "label": {
                            "spacing": 7
                          },
                          "title": {
                            "enabled": false,
                            "text": "Time To Maturity"
                          }
                        },
                        "left": {
                          "title": {
                            "enabled": false,
                            "text": "Interest Rate (%)",
                            "spacing": 11
                          }
                        },
                        "right": {
                          "title": {
                            "enabled": false,
                            "text": "Interest Rate (%)",
                            "spacing": 11
                          }
                        }
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Swaps Traded On Date (%)",
                      "spacing": 20
                    }
                  },
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 17
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "tenor",
                    "pricing_rate",
                    "cleared_and_spot_starting",
                    "uncleared_and_forward_starting"
                  ]
                },
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1"
                }
              }
            }
          }
        ]
      }
    },
    "groups": [
      {
        "name": "Group 1",
        "type": "param",
        "paramName": "period",
        "defaultValue": "1y",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "swap_rate_volume_custom_obb"
        ]
      },
      {
        "name": "Group 2",
        "type": "param",
        "paramName": "currency",
        "defaultValue": "USD",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "swap_rate_volume_custom_obb",
          "trade_distribution_custom_obb",
          "swap_trades_custom_obb"
        ]
      },
      {
        "name": "Group 3",
        "type": "param",
        "paramName": "swap_type",
        "defaultValue": "OIS",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "trade_distribution_custom_obb"
        ]
      },
      {
        "name": "Group 4",
        "type": "param",
        "paramName": "stat",
        "defaultValue": "Notional",
        "widgetIds": [
          "swap_rate_volume_custom_obb",
          "trade_distribution_custom_obb"
        ]
      }
    ],
    "prompts": [
      "What are the latest OIS swap rate levels?",
      "Show me the notional trading volumes for LIBOR vs OIS.",
      "What is the distribution of trades for USD swaps?",
      "Compare cleared vs. uncleared swap trades.",
      "What's the 5-day moving average volume for swaps?"
    ]
  }
]
```

</details>

### FRED

<details>
<summary mdxType="summary">FRED App Example</summary>

```json
{
  "name": "Your_FED",
  "img": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "img_dark": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "img_light": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "description": "Make The charts that mater to you always live",
  "allowCustomization": true,
  "tabs": {
    "overview": {
      "id": "overview",
      "name": "Overview",
      "layout": [
        {
          "i": "fred_chart",
          "x": 0,
          "y": 2,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "start": "1970-01-01"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 20,
          "y": 2,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "CPI 12-month@CPIAUCSL.p12.m100,CPI 6-month@CPIAUCSL.p6.pa2,CPI 3-month@CPIAUCSL.p3.pa4",
              "title": "CPI Inflation Momentum",
              "chart": "line"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 0,
          "y": 18,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "Core CPI YoY@CPILFESL.p12.m100,CPI YoY@CPIAUCSL.p12.m100",
              "start": "2000-01-01"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 20,
          "y": 18,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "NFP@PAYEMS.d1.m1000",
              "title": "NFP Changes "
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 0,
          "y": 34,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "DGS2,DGS5,DGS10,DGS30"
            }
          }
        }
      ]
    }
  },
  "groups": [],
  "prompts": [
    "What is the latest CPI inflation momentum?",
    "Show me the year-over-year Core CPI.",
    "What was the last Non-Farm Payrolls (NFP) number?",
    "Plot the 2-year and 10-year Treasury yields.",
    "What is the current 30-year Treasury yield?"
  ]
}
```

</details>

### FED Net Liquidity

<details>
<summary mdxType="summary">FED Net Liquidity App Example</summary>

```json
[
  {
    "name": "Fed Net Liquidity",
    "img": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "img_dark": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "img_light": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "description": "Data curated by @dharmatrade",
    "allowCustomization": true,
    "tabs": {
      "fed-net-liquidity": {
        "id": "fed-net-liquidity",
        "name": "FED Net Liquidity",
        "layout": [
          {
            "i": "fed-net-liquidity",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-net-liquidity-all",
            "x": 0,
            "y": 32,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-net-liquidity-data",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15,
            "state": {
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "mts-income-taxes": {
        "id": "mts-income-taxes",
        "name": "MTS Income Taxes",
        "layout": [
          {
            "i": "mts-income-taxes-current-vs-prior",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-monthly-by-year",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-yoy-comparison",
            "x": 0,
            "y": 32,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-fytd",
            "x": 0,
            "y": 47,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-monthly",
            "x": 0,
            "y": 62,
            "w": 40,
            "h": 15
          }
        ]
      },
      "fed-balance-sheet": {
        "id": "fed-balance-sheet",
        "name": "FED Balance Sheet",
        "layout": [
          {
            "i": "fed-balance-sheet",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-balance-sheet-weekly",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 19
          }
        ]
      }
    },
    "groups": [],
    "prompts": [
      "What is the current Fed Net Liquidity?",
      "Show me the weekly changes in the Fed's balance sheet.",
      "What are the year-over-year changes in MTS income taxes?",
      "Display the monthly income tax receipts for the current fiscal year.",
      "How has the Fed's balance sheet evolved over the last year?"
    ]
  }
]
```

</details>

---

---
title: widgets.json Reference
sidebar_position: 1
description: Learn how to integrate your own backend with OpenBB Workspace using
  the cookie-cutter or language-agnostic API approaches, with illustrative guides
  and principles for handling widget.json files, APIs, interfaces, Python, FastAPI
  and more.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Language-Agnostic API
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Widgets.json | OpenBB Workspace Docs" />

# Widgets.json Overview

The `widgets.json` file is your configuration file that connects custom backend data to the widgets displayed in the application. Key components include:

- **Basic Information**: Defines the widget's name, description, and API endpoint that the data comes from.
- **Metadata**: Provide categories for organization and AI enhancement.
- **Display Settings**: Specifies widget type and grid dimensions.
- **Data Configuration**:  Details table and chart settings, including column level information and data types.
- **Parameters**: Details query parameters that can be passed to the API endpoint for customization.

Each entry in this file will directly map to a widget in the app. You can find example backends [here](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main), where each folder contains a `widgets.json` file specifying the available widgets.

Below are all of the configurable fields and their descriptions.

A `Widgets.json` table is a configuration structure with any of the named attributes listed below.

### Attributes

- **name**
  _Type:_ `string` (required)
  Sets the display name of the widget shown to the user.
  _Example:_ `"Options EOD Data"`

- **description**
  _Type:_ `string` (required)
  Provides a brief description of the widget for user info and selection menu.
  This is important for Copilot to understand what the widget does.
  _Example:_ `"Provides EOD data for all options chains for a given ticker."`

- **endpoint**
  _Type:_ `string` (required)
  Specifies the backend API endpoint for retrieving data.
  _Example:_ `"chains"`
  _Possible values:_ Any valid API endpoint path as a string.

- **wsEndpoint**
  _Type:_ `string`
  Specifies the WebSocket endpoint for live data updates. Only used with the Live Grid Widget.
  _Example:_ `"ws"`

- **category**
  _Type:_ `string`
  Defines the category for organizing widgets.
  _Example:_ `"Equity"`
  _Possible values:_ Any string representing a category.

- **subCategory**
  _Type:_ `string`
  Provides a secondary category for refining search results.
  _Example:_ `"Options"`

- **imgUrl**
  _Type:_ `string`
  Image URL for the widget - will show a preview when hovering in search/add widget menu.
  _Example:_ `"https://myexample-imagelink.xyw/widget1"`

- **type**
  _Type:_ `string`
  Sets the default visualization type for the widget.
  _Possible values:_ `"chart"`, `"table"`, `"table_ssrm"`, `"markdown"`, `"metric"`, `"note"`,  `"multi_file_viewer"`, `"live_grid"`, `"newsfeed"`, `"advanced-chart"`, `"chart-highcharts"`
  _Default:_ `"table"`

- **raw**
  _Type:_ `boolean`
  ONLY used for Plotly configuration. If true will create a button on the widget to switch between the chart and raw data.
  _Possible values:_ `true`, `false`
  _Default:_ `false`

- **runButton**
  _Type:_ `boolean`
  If true, a run button will be displayed instead of the refresh button.
  _Possible values:_ `true`, `false`
  _Default:_ `false`

- **gridData**
  _Type:_ object containing the following keys:

  - **w**
    _Type:_ `number`
    Sets the width of the widget in grid units.
    _Example:_ `20`
    _Maximum value:_ `40`

  - **h**
    _Type:_ `number`
    Sets the height of the widget in grid units.
    _Example:_ `9`
    _Maximum value:_ `100`

  - **minW**
    _Type:_ `number`
    Sets the minimum width of the widget in grid units.
    _Example:_ `10`

  - **minH**
    _Type:_ `number`
    Sets the minimum height of the widget in grid units.
    _Example:_ `10`

  - **maxW**
    _Type:_ `number`
    Sets the maximum width of the widget in grid units.
    _Example:_ `40`

  - **maxH**  
    _Type:_ `number`
    Sets the maximum height of the widget in grid units.
    _Example:_ `100`

- **data**
  _Type:_ object containing the following keys - This key is only used for widgets that utilize the AgGrid Table:

  - **dataKey**
    _Type:_ `string`
    A key to identify the data within the widget.
    _Example:_ `"customDataKey"`

  - **wsRowIdColumn**
    _Type:_ `string`
    The column that will be used to identify the row. This is important to set correctly to ensure the live updates are displayed correctly.
    This the key between your ws and the initial data. Only used with the Live Grid Widget.
    _Example:_ `"symbol"`

  - **table**
    _Type:_ object containing the following keys:

    - **enableCharts**
      _Type:_ `boolean`
      Enables chart visualization for table data.
      _Example:_ `true`

    - **showAll**
      _Type:_ `boolean`
      Displays all available data in the table.
      _Example:_ `true`

    - **transpose**
      _Type:_ `boolean`
      Displays transpose the data in the table.
      _Example:_ `true`

    - **chartView**
      _Type:_ object containing the following keys:

      - **enabled**
        _Type:_ `boolean`
        Sets the chart view as the default view.
        _Example:_ `true`

      - **chartType**
        _Type:_ `string`
        Specifies the type of chart to display.
        _Example:_ `"column"`
        _Possible values:_ see [ChartView chart types](#chartview-chart-types)

      - **cellRangeCols**
        _Type:_ `object`
        Defines the default column mappings for different chart types. Each key represents a chart type, and the value is an array of column names that specify the category and series columns for that chart type.
        The array structure is: `[category, series1, series2, ...]` where:
        - First element: The category column (x-axis)
        - Remaining elements: The series columns (y-axis data)
        _Example:_ 
        ```json
        "cellRangeCols": {
          "line": ["ticker", "weight", "weight2"],
          "column": ["date", "price", "volume"]
        }
        ```

      - **ignoreCellRange**
        _Type:_ `boolean`
        Ignores stored cell range for the chart.
        _Example:_ `false`

    - **columnsDefs**
      _Type:_ list of objects, each containing the following keys:

      - **field**
        _Type:_ `string`
        The name of the field from the JSON data.
        _Example:_ `"column1"`

      - **headerName**
        _Type:_ `string`
        The display name of the column header.
        _Example:_ `"Column 1"`

      - **chartDataType**
        _Type:_ `string`
        Specifies how data is treated in a chart.
        _Example:_ `"category"`
        _Possible values:_ `"category"`, `"series"`, `"time"`, `"excluded"`

      - **cellDataType**
        _Type:_ `string`
        Specifies the data type of the cell.
        _Example:_ `"text"`
        _Possible values:_ `"text"`, `"number"`, `"boolean"`, `"date"`, `"dateString"`, `"object"`

      - **align**
        _Type:_ `string`
        Specifies the alignment of the text on the cell.
        _Example:_ `"center"`
        _Possible values:_ `"left"`, `"center"`, `"right"`

      - **enableCellChangeWs**
        _Type:_ `boolean`
        Controls whether the cell can be updated via WebSocket messages. Only used with the Live Grid Widget.
        _Default:_ `true`
        _Example:_ `false`

      - **formatterFn**
        _Type:_ `string`
        Specifies how to format the data.
        _Example:_ `"int"`
        _Possible values:_ see [`formatterFn`](#formatterfn)

      - **renderFn**
        _Type:_ `string` or `array`
        Specifies a rendering function for cell data. See [Render Functions](../widget-configuration/render-functions) for more information.
        _Example:_ `"titleCase"`
        _Possible values:_ `"greenRed"`, `"titleCase"`, `"hoverCard"`, `"cellOnClick"`, `"columnColor"`, `"showCellChange"`

      - **renderFnParams**
        _Type:_ `object`
        Required if `renderFn` is used. Specifies the parameters for the render function.
        _Example:_ `{"actionType": "sendToAgent", "sendToAgent": {"markdown": "Analyze **{company}** data"}}`

        - **actionType**
          _Type:_ `string`
          Specifies the action type for the render function.
          _Example:_ `"sendToAgent"`
          _Possible values:_ `"groupBy"`, `"sendToAgent"`

        - **groupByParamName**
          _Type:_ `string`
          Group by parameter for the render function.
          _Example:_ `"symbol"`

        - **colorValueKey**
          _Type:_ `string`
          Specifies which field to use for determining the color when showing cell changes.
          _Example:_ `"Analyst"`

        - **hoverCardData**
          _Type:_ `array of strings`
          Specifies columns to show in the hover card.
          _Example:_ `["column1", "column2"]`

        - **colorRules**
          _Type:_ `array of objects`
          An array of rules for conditional coloring.
          _Example:_ `[{"condition": "gt", "value": 50, "color": "green", "fill": true}]`

        - **hoverCard**
          _Type:_ `object`
          Hover card configuration.
          Contains the following keys:

          - **cellField**
            _Type:_ `string`
            Field to display on table cell.
            _Example:_ `"value"`

          - **title**
            _Type:_ `string`
            Title for the hover card.
            _Example:_ `"Analyst Details"`

          - **markdown**
            _Type:_ `string`
            Markdown content for the hover card.
            _Example:_ `"### {value}\n- **Description:** {description}"`

        - **sendToAgent**
          _Type:_ `object`
          Configuration for sending data to an AI agent.
          Contains the following keys:

          - **markdown**
            _Type:_ `string`
            Markdown content to send to the agent, supports template variables from row data using curly braces.
            _Example:_ `"Please analyze the company **{company}** with revenue of ${revenue}M"`

          - **agentId**
            _Type:_ `string`
            (Optional) Specific agent ID to send the message to.
            _Example:_ `"financial-analyst-agent"`

      - **width**
        _Type:_ `number`
        Specifies the width of the column in pixels.
        _Example:_ `100`

      - **maxWidth**
        _Type:_ `number`
        Specifies the maximum width of the column in pixels.
        _Example:_ `200`

      - **minWidth**
        _Type:_ `number`
        Specifies the minimum width of the column in pixels.
        _Example:_ `50`

      - **hide**
        _Type:_ `boolean`
        Hides the column from the table.
        _Example:_ `false`

      - **pinned**
        _Type:_ `string`
        Pins the column to the left or right of the table.
        _Example:_ `"left"`
        _Possible values:_ `"left"`, `"right"`

      - **headerTooltip**
        _Type:_ `string`
        Tooltip text for the column header.
        _Example:_ `"This is a tooltip"`

      - **prefix**
        _Type:_ `string`
        Prefix to be added to the column header.
        _Example:_ `"$"`

      - **suffix**
        _Type:_ `string`
        Suffix to be added to the column header.
        _Example:_ `"USD"`

      - **sparkline**
        _Type:_ `object`
        Configuration for displaying sparklines within table cells.
        Contains the following keys:

        - **type**
          _Type:_ `string`
          Specifies the type of sparkline chart.
          _Example:_ `"line"`
          _Possible values:_ `"line"`, `"area"`, `"bar"`

        - **dataField**
          _Type:_ `string`
          Alternative field name to use for sparkline data (if different from main field).
          _Example:_ `"spark_data"`

        - **options**
          _Type:_ `object`
          Configuration options for the sparkline appearance and behavior.
          Contains the following keys:

          - **stroke**
            _Type:_ `string`
            Color of the line or border.
            _Example:_ `"#3366cc"`

          - **strokeWidth**
            _Type:_ `number`
            Width of the line or border in pixels.
            _Example:_ `2`

          - **fill**
            _Type:_ `string`
            Fill color for area and bar charts.
            _Example:_ `"#e3f2fd"`

          - **fillOpacity**
            _Type:_ `number`
            Opacity of the fill color (0-1).
            _Example:_ `0.3`

          - **min**
            _Type:_ `number`
            Minimum value constraint for the sparkline.
            _Example:_ `0`

          - **max**
            _Type:_ `number`
            Maximum value constraint for the sparkline.
            _Example:_ `100`

          - **direction**
            _Type:_ `string`
            Direction for bar charts.
            _Example:_ `"vertical"`
            _Possible values:_ `"vertical"`, `"horizontal"`

          - **markers**
            _Type:_ `object`
            Configuration for markers on line and area charts.
            Contains the following keys:

            - **enabled**
              _Type:_ `boolean`
              Whether to show markers.
              _Example:_ `true`

            - **size**
              _Type:_ `number`
              Size of the markers in pixels.
              _Example:_ `3`

            - **fill**
              _Type:_ `string`
              Fill color of the markers.
              _Example:_ `"#3366cc"`

            - **stroke**
              _Type:_ `string`
              Stroke color of the markers.
              _Example:_ `"#ffffff"`

            - **strokeWidth**
              _Type:_ `number`
              Width of the marker stroke.
              _Example:_ `1`

          - **pointsOfInterest**
            _Type:_ `object`
            Configuration for highlighting special data points.
            Contains the following keys:

            - **firstLast**
              _Type:_ `object`
              Styling for first and last data points.
              Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

            - **minimum**
              _Type:_ `object`
              Styling for minimum value points.
              Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

            - **maximum**
              _Type:_ `object`
              Styling for maximum value points.
              Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

            - **highlighted**
              _Type:_ `object`
              Styling for highlighted points on hover/interaction.
              Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

            - **positiveNegative**
              _Type:_ `object`
              Separate styling for positive and negative values.
              Contains the following keys:

              - **positive**
                _Type:_ `object`
                Styling for positive values.
                Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

              - **negative**
                _Type:_ `object`
                Styling for negative values.
                Contains `fill`, `stroke`, `strokeWidth`, and `size` properties.

          - **customFormatter**
            _Type:_ `string`
            JavaScript function as a string for complete control over individual data point styling.
            _Example:_ `"(params) => ({ fill: params.yValue >= 0 ? '#22c55e' : '#ef4444', stroke: params.yValue >= 0 ? '#16a34a' : '#dc2626' })"`

          - **padding**
            _Type:_ `object`
            Padding configuration for the sparkline.
            Contains the following keys:

            - **top**
              _Type:_ `number`
              Top padding in pixels.
              _Example:_ `5`

            - **right**
              _Type:_ `number`
              Right padding in pixels.
              _Example:_ `5`

            - **bottom**
              _Type:_ `number`
              Bottom padding in pixels.
              _Example:_ `5`

            - **left**
              _Type:_ `number`
              Left padding in pixels.
              _Example:_ `5`

- **params**
  _Type:_ list of objects, each containing the following keys:

  - **type**
    _Type:_ `string`
    The type of the parameter.
    _Example:_ `"date"`
    _Possible values:_ `"date"`, `"text"`, `"ticker"`, `"number"`, `"boolean"`, `"endpoint"`, `"form"`

  - **paramName**
    _Type:_ `string`
    The name of the parameter in the URL.
    _Example:_ `"startDate"`

  - **value**
    _Type:_ `string`, `number`, `boolean`
    The default value of the parameter.
    _Example:_ `"2024-01-01"`

  - **label**
    _Type:_ `string`
    The label to display in the UI for the parameter.
    _Example:_ `"Start Date"`

  - **optionsEndpoint**
    _Type:_ `string`
    Endpoint to fetch options for the parameter.
    _Example:_ `"v1/test/values"`

  - **multiple**
    _Type:_ `boolean`
    If true, the parameter will be a dropdown with multiple selectable options that you can add add-hoc.
    _Example:_ `true`

  - **optionsParams**
    _Type:_ `object`
    Parameters to pass to the options endpoint. You can use the parameter name from the `params` array to pass a value to the options endpoint.
    _Example:_ `{"type": "$type"}`

  - **show**
    _Type:_ `boolean`
    Displays the parameter in the UI.
    _Example:_ `true`

  - **description**
    _Type:_ `string`
    Description of the parameter, shown on hover.
    _Example:_ `"The start date for the data"`

  - **roles**
    _Type:_ `array`
    Only used on the Multi-File Viewer Widget - Specifies which parameter is used to select the files.
    _Example:_ `["fileSelector"]`

  - **multiSelect**
    _Type:_ `boolean`
    Allows multiple values to be selected from your parameter options.
    _Example:_ `true`

  - **style**
    _Type:_ `object`
    Styling options for the parameter. Only popupWidth is currently supported minimum value is 200px max value is 1000px.
    _Example:_ `{"popupWidth": 450}`

  - **options**
    _Type:_ list of objects, each containing the following keys:

    - **label**
      _Type:_ `string`
      The label for a dropdown option.
      _Example:_ `"Option 1"`

    - **value**
      _Type:_ `string`, `number`, `boolean`
      The value for a dropdown option.
      _Example:_ `"option1"`

    - **extraInfo**
      _Type:_ `object`
      Additional information to display for the dropdown option.
      _Example:_ `{"description": "Technology Company", "rightOfDescription": "NASDAQ"}`

      Contains the following keys:

      - **description**
        _Type:_ `string`
        Additional descriptive text shown below the label.
        _Example:_ `"Technology Company"`

      - **rightOfDescription**
        _Type:_ `string`
        Text shown to the right of the description.
        _Example:_ `"NASDAQ"`

- **source**
  _Type:_ array of strings
  Specifies the data source(s) for the widget.
  _Example:_ `["API", "Database"]`

- **mcp_tool**
  _Type:_ object
  Configuration for matching the widget to an MCP (Model Context Protocol) tool. When an MCP tool is invoked, OpenBB Workspace can automatically detect if there's a matching widget configured and provide a citation.
  Contains the following keys:

  - **mcp_server**
    _Type:_ `string` (required)
    The name of the MCP server that must match exactly with the connected MCP server name.
    _Example:_ `"Financial Data"`

  - **tool_id**
    _Type:_ `string` (required)
    The ID of the MCP tool that must match exactly with the tool name in the MCP server.
    _Example:_ `"get_company_revenue_data"`

- **refetchInterval**
  _Type:_ `number` or `false`
  Time in milliseconds before the widget's data will refresh if on the page.  Minimum value is `1000`.
  _Default:_ `900000` (15m)

- **staleTime**
  _Type:_ `number`
  Time in milliseconds before the widget's data is considered stale and will refresh on the next visit to the dashboard.
  _Default:_ `300000` (5m)

## Example widgets.json {#example-widgets-json}

Below is an example `widgets.json` with a single widget defined. This widget will default to a column chart but have the ability to switch between a table and chart view.  The widget will have a start date parameter, a ticker parameter, and a colors parameter, all of which will be able to be selected on the widget in the application.

```json
{
    "custom_widget": {
        "name": "Custom Widget Example",
        "description": "A widget to demonstrate custom configuration",
        "endpoint": "custom-endpoint",
        "runButton": false,
        "data": {
            "dataKey": "customDataKey",
            "table": {
                "enableCharts": true,
                "showAll": true,
                "chartView": {
                    "enabled": true,
                    "chartType": "column",
                    "cellRangeCols" : {
                        "line": ["ticker", "weight"]
                    }
                },
                "columnsDefs": [
                    {
                        "field": "column1",
                        "headerName": "Column 1",
                        "chartDataType": "category",
                        "cellDataType": "text",
                        "formatterFn": "none",
                        "renderFn": "titleCase",
                        "width": 100,
                        "maxWidth": 200,
                        "minWidth": 50,
                        "hide": false,
                        "pinned": "left"
                    },
                    {
                        "field": "column2",
                        "headerName": "Column 2",
                        "chartDataType": "series",
                        "cellDataType": "number",
                                            "formatterFn": "int",
                    "renderFn": "greenRed",
                    "width": 150
                },
                {
                    "field": "price_trend",
                    "headerName": "Price Trend",
                    "width": 200,
                    "sparkline": {
                        "type": "line",
                        "options": {
                            "stroke": "#3366cc",
                            "strokeWidth": 2,
                            "markers": {
                                "enabled": true,
                                "size": 3
                            },
                            "pointsOfInterest": {
                                "maximum": {
                                    "fill": "#22c55e",
                                    "stroke": "#16a34a",
                                    "size": 5
                                },
                                "minimum": {
                                    "fill": "#ef4444",
                                    "stroke": "#dc2626",
                                    "size": 5
                                }
                            }
                        }
                    }
                }
                ]
            }
        },
        "params": [
            {
                "type": "date",
                "paramName": "startDate",
                "value": "2024-01-01",
                "label": "Start Date",
                "show": true,
                "description": "The start date for the data",
            },
            {
                "type": "text",
                "paramName": "ticker",
                "value": "AAPL",
                "label": "Ticker",
                "show": true,
                "description": "Stock ticker symbol",
            },
            {
                "type": "text",
                "paramName": "colors",
                "value": "red",
                "label": "Colors",
                "show": true,
                "description": "Stock ticker symbol",
                "multiSelect": true,
                "options": [
                  { "label": "Red", "value": "red" },
                  { "label": "Green", "value": "green" },
                  { "label": "Blue", "value": "blue" }
                ],
            }
        ],
        "source": [
            "My First API"
        ],
        "mcp_tool": {
            "mcp_server": "Financial Data",
            "tool_id": "get_company_revenue_data"
        },
        "refetchInterval" : 900000,
        "staleTime": 300000
    }
}

```

## Special Properties

### Date Modifier

This is used to display a dynamic date.

The reference is `$currentDate` and if a user wants to add or subtract they need to append to the variable:

- h, for hour
- d, for day
- w, for week
- M, for month
- y, for year

For instance, `$currentDate-1w` stands for 1 week ago.

If you don't want to set a date you can omit the value parameter or pass ```null```.

#### Examples

```json
[
  {
    "paramName": "start_date",
    "value": "$currentDate-2y",
    "label": "Start Date",
    "type": "date",
    "description": "Current Date for the stock price"
  },
  {
    "paramName": "end_date",
    "value": "$currentDate+1d",
    "label": "End Date",
    "type": "date",
    "description": "End Date for the stock price"
  },
    {
    "paramName": "end_date",
    "value": null,
    "label": "End Date",
    "type": "date",
    "description": "End Date for the stock price"
  },
  {
    "paramName": "interval",
    "value": "1d",
    "label": "Interval",
    "options": [
      { "label": "Daily", "value": "1d" },
      { "label": "Weekly", "value": "1w" },
      { "label": "Monthly", "value": "1m" }
    ],
    "type": "text",
    "description": "Select the interval"
  }
]
```

### ChartView chart types

**`chartType`**: The type of chart to display by default. These charts are provided using the AgGrid library. Custom charts can also be created using Plotly. For examples, refer to the [GitHub repository](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main).

**Allowed values:** column, groupedColumn, stackedColumn, normalizedColumn, bar, groupedBar, stackedBar, normalizedBar, line, scatter, bubble, pie, donut, doughnut, area, stackedArea, normalizedArea, histogram, radarLine, radarArea, nightingale, radialColumn, radialBar, sunburst, rangeBar, rangeArea, boxPlot, treemap, heatmap, waterfall

### formatterFn

`formatterFn` (optional): Specifies the function used to format the data in the table. The following values are allowed:

- `int`: Formats the number as an integer.
- `none`: Does not format the number.
- `percent`: Adds `%` to the number.
- `normalized`: Multiplies the number by 100.
- `normalizedPercent`: Multiplies the number by 100 and adds `%` (e.g., `0.5` becomes `50 %`).
- `dateToYear`: Converts a date to just the year.


---

---
title: OpenBB AI SDK
sidebar_position: 7
description: Build custom agents for OpenBB Workspace using the OpenBB AI SDK helpers and models
keywords:
- OpenBB AI SDK
- custom agents
- SSE
- QueryRequest
- widgets
- citations
- charts
- tables
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OpenBB AI SDK | OpenBB Workspace Docs" />

The OpenBB AI SDK simplifies building custom agents for OpenBB Workspace by providing type-safe models and helper functions that handle schema validation for streaming Server-Sent Events (SSE). Instead of manually crafting SSE messages and managing event types, you can use simple Python functions prepare events that will stream text, show reasoning steps, fetch widget data, and create visualizations.

The SDK handles all the SSE formatting and data serialization for you.

Install the package in your agent backend:

```bash
pip install openbb-ai
```

The code is open source and is [available in this repository](https://github.com/OpenBB-finance/openbb-ai).

## Request Handling

The SDK provides `QueryRequest` to access everything your agent needs in a single, type-safe model:

```python
from openbb_ai.models import QueryRequest

async def query(request: QueryRequest):
    # Access chat history
    messages = request.messages

    # Access widgets (primary, secondary, extra)
    widgets = request.widgets

    # Use workspace context
    timezone = request.timezone
    workspace_state = request.workspace_state
```

**Key fields in QueryRequest:**

- `messages` - chat conversation message history
- `widgets` - all widgets data
  - `primary` - widgets added as explicit context
  - `secondary` - widgets in the current dashboard
  - `extra` - artifacts and files in the chat
- `urls` - URL pages shared in chat
- `timezone` - timezone identified by the user's browser
- `tools` - available MCP tools
- `workspace_options` - features enabled in the Workspace
- `workspace_state` - dashboard state and context
  - `action_history` - user actions history
  - `agents` - available agents
  - `current_dashboard_uuid` - dashboard ID
  - `current_dashboard_info` - dashboard metadata
  - `current_page_context` - current page context

We recommend making backends stateless and not cache server state between calls.

## Streaming Text

The SDK simplifies streaming responses by handling SSE formatting automatically. You can yield message chunks like this:

```python
from openbb_ai import message_chunk

# Yield message chunks for the response stream
for chunk in llm_response:
    yield message_chunk(chunk).model_dump()
```

**Related models:**

- `MessageChunkSSE` - For streaming text/markdown tokens.
- `MessageArtifactSSE` - For streaming larger content blocks like tables or charts.

## Reasoning Steps

Show users what your agent is thinking and doing with reasoning steps. The SDK handles the SSE event formatting:

```python
from openbb_ai import reasoning_step

# Show progress
yield reasoning_step(event_type="INFO", message="Analyzing market data").model_dump()

# Include details
yield reasoning_step(
    event_type="SUCCESS",
    message="Data retrieved",
    details={"records": 1000, "timeframe": "1Y"}
).model_dump()
```

**Related models:**

- `StatusUpdateSSE` - Formats reasoning steps and status updates
  - Event types: `INFO`, `SUCCESS`, `WARNING`, `ERROR`
  - Optional details dictionary for key-value pairs

## Widget Data Access

The SDK simplifies fetching data from dashboard widgets. Widget data is retrieved by yielding a special event that triggers a function call on the Workspace (client) side. Instead of manually creating these events, use the helper functions:

```python
from openbb_ai import get_widget_data
from openbb_ai.models import WidgetRequest, Widget

# Request data from multiple widgets
widget_requests = [
    WidgetRequest(
        widget=widget,
        input_arguments={p.name: p.current_value for p in widget.params}
    )
]

# SDK handles the SSE formatting
yield get_widget_data(widget_requests).model_dump()
```

Important: Once this event is sent, the execution loop of the agent should break and wait for the Workspace to call the `/query` endpoint again with the widget data added to context.

**Related models:**

- `Widget` - Dashboard widget with metadata and parameters
  - Contains widget ID, name, type
  - Includes parameter definitions
- `WidgetParam` - Individual parameter configuration
  - `name` - parameter identifier
  - `type` - data type
  - `current_value` - current value
- `WidgetCollection` - Container for widget groups
  - `primary` - user-selected widgets
  - `secondary` - dashboard widgets
  - `extra` - artifacts and files
- `WidgetRequest` - Data request specification
- `FunctionCallSSE` - The SSE that triggers widget data retrieval

**Widget features to declare in `/agents.json`:**

- `widget-dashboard-select` - access user-selected widgets. When true, the widgets explicitly added to context by the user appear in `request.widgets.primary`.
- `widget-dashboard-search` - access dashboard widgets

## Parsing Widget Data

When widgets return data, it comes in various formats that need to be parsed appropriately. The SDK provides data format models to identify and handle each type:

```python
from openbb_ai.models import (
    PdfDataFormat,
    ImageDataFormat,
    SpreadsheetDataFormat,
    RawObjectDataFormat,
    SingleDataContent,
    SingleFileReference,
    DataContent,
    DataFileReferences
)

async def handle_widget_data(data: list[DataContent | DataFileReferences]) -> str:
    result_str = ""
    for result in data:
        for item in result.items:
            if isinstance(item.data_format, PdfDataFormat):
                # Parse PDF content
                if isinstance(item, SingleDataContent):
                    # Base64 encoded PDF
                    content = base64.b64decode(item.content)
                    # Extract text using pdfplumber or similar
                elif isinstance(item, SingleFileReference):
                    # PDF from URL
                    content = await download_file(item.url)
                    # Process PDF content

            elif isinstance(item.data_format, SpreadsheetDataFormat):
                # Parse Excel/CSV data
                # Convert to dataframe or table structure

            elif isinstance(item.data_format, ImageDataFormat):
                # Handle image data
                # May contain charts, screenshots, etc.

            else:
                # RawObjectDataFormat - JSON/dict data
                result_str += str(item.content)

    return result_str
```

**Data format models:**

- `PdfDataFormat` - Identifies PDF documents from widgets
  - Contains filename and metadata
  - Data comes as base64 or URL reference
  - Use libraries like `pdfplumber` to extract text and tables

- `SpreadsheetDataFormat` - Identifies Excel/CSV data
  - Tabular data from financial widgets
  - Parse with `pandas` or similar libraries

- `ImageDataFormat` - Identifies image content
  - Charts, graphs, screenshots from widgets
  - May require OCR or image analysis

- `RawObjectDataFormat` - Default JSON/dictionary format
  - Structured data from API responses
  - Direct access to nested fields

**Data delivery models:**

- `SingleDataContent` - Data embedded as base64
- `SingleFileReference` - Data available via URL
- `DataContent` - Container for multiple data items
- `DataFileReferences` - References to external files

## Data Attribution & Citations

The SDK makes it easy to cite your sources, ensuring transparency about where data comes from:

```python
from openbb_ai import cite, citations

# Create citations for widgets used
citation = cite(
    widget=price_widget,
    input_arguments={"symbol": "AAPL"},
    extra_details={"timeframe": "1D"}
)

# Send all citations at once
yield citations([citation]).model_dump()
```

**Related models:**

- `Citation` - Links outputs to data sources
  - `widget` - source widget reference
  - `input_arguments` - parameters used
  - `extra_details` - additional metadata
- `SourceInfo` - Provides detailed source attribution
- `CitationHighlightBoundingBox` - Visual highlighting for line-level citations in PDF documents

## Visualizations

The SDK abstracts the complexity of creating interactive charts and tables. Simply provide your data and configuration:

```python
from openbb_ai import table, chart

# Create a data table
yield table(
    data=[{"symbol": "AAPL", "price": 150.25, "change": 2.5}],
    name="Stock Prices",
    description="Current market prices"
).model_dump()

# Create interactive charts
yield chart(
    type="line",
    data=price_history,
    x_key="date",
    y_keys=["price"],
    name="Price History",
    description="Stock price over time"
).model_dump()
```

**Supported chart types and models:**

- `LineChartParameters` - Time series and trends
- `BarChartParameters` - Comparisons and distributions
- `ScatterChartParameters` - Correlations and relationships
- `PieChartParameters` - Proportions and percentages
- `DonutChartParameters` - Hierarchical proportions


---

---
title: Categories and Subcategories
sidebar_position: 16
description: Learn how to organize widgets using categories and subcategories in OpenBB Workspace.
keywords:
- category
- subcategory
- organization
- widgets
- structure
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Categories and Subcategories | OpenBB Workspace Docs" />

The category and subcategory specify the category and subcategory of the widget in the OpenBB Workspace. This is important to organize the widgets in the search for OpenBB Workspace and also for AI agents to find the best widgets to utilize for a given task.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Category and Subcategory Example" src="https://openbb-cms.directus.app/assets/bdedbc4e-64ac-44b4-a176-8f2ca31b99cf.png" />

```python
@register_widget({
    "name": "Markdown Widget with Category and Subcategory",
    "description": "A markdown widget with category and subcategory",
    "type": "markdown",
    "category": "Widgets",
    "subcategory": "Markdown Widgets",
    "endpoint": "markdown_widget_with_category_and_subcategory",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget_with_category_and_subcategory")
def markdown_widget_with_category_and_subcategory():
    """Returns a markdown widget with category and subcategory"""
    return f"# Markdown Widget with Category and Subcategory"
``` 

---

---
title: Error Handling
sidebar_position: 17
description: Learn how to handle errors in your widgets in OpenBB Workspace.
keywords:
- error handling
- HTTPException
- error management
- widgets
- status codes
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Error Handling | OpenBB Workspace Docs" />

This is a simple widget that demonstrates how to handle errors in your widgets.

We display the error detail message in the markdown widget that is returned from the endpoint.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Error Handling Example" src="https://openbb-cms.directus.app/assets/c8671675-d4d0-4b3d-ada1-d4eae95ca859.png" />

```python
@register_widget({
    "name": "Markdown Widget with Error Handling",
    "description": "A markdown widget with error handling",
    "type": "markdown",
    "endpoint": "markdown_widget_with_error_handling",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget_with_error_handling")
def markdown_widget_with_error_handling():
    """Returns a markdown widget with error handling"""
    raise HTTPException(
        status_code=500,
        detail="Error that just occurred"
    )
``` 

---

---
title: Grid Size
sidebar_position: 15
description: Learn about the grid-based layout system for widgets in OpenBB Workspace, including width and height specifications.
keywords:
- grid
- layout
- width
- height
- widgets
- gridData
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Grid Size | OpenBB Workspace Docs" />

Widgets use a grid-based layout system where you can specify their width and height in the `gridData` object. Here's a simple example:

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Error Handling Example" src="https://openbb-cms.directus.app/assets/efd6fb45-063a-4aa7-ae42-64b440bc8682.png" />

```python
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

The grid system works as follows:

**Width (w)**: Horizontal span (10-40 units)

- 12 units is a good default for most widgets
- Use 40 units for full-width widgets

**Height (h)**: Vertical span (4-100 units)

- 4-8 units for simple widgets
- 8-20 units for standard widgets
- Larger values for detailed charts or tables

### Example

This is the code utilized to add the widgets in the image above.

```python
@register_widget({
    "name": "Markdown Widget w-12 x h-20",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget2",
    "gridData": {"w": 12, "h": 20},
})
@app.get("/markdown_widget2")
def markdown_widget2():
    """Returns a markdown widget"""
    return "# Markdown Widget w-12 x h-20"

@register_widget({
    "name": "Markdown Widget w-40 x h-4",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget3",
    "gridData": {"w": 40, "h": 4},
})
@app.get("/markdown_widget3")
def markdown_widget3():
    """Returns a markdown widget"""
    return "# Markdown Widget w-40 x h-4"

@register_widget({
    "name": "Markdown Widget w-14 x h-12",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget4",
    "gridData": {"w": 14, "h": 12},
})
@app.get("/markdown_widget4")
def markdown_widget4():
    """Returns a markdown widget"""
    return "# Markdown Widget w-14 x h-12"

@register_widget({
    "name": "Markdown Widget w-28 x h-8",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget5",
    "gridData": {"w": 28, "h": 8},
})
@app.get("/markdown_widget5")
def markdown_widget5():
    """Returns a markdown widget"""
    return "# Markdown Widget w-28 x h-8"

@register_widget({
    "name": "Markdown Widget w-14 x h-6",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget6",
    "gridData": {"w": 14, "h": 6},
})
@app.get("/markdown_widget6")
def markdown_widget6():
    """Returns a markdown widget"""
    return "# Markdown Widget w-14 x h-6"
```

---

---
title: Matching widget to MCP tool
sidebar_position: 22
description: Learn how you can make it so an MCP server and tool are associated with a specific widget
keywords:
- MCP tool
- matching widget
- MCP server
- widgets.json
- citations
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Matching widget to MCP tool | OpenBB Workspace Docs" />

When an MCP (Model Context Protocol) tool is invoked, OpenBB Workspace can automatically detect if there's a matching widget configured and provide a matching citation. This is achieved through configuration in your `widgets.json` file.

## How It Works

OpenBB Workspace checks if a widget has been configured with matching MCP tool metadata. When a match is found:

1. The system shows a notification that a matching widget was found
2. A citation is automatically generated and attached to the MCP tool response
3. The citation includes widget details like name, description, and input parameters

## Configuration

:::important
`mcp_server` and `tool_id` provided should match 1:1 the ones that are connected to OpenBB Copilot.
:::

To enable widget matching for MCP tools, add an `mcp_tool` property, like:

```json
"mcp_tool": {
  "mcp_server": "server_name",
  "tool_id": "tool_name"
}
```

The widget configuration in `widgets.json` should be like:

```json
{
  "widgetId": "your_widget_id",
  "name": "Your Widget Name",
  "description": "Widget description",
  ...
  "mcp_tool": {
    "mcp_server": "server_name",
    "tool_id": "tool_name"
  }
}
```

## Example

We will utilize this [repository example](https://github.com/OpenBB-finance/backends-for-openbb/tree/main/widget-examples/matching-widget-mcp-tool) as a way to demonstrate the flow.

### 1. Connect MCP Server

First you want to connect the MCP Server to identify the server name and tool that you will need to reference in your `widgets.json` configuration.

<img className="pro-border-gradient" width="800" alt="MCP Server connection dialog showing 'Financial Data' server name" src="https://openbb-cms.directus.app/assets/6d66dcf3-98c0-4150-aace-035a063df35a.png" />

In the case above, note that the name of MCP Server is "Financial Data" - this will be the value you need for the `mcp_server` field in your `widgets.json`.

<img className="pro-border-gradient" width="800" alt="MCP tool configuration showing 'get_company_revenue_data' tool name" src="https://openbb-cms.directus.app/assets/643af141-6b8c-4828-b7dc-2242560d71f8.png" />

Similarly, the MCP tool is "get_company_revenue_data" - this will be the value you need for the `tool_id` field in your `widgets.json`.

### 2. Configure OpenBB widget with matching MCP

The important is for the widget configuration to include `mcp_tool` with the **EXACT** same names as the ones from your MCP Server:

<img className="pro-border-gradient" width="800" alt="Widget configuration showing mcp_tool property with server and tool ID" src="https://openbb-cms.directus.app/assets/1603ad32-6bd2-43bc-a4cc-553cb4163c34.png" />

Notice how the `mcp_server` value "Financial Data" and `tool_id` value "get_company_revenue_data" match exactly with the MCP server configuration from step 1.

The name and URL of the backend can be ANYTHING.

<img className="pro-border-gradient" width="800" alt="OpenBB backend connection interface showing name and URL fields" src="https://openbb-cms.directus.app/assets/77a2c0d8-3a9b-47a7-933e-85e7131ef954.png" />

### 3. Matching widget citation

This is when the magic happens. If the user has that MCP tool enabled, and asks something like:

> "Utilize financial data MCP tool and get company revenue data for AAPL"

Then when the MCP tool is utilized, the user will see a toast like the following:

<img className="pro-border-gradient" width="800" alt="Toast notification showing 'Matching widget found' message" src="https://openbb-cms.directus.app/assets/655482de-3d2b-426c-8315-dbb579c78f16.png" />

This indicates that a matching widget was found.

<img className="pro-border-gradient" width="800" alt="Chat response showing matching widget citation with asterisk indicator" src="https://openbb-cms.directus.app/assets/d2c50edb-43e2-4771-9125-b31117501a61.png" />

The user will be able to see that this is a matching widget, by the property of having a `*` at the end.

When hovering on top of that widget, the user will be able to add it to the dashboard to the same parameters as the ones that were utilized by the copilot.

<img className="pro-border-gradient" width="800" alt="Widget hover tooltip showing option to add to dashboard" src="https://openbb-cms.directus.app/assets/a719abc4-9b2f-41c7-b1a8-dd84fc707b77.png" />

The advantage now is that the user can interact with the parameters, charting and all other OpenBB widgets properties.

<img className="pro-border-gradient" width="800" alt="Interactive widget dashboard showing parameters, charting, and OpenBB properties" src="https://openbb-cms.directus.app/assets/6f0df91c-195f-48c4-9fbe-13ed589245a9.png" />


---

---
title: Refetch Interval
sidebar_position: 20
description: Learn about configuring refetch intervals for widgets in OpenBB Workspace.
keywords:
- refetch interval
- auto refresh
- data updates
- refresh rate
- widget updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Refetch Interval | OpenBB Workspace Docs" />

The refetch interval is the interval at which the widget will be refreshed. Use lower values for real-time data (e.g., 60000 for 1-minute updates). Higher values are recommended for static or slowly changing data.

- Default: 900000 (15 minutes) (minimum 1000)
- Set to `false` to disable automatic refreshing
- Use lower values for real-time data (e.g., 60000 for 1-minute updates)
- Higher values recommended for static or slowly changing data

Note that when interacting with a particular widget this will trigger a refresh.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Short Refetch Interval Example" src="https://openbb-cms.directus.app/assets/4b016db5-5265-4e3b-84f9-506aa4fd9c42.png" />

```python
@register_widget({
    "name": "Markdown Widget with Short Refetch Interval",
    "description": "A markdown widget with a short refetch interval",
    "type": "markdown",
    "endpoint": "markdown_widget_with_short_refetch_interval",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 1000
})
@app.get("/markdown_widget_with_short_refetch_interval")
def markdown_widget_with_short_refetch_interval():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

## Refetch Interval with Stale Time


The refetch interval is set to 10000ms (10 seconds) and the stale time is set to 5000ms (5 seconds). Data older than stale time will make the refresh button in the widget become orange to indicate that the data is stale, and once it reaches the refetch interval, the widget will be refreshed and the indicator will turn green again.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Refetch Interval and Stale Time Example" src="https://openbb-cms.directus.app/assets/9313f7e3-0ab6-42ae-877d-8868c84d044b.png" />

```python
@register_widget({
    "name": "Markdown Widget with Refetch Interval and Shorter Stale Time",
    "description": "A markdown widget with a short refetch interval and a shorter stale time",
    "type": "markdown",
    "endpoint": "markdown_widget_with_refetch_interval_and_shorter_stale_time",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 10000,
    "staleTime": 5000
})
@app.get("/markdown_widget_with_refetch_interval_and_shorter_stale_time")
def markdown_widget_with_refetch_interval_and_shorter_stale_time():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

## Refetch interval with Run Button


The refresh interval is set to 10000ms (10 seconds) but the run button is enabled, which means that the user can refresh the widget manually.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Short Refetch Interval and Run Button Example" src="https://openbb-cms.directus.app/assets/24d777ae-d455-412d-9832-255e28eea11e.png" />

```python
@register_widget({
    "name": "Markdown Widget with Short Refetch Interval and a Run Button",
    "description": "A markdown widget with a short refetch interval and a run button",
    "type": "markdown",
    "endpoint": "markdown_widget_with_short_refetch_interval_and_run_button",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 10000,
    "runButton": True
})
@app.get("/markdown_widget_with_short_refetch_interval_and_run_button")
def markdown_widget_with_short_refetch_interval_and_run_button():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
```

---

---
title: Render Functions
sidebar_position: 21
description: Learn how to configure and use custom render functions in OpenBB Workspace to customize data display and interactions.
keywords:
- custom render functions
- OpenBB API
- widget configuration
- data visualization
- interactive widgets
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Render Functions | OpenBB Workspace Docs" />

In the `widgets.json` configuration, you can specify render functions to customize how the data is displayed in the widget - These functions are only compatible with widgets that use a `columnsDefs`.

### Available Render Functions

| Function | Description |
|----------|-------------|
| `greenRed` | Applies a green or red color based on conditions |
| `titleCase` | Converts text to title case |
| `hoverCard` | Displays additional information when hovering over a cell |
| `cellOnClick` | Triggers an action when a cell is clicked |
| `columnColor` | Changes the color of a column based on specified rules |
| `showCellChange` | Highlights cells when their values change via WebSocket updates. Only used with the [Live Grid Widget](../widget-types/live-grid.md) |

### Render Function Parameters

| Parameter | Type | Description |
|-----------|------|-------------|
| **actionType** | `string` | Specifies the action type for the render function (`"openUrl"`, `"groupBy"`, `"sendToAgent"`) |
| **colorValueKey** | `string` | Specifies which field to use for determining the color when showing cell changes |
| **hoverCardData** | `array of strings` | Specifies columns to show in the hover card |
| **colorRules** | `array of objects` | An array of rules for conditional coloring |
| **sendToAgent** | `object` | Configuration for sending data to an AI agent |

### Send to Agent Parameters

| Parameter | Type | Description |
|-----------|------|-------------|
| **markdown** | `string` | Markdown content to send to the agent, supports template variables from row data |
| **agentId** | `string` | (Optional) Specific agent ID to send the message to |

### Color Rules Parameters

| Parameter | Type | Description | Options |
|-----------|------|-------------|---------|
| **condition** | `string` | The condition for applying the color | `"eq"`, `"ne"`, `"gt"`, `"lt"`, `"gte"`, `"lte"`, `"between"` |
| **value** | `number` | The value for the condition | - |
| **range** | `object` | An object specifying `min` and `max` values for the between condition | `{min: number, max: number}` |
| **color** | `string` | The color to apply | Hex code or `"green"`, `"red"`, `"blue"` |
| **fill** | `boolean` | Indicates if the color should fill the cell | `true`/`false` |

## Example Configurations

### Column Color

To use the column color render function, you need to add it to the `columnsDefs` array in your `widgets.json` file for the column you want to apply it to.

The below example would apply a green color to the cell if the value is between 50 and 90, a red color if the value is less than 50, and a blue color if the value is greater than 90.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="color example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/color.png" />
</div>

```json
{
    ...
    "columnsDefs": [
        {
            "field": "Analyst",
            "headerName": "Analyst",
            "renderFn": "columnColor",
            "renderFnParams": {
                "colorRules": [
                    {
                        "condition": "between",
                        "range": {
                            "min": 50,
                            "max": 90
                        },
                        "color": "blue",
                        "fill": true
                    },
                    {
                        "condition": "lt",
                        "value": 50,
                        "color": "red",
                        "fill": true
                    },
                    {
                        "condition": "gt",
                        "value": 90,
                        "color": "green",
                        "fill": true
                    }
                ]
            }
        }
    ]
}
```

### Multiple Render Functions and Color Rules

If you want to use multiple render functions, you can pass an array of render functions to the `renderFn` parameter. Below is an example of a column that uses both the `cellOnClick` and `columnColor` render functions. We also specify the `colorValueKey` so that the `columnColor` render function knows which field to use for determining the color. In this case we want to color the symbol cell based on the `Analyst` field.

```json
{
    ...
      "columnsDefs": [
          {
            "field": "Symbol",
            "headerName": "Symbol",
            "renderFn": [
              "cellOnClick",
              "columnColor"
            ],
            "renderFnParams": {
              "actionType": "groupBy",
              "groupByParamName": "symbol",
              "colorValueKey": "Analyst",
              "colorRules": [
                {
                  "condition": "eq",
                  "value": "Sarah Johnson",
                  "color": "blue",
                  "fill": true
                }
              ]
            }
        },
      ] 
}
```

### Hover Card

To use the hover card render function, you need to add it to the `columnsDefs` array in your `widgets.json` file for the column you want to apply it to.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="color example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/hover+data.png" />
</div>

```json
{
    ...
    "columnsDefs": [
          {
            "field": "analyst",
            "headerName": "Analyst",
            "renderFn": "hoverCard",
            "renderFnParams": {
              "hoverCard": {
                "cellField": "value",
                "title": "Analyst Details",
                "markdown": "### {value}\n- **Description:** {description}\n- **Additional Info:** {additionalInfo}"
              }
            }
          }
        ]
}
```

The hover card example would use the below data to display the hover card.

```json
[
  {
    "id": 1,
    "name": "Item 1",
    "analyst": {
      "value": "Cool Guy 1",
      "description": "This is a detailed description for Item 1, but it's not as long as the others",
      "additionalInfo": "Some additional information about Item 1"
    }
  },
  {
    "id": 2,
    "name": "Item 2",
    "analyst": {
      "value": "Cool Guy 2",
      "description": "This is a detailed description for Item 2, but it's a bit longer than the first one",
      "additionalInfo": "Some additional information about Item 2"
    }
  },
  {
    "id": 3,
    "name": "Item 3",
    "analyst": {
      "value": "Cool Guy 3",
      "description": "This is a detailed description for Item 3, but it's the longest one yet and it's still going",
      "additionalInfo": "Some additional information about Item 3"
    }
  }
]
```

#### Additional Notes for Hover Card

- You can pass a simple configuration to get a hover card with default settings, excluding the title and value.
- The `hoverCard` render function allows for markdown customization, providing flexibility in how information is displayed.

### Prefix and Suffix

The `prefix` and `suffix` parameters can also be used in the `columnsDefs` to add a prefix or suffix to the column values. [See the widgets-json-reference](../json-specs/widgets-json-reference) for more information.

### Send to Agent

The `sendToAgent` action type allows users to click on table cells to send contextual data directly to an AI agent for analysis. This is particularly useful for getting insights about specific data points or rows.

```json
{
    ...
    "columnsDefs": [
        {
            "field": "company",
            "headerName": "Company",
            "renderFn": "cellOnClick",
            "renderFnParams": {
                "actionType": "sendToAgent",
                "sendToAgent": {
                    "markdown": "Please analyze the company **{company}** with the following details:\n\n- **Revenue:** ${revenue}M\n- **Growth Rate:** {growth_rate}%\n- **Market Cap:** ${market_cap}B\n- **Sector:** {sector}\n\nProvide insights on the company's financial performance, growth prospects, and market position."
                }
            }
        },
        {
            "field": "revenue",
            "headerName": "Revenue (M)",
            "renderFn": "cellOnClick",
            "renderFnParams": {
                "actionType": "sendToAgent",
                "sendToAgent": {
                    "markdown": "Analyze the revenue figure of **${revenue}M** for {company}. How does this compare to industry standards in the {sector} sector?",
                    "agentId": "financial-analyst-agent"
                }
            }
        }
    ]
}
```

#### Template Variables

The `markdown` content in `sendToAgent` supports template variables using curly braces `{}`. You can reference any field from the row data:

- `{company}` - References the company field value
- `{revenue}` - References the revenue field value  
- `{growth_rate}` - References the growth_rate field value
- And so on for any field in your data


---

---
title: Run Button
sidebar_position: 18
description: Learn about the run button functionality in OpenBB Workspace widgets.
keywords:
- run button
- manual refresh
- widget control
- refresh
- manual execution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Run Button | OpenBB Workspace Docs" />

The run button allows you to run a widget by clicking it rather than having it run automatically when you change a parameter. It is located in the top right corner of the widget and replaces the refresh button. A Ctrl-click on the run button performs a hard refresh, while a regular click runs the new parameters.

Setting the refreshInterval will allow you to still refresh the widget automatically, but it is off by default when using the run button.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Run Button Example" src="https://openbb-cms.directus.app/assets/48d7d762-a39f-46f3-b205-2b1ffe13c3ef.png" />

```python
@register_widget({
    "name": "Markdown Widget with Run Button",
    "description": "A markdown widget with a run button",
    "type": "markdown",
    "endpoint": "markdown_widget_with_run_button",
    "gridData": {"w": 12, "h": 4},
    "runButton": True,
})
@app.get("/markdown_widget_with_run_button")
def markdown_widget_with_run_button():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

---

---
title: Stale Time
sidebar_position: 19
description: Learn about configuring stale time for widgets in OpenBB Workspace.
keywords:
- stale time
- data freshness
- refresh indicators
- data staleness
- widget updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Stale Time | OpenBB Workspace Docs" />

The stale time is the time after which the data will be considered stale. You will see a refresh button in the widget becoming orange to indicate that the data is stale.

- Default: 300000 (5 minutes)
- Data older than this value will trigger a refresh when the widget is viewed again
- Should typically be less than or equal to `refetchInterval`
- Set higher for data that updates infrequently

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Stale Time Example" src="https://openbb-cms.directus.app/assets/d601fda5-0ea3-40cc-8290-d0789ccb0e33.png" />

```python
@register_widget({
    "name": "Markdown Widget with Stale Time",
    "description": "A markdown widget with stale time",
    "type": "markdown",
    "endpoint": "markdown_widget_with_stale_time",
    "gridData": {"w": 12, "h": 4},
    "staleTime": 5000
})
@app.get("/markdown_widget_with_stale_time")
def markdown_widget_with_stale_time():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

---

---
title: Advanced Dropdown
sidebar_position: 28
description: Learn how to implement and use advanced dropdown parameters in OpenBB Workspace widgets, including dynamic options from endpoints and additional information display
keywords:
- advanced dropdown
- dynamic dropdown
- endpoint dropdown
- widget parameters
- enhanced selection
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Advanced Dropdown | OpenBB Workspace Docs" />

Sometimes you may want to pass a list from an endpoint rather then specify the options in the `widgets.json` file.

By using `type: "endpoint"`, you'll need to specify an `optionsEndpoint` that returns the available options.

Below is an example of an advanced dropdown parameter that includes additional information for each option.

<img className="pro-border-gradient" width="800" alt="Advanced Dropdown Parameter Example" src="https://openbb-cms.directus.app/assets/9ae41bfc-65ad-4578-aeeb-efca97112bfc.png" />

The dropdown options are fetched from an endpoint and can include extra details.

```python
@app.get("/advanced_dropdown_options")
def advanced_dropdown_options():
    """Returns a list of stocks with their details"""
    return [
        {
            "label": "Apple Inc.",
            "value": "AAPL", 
            "extraInfo": {
                "description": "Technology Company",
                "rightOfDescription": "NASDAQ"
            }
        },
        {
            "label": "Microsoft Corporation",
            "value": "MSFT",
            "extraInfo": {
                "description": "Software Company", 
                "rightOfDescription": "NASDAQ"
            }
        },
        {
            "label": "Google",
            "value": "GOOGL",
            "extraInfo": {
                "description": "Search Engine",
                "rightOfDescription": "NASDAQ"
            }
        }
    ]
```

Note how the `optionsEndpoint` is pointing to the endpoint `"/advanced_dropdown_options"`.

We also set the `style` parameter to `popupWidth` to `450` to set the width of the dropdown.

```python
@register_widget({
    "name": "Markdown Widget with Multi Select Advanced Dropdown",
    "description": "A markdown widget with a multi select advanced dropdown parameter",
    "endpoint": "markdown_widget_with_multi_select_advanced_dropdown",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "stock_picker",
            "description": "Select a stock to analyze",
            "value": "AAPL",
            "label": "Select Stock",
            "type": "endpoint",
            "multiSelect": True,
            "optionsEndpoint": "/advanced_dropdown_options",
            "style": {
                "popupWidth": 450
            }
        }
    ]
})
@app.get("/markdown_widget_with_multi_select_advanced_dropdown")
def markdown_widget_with_multi_select_advanced_dropdown(stock_picker: str):
    """Returns a markdown widget with multi select advanced dropdown parameter"""
    return f"""# Multi Select Advanced Dropdown
Selected stocks: {stock_picker}
""" 

---

---
title: Boolean Toggle
sidebar_position: 25
description: Learn how to implement and use boolean toggle parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- boolean toggle
- switch
- toggle
- widget parameters
- enable/disable
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Boolean Toggle | OpenBB Workspace Docs" />

A widget that includes a boolean toggle parameter allowing users to enable or disable features. The toggle state is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Boolean Toggle Parameter Example" src="https://openbb-cms.directus.app/assets/c4cc2d7f-c8f0-417c-a7ac-3842150e1aa1.png" />

```python
@register_widget({
    "name": "Markdown Widget with Boolean Toggle",
    "description": "A markdown widget with a boolean parameter",
    "endpoint": "markdown_widget_with_boolean",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "condition",
            "description": "Enable or disable this feature",
            "label": "Toggle Option",
            "type": "boolean",
            "value": True,
        }
    ]
})
@app.get("/markdown_widget_with_boolean")
def markdown_widget_with_boolean(condition: bool):
    """Returns a markdown widget with boolean parameter"""
    return f"""# Boolean Toggle
Current state: {'Enabled' if condition else 'Disabled'}
""" 

---

---
title: Cell Click Grouping
sidebar_position: 31
description: Learn how to implement cell click grouping in OpenBB Workspace widgets, allowing users to click on cells in a table to update related widgets
keywords:
- cell click grouping
- table cell click
- interactive tables
- widget parameters
- cell interaction
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Cell Click Grouping | OpenBB Workspace Docs" />

A widget that demonstrates how to use cell clicks to trigger parameter updates across multiple widgets. This feature allows users to click on cells in a table to automatically update related widgets with the selected data.

<img className="pro-border-gradient" width="1000" alt="Cell Click Grouping Example" src="https://openbb-cms.directus.app/assets/9e3fe731-2a87-4c85-8650-0404c3c400b2.png" />

The implementation consists of three main components:

1. An endpoint that provides a list of available stock symbols that can be selected in the widgets.

```python
@app.get("/get_tickers_list")
def get_tickers_list():
    """Returns a list of available stock symbols"""
    return [
        {"label": "Apple Inc.", "value": "AAPL"},
        {"label": "Microsoft Corporation", "value": "MSFT"},
        {"label": "Google", "value": "GOOGL"},
        {"label": "Amazon", "value": "AMZN"},
        {"label": "Tesla", "value": "TSLA"}
    ]
```

2. A table widget that displays stock data and allows users to click on symbol cells to update related widgets. The key feature is the `cellOnClick` renderFn in the symbol column, which triggers the `groupBy` action when a cell is clicked.

```python
@register_widget({
    "name": "Table widget with grouping by cell click",
    "description": "A table widget that groups data when clicking on symbols. Click on a symbol to update all related widgets.",
    "type": "table",
    "endpoint": "table_widget_with_grouping_by_cell_click",
    "params": [
        {
            "paramName": "symbol",  # This parameter name is crucial - it's used for grouping
            "description": "Select stocks to display",
            "value": "AAPL",
            "label": "Symbol",
            "type": "endpoint",
            "optionsEndpoint": "/get_tickers_list",
            "multiSelect": False,
            "show": True
        }
    ],
    "data": {
        "table": {
            "showAll": True,
            "columnsDefs": [
                {
                    "field": "symbol",
                    "headerName": "Symbol",
                    "cellDataType": "text",
                    "width": 120,
                    "pinned": "left",
                    "renderFn": "cellOnClick",
                    "renderFnParams": {
                        "actionType": "groupBy",
                        "groupByParamName": "symbol"
                    }
                },
                {
                    "field": "price",
                    "headerName": "Price",
                    "cellDataType": "number",
                    "formatterFn": "none",
                    "width": 120
                },
                {
                    "field": "change",
                    "headerName": "Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120
                },
                {
                    "field": "volume",
                    "headerName": "Volume",
                    "cellDataType": "number",
                    "formatterFn": "int",
                    "width": 150
                }
            ]
        }
    },
    "gridData": {
        "w": 20,
        "h": 9
    }
})
```

3. A markdown widget that displays detailed information about the selected stock. This widget uses the same `symbol` parameter as the table widget, so it automatically updates when a symbol is clicked in the table.

```python
@register_widget({
    "name": "Widget managed by parameter from cell click on table widget",
    "description": "This widget demonstrates how to use the grouped symbol parameter from a table widget. When a symbol is clicked in the table, this widget will automatically update to show details for the selected symbol.",
    "type": "markdown",
    "endpoint": "widget_managed_by_parameter_from_cell_click_on_table_widget",
    "params": [
        {
            "paramName": "symbol",  # Must match the groupByParamName in the table widget
            "description": "The symbol to get details for",
            "value": "AAPL",
            "label": "Symbol",
            "type": "endpoint",
            "optionsEndpoint": "/get_tickers_list",
            "show": True
        }
    ],
    "gridData": {
        "w": 20,
        "h": 6
    }
})
```

This functionality is achieved through three key components:

1. Both widgets must share the same `paramName` (in this case "symbol") to enable parameter synchronization
2. The table widget's `cellOnClick` renderFn must be configured with `actionType: "groupBy"` and specify the `groupByParamName` as "symbol"
3. Both widgets must reference the same endpoint (`/get_tickers_list`) for their options data

The interaction flow works as follows:

1. When a user clicks a symbol cell in the table, the `cellOnClick` renderFn activates the `groupBy` action
2. The `groupBy` action then updates the shared `symbol` parameter value
3. Any widget that uses the `symbol` parameter will automatically refresh to display data for the newly selected symbol

This implementation creates an intuitive user experience where selecting a symbol in the table instantly updates all connected widgets with the corresponding stock information. 

---

---
title: Date Picker
sidebar_position: 23
description: Learn how to implement and use date picker parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- date picker
- date input
- calendar
- widget parameters
- date selection
- datetime
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Date Picker | OpenBB Workspace Docs" />

A widget that includes a date picker parameter allowing users to select a specific date. The selected date is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Date Picker Parameter Example" src="https://openbb-cms.directus.app/assets/9adb2a80-cca6-4efd-a106-f76d570f0a5c.png" />

```python
@register_widget({
    "name": "Markdown Widget with Date Picker",
    "description": "A markdown widget with a date picker parameter",
    "endpoint": "markdown_widget_with_date_picker",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "date_picker",
            "description": "Choose a date to display",
            "value": "$currentDate-1d",
            "label": "Select Date",
            "type": "date"
        }
    ]
})
@app.get("/markdown_widget_with_date_picker")
def markdown_widget_with_date_picker(
    date_picker: str = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
):
    """Returns a markdown widget with date picker parameter"""
    return f"""# Date Picker
Selected date: {date_picker}
"""
```

Note : We use the `$currentDate` variable to get the current date. More info here : [Date Modifier in widgets.json](../json-specs/widgets-json-reference#date-modifier)


---

---
title: Dependent Dropdown
sidebar_position: 29
description: Learn how to implement and use dependent dropdown parameters in OpenBB Workspace widgets, where options in one dropdown depend on the selection in another
keywords:
- dependent dropdown
- cascading dropdown
- linked dropdown
- widget parameters
- dynamic options
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dependent Dropdown | OpenBB Workspace Docs" />

A widget that demonstrates how to create dependent dropdowns where the options in one dropdown depend on the selection in another dropdown. This is useful when you want to filter options in a second dropdown based on the selection in the first dropdown.

<img className="pro-border-gradient" width="800" alt="Dependent Dropdown Parameters Example" src="https://openbb-cms.directus.app/assets/4900061b-078a-4294-8d76-a36f55bbad80.png" />

<img className="pro-border-gradient" width="800" alt="Dependent Dropdown Parameters Example 2" src="https://openbb-cms.directus.app/assets/2f16ae18-78c4-4657-b569-8faed443fce1.png" />

First, we create an endpoint that will provide the filtered list of documents based on the selected category. This endpoint takes a `category` parameter and returns only the documents that match that category.

```python
@app.get("/document_options")
def get_document_options(category: str = "all"):
    """Get filtered list of documents based on category"""
    SAMPLE_DOCUMENTS = [
        {
            "name": "Q1 Report",
            "category": "reports"
        },
        {
            "name": "Q2 Report",
            "category": "reports"
        },
        {
            "name": "Investor Presentation",
            "category": "presentations"
        },
        {
            "name": "Product Roadmap",
            "category": "presentations"
        }
    ]

    filtered_docs = (
        SAMPLE_DOCUMENTS if category == "all"
        else [doc for doc in SAMPLE_DOCUMENTS if doc["category"] == category]
    )
    
    return [
        {
            "label": doc["name"],
            "value": doc["name"]
        }
        for doc in filtered_docs
    ]
```

Next, we create the widget that uses these dependent dropdowns. The widget has two parameters:

1. A category dropdown that lets users select between "All", "Reports", or "Presentations"
2. A document dropdown that shows documents filtered based on the selected category

The key to making this work is the `optionsParams` field in the second parameter, which uses `$category` to reference the value from the first parameter. This creates the dependency between the two dropdowns. These parameters are passed to the endpoint as a query parameter.

```python
@register_widget({
    "name": "Dropdown Dependent Widget",
    "description": "A simple widget with a dropdown depending on another dropdown",
    "endpoint": "dropdown_dependent_widget",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "category",
            "description": "Category of documents to fetch",
            "value": "all",
            "label": "Category",
            "type": "text",
            "options": [
                {"label": "All", "value": "all"},
                {"label": "Reports", "value": "reports"},
                {"label": "Presentations", "value": "presentations"}
            ]
        },
        {
            "paramName": "document_type",
            "description": "Document to display",
            "label": "Select Document",
            "type": "endpoint",
            "optionsEndpoint": "/document_options",
            "optionsParams": {
                "category": "$category"
            }
        },
    ]
})
@app.get("/dropdown_dependent_widget")
def dropdown_dependent_widget(category: str = "all", document_type: str = "all"):
    """Returns a dropdown dependent widget"""
    return f"""# Dropdown Dependent Widget
- Selected category: **{category}**
- Selected document: **{document_type}**
"""
```

When a user selects a category in the first dropdown, the second dropdown will automatically update to show only the documents that belong to that category. For example:
- If "Reports" is selected, only "Q1 Report" and "Q2 Report" will appear in the second dropdown
- If "Presentations" is selected, only "Investor Presentation" and "Product Roadmap" will appear
- If "All" is selected, all documents will be shown 

---

---
title: Dropdown
sidebar_position: 27
description: Learn how to implement and use dropdown parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- dropdown
- select
- combobox
- widget parameters
- selection list
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dropdown | OpenBB Workspace Docs" />

A widget that includes a dropdown parameter allowing users to select from predefined options. The selected option is passed to the widget as a parameter.

Note that multiSelect can be turned on and off.

<img className="pro-border-gradient" width="800" alt="Dropdown Parameter Example" src="https://openbb-cms.directus.app/assets/d657c7d2-e096-42ea-9d9a-92a10093afd0.png" />

```python
@register_widget({
    "name": "Markdown Widget with Dropdown",
    "description": "A markdown widget with a dropdown parameter",
    "endpoint": "markdown_widget_with_dropdown",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "days_picker",
            "description": "Number of days to look back",
            "value": "1",
            "label": "Select Days",
            "type": "text",
            "multiSelect": True,
            "options": [
                {
                    "value": "1",
                    "label": "1"
                },
                {
                    "value": "5",
                    "label": "5"
                },
                {
                    "value": "10",
                    "label": "10"
                },
                {
                    "value": "20",
                    "label": "20"
                },
                {
                    "value": "30",
                    "label": "30"
                }
            ]
        }
    ]
})
@app.get("/markdown_widget_with_dropdown")
def markdown_widget_with_dropdown(days_picker: str):
    """Returns a markdown widget with dropdown parameter"""
    return f"""# Dropdown
Selected days: {days_picker}
""" 

---

---
title: Input Form
sidebar_position: 30
description: Input Form
keywords:
- input
- form
- configuration
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Input Form | OpenBB Workspace Docs" />


The form parameter type (`"type": "form"`) allows you to create complex input forms with a parameter. This is useful if you want to update some data that is tied to the table or chart and have it update when the form is submitted. Possible use cases are updating a database entry or sending data to an endpoint to be processed then a chart created.

Forms require a dedicated endpoint and are always sent with a POST request. This endpoint will be called when the form is submitted.

You can see a full example of this in the [Form Example](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/advanced_examples/form_parameter) section.

<img className="pro-border-gradient" width="500" alt="form-parameter" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/form-parameter.png" />

A form can include various input types:

- **Date**: Select a specific date for the data
- **Number**: Numeric input field
- **Dropdown**: Selection menu (can be populated dynamically from an API)
- **Text**: Text input field
- **Button**: Button to trigger the data submission

<details>
<summary mdxType="summary">Example form parameter configuration</summary>

```json
{
  "form_submit_widget": {
    "name": "Financial Entry Form",
    "description": "Example of a financial data entry form",
    "category": "forms",
    "searchCategory": "form",
    "endpoint": "all_forms",
    "type": "table",
    "gridData": {
      "w": 20,
      "h": 9
    },
    "params": [
      {
        "paramName": "form",
        "description": "Form example",
        "type": "form",
        "endpoint": "form_submit",
        "inputParams": [
          {
            "paramName": "client_first_name",
            "type": "text",
            "value": "",
            "label": "First Name",
            "description": "Client's first name"
          },
          {
            "paramName": "client_last_name",
            "type": "text",
            "value": "",
            "label": "Last Name",
            "description": "Client's last name"
          },
          {
            "paramName": "investment_types",
            "type": "text",
            "value": null,
            "label": "Investment Types",
            "description": "Selected investment vehicles",
            "multiSelect": true,
            "options": [
              {
                "label": "Stocks",
                "value": "stocks"
              },
              {
                "label": "Bonds",
                "value": "bonds"
              },
              {
                "label": "Mutual Funds",
                "value": "mutual_funds"
              },
              {
                "label": "ETFs",
                "value": "etfs"
              },
              {
                "label": "Real Estate",
                "value": "real_estate"
              },
              {
                "label": "Commodities",
                "value": "commodities"
              },
              {
                "label": "Cryptocurrency",
                "value": "cryptocurrency"
              },
              {
                "label": "Options",
                "value": "options"
              },
              {
                "label": "Futures",
                "value": "futures"
              },
              {
                "label": "Retirement Accounts",
                "value": "retirement_accounts"
              },
              {
                "label": "CDs",
                "value": "cds"
              }
            ]
          },
          {
            "paramName": "risk_profile",
            "type": "text",
            "value": "",
            "label": "Risk Profile",
            "description": "Client risk tolerance assessment"
          },
          {
            "paramName": "add_record",
            "type": "button",
            "value": true,
            "label": "Add Client",
            "description": "Add client record"
          },
          {
            "paramName": "update_record",
            "type": "button",
            "value": true,
            "label": "Update Client",
            "description": "Update client record"
          }
        ]
      }
    ]
  }
}
```

</details>

### Backend Implementation

For forms to work properly, you need to implement two endpoints in your backend:

1. **POST endpoint** to handle form submission (specified in the `endpoint` field of the form parameter)
2. **GET endpoint** to retrieve and display the updated data (specified in the widget's main `endpoint` field)

Below you can find a quick example of how to implement the endpoints and have a form that updates a table.

<details>
<summary mdxType="summary">Example backend implementation</summary>

```python
...
ALL_FORMS = []

# Submit form endpoint to handle the form submission
@app.post("/form_submit")
async def form_submit(params: dict) -> JSONResponse:
    global ALL_FORMS
    
    # Check if first name and last name are provided
    if not params.get("client_first_name") or not params.get("client_last_name"):
        # IMPORTANT: Even with a 400 status code, the error message is passed to the frontend
        # and can be displayed to the user in the OpenBB widget
        return JSONResponse(
            status_code=400,
            content={"error": "Client first name and last name are required"}
        )
    
    # Check if investment types and risk profile are provided
    if not params.get("investment_types") or not params.get("risk_profile"):
        return JSONResponse(
            status_code=400,
            content={"error": "Investment types and risk profile are required"}
        )

    # Check if add_record or update_record is provided
    add_record = params.pop("add_record", None)
    if add_record:
        ALL_FORMS.append(
            {k: ",".join(v) if isinstance(v, list) else v for k, v in params.items()}
        )
    update_record = params.pop("update_record", None)
    if update_record:
        for record in ALL_FORMS:
            if record["client_first_name"] == params.get("client_first_name") and record[
                "client_last_name"
            ] == params.get("client_last_name"):
                record.update(params)
    
    # IMPORTANT: The OpenBB Workspace only checks for a 200 status code from this endpoint
    # The actual content returned doesn't matter for the widget refresh mechanism
    # After a successful submission, Workspace will automatically refresh the widget
    # by calling the GET endpoint defined in the widget configuration
    return JSONResponse(content={"success": True})


# Get all forms
@app.get("/all_forms")
async def all_forms() -> list:
    print(ALL_FORMS)
    # IMPORTANT: This GET endpoint is called by the OpenBB widget after form submission
    # The widget refresh mechanism works by:
    # 1. User submits form (POST to /form_submit)
    # 2. If POST returns 200, widget automatically refreshes
    # 3. Widget refresh calls this GET endpoint to fetch updated data
    # 4. This function must return ALL data needed to display the updated widget
    return (
        ALL_FORMS
        if ALL_FORMS
        else [
            {"client_first_name": None, "client_last_name": None, "investment_types": None, "risk_profile": None}
        ]
    )
```

</details>


---

---
title: Number Input
sidebar_position: 26
description: Learn how to implement and use number input parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- number input
- numeric input
- number field
- widget parameters
- numerical entry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Number Input | OpenBB Workspace Docs" />

A widget that includes a number input parameter allowing users to enter numerical values. The entered number is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Number Input Parameter Example" src="https://openbb-cms.directus.app/assets/dc2395cf-a452-46a6-9ae4-e2be882a21c2.png" />

```python
@register_widget({
    "name": "Markdown Widget with Number Input",
    "description": "A markdown widget with a number input parameter",
    "endpoint": "markdown_widget_with_number_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "number_box",
            "description": "Enter a number",
            "value": 20,
            "label": "Enter Number",
            "type": "number"
        }
    ]
})
@app.get("/markdown_widget_with_number_input")
def markdown_widget_with_number_input(number_box: int):
    """Returns a markdown widget with number input parameter"""
    return f"""# Number Input
Entered number: {number_box}
""" 

---

---
title: Parameter Grouping
sidebar_position: 32
description: Learn how to implement parameter grouping in OpenBB Workspace widgets, allowing multiple widgets to share and respond to the same parameter input
keywords:
- parameter grouping
- shared parameters
- synchronized parameters
- widget parameters
- parameter synchronization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Parameter Grouping | OpenBB Workspace Docs" />

Parameter grouping allows multiple widgets to share and respond to the same parameter input. When widgets are grouped, you only need to select a value once to update all related widgets simultaneously. This is useful for dashboards where multiple widgets display different aspects of the same data source. If multiple widgets use the same `paramName` and `options` parameter configuration, they can be grouped together.

Below is an example of how to group parameters across multiple widgets, allowing them to share and synchronize parameter values.

<img className="pro-border-gradient" width="1000" alt="Parameter Grouping Example" src="https://openbb-cms.directus.app/assets/0cac96ae-6915-4183-b5db-a02e2be96fe0.png" />

The implementation consists of three main components that work together to create a cohesive user interface:

1. Provides a list of available car manufacturers that can be selected in the widgets.

```python
@app.get("/company_options")
def get_company_options():
    """Returns a list of available car manufacturers"""
    return [
        {"label": "Toyota Motor Corporation", "value": "TM"},
        {"label": "Volkswagen Group", "value": "VWAGY"},
        {"label": "General Motors", "value": "GM"},
        {"label": "Ford Motor Company", "value": "F"},
        {"label": "Tesla Inc.", "value": "TSLA"}
    ]
```

2. Displays performance metrics for the selected car manufacturer in a table format. This widget uses parameters (`company` and `year`) that are grouped with other widgets. As it is possible to see by the color box before the parameter and the same id. When a user selects a company or year, all widgets using these parameters will update automatically.

```python
@register_widget({
    "name": "Car Manufacturer Performance",
    "description": "Displays performance metrics for the selected car manufacturer",
    "type": "table",
    "endpoint": "company_performance",
    "gridData": {"w": 16, "h": 8},
    "params": [
        {
            "paramName": "company",  # Shared paramName with company_details widget
            "description": "Select a car manufacturer to view performance",
            "value": "TM",
            "label": "Manufacturer",
            "type": "endpoint",
            "optionsEndpoint": "/company_options"  # Shared endpoint with company_details widget
        },
        {
            "paramName": "year",  # Shared paramName with company_details widget
            "description": "Select model year to view performance",
            "value": "2024",
            "label": "Model Year",
            "type": "text",
            "options": [
                {"label": "2024", "value": "2024"},
                {"label": "2023", "value": "2023"},
                {"label": "2022", "value": "2022"}
            ]
        }
    ],
    "data": {
        "table": {
            "showAll": True,
            "columnsDefs": [
                {
                    "field": "metric",
                    "headerName": "Metric",
                    "cellDataType": "text",
                    "width": 150
                },
                {
                    "field": "value",
                    "headerName": "Value",
                    "cellDataType": "text",
                    "width": 150
                },
                {
                    "field": "change",
                    "headerName": "Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 150
                }
            ]
        }
    }
})
@app.get("/company_performance")
def get_company_performance(company: str, year: str = "2024"):
    """Returns car manufacturer performance metrics"""
    performance_data = {
        "TM": {
            "2024": [
                {"metric": "Global Sales", "value": "10.5M", "change": 5.2},
                {"metric": "EV Sales", "value": "1.2M", "change": 45.8},
                {"metric": "Operating Margin", "value": "8.5%", "change": 1.2},
                {"metric": "R&D Investment", "value": "$12.5B", "change": 15.3}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "9.98M", "change": 3.1},
                {"metric": "EV Sales", "value": "0.82M", "change": 35.2},
                {"metric": "Operating Margin", "value": "7.3%", "change": 0.8},
                {"metric": "R&D Investment", "value": "$10.8B", "change": 12.5}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "9.67M", "change": 1.2},
                {"metric": "EV Sales", "value": "0.61M", "change": 25.4},
                {"metric": "Operating Margin", "value": "6.5%", "change": -0.5},
                {"metric": "R&D Investment", "value": "$9.6B", "change": 8.7}
            ]
        },
        "VWAGY": {
            "2024": [
                {"metric": "Global Sales", "value": "9.2M", "change": 4.8},
                {"metric": "EV Sales", "value": "1.5M", "change": 52.3},
                {"metric": "Operating Margin", "value": "7.8%", "change": 1.5},
                {"metric": "R&D Investment", "value": "$15.2B", "change": 18.5}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "8.78M", "change": 3.2},
                {"metric": "EV Sales", "value": "0.98M", "change": 42.1},
                {"metric": "Operating Margin", "value": "6.3%", "change": 0.9},
                {"metric": "R&D Investment", "value": "$12.8B", "change": 15.2}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "8.5M", "change": 1.8},
                {"metric": "EV Sales", "value": "0.69M", "change": 32.5},
                {"metric": "Operating Margin", "value": "5.4%", "change": -0.7},
                {"metric": "R&D Investment", "value": "$11.1B", "change": 10.8}
            ]
        },
        "GM": {
            "2024": [
                {"metric": "Global Sales", "value": "6.8M", "change": 3.5},
                {"metric": "EV Sales", "value": "0.8M", "change": 48.2},
                {"metric": "Operating Margin", "value": "8.2%", "change": 1.8},
                {"metric": "R&D Investment", "value": "$9.5B", "change": 16.5}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "6.57M", "change": 2.1},
                {"metric": "EV Sales", "value": "0.54M", "change": 38.5},
                {"metric": "Operating Margin", "value": "6.4%", "change": 1.2},
                {"metric": "R&D Investment", "value": "$8.15B", "change": 14.2}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "6.43M", "change": 0.8},
                {"metric": "EV Sales", "value": "0.39M", "change": 28.7},
                {"metric": "Operating Margin", "value": "5.2%", "change": -0.5},
                {"metric": "R&D Investment", "value": "$7.13B", "change": 9.8}
            ]
        },
        "F": {
            "2024": [
                {"metric": "Global Sales", "value": "4.2M", "change": 2.8},
                {"metric": "EV Sales", "value": "0.6M", "change": 42.5},
                {"metric": "Operating Margin", "value": "7.5%", "change": 1.5},
                {"metric": "R&D Investment", "value": "$8.2B", "change": 15.8}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "4.08M", "change": 1.5},
                {"metric": "EV Sales", "value": "0.42M", "change": 35.2},
                {"metric": "Operating Margin", "value": "6.0%", "change": 1.0},
                {"metric": "R&D Investment", "value": "$7.08B", "change": 13.5}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "4.02M", "change": 0.5},
                {"metric": "EV Sales", "value": "0.31M", "change": 25.8},
                {"metric": "Operating Margin", "value": "5.0%", "change": -0.8},
                {"metric": "R&D Investment", "value": "$6.24B", "change": 8.9}
            ]
        },
        "TSLA": {
            "2024": [
                {"metric": "Global Sales", "value": "2.1M", "change": 35.2},
                {"metric": "EV Sales", "value": "2.1M", "change": 35.2},
                {"metric": "Operating Margin", "value": "15.5%", "change": 3.7},
                {"metric": "R&D Investment", "value": "$4.5B", "change": 25.8}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "1.55M", "change": 28.5},
                {"metric": "EV Sales", "value": "1.55M", "change": 28.5},
                {"metric": "Operating Margin", "value": "11.8%", "change": 2.5},
                {"metric": "R&D Investment", "value": "$3.58B", "change": 22.3}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "1.21M", "change": 21.8},
                {"metric": "EV Sales", "value": "1.21M", "change": 21.8},
                {"metric": "Operating Margin", "value": "9.3%", "change": 1.8},
                {"metric": "R&D Investment", "value": "$2.93B", "change": 18.5}
            ]
        }
    }
    
    return performance_data.get(company, {}).get(year, [
        {"metric": "No Data", "value": "N/A", "change": 0}
    ])
```

3. Displays detailed information about the selected car manufacturer in a markdown format. Like the Performance widget, it uses the same shared parameters and updates automatically when they change. The widget includes error handling to display fallback data when the selected company or year is not found.

```python
@register_widget({
    "name": "Car Manufacturer Details",
    "description": "Displays detailed information about the selected car manufacturer",
    "type": "markdown",
    "endpoint": "company_details",
    "gridData": {"w": 16, "h": 8},
    "params": [
        {
            "paramName": "company",  # Shared paramName with company_performance widget
            "description": "Select a car manufacturer to view details",
            "value": "TM",
            "label": "Manufacturer",
            "type": "endpoint",
            "optionsEndpoint": "/company_options"  # Shared endpoint with company_performance widget
        },
        {
            "paramName": "year",  # Shared paramName with company_performance widget
            "description": "Select model year to view details",
            "value": "2024",
            "label": "Model Year",
            "type": "text",
            "options": [
                {"label": "2024", "value": "2024"},
                {"label": "2023", "value": "2023"},
                {"label": "2022", "value": "2022"}
            ]
        }
    ]
})
@app.get("/company_details")
def get_company_details(company: str, year: str = "2024"):
    """Returns car manufacturer details in markdown format"""
    company_info = {
        "TM": {
            "name": "Toyota Motor Corporation",
            "sector": "Automotive",
            "market_cap": "280B",
            "pe_ratio": 9.5,
            "dividend_yield": 2.1,
            "description": "Toyota Motor Corporation designs, manufactures, assembles, and sells passenger vehicles, minivans, commercial vehicles, and related parts and accessories worldwide.",
            "models": {
                "2024": ["Camry", "Corolla", "RAV4", "Highlander"],
                "2023": ["Camry", "Corolla", "RAV4", "Highlander"],
                "2022": ["Camry", "Corolla", "RAV4", "Highlander"]
            }
        },
        "VWAGY": {
            "name": "Volkswagen Group",
            "sector": "Automotive",
            "market_cap": "75B",
            "pe_ratio": 4.2,
            "dividend_yield": 3.5,
            "description": "Volkswagen Group manufactures and sells automobiles worldwide. The company offers passenger cars, commercial vehicles, and power engineering systems.",
            "models": {
                "2024": ["Golf", "Passat", "Tiguan", "ID.4"],
                "2023": ["Golf", "Passat", "Tiguan", "ID.4"],
                "2022": ["Golf", "Passat", "Tiguan", "ID.4"]
            }
        },
        "GM": {
            "name": "General Motors",
            "sector": "Automotive",
            "market_cap": "45B",
            "pe_ratio": 5.8,
            "dividend_yield": 1.2,
            "description": "General Motors designs, builds, and sells cars, trucks, crossovers, and automobile parts worldwide.",
            "models": {
                "2024": ["Silverado", "Equinox", "Malibu", "Corvette"],
                "2023": ["Silverado", "Equinox", "Malibu", "Corvette"],
                "2022": ["Silverado", "Equinox", "Malibu", "Corvette"]
            }
        },
        "F": {
            "name": "Ford Motor Company",
            "sector": "Automotive",
            "market_cap": "48B",
            "pe_ratio": 7.2,
            "dividend_yield": 4.8,
            "description": "Ford Motor Company designs, manufactures, markets, and services a line of Ford trucks, cars, sport utility vehicles, electrified vehicles, and Lincoln luxury vehicles.",
            "models": {
                "2024": ["F-150", "Mustang", "Explorer", "Mach-E"],
                "2023": ["F-150", "Mustang", "Explorer", "Mach-E"],
                "2022": ["F-150", "Mustang", "Explorer", "Mach-E"]
            }
        },
        "TSLA": {
            "name": "Tesla Inc.",
            "sector": "Automotive",
            "market_cap": "800B",
            "pe_ratio": 65.3,
            "dividend_yield": 0.0,
            "description": "Tesla Inc. designs, develops, manufactures, leases, and sells electric vehicles, and energy generation and storage systems in the United States, China, and internationally.",
            "models": {
                "2024": ["Model 3", "Model Y", "Model S", "Model X"],
                "2023": ["Model 3", "Model Y", "Model S", "Model X"],
                "2022": ["Model 3", "Model Y", "Model S", "Model X"]
            }
        }
    }
    
    details = company_info.get(company, {
        "name": "Unknown",
        "sector": "Unknown",
        "market_cap": "N/A",
        "pe_ratio": 0,
        "dividend_yield": 0,
        "description": "No information available for this manufacturer.",
        "models": {"2024": [], "2023": [], "2022": []}
    })
    
    models = details['models'].get(year, [])
    
    return f"""# {details['name']} ({company}) - {year} Models
**Sector:** {details['sector']}
**Market Cap:** ${details['market_cap']}
**P/E Ratio:** {details['pe_ratio']}
**Dividend Yield:** {details['dividend_yield']}%

{details['description']}

## {year} Model Lineup
{', '.join(models)}
"""
```

This implementation demonstrates how to create a cohesive user interface where multiple widgets work together to provide different views of the same data, while maintaining parameter synchronization across all components. 

---

---
title: Parameter Positioning
sidebar_position: 22
description: Learn how to control the layout and positioning of widget parameters in OpenBB Workspace, including row positioning and parameter ordering
keywords:
- parameter positioning
- parameter layout
- parameter rows
- widget parameters
- parameter ordering
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Parameter Positioning | OpenBB Workspace Docs" />

By default, widget parameters are displayed in a single row at the top of the widget. However, you can control the positioning and layout of parameters by organizing them into multiple rows and changing their order within those rows.

<img className="pro-border-gradient" width="1000" alt="Parameter Grouping Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/markdown-organized-params.png" />

## Row Positioning

To position parameters in different rows, you can structure the `params` array as a nested array where each sub-array represents a row of parameters.

### Single Row (Default)

```python
"params": [
    {
        "paramName": "param1",
        "type": "text",
        "value": "value1"
    },
    {
        "paramName": "param2",
        "type": "text",
        "value": "value2"
    }
]
```

### Multiple Rows

```python
"params": [
    [], # Empty first row
    [ # Second row with parameters
        {
            "paramName": "param1",
            "type": "text",
            "value": "value1"
        },
        {
            "paramName": "param2",
            "type": "text",
            "value": "value2"
        }
    ]
]
```

## Complete Example

Here's a comprehensive example showing how to position different types of parameters across multiple rows:

```python
@register_widget({
    "name": "Moving Parameters Example",
    "description": "Show example of moving parameter positions",
    "endpoint": "moving_parameters_example",
    "gridData": {"w": 20, "h": 9},
    "type": "table",
    "params": [
        [],  # Empty first row - pushes all parameters to second row
        [    # Second row with all parameters
            {
                "paramName": "datePicker1",
                "value": "$currentDate-1d",
                "label": "Param 1",
                "description": "I'm a Date Picker!",
                "type": "date"
            },
            {
                "paramName": "textBox1",
                "value": "Hello!",
                "label": "Param 2",
                "description": "I'm a text input box!",
                "type": "text"
            },
            {
                "paramName": "TrueFalse",
                "value": True,
                "label": "True/False",
                "description": "I'm a True/False selector!",
                "type": "boolean"
            },
            {
                "paramName": "daysPicker1",
                "value": "1",
                "label": "Days",
                "type": "text",
                "multiSelect": True,
                "description": "Number of days to look back",
                "options": [
                    {"value": "1", "label": "1"},
                    {"value": "5", "label": "5"},
                    {"value": "10", "label": "10"},
                    {"value": "20", "label": "20"},
                    {"value": "30", "label": "30"}
                ]
            }
        ]
    ]
})
@app.get("/moving_parameters_example")
def moving_parameters_example(
    datePicker1: str = None,
    textBox1: str = None,
    daysPicker1: str = "1",
    TrueFalse: bool = True
):
    """Show example of how to move parameters - This will put them all on the second row of the widget"""
    return {
        "datePicker1": datePicker1,
        "textBox1": textBox1,
        "daysPicker1": daysPicker1.split(","),
        "TrueFalse": TrueFalse
    }
```

## Advanced Positioning Examples

### Parameters Across Multiple Rows

```python
"params": [
    [ # First row
        {
            "paramName": "symbol",
            "type": "text",
            "value": "AAPL",
            "label": "Symbol"
        }
    ],
    [ # Second row
        {
            "paramName": "start_date",
            "type": "date",
            "value": "$currentDate-30d",
            "label": "Start Date"
        },
        {
            "paramName": "end_date",
            "type": "date",
            "value": "$currentDate",
            "label": "End Date"
        }
    ],
    [ # Third row
        {
            "paramName": "show_volume",
            "type": "boolean",
            "value": True,
            "label": "Show Volume"
        }
    ]
]

### Skipping Multiple Rows

```python
"params": [
    [], # Skip first row
    [], # Skip second row
    [ # Parameters on third row
    {
        "paramName": "param1",
        "type": "text",
        "value": "value1"
    }
    ]
]
```

## Parameter Ordering

Within each row, parameters are displayed in the order they appear in the array. You can change the visual order by rearranging the parameter objects:

```python
# Original order: Date, Text, Boolean, Dropdown
[
    {"paramName": "date_param", "type": "date", ...},
    {"paramName": "text_param", "type": "text", ...},
    {"paramName": "bool_param", "type": "boolean", ...},
    {"paramName": "dropdown_param", "type": "text", "options": [...], ...}
]
# Reordered: Boolean, Dropdown, Date, Text
[
    {"paramName": "bool_param", "type": "boolean", ...},
    {"paramName": "dropdown_param", "type": "text", "options": [...], ...},
    {"paramName": "date_param", "type": "date", ...},
    {"paramName": "text_param", "type": "text", ...}
]
```

In the above example, the parameters are displayed in the order: Date, Text, Boolean, Dropdown. Then, the parameters are reordered to: Boolean, Dropdown, Date, Text based on the order of the parameters in the array.


---

---
title: Text Input
sidebar_position: 24
description: Learn how to implement and use text input parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- text input
- text box
- input field
- widget parameters
- text entry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Text Input | OpenBB Workspace Docs" />

A widget that includes a text input parameter allowing users to enter custom text. The entered text is passed to the widget as a parameter.

There are two types of text input parameters:

Simple text input and a multiple options text input.

## Simple Text Input

<img className="pro-border-gradient" width="800" alt="Text Input Parameter Example" src="https://openbb-cms.directus.app/assets/b126ba58-ff29-4923-b124-1a0314ad4842.png" />

```python
@register_widget({
    "name": "Markdown Widget with Text Input",
    "description": "A markdown widget with a text input parameter",
    "endpoint": "markdown_widget_with_text_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "text_box",
            "value": "hello",
            "label": "Enter Text",
            "description": "Type something to display",
            "type": "text"
        }
    ]
})
@app.get("/markdown_widget_with_text_input")
def markdown_widget_with_text_input(text_box: str):
    """Returns a markdown widget with text input parameter"""
    return f"""# Text Input
Entered text: {text_box}
""" 
```

## Multiple Options Text Input

<img className="pro-border-gradient" width="800" alt="Text Input Parameter Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/text-input-with-dd.png" />


```python
@register_widget({
    "name": "Markdown Widget with Text Input",
    "description": "A markdown widget with a text input parameter",
    "endpoint": "markdown_widget_with_text_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "text_box",
            "value": "var1,var2,var3",
            "label": "Enter Text",
            "description": "Type something to display",
            "multiple": true,
            "type": "text"
        }
    ]
})
@app.get("/markdown_widget_with_text_input")
def markdown_widget_with_text_input(text_box: str):
    """Returns a markdown widget with text input parameter"""
    return f"""# Text Input
Entered text: {text_box}
""" 
```


---

---
title: AgGrid Table Charts
sidebar_position: 8
description: AgGrid Table Charts
keywords:
- asd
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AgGrid Table Charts | OpenBB Workspace Docs" />

## Basic Table Widget

A widget that displays data in a tabular format. This example shows how to create a table with cryptocurrency data including TVL and price changes.

<img className="pro-border-gradient" width="800" alt="Table Widget Example" src="https://openbb-cms.directus.app/assets/96f31526-87c1-40f3-8ecb-6cc869d2e910.png" />

```python
@register_widget({
    "name": "Table Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/table_widget")
def table_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table Widget from API

A widget that fetches and displays data from an external API. This example demonstrates integration with the DeFi Llama API to show chain TVL data.

<img className="pro-border-gradient" width="800" alt="Table Widget from API Example" src="https://openbb-cms.directus.app/assets/ab850520-843d-4fe2-b95c-c8346b41ac93.png" />

```python
@register_widget({
    "name": "Table Widget from API Endpoint",
    "description": "A table widget from an API endpoint",
    "type": "table",
    "endpoint": "table_widget_from_api_endpoint",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/table_widget_from_api_endpoint")
def table_widget_from_api_endpoint():
    """Get current TVL of all chains using Defi LLama"""
    response = requests.get("https://api.llama.fi/v2/chains")

    if response.status_code == 200:
        return response.json()

    print(f"Request error {response.status_code}: {response.text}")
    raise HTTPException(
        status_code=response.status_code,
        detail=response.text
    )
```

## Table Widget with Column Definitions

A widget that displays data in a tabular format with customizable column definitions. The most important part of this widget is the "columnsDefs" key in the data object which allows for detailed column configuration.

<img className="pro-border-gradient" width="800" alt="Table Widget with Column Definitions Example" src="https://openbb-cms.directus.app/assets/efea3aa4-fd2a-4098-bd64-1a7c825b6c96.png" />

```python
@register_widget({
    "name": "Table Widget with Column Definitions",
    "description": "A table widget with column definitions",
    "type": "table",
    "endpoint": "table_widget_with_column_definitions",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "renderFn": "titleCase",
                    "width": 120,
                    "pinned": "left"
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",
                    "width": 150
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                    "hide": True
                },
            ]
        }
    },
})
@app.get("/table_widget_with_column_definitions")
def table_widget_with_column_definitions():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table Widget with Render Functions

A widget that demonstrates various rendering functions for table cells. The key feature is the "renderFn" key in the columnsDefs object which allows for custom cell rendering.

<img className="pro-border-gradient" width="800" alt="Table Widget with Render Functions Example" src="https://openbb-cms.directus.app/assets/ba983638-e6bb-4a3f-9c80-b360f3577b11.png" />

```python
@register_widget({
    "name": "Table Widget with Render Functions",
    "description": "A table widget with render functions",
    "type": "table",
    "endpoint": "table_widget_with_render_functions",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "renderFn": "titleCase",
                    "width": 120,
                    "pinned": "left"
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",               
                    "width": 150,
                    "renderFn": "columnColor",
                    "renderFnParams": {
                        "colorRules": [
                            {
                                "condition": "between",
                                "range": {
                                    "min": 30000000000,
                                    "max": 40000000000
                                },
                                "color": "blue",
                                "fill": False
                            },
                            {
                                "condition": "lt",
                                "value": 10000000000,
                                "color": "#FFA500",
                                "fill": False
                            },
                            {
                                "condition": "gt",
                                "value": 40000000000,
                                "color": "green",
                                "fill": True
                            }
                        ]
                    }
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                }
            ]
        }
    },
})
@app.get("/table_widget_with_render_functions")
def table_widget_with_render_functions():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

For more information on this, check [Render functions](../widget-configuration/render-functions).

## Table Widget with Hover Card

A widget that demonstrates the hover card feature, allowing additional information to be displayed when hovering over table cells.

<img className="pro-border-gradient" width="800" alt="Table Widget with Hover Card Example" src="https://openbb-cms.directus.app/assets/60a39927-8985-4f3a-8e14-0016e167b79f.png" />

```python
@register_widget({
    "name": "Table Widget with Hover Card",
    "description": "A table widget with hover card",
    "type": "table",
    "endpoint": "table_widget_with_hover_card",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "width": 120,
                    "pinned": "left",
                    "renderFn": "hoverCard",
                    "renderFnParams": {
                        "hoverCard": {
                            "cellField": "value",
                            "title": "Project Details",
                            "markdown": "### {value} (since {foundedDate})\n**Description:** {description}"
                        }
                    }
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",               
                    "width": 150,
                    "renderFn": "columnColor",
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                }
            ]
        }
    },
})
@app.get("/table_widget_with_hover_card")
def table_widget_with_hover_card():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": {
                "value": "Ethereum",
                "description": "A decentralized, open-source blockchain with smart contract functionality",
                "foundedDate": "2015-07-30"
            },
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": {
                "value": "Bitcoin",
                "description": "The first decentralized cryptocurrency",
                "foundedDate": "2009-01-03"
            },
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": {
                "value": "Solana",
                "description": "A high-performance blockchain supporting builders around the world",
                "foundedDate": "2020-03-16"
            },
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table to Chart Widget

A widget that demonstrates how to convert table data into a chart view. The key feature is the "chartView" configuration in the data object.

<img className="pro-border-gradient" width="800" alt="Table to Chart Widget Example" src="https://openbb-cms.directus.app/assets/72c0802d-34c9-4bd2-aa3f-77e7d89ccb7c.png" />

```python
@register_widget({
    "name": "Table to Chart Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_to_chart_widget",
    "gridData": {"w": 20, "h": 12},
    "data": {
        "table": {
            "enableCharts": True,
            "showAll": False,
            "chartView": {
                "enabled": True,
                "chartType": "column"
            },
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "chartDataType": "category",
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "chartDataType": "series",
                },
            ]
        }
    },
})
@app.get("/table_to_chart_widget")
def table_to_chart_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table to Time Series Widget

A widget that demonstrates how to display time series data in a chart format. The key feature is the use of "chartDataType": "time" for date fields.

<img className="pro-border-gradient" width="800" alt="Table to Time Series Widget Example" src="https://openbb-cms.directus.app/assets/f2b0f099-795a-4c97-8361-069d91aca150.png" />

```python
@register_widget({
    "name": "Table to Time Series Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_to_time_series_widget",
    "gridData": {"w": 20, "h": 12},
    "data": {
        "table": {
            "enableCharts": True,
            "showAll": False,
            "chartView": {
                "enabled": True,
                "chartType": "line"
            },
            "columnsDefs": [
                {
                    "field": "date",
                    "headerName": "Date",
                    "chartDataType": "time",
                },
                {
                    "field": "Ethereum",
                    "headerName": "Ethereum",
                    "chartDataType": "series",
                },
                {
                    "field": "Bitcoin",
                    "headerName": "Bitcoin",
                    "chartDataType": "series",
                },
                {
                    "field": "Solana",
                    "headerName": "Solana",
                    "chartDataType": "series",
                }
            ]
        }
    },
})
@app.get("/table_to_time_series_widget")
def table_to_time_series_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "date": "2024-06-06",
            "Ethereum": 1.0000,
            "Bitcoin": 1.0000,
            "Solana": 1.0000
        },
        {
            "date": "2024-06-07",
            "Ethereum": 1.0235,
            "Bitcoin": 0.9822,
            "Solana": 1.0148
        },
        {
            "date": "2024-06-08",
            "Ethereum": 0.9945,
            "Bitcoin": 1.0072,
            "Solana": 0.9764
        },
        {
            "date": "2024-06-09",
            "Ethereum": 1.0205,
            "Bitcoin": 0.9856,
            "Solana": 1.0300
        },
        {
            "date": "2024-06-10",
            "Ethereum": 0.9847,
            "Bitcoin": 1.0195,
            "Solana": 0.9897
        }
    ]
    return mock_data
```

## Table Widget with Sparklines

Sparklines allow you to display small charts directly within table cells, providing at-a-glance data visualization. Our implementation supports line, area, and bar sparklines with comprehensive styling options.

### Basic Sparkline with Min/Max Points

This example shows a basic sparkline with minimum and maximum points highlighted:

<img className="pro-border-gradient" width="800" alt="Basic Sparkline with Min/Max Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/basic+sparklines.png" />

```python
@register_widget({
    "name": "Table Widget with Basic Sparklines",
    "description": "A table widget with basic sparklines showing min/max points",
    "type": "table",
    "endpoint": "table_widget_basic_sparklines",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "stock",
                    "headerName": "Stock",
                    "cellDataType": "text",
                    "width": 120,
                    "pinned": "left"
                },
                {
                    "field": "price_history",
                    "headerName": "Price History",
                    "width": 200,
                    "sparkline": {
                        "type": "line",
                        "options": {
                            "stroke": "#2563eb",
                            "strokeWidth": 2,
                            "markers": {
                                "enabled": True,
                                "size": 3
                            },
                            "pointsOfInterest": {
                                "maximum": {
                                    "fill": "#22c55e",
                                    "stroke": "#16a34a",
                                    "size": 6
                                },
                                "minimum": {
                                    "fill": "#ef4444",
                                    "stroke": "#dc2626",
                                    "size": 6
                                }
                            }
                        }
                    }
                },
                {
                    "field": "volume",
                    "headerName": "Volume",
                    "width": 150,
                    "sparkline": {
                        "type": "bar",
                        "options": {
                            "fill": "#6b7280",
                            "stroke": "#4b5563",
                            "pointsOfInterest": {
                                "maximum": {
                                    "fill": "#22c55e",
                                    "stroke": "#16a34a"
                                },
                                "minimum": {
                                    "fill": "#ef4444",
                                    "stroke": "#dc2626"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
})
@app.get("/table_widget_basic_sparklines")
def table_widget_basic_sparklines():
    """Returns mock data with sparklines"""
    mock_data = [
        {
            "stock": "AAPL",
            "price_history": [150, 155, 148, 162, 158, 165, 170],
            "volume": [1000, 1200, 900, 1500, 1100, 1300, 1800]
        },
        {
            "stock": "GOOGL",
            "price_history": [2800, 2750, 2900, 2850, 2950, 3000, 2980],
            "volume": [800, 950, 700, 1200, 850, 1100, 1400]
        },
        {
            "stock": "MSFT",
            "price_history": [340, 335, 350, 345, 360, 355, 365],
            "volume": [900, 1100, 800, 1300, 950, 1200, 1600]
        }
    ]
    return mock_data
```

### Sparklines with Custom Formatters

For complete control over styling individual data points, use custom formatters. This example shows profit/loss data with dynamic coloring:

<img className="pro-border-gradient" width="800" alt="Sparklines with Custom Formatters Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/custom+formatter.png" />

```python
@register_widget({
    "name": "Table Widget with Custom Formatter",
    "description": "A table widget with custom sparkline formatter for profit/loss",
    "type": "table",
    "endpoint": "table_widget_custom_formatter",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "company",
                    "headerName": "Company",
                    "cellDataType": "text",
                    "width": 150,
                    "pinned": "left"
                },
                {
                    "field": "profit_loss",
                    "headerName": "P&L Trend",
                    "width": 200,
                    "sparkline": {
                        "type": "bar",
                        "options": {
                            "customFormatter": "(params) => ({ fill: params.yValue >= 0 ? '#22c55e' : '#ef4444', stroke: params.yValue >= 0 ? '#16a34a' : '#dc2626' })"
                        }
                    }
                },
                {
                    "field": "revenue_growth",
                    "headerName": "Revenue Growth",
                    "width": 200,
                    "sparkline": {
                        "type": "bar",
                        "options": {
                            "customFormatter": "(params) => ({ fill: params.yValue > 10 ? '#22c55e' : params.yValue < 0 ? '#ef4444' : '#f59e0b', fillOpacity: 0.3, stroke: params.yValue > 10 ? '#16a34a' : params.yValue < 0 ? '#dc2626' : '#d97706' })"
                        }
                    }
                }
            ]
        }
    },
})
@app.get("/table_widget_custom_formatter")
def table_widget_custom_formatter():
    """Returns mock data with custom formatter"""
    mock_data = [
        {
            "company": "TechCorp",
            "profit_loss": [5, -2, 8, -3, 12, 7, -1],
            "revenue_growth": [15, 8, -5, 20, -8, 25, 18]
        },
        {
            "company": "DataSoft",
            "profit_loss": [10, -5, 15, -8, 20, 12, -3],
            "revenue_growth": [12, 5, 8, -2, 15, 10, 22]
        },
        {
            "company": "CloudInc",
            "profit_loss": [8, -15, 25, 12, -5, 18, 28],
            "revenue_growth": [8, -3, 12, 18, 6, 14, 9]
        }
    ]
    return mock_data
```

### Sparkline Configuration Options

#### Supported Sparkline Types
- **`line`** - Line chart
- **`area`** - Area chart (filled line)
- **`bar`** - Bar chart

#### Points of Interest
- **`firstLast`** - First and last data points
- **`minimum`** - Points with minimum values
- **`maximum`** - Points with maximum values
- **`positiveNegative`** - Separate styling for positive and negative values
- **`highlighted`** - Points highlighted on hover/interaction

#### Custom Formatter Parameters
The formatter function receives parameters including:
- ***`yValue`*** - The data value
- ***`first`*** - Whether this is the first point
- ***`last`*** - Whether this is the last point
- ***`min`*** - Whether this is a minimum point
- ***`max`*** - Whether this is a maximum point
- ***`highlighted`*** - Whether this point is highlighted

#### Styling Options
- **Basic styling**: `stroke`, `strokeWidth`, `fill`, `fillOpacity`
- **Markers**: `enabled`, `size`, `fill`, `stroke`, `strokeWidth`
- **Padding**: `top`, `right`, `bottom`, `left`
- **Direction**: `vertical`, `horizontal` (for bar charts)

For more detailed configuration options, refer to the [Widgets JSON Reference](../json-specs/widgets-json-reference) or our examples backends [here](https://github.com/OpenBB-finance/backends-for-openbb/tree/main/getting-started/reference-backend).

## OTHERS

### Table Interface

The Table widget offers comprehensive data manipulation and visualization capabilities:

- **Column Resizing**: Adjust column widths manually or use the "Autosize all columns" feature for automatic optimization.

- **Column Reorganization**: Implement drag-and-drop functionality to reorder columns. Click and hold any column header to reposition it.

- **Column Filtering**: Toggle column visibility through column settings to focus on relevant data for your analysis.

- **Sorting**: Click column headers to sort data in ascending or descending order.

- **Data Selection**: Select specific data points or ranges to generate visualizations.

### Table to Chart Conversion

The widget supports two primary methods for converting table data into charts:

1. **Selection-based Charting**: Select desired data points, choose a chart type, and generate visualizations instantly. This feature is particularly useful for quantitative analysis.

The example below demonstrates data selection and right-click menu options for creating a line chart:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img className="pro-border-gradient" width="800" alt="selection-charting" src="https://openbb-assets.s3.amazonaws.com/docs/pro/selection-charting-1.png" />
</div>

2. **ChartView Mode**: Access the "ChartView" icon to transform the table into a dynamic chart. This mode automatically updates the visualization as underlying data changes.

The following example shows the ChartView interface:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img className="pro-border-gradient" width="800" alt="chartview" src="https://openbb-assets.s3.amazonaws.com/docs/pro/chartview-setting.png" />
</div>

The highlighted ChartView option enables seamless conversion between table and chart views.

### Available Chart Types

The built-in charts support a variety of types. Here are the allowed values:

- **Column Charts**: `column`, `groupedColumn`, `stackedColumn`, `normalizedColumn`
- **Bar Charts**: `bar`, `groupedBar`, `stackedBar`, `normalizedBar`
- **Line and Scatter Charts**: `line`, `scatter`, `bubble`
- **Pie and Donut Charts**: `pie`, `donut`, `doughnut`
- **Area Charts**: `area`, `stackedArea`, `normalizedArea`
- **Other Types**: `histogram`, `radarLine`, `radarArea`, `nightingale`, `radialColumn`, `radialBar`, `sunburst`, `rangeBar`, `rangeArea`, `boxPlot`, `treemap`, `heatmap`, `waterfall`


---

---
title: File Viewer
sidebar_position: 6
description: Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace
keywords:
- widgets
- pdf
- file viewer
- base64
- multi-file viewer
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="File Viewer | OpenBB Workspace Docs" />

## Single File

The (multi) file viewer widget supports two methods for serving files:

1. Base64 Encoding: The file content is encoded in base64 and sent directly in the response.

2. URL Reference: A URL to the file is provided, which can be a presigned URL for secure access to files stored in cloud storage.

The endpoint should return a JSON response with the following structure:

```json
{
  "headers": {
    "Content-Type": "application/json"
  },
  "data_format": {
    "data_type": "pdf",
    "filename": "example.pdf"
  },
  "content": "base64_encoded_content",  // For base64 method
  // OR
  "file_reference": "https://example.com/path/to/file.pdf"  // For URL method
}
```

Note:

- **data_format.data_type**: The type of file (e.g., "pdf", "csv", "txt")
- **data_format.filename**: The name of the file to display
- **content**: Base64-encoded file content (for base64 method)
- **file_reference**: URL to the file (for URL method)

### PDF Widget with Base64

A widget that displays a PDF file using base64 encoding. This method is useful for displaying PDFs directly in the workspace.

<img className="pro-border-gradient" width="800" alt="PDF Widget with Base64 Example" src="https://openbb-cms.directus.app/assets/9e202a65-eb71-4e43-b111-5f5c79dfa6dc.png" />

```python
@register_widget({
    "name": "PDF Widget with Base64",
    "description": "Display a PDF file with base64 encoding",
    "endpoint": "pdf_widget_base64",
    "gridData": {
        "w": 20,
        "h": 20
    },
    "type": "pdf",
})
@app.get("/pdf_widget_base64")
def get_pdf_widget_base64():
    """Serve a file through base64 encoding."""
    try:
        name = "sample.pdf"
        with open(ROOT_PATH / name, "rb") as file:
            file_data = file.read()
            encoded_data = base64.b64encode(file_data)
            content = encoded_data.decode("utf-8")
    
    except FileNotFoundError as exc:
        raise HTTPException(
            status_code=404,
            detail="File not found"
        ) from exc
    
    return JSONResponse(
        headers={"Content-Type": "application/json"},
        content={
            "data_format": {
                "data_type": "pdf",
                "filename": name,
            },
            "content": content,
        },
    )
```

### PDF Widget with URL

A widget that displays a PDF file using a direct URL. This method is more efficient for larger PDFs as it doesn't require base64 encoding.

<img className="pro-border-gradient" width="800" alt="PDF Widget with URL Example" src="https://openbb-cms.directus.app/assets/7d4fc0e6-f458-49a1-9be9-161d2bec1886.png" />

```python
@register_widget({
    "name": "PDF Widget with URL",
    "description": "Display a PDF file",
    "type": "pdf", 
    "endpoint": "pdf_widget_url",
    "gridData": {
        "w": 20,
        "h": 20
    },
})
@app.get("/pdf_widget_url")
def get_pdf_widget_url():
    """Serve a file through URL."""
    file_reference = "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf"
    if not file_reference:
        raise HTTPException(status_code=404, detail="File not found")
    return JSONResponse(
        headers={"Content-Type": "application/json"},
        content={
            "data_format": {
                "data_type": "pdf",
                "filename": "Sample.pdf",
            },
            "url": file_reference,
        },
    )
```

## Multi File

<img className="pro-border-gradient" width="800" alt="Multi PDF Viewer with Base64 Example" src="https://openbb-cms.directus.app/assets/610ec2bc-2768-4d48-9f0b-0ad08a69b41e.png" />

:::warning Deprecation Notice
The GET-based approach for multi-file viewers is deprecated. Please use the new POST-based approach shown in the example below.
The major change is the GET request to fetch the files is not a POST request that can take in and return a list of files.
:::

### Implementation

The new implementation uses POST requests to handle multiple files efficiently in a single request. This approach provides better performance and error handling.

#### Required Models

First, define the necessary Pydantic models:

```python
from pydantic import BaseModel
from typing import List, Union

class FileOption(BaseModel):
    label: str
    value: str

class FileRequest(BaseModel):
    filenames: List[str]

class DataFormat(BaseModel):
    data_type: str
    filename: str

class DataContent(BaseModel):
    content: str
    data_format: DataFormat

class DataUrl(BaseModel):
    url: str
    data_format: DataFormat

class DataError(BaseModel):
    error_type: str
    content: str
```

#### Sample Data

```python
# Sample whitepaper data
WHITEPAPERS = {
    "bitcoin.pdf": {
        "label": "Bitcoin",
        "filename": "bitcoin.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",
        "category": "l1",
    },
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",
        "category": "l1",
    },
    "chainlink.pdf": {
        "label": "Chainlink",
        "filename": "chainlink.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",
        "category": "oracles",
    },
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",
        "category": "l1",
    },
}
```

#### Options Endpoint

```python
@app.get("/options")
async def get_options(category: str = "all") -> List[FileOption]:
    """Get list of available files filtered by category"""
    if category == "all":
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
    return [
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
    ]
```

#### Multi File Viewer with Base64 (POST)

```python
@app.post("/whitepapers/base64")
async def get_whitepapers_base64(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple PDF files in base64 format"""
    files = []
    for name in request.filenames:
        if whitepaper := WHITEPAPERS.get(name):
            file_name_with_extension = whitepaper["filename"]
            file_path = Path.cwd() / "whitepapers" / file_name_with_extension
            if file_path.exists():
                with open(file_path, "rb") as file:
                    base64_content = base64.b64encode(file.read()).decode("utf-8")
                    files.append(
                        DataContent(
                            content=base64_content,
                            data_format=DataFormat(
                                data_type="pdf",
                                filename=file_name_with_extension,
                            ),
                        ).model_dump()
                    )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="File not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{name}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```

#### Multi File Viewer with URL (POST)

```python
@app.post("/whitepapers/url")
async def get_whitepapers_url(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple PDF files via URLs"""
    files = []
    for name in request.filenames:
        if whitepaper := WHITEPAPERS.get(name):
            file_name_with_extension = whitepaper["filename"]
            if url := whitepaper.get("url"):
                files.append(
                    DataUrl(
                        url=url,
                        data_format=DataFormat(
                            data_type="pdf", filename=file_name_with_extension
                        ),
                    ).model_dump()
                )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="URL not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{name}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```


The corresponding `widgets.json` would have the following format (for url just change the ```endpoint```):

```json
{
  "whitepapers": {
    "type": "multi_file_viewer",
    "name": "Whitepapers",
    "description": "A collection of crypto whitepapers.",
    "endpoint": "/whitepapers/base64",
    "gridData": {
      "w": 40,
      "h": 10
    },
    "params": [
      {
        "type": "endpoint",
        "paramName": "whitepaper",
        "value": ["bitcoin.pdf"],
        "label": "Whitepaper",
        "description": "Whitepaper to display.",
        "optionsEndpoint": "/whitepapers/options",
        "show": false,
        "multiSelect": true,
        "roles": ["fileSelector"]
      }
    ]
  }
}
```


### More complex example

<img className="pro-border-gradient" width="600" alt="multi-file-viewer" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/multi-file-viewer.png" />

This multi-file-viewer widget introduces a parameter called `optionsParams` which allows you to pass the options to an endpoint from a different parameter. More information [here](../widget-parameters/dependent-dropdown.md).

In our case we want to pass the options in the `type` parameter to the `/whitepapers/options` endpoint to filter the list of whitepapers.

```python
# You can find these files in the OpenBB GitHub repository in the backend-examples-for-openbb-workspace folder.
# https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace
# Sample whitepaper data for the multi-file viewer widget
# This is a dictionary where keys are filenames and values contain metadata
# Each whitepaper has the following properties:
# - label: The display name of the whitepaper
# - filename: The filename of the whitepaper
# - url: The URL to the whitepaper
# - category: The category/type of whitepaper
WHITEPAPERS = {
    "bitcoin.pdf": {
        "label": "Bitcoin",
        "filename": "bitcoin.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",
        "category": "l1",
    },
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",
        "category": "l1",
    },
    "chainlink.pdf": {
        "label": "ChainLink",
        "filename": "chainlink.pdf",
    "chainlink.pdf": {
        "label": "ChainLink",
        "filename": "chainlink.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",
        "category": "oracles",
    },
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",
        "category": "l1",
    },
}
}


@app.get("/whitepapers/options")
async def get_whitepaper_options(category: str = Query("all")) -> List[FileOption]:
    """Get list of available whitepapers filtered by category"""
    if category == "all":
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
    return [
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
    ]

# This is an example of how to return a list of base64 encoded files using POST.
@app.post("/whitepapers/view-base64")
async def view_whitepapers_base64(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple whitepapers in base64 format"""
    files = []
    for filename in request.filenames:
        if whitepaper := WHITEPAPERS.get(filename):
            file_path = Path.cwd() / whitepaper["filename"]
            if file_path.exists():
                with open(file_path, "rb") as file:
                    base64_content = base64.b64encode(file.read()).decode("utf-8")
                    files.append(
                        DataContent(
                            content=base64_content,
                            data_format=DataFormat(
                                data_type="pdf", filename=whitepaper["filename"]
                            ),
                        ).model_dump()
                    )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="Whitepaper file not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{filename}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)


# This is an example of how to return a list of URLs using POST.
# You would want to return your own presigned URLs here for the files to load correctly 
# or else the files will not load due to CORS policy.
@app.post("/whitepapers/view-url")
async def view_whitepapers_url(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple whitepapers via URLs"""
    files = []
    for filename in request.filenames:
        if whitepaper := WHITEPAPERS.get(filename):
            # Fetch the presigned url and return it for the `url`.
            # In the code below, we are simulating the presigned url by returning the url directly.
            presigned_url = whitepaper["url"]
            
            files.append(
                DataUrl(
                    url=presigned_url,
                    data_format=DataFormat(
                        data_type="pdf", filename=whitepaper["filename"]
                    ),
                ).model_dump()
            )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{filename}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```

The corresponding `widgets.json` would have the following format:

```json
{
  "whitepapers": {
    "type": "multi_file_viewer",
    "name": "Whitepapers",
    "description": "A collection of crypto whitepapers.",
    "endpoint": "/whitepapers/base64",
    "gridData": {
      "w": 40,
      "h": 10
    },
    "params": [
      {
        "type": "endpoint",
        "paramName": "whitepaper",
        "value": ["bitcoin.pdf"],
        "label": "Whitepaper",
        "description": "Whitepaper to display.",
        "optionsEndpoint": "/whitepapers/options",
        "show": false,
        "optionsParams": {
          "category": "$category"
        },
        "multiSelect": true,
        "roles": ["fileSelector"]
      },
      {
        "type": "text",
        "paramName": "category",
        "value": "all",
        "label": "Category",
        "description": "Category of whitepaper to fetch.",
        "options": [
          {
            "label": "All",
            "value": "all"
          },
          {
            "label": "L1",
            "value": "l1"
          },
          {
            "label": "L2",
            "value": "l2"
          },
          {
            "label": "Oracles",
            "value": "oracles"
          },
          {
            "label": "Defi",
            "value": "defi"
          }
        ]
      }
    ]
  }
}
```

More examples can be found on the github repository at https://github.com/OpenBB-finance/backends-for-openbb

---

---
title: Highcharts Chart
sidebar_position: 13
description: Learn how to create Highcharts widgets for OpenBB Workspace, with step-by-step instructions for backend integration, configuration, and theme support.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Highcharts
- Chart widgets
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Highcharts Chart | OpenBB Workspace Docs" />

This guide will walk you through the process of creating a chart widget for OpenBB Workspace using Highcharts. By the end of this guide, you will have a working Highcharts widget that you can add to OpenBB.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/workspace/developers/data-integration#1-create-the-api-server) page.

## Step 2: Create the Chart Endpoint

Edit the `main.py` file and add the following code. This code sets up a FastAPI application with an endpoint to serve the widget configuration and data for a Highcharts chart:

```python
from pathlib import Path
import json
import pandas as pd
import requests
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from highcharts_core.chart import Chart

app = FastAPI()

# Configure CORS
origins = [
    "https://pro.openbb.co",
    "https://excel.openbb.co"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/widgets.json")
def get_widgets():
    """Widgets configuration file for the OpenBB Data Integration"""
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "widgets.json").open())
    )

# Highcharts chart endpoint
@app.get("/chains-highchart")
def get_chains_highchart(theme: str = "dark"):
    """Get current TVL of all chains using Defi Llama"""
    response = requests.get("https://api.llama.fi/v2/chains")

    if response.status_code == 200:
        df = pd.DataFrame(response.json())

        top_30_df = df.sort_values(by='tvl', ascending=False).head(30)

        # Format TVL values to be more readable (in billions)
        top_30_df['formatted_tvl'] = top_30_df['tvl'].apply(lambda x: round(x / 1e9, 2))

        categories = top_30_df['name'].tolist()
        data = top_30_df['formatted_tvl'].tolist()

        # Configure chart options with theme support
        chart_options = {
            'chart': {
                'type': 'column',
                'height': "50%",
                'backgroundColor': 'transparent'
            },
            'title': {'text': 'Top 30 Chains by TVL'},
            'xAxis': {
                'categories': categories,
                'title': {'text': 'Chain Name'},
                'labels': {
                    'style': {
                        'color': '#ffffff' if theme == 'dark' else '#000000'
                    }
                }
            },
            'yAxis': {
                'title': {'text': 'Total Value Locked (TVL in billions $)'},
                'labels': {
                    'style': {
                        'color': '#ffffff' if theme == 'dark' else '#000000'
                    }
                }
            },
            'tooltip': {
                'pointFormat': '<b>${point.y:.2f}B</b>'
            },
            'series': [{
                'name': 'Chain',
                'data': data
            }]
        }

        # Apply theme-specific styling
        if theme == 'dark':
            chart_options.update({
                'title': {'style': {'color': '#ffffff'}},
                'legend': {'itemStyle': {'color': '#ffffff'}},
                'plotOptions': {
                    'series': {
                        'color': '#3498db'
                    }
                }
            })

        chart = Chart.from_options(chart_options)

        return chart.to_dict()

    print(f"Request error {response.status_code}: {response.text}")
    return JSONResponse(
        content={"error": response.text}, status_code=response.status_code
    )
```

For Highcharts integration, we're using the `highcharts_core` Python package to create and configure the chart. The chart is then converted to a dictionary using `chart.to_dict()` before being returned to the frontend.

## Step 3: Edit the widgets.json File

Edit the `widgets.json` file and add the following JSON data. This configuration defines the widget's properties and how it should be displayed:

```json
{
  "chains_highchart": {
    "name": "Chains chart example Highcharts",
    "description": "Get current TVL of all chains and plot it with Highcharts",
    "category": "crypto",
    "type": "chart-highcharts",
    "endpoint": "chains-highchart",
    "gridData": {
      "w": 20,
      "h": 9
    }
  }
}
```

Note that for Highcharts, the `type` field is set to `"chart-highcharts"` instead of just `"chart"` which is used for Plotly charts.

For more information on the `widgets.json` file, see the [Widgets.json](../json-specs/widgets-json-reference) page.

## Step 4: Run the Application

Start the FastAPI Server using Uvicorn. This will host your backend locally:

```bash
uvicorn main:app --port 5050
```

## Step 5: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the `Crypto` category with the name `Chains chart example Highchart`.

<img className="pro-border-gradient" width="600" alt="highcharts-chart" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/highcharts.png" />

### Theme Support

The example doesn't include theme support, but you can easily add it by adapting the endpoint to include the `theme` parameter.

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).

For more information on Highcharts configuration options, visit the [Highcharts API Documentation](https://api.highcharts.com/highcharts/).


---

---
title: HTML
sidebar_position: 5
description: Learn how to create and customize HTML widgets in OpenBB Workspace, enabling complete control over visualization and interaction design with custom HTML, CSS, and JavaScript.
keywords:
- html widget
- widget configuration
- custom visualization
- interactive dashboard
- widget development
- HTML content
- CSS styling
- JavaScript interactivity
- OpenBB Workspace
- custom widgets
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="HTML | OpenBB Workspace Docs" />

HTML widgets provide control over visualization design through server-rendered HTML, enabling the creation of custom styled dashboards and data displays. 

:::warning Security Note
HTML widgets render static HTML content only. JavaScript code within the HTML will not be executed for security reasons. All interactivity must be achieved through server-side logic and HTML/CSS features only.
:::

<img className="pro-border-gradient" width="800" alt="HTML Widget Example" src="https://openbb-cms.directus.app/assets/8234f346-6b2e-49b2-b5de-7150c770a756.png" />

```python
@register_widget({
    "name": "HTML Widget",
    "description": "A HTML widget with interactive dashboard",
    "type": "html",
    "endpoint": "html_widget",
    "gridData": {"w": 40, "h": 20},
})
@app.get("/html_widget", response_class=HTMLResponse)
def html_widget():
    """Returns an HTML widget with mockup data"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0,0,0,0.15);
        }
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        .stat-change {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            margin-top: 10px;
        }
        .positive {
            background: #d4edda;
            color: #155724;
        }
        .negative {
            background: #f8d7da;
            color: #721c24;
        }
        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 1s ease;
            animation: fillAnimation 2s ease-out;
        }
        @keyframes fillAnimation {
            from { width: 0%; }
        }
        .button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: opacity 0.2s;
        }
        .button:hover {
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Portfolio Dashboard</h1>
            <p>Real-time market overview and analytics</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">$124,563</div>
                <div class="stat-label">Total Portfolio Value</div>
                <span class="stat-change positive">+5.4% today</span>
            </div>
            
            <div class="stat-card">
                <div class="stat-value">42</div>
                <div class="stat-label">Active Positions</div>
                <span class="stat-change positive">+3 this week</span>
            </div>
            
            <div class="stat-card">
                <div class="stat-value">$8,421</div>
                <div class="stat-label">Daily P&L</div>
                <span class="stat-change positive">+12.3%</span>
            </div>
            
            <div class="stat-card">
                <div class="stat-value">0.87</div>
                <div class="stat-label">Sharpe Ratio</div>
                <span class="stat-change negative">-0.05</span>
            </div>
        </div>
        
        <div class="chart-container">
            <h3>Performance Overview</h3>
            <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                <div style="flex: 1; margin-right: 20px;">
                    <div>Tech Stocks (68%)</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 68%;"></div>
                    </div>
                </div>
                <div style="flex: 1;">
                    <div>Fixed Income (32%)</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 32%;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="chart-container">
            <h3>Recent Activity</h3>
            <ul style="list-style: none; padding: 0;">
                <li style="padding: 10px 0; border-bottom: 1px solid #eee;">
                    <strong>AAPL</strong> - Bought 100 shares @ $182.50
                    <span style="float: right; color: #666;">2 hours ago</span>
                </li>
                <li style="padding: 10px 0; border-bottom: 1px solid #eee;">
                    <strong>GOOGL</strong> - Sold 50 shares @ $141.20
                    <span style="float: right; color: #666;">5 hours ago</span>
                </li>
                <li style="padding: 10px 0;">
                    <strong>MSFT</strong> - Bought 75 shares @ $378.80
                    <span style="float: right; color: #666;">Yesterday</span>
                </li>
            </ul>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <button class="button" onclick="alert('Refreshing data...')">Refresh Dashboard</button>
        </div>
    </div>
    
    <!-- Note: JavaScript will not execute in HTML widgets for security reasons -->
    <!-- This script tag is included only as an example - it will not run -->
    <script>
        // This JavaScript code will NOT execute
        // HTML widgets only render static HTML and CSS
        // All dynamic behavior must be implemented server-side
    </script>
</body>
</html>
""")
```

The gridData parameter specifies the widget's size in the OpenBB Workspace grid system. More on that can be found [here](../widget-configuration/grid-size).

## Key Features

**Complete Design Control**: HTML widgets allow extensive customization through HTML markup and inline CSS styling, enabling the creation of professional-grade interfaces that match your organization's branding and design requirements.

**Server-Side Rendering**: All content is generated server-side, ensuring security while allowing dynamic HTML generation based on real-time data, calculations, and API responses from your backend.

**Rich Styling Options**: Leverage the full power of inline CSS for advanced styling including animations, gradients, responsive layouts, and professional visual design that creates engaging dashboard experiences.

**Data Integration**: Generate HTML content dynamically on the server based on live data sources, enabling real-time portfolio monitoring, market data display, and dynamic performance tracking through server-side updates.

## Best Practices

- Use semantic HTML structure for accessibility and maintainability
- Implement responsive design patterns using CSS flexbox and grid layouts
- Generate all dynamic content server-side before returning the HTML response
- Use CSS animations and transitions for visual effects instead of JavaScript
- Handle all data fetching and processing in the Python backend before rendering
- Consider using HTML forms with server endpoints for user interactions
- Refresh widgets periodically to update data rather than relying on client-side updates

---

---
title: Live Grid
sidebar_position: 11
description: Create a real-time data grid widget for OpenBB Workspace that displays live updates in a table format
keywords:
- live grid
- real-time data
- websocket
- streaming data
- data table
- live updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Live Grid | OpenBB Workspace Docs" />


This guide will walk you through the process of creating a live grid widget for OpenBB Workspace. By the end of this guide, you will have a working live grid widget that can display real-time data updates for a table. The live grid widget can be configured to only update certain cells when their values change or all of the cells.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/workspace/developers/data-integration#1-create-the-api-server) page.

## Step 2: Create the Live Feed Endpoints

Edit the `main.py` file and add the following code. This sets up both a REST endpoint for initial data and a WebSocket endpoint for live updates:

```python
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.websockets import WebSocketState
import numpy as np
import asyncio
from typing import List
from datetime import datetime


# Sample data store
WS_DATA = {
    "AAPL": {
        "price": 150.0,
        "prev_close": 145.54,
        "volume": 1000000,
        "change": 4.46,
        "change_percent": 0.03,
    },
    # ... other symbols ...
}

def get_ws_data(symbol: str):
    """Generate real-time data for a symbol"""
    data = WS_DATA.get(symbol, {"price": 100.0, "prev_close": 100.0, "volume": 1000000})

    price = data["price"] + np.random.uniform(-10, 10)
    volume = data["volume"] + np.random.randint(100, 1000)
    change = price - data["prev_close"]
    change_percent = change / data["prev_close"]

    WS_DATA[symbol].update(dict(price=price, volume=volume))

    return {
        "symbol": symbol,
        "price": price,
        "change": change,
        "change_percent": change_percent,
        "volume": volume,
    }

# Live Feed Initial Data Endpoint (This sets the initial data for the widget + allows Copilot to grab the data)
@app.get("/test_websocket")
def test_websocket(symbol: str):
    """Initial data endpoint"""
    symbols = symbol.split(",")
    return [
        {
            "date": datetime.now().date(),
            **get_ws_data(symbol),
            "market_cap": np.random.randint(1000000000, 2000000000),
        }
        for symbol in symbols
    ]

# Live Feed WebSocket Endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for live updates"""
    await websocket.accept()
    try:
        await websocket_handler(websocket)
    except WebSocketDisconnect:
        return
    except Exception as e:
        await websocket.close(code=1011)
        raise HTTPException(status_code=500, detail=str(e))

# Sample WebSocket Handler
async def websocket_handler(websocket: WebSocket):
    subbed_symbols: set[str] = set()

    async def consumer_handler(ws: WebSocket):
        try:
            async for data in ws.iter_json():
                if symbols := data.get("params", {}).get("symbol"):
                    if isinstance(symbols, str):
                        symbols = symbols.split(",")

                    subbed_symbols.clear()
                    subbed_symbols.update(set(symbols))

        except WebSocketDisconnect:
            pass
        except RuntimeError:
            await ws.close()

    async def producer_handler(ws: WebSocket):
        try:
            while websocket.client_state != WebSocketState.DISCONNECTED:
                current_symbols = list(subbed_symbols)
                np.random.shuffle(current_symbols)

                for symbol in current_symbols:
                    await ws.send_json(get_ws_data(symbol))
                    await asyncio.sleep(np.random.uniform(0.5, 0.8))

                await asyncio.sleep(np.random.uniform(0.1, 0.3))

        except WebSocketDisconnect:
            pass
        except RuntimeError:
            await ws.close()

    consumer_task = asyncio.create_task(consumer_handler(websocket))
    producer_task = asyncio.create_task(producer_handler(websocket))

    done, pending = await asyncio.wait(
        [consumer_task, producer_task], return_when=asyncio.FIRST_COMPLETED
    )

    for task in pending:
        task.cancel()
```

### Edit the widgets.json File

Open the `widgets.json` file and add the following configuration:

```json
{
  "live_grid_example": {
    "name": "Live Grid",
    "description": "Live Grid",
    "type": "live_grid",
    "endpoint": "test_websocket",
    "wsEndpoint": "ws",
    "data": {
      "wsRowIdColumn": "symbol",
      "table": {
        "showAll": true,
        "columnsDefs": [
          {
            "field": "symbol",
            "headerName": "Symbol"
          },
          {
            "field": "price",
            "headerName": "Price",
            "renderFn": "showCellChange",
            "renderFnParams": {
              "colorValueKey": "change"
            }
          },
          {
            "field": "change_percent",
            "headerName": "Change %",
            "renderFn": "greenRed"
          },
          {
            "field": "volume",
            "enableCellChangeWs": false,
            "headerName": "Volume"
          }
        ]
      }
    },
    "params": [
      {
        "paramName": "symbol",
        "description": "The symbol to get details for",
        "value": "TSLA",
        "label": "Symbol",
        "type": "text",
        "multiSelect": true,
        "options": [
          {"label": "AAPL", "value": "AAPL"},
          {"label": "GOOGL", "value": "GOOGL"},
          {"label": "MSFT", "value": "MSFT"},
          {"label": "AMZN", "value": "AMZN"},
          {"label": "TSLA", "value": "TSLA"}
        ]
      }
    ],
    "gridData": {
      "w": 20,
      "h": 9
    }
  }
}
```

A few key points:

- The `endpoint` is the endpoint that will be used to get the initial data for the widget.
- The `wsEndpoint` is the endpoint that will be used to get the live updates for the widget.
- The `enableCellChangeWs` is a boolean that will be used to determine if the cell change will be sent over the WebSocket. Use this to prevent the cell from being updated over the WebSocket. By default, it is set to `true` for fields that are sent in the websocket and appear in the data. The only field that is special here is the `wsRowIdColumn` which is the column that will be used to identify the row.
- The `wsRowIdColumn` is the column that will be used to identify the row. This is important to set correctly to ensure the live updates are displayed correctly. This the key between your ws and the initial data.
- The `renderFn` is the function that will be used to render the cell. You can find more information on the [Render Functions](../widget-configuration/render-functions.md) page. In our case we are using a custom function `showCellChange` to display the change in price and providing the key to use.

## Step 3: Run the Application

Start the FastAPI Server using Uvicorn. This will host your backend locally:

```bash
uvicorn main:app --host localhost --port 5050
```

## Step 4: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the default category with the name `Live Grid`. The widget will display real-time price updates for the selected symbols.

<img className="pro-border-gradient" width="600" alt="live-feed" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/live_grid.png" />

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).


---

---
title: Markdown
sidebar_position: 4
description: Learn how to create and customize markdown widgets in OpenBB Workspace, including basic markdown display and data-rich markdown with dynamic content integration.
keywords:
- markdown widget
- widget configuration
- dynamic markdown
- data integration
- widget display
- markdown formatting
- widget customization
- OpenBB Workspace
- widget development
- markdown content
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Markdown | OpenBB Workspace Docs" />

A simple widget that displays markdown content.

<img className="pro-border-gradient" width="800" alt="Markdown Widget Example" src="https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png" />

```python
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

The gridData parameter specifies the widget's size in the OpenBB Workspace grid system. More on that can be found [here](../widget-configuration/grid-size).

## Data rich markdown

<img className="pro-border-gradient" width="600" alt="markdown" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/markdown-widget.png" />

```python
@register_widget({
  "name": "Defi Llama Protocol Details",
  "description": "Details for a given protocol",
  "category": "Crypto",
  "defaultViz": "markdown",
  "endpoint": "defi_llama_protocol_details",
  "gridData": {"w": 20, "h": 9},
  "source": "Defi Llama",
  "params": [
    {
      "paramName": "protocol_id",
      "value": "aave",
      "label": "Protocol",
      "type": "text",
      "description": "Defi Llama ID of the protocol"
    }
  ]
})
@app.get("/defi_llama_protocol_details")
def defi_llama_protocol_details(protocol_id: str = None):
    """Get details for a given protocol using Defi Llama"""
    data = requests.get(f'https://api.llama.fi/protocol/{protocol_id}')

    if data.status_code == 200:
        data = data.json()
    else:
        return JSONResponse(content={"error": data.text}, status_code=data.status_code)

    github_links = ""
    if 'github' in data and data['github']:
        github_links = "**GitHub:** " + ", ".join(data['github'])

    # Use HTML for multi-column layout
    markdown = dedent(f"""
        ![{data.get('name', 'N/A')} Logo]({data.get('logo', '')}) 
        # {data.get('name', 'N/A')} ({data.get('symbol', 'N/A').upper()})
        **Description:** {data.get('description', 'N/A')}
        ---
        ## Twitter
        **Twitter:** {data.get('twitter', 'N/A')}
        ## Links
        **Website:** {data.get('url', 'N/A')}
        {github_links}
    """)
    return markdown
```

**Note:** The `dedent` function is used to remove leading whitespace from the markdown string. This is a good practice to ensure the markdown is formatted correctly.




## Markdown Widget with Local Image

A widget that displays markdown content with an embedded local image. The image is converted to base64 for display.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Local Image Example" src="https://openbb-cms.directus.app/assets/f2847732-a01e-4146-8095-5dc389c98c7a.png" />

```python
@register_widget({
    "name": "Markdown Widget with Local Image",
    "description": "A markdown widget with a local image",
    "type": "markdown",
    "endpoint": "markdown_widget_with_local_image",
    "gridData": {"w": 20, "h": 20},
})
@app.get("/markdown_widget_with_local_image")
def markdown_widget_with_local_image():
    """Returns a markdown widget with a local image"""
    try:
        with open("img.png", "rb") as image_file:
            image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
            return f"![Local Image](data:image/png;base64,{image_base64})"
    except FileNotFoundError:
        raise HTTPException(
            status_code=500,
            detail="Image file not found"
        ) from e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error reading image: {str(e)}"
        ) from e
```

## Markdown Widget with Image from URL

The Markdown widget also provides image handling capabilities, supporting both local and remote images. Images are converted to base64 format for displaying.

Below is a markdown widget that displays markdown content with an image fetched from a URL. The image is converted to base64 for display.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Image from URL Example" src="https://openbb-cms.directus.app/assets/bf26f507-ec62-45d8-bec2-531fe75624e4.png" />

```python
@register_widget({
    "name": "Markdown Widget with Image from URL",
    "description": "A markdown widget with an image from a URL",
    "type": "markdown",
    "endpoint": "markdown_widget_with_image_from_url",
    "gridData": {"w": 20, "h": 20},
})
@app.get("/markdown_widget_with_image_from_url")
def markdown_widget_with_image_from_url():
    """Returns a markdown widget with an image from a URL"""
    image_url = "https://api.star-history.com/svg?repos=openbb-finance/OpenBB&type=Date&theme=dark"
    
    try:
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        
        content_type = response.headers.get('content-type', '')
        if not content_type.startswith('image/'):
            raise HTTPException(
                status_code=500,
                detail=f"URL did not return an image. Content-Type: {content_type}"
            )

        image_base64 = base64.b64encode(response.content).decode('utf-8')
        return f"![OpenBB Logo](data:{content_type};base64,{image_base64})"
        
    except requests.RequestException as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to fetch image: {str(e)}"
        ) from e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error processing image: {str(e)}"
        ) from e
``` 

---

---
title: Metric
sidebar_position: 5
description: Learn how to integrate your own backend with OpenBB Workspace using the cookie-cutter or language-agnostic API approaches, with illustrative guides and principles for handling widget.json files, APIs, interfaces, Python, FastAPI, and more.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Language-Agnostic API
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Metric | OpenBB Workspace Docs" />

A widget that displays key metrics with labels, values, and delta changes. Useful for showing important statistics and their trends.

<img className="pro-border-gradient" width="600" alt="metric" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/metric-widget.png" />

```python
@register_widget({
  "name": "Metric Widget",
  "description": "A metric widget example",
  "category": "Test",
  "endpoint": "test_metric",
  "type": "metric"
})
@app.get("/test_metric")
def test_metric():
    """Example endpoint to provide metric data."""
    # Example data structure
    data = {
        "label": "Example Label",
        "value": "12345",
        "delta": "5.67"
    }

    return JSONResponse(content=data)
```

As you can see in the example the data structure is as follows:

- `label`: The label of the metric.
- `value`: The value of the metric.
- `delta`: The delta of the metric.

## Multiple metrics

<img className="pro-border-gradient" width="800" alt="Metric Widget Example" src="https://openbb-cms.directus.app/assets/ba37bbbb-371a-40e8-a7e1-e48edcc6c0c8.png" />

```python
@register_widget({
    "name": "Metric Widget",
    "description": "A metric widget",
    "endpoint": "metric_widget",
    "gridData": {
      "w": 5,
      "h": 5
    },
    "type": "metric"
})
@app.get("/metric_widget")
def metric_widget():
    data = [
        {
            "label": "Total Users",
            "value": "1,234,567",
            "delta": "12.5"
        },
        {
            "label": "Active Sessions",
            "value": "45,678",
            "delta": "-2.3"
        },
        {
            "label": "Revenue (USD)",
            "value": "$89,432",
            "delta": "8.9"
        },
        {
            "label": "Conversion Rate",
            "value": "3.2%",
            "delta": "0.0"
        },
        {
            "label": "Avg. Session Duration",
            "value": "4m 32s",
            "delta": "0.5"
        }
    ]

    return JSONResponse(content=data)
```


---

---
title: Newsfeed
sidebar_position: 12
description: Learn how to create a newsfeed widget for OpenBB Workspace that displays articles in a clean, organized format.
keywords:
- widgets.json
- OpenBB API
- Newsfeed widget
- Article display
- News integration
- FastAPI
- Custom Backend
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Newsfeed | OpenBB Workspace Docs" />

This guide will walk you through creating a newsfeed widget for OpenBB Workspace. We'll use CoinDesk's API as an example, but you can adapt this to any news source.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/workspace/developers/data-integration#1-create-the-api-server) page.

## Step 2: Create the Newsfeed Endpoint

Edit the `main.py` file and add the following code.

The newsfeed widget expects articles in a specific format. Each article must include:

```python
{
    "title": string,    # Article title
    "date": string,    # ISO 8601 formatted date
    "author": string,  # Article author
    "excerpt": string, # Short preview of the article
    "body": string,    # Full article text (can include markdown)
}
```

Here's an example implementation using CoinDesk's API:

```python
...

class CoindeskArticle(TypedDict):
    TYPE: str
    ID: int
    TITLE: str
    SUBTITLE: Optional[str]
    AUTHORS: str
    URL: str
    BODY: str
    PUBLISHED_ON: int
    IMAGE_URL: str
    KEYWORDS: str
    LANG: str
    SENTIMENT: str


class TransformedArticle(TypedDict):
    title: str
    date: str
    author: str
    excerpt: str
    body: str


def transform_article(article: CoindeskArticle) -> TransformedArticle:
    """Transform a CoinDesk article to a standardized format."""
    # Convert UNIX timestamp to ISO format
    date = datetime.fromtimestamp(article["PUBLISHED_ON"]).isoformat()

    # Create excerpt from body (first 150 characters)
    body = article["BODY"]
    excerpt = f"{body[:150]}..." if len(body) > 150 else body

    return {
        "title": article["TITLE"],
        "date": date,
        "author": article["AUTHORS"],
        "excerpt": excerpt,
        "body": body,
    }


def fetch_news(limit: str, lang: str, categories: Optional[str] = None) -> List[TransformedArticle]:
    """Fetch news from the CoinDesk API."""
    url = f"https://data-api.coindesk.com/news/v1/article/list?lang={lang}&limit={limit}"

    if categories:
        url += f"&categories={categories}"

    response = requests.get(url)

    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail=f"Failed to fetch news: {response.reason}")

    data = response.json()
    return [transform_article(article) for article in data.get("Data", [])]


@app.get("/news")
def get_coindesk_news(limit: str = "10", lang: str = "EN", categories: Optional[str] = None):
    """Get news from CoinDesk."""
    try:
        news = fetch_news(limit, lang, categories)
        return news
    except Exception as e:
        return JSONResponse(content={"error": f"Failed to fetch news: {str(e)}"}, status_code=500)
```

## Step 3: Configure widgets.json

Add the widget configuration to your `widgets.json` file:

```json
{
  "coindesk_news": {
    "type": "newsfeed",
    "name": "CoinDesk News",
    "description": "Get the latest crypto news from CoinDesk",
    "endpoint": "/news",
    "gridData": {
      "w": 40,
      "h": 20
    },
    "source": "coindesk",
    "params": [
      {
        "paramName": "limit",
        "label": "Limit",
        "description": "The number of news articles to fetch",
        "type": "number",
        "value": "10"
      },
      {
        "paramName": "lang",
        "label": "Language",
        "description": "The language of the news articles",
        "type": "text",
        "value": "EN",
        "options": [
          {
            "label": "English",
            "value": "EN"
          },
          {
            "label": "Spanish",
            "value": "ES"
          }
        ]
      }
    ]
  }
}
```

## Step 4: Run the Application

Start your FastAPI server:

```bash
uvicorn main:app --host localhost --port 5050
```

## Step 5: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the `Test` category with the name `Test Metric`.

<img className="pro-border-gradient" width="600" alt="newsfeed" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/newsfeed.png" />

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).


---

---
title: Omni
sidebar_position: 14
description: Learn how to create versatile Omni widgets for OpenBB Workspace that can dynamically return different content types based on input parameters.
keywords:
- omni widget
- dynamic content
- POST request
- multi-format output
- widget configuration
- citations
- flexible widgets
- OpenBB Workspace
- widget development
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Omni Widget | OpenBB Workspace Docs" />

The Omni widget is a versatile widget type that can dynamically return different content formats (markdown, tables, or charts). Unlike other widgets that use GET requests, the Omni widget uses POST requests and passes all parameters in the request body. This widget requires the `prompt` parameter to be passed in the params section of the widget configuration.

## Key Features

- **Dynamic Output Control**: Can return different content types (text, table, chart)
- **Create Widgets from Responses**: Create widgets directly from the response types returned by the backend.
- **POST Request Method**: Uses POST instead of GET, with parameters passed in the request body
- **Citation Support**: Built-in support for adding citations and source information
- **Flexible Parameter Handling**: All widget parameters are passed in the POST data

## Basic Omni Widget

Below is an example of a basic Omni widget that demonstrates the versatility by returning different content types based on the `type` parameter. In a real world example you might choose to dynamically return different content types based on your backend logic.

<img className="pro-border-gradient" width="800" alt="Omni Widget Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget.png" />

```python
from pydantic import BaseModel, Field
from typing import Any, List, Literal
from uuid import UUID
from fastapi import FastAPI, Body, Query
import json

class DataFormat(BaseModel):
    data_type: str
    parse_as: Literal["text", "table", "chart"]

class ExtraCitation(BaseModel):
    source_info: SourceInfo | None = Field(default=None)
    details: List[dict] | None = Field(default=None)

class OmniWidgetResponse(BaseModel):
    content: Any
    data_format: DataFormat
    extra_citations: list[ExtraCitation] | None = Field(default_factory=list)
    citable: bool = Field(default=True)

@register_widget({
    "name": "Omni Widget Example",
    "description": "A versatile omni widget that can display multiple types of content",
    "category": "General",
    "type": "omni",
    "endpoint": "omni-widget",
    "params": [
        {
            "paramName": "prompt",
            "type": "text",
            "description": "The prompt to send to the LLM to make queries or ask questions.",
            "label": "Prompt",
            "show": False
        },
        {
            "paramName": "type",
            "type": "text",
            "description": "Type of content to return",
            "label": "Content Type",
            "show": True,
            "options": [
                {"value": "markdown", "label": "Markdown"},
                {"value": "chart", "label": "Chart"},
                {"value": "table", "label": "Table"}
            ]
        }
    ],
    "gridData": {"w": 30, "h": 12}
})
@app.post("/omni-widget")
async def get_omni_widget(
    data: str | dict = Body(...)
):
    if isinstance(data, str):
        data = json.loads(data)

    # Return table format
    if data.get("type") == "table":
        content = [
            {"col1": "value1", "col2": "value2", "col3": "value3", "col4": "value4"},
            {"col1": "value5", "col2": "value6", "col3": "value7", "col4": "value8"},
            {"col1": "value9", "col2": "value10", "col3": "value11", "col4": "value12"},
        ]
        
        return OmniWidgetResponse(
            content=content,
            data_format=DataFormat(data_type="object", parse_as="table")
        )

    # Return chart format
    if data.get("type") == "chart":
        content = {
            "data": [
                {"x": [1, 2, 3], "y": [4, 1, 2], "type": "bar"},
                {"x": [1, 2, 3], "y": [2, 4, 5], "type": "bar"},
                {"x": [1, 2, 3], "y": [2, 3, 6], "type": "bar"},
            ],
            "layout": {
                "title": "Dynamic Chart",
                "template": "plotly_dark"
            },
        }
        
        return OmniWidgetResponse(
            content=content,
            data_format=DataFormat(data_type="object", parse_as="chart")
        )

    # Return markdown format (default)
    content = f"""### Dynamic Omni Widget Response

**Input Parameters:**
- **Search Query:** `{search}`
- **Content Type:** `{data.get('type', 'markdown')}`
- **Prompt:** `{data.get('prompt', 'No prompt provided')}`

#### Raw Data:
    {json.dumps(data, indent=2)}        

    """
        
    return OmniWidgetResponse(
        content=content,
        data_format=DataFormat(data_type="object", parse_as="text")
    )
```

## Omni Widget with Citations

This example demonstrates how to add citation support to your Omni widget, which is useful when you want to use the widget in conjunction with an agent. The citations are added to the response if the `citable` parameter is set to `True`. This is shown in the example below and returned when the user is interacting with the widget through an agent.

<img className="pro-border-gradient" width="800" alt="Omni Widget with Citations Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget+with+citation.png" />

```python
@register_widget({
    "name": "Omni Widget with Citations",
    "description": "An omni widget that includes citation information",
    "category": "General",
    "type": "omni",
    "endpoint": "omni-widget-citations",
    "params": [
        {
            "paramName": "prompt",
            "type": "text",
            "description": "The prompt to send to the LLM to make queries or ask questions.",
            "label": "Prompt",
            "show": True
        },
        {
            "paramName": "include_metadata",
            "type": "boolean",
            "description": "Include metadata in response",
            "label": "Include Metadata",
            "show": True,
            "value": True
        }
    ],
    "gridData": {"w": 30, "h": 15}
})
@app.post("/omni-widget-citations")
async def get_omni_widget_with_citations(
    data: str | dict = Body(...)
):
    if isinstance(data, str):
        data = json.loads(data)

    # Create citation information
    source_info = SourceInfo(
        type="widget",
        widget_id="omni_widget_citations",
        origin="custom_backend",
        name="Omni Widget with Citations",
        description="Example widget demonstrating citation functionality",
        metadata={
            "prompt": data.get("prompt", ""),
            "search_term": search,
            "timestamp": "2024-01-01T00:00:00Z",
            "data_source": "Custom API"
        }
    )
    
    extra_citation = ExtraCitation(
        source_info=source_info,
        details=[
            {
                "Source": "Custom Backend API",
                "Prompt": data.get("prompt", ""),
                "Search": search,
                "Metadata_Included": data.get("include_metadata", False),
                "Response_Type": "Dynamic Content"
            }
        ]
    )

    # Generate content based on parameters
    content = f"""# Query Results

**Search Query:** {search}
**User Prompt:** {data.get('prompt', 'No prompt provided')}

## Results
This is dynamically generated content based on your input parameters.

### Metadata
"""
    
    if data.get("include_metadata"):
        content += f"""
- **Widget ID:** omni_widget_citations
- **Timestamp:** 2024-01-01T00:00:00Z
- **Data Source:** Custom API
- **Parameters:** {json.dumps(data, indent=2)}
"""
    else:
        content += "Metadata hidden (set 'Include Metadata' to true to view)"

    return OmniWidgetResponse(
        content=content,
        data_format=DataFormat(data_type="object", parse_as="text"),
        extra_citations=[extra_citation],
        citable=True
    )
```

## Important Implementation Notes

### POST Request Method

Unlike other widget types that use GET requests, the Omni widget uses POST requests. This allows for more complex parameter handling and larger payloads:

```python
@app.post("/omni-widget")  # Note: POST, not GET
async def omni_endpoint(
    data: str | dict = Body(...)      # Main parameters in request body
):
    # Handle both string and dict formats
    if isinstance(data, str):
        data = json.loads(data)
    
    # All widget parameters are available in the 'data' object
    param_value = data.get("paramName")
```

### Dynamic Output Control

The Omni widget can return different content types based on the parse_as field in the DataFormat:

"text": For markdown/text content
"table": For tabular data (list of dictionaries)
"chart": For Plotly chart objects

```python
# Text/Markdown output
return OmniWidgetResponse(
    content="# Markdown content",
    data_format=DataFormat(data_type="object", parse_as="text")
)
```

```python
# Table output
return OmniWidgetResponse(
    content=[{"col1": "val1", "col2": "val2"}],
    data_format=DataFormat(data_type="object", parse_as="table")
)   
```

```python
# Chart output
return OmniWidgetResponse(
    content={"data": [...], "layout": {...}},
    data_format=DataFormat(data_type="object", parse_as="chart")
)
```

### Parameter Handling

All widget parameters defined in the widget configuration are passed in the POST request body, and the `prompt` parameter is required:

```json
{
  "params": [
    {
        // Required parameter for the LLM to make queries or ask questions
        "paramName": "prompt",
        "type": "text",
        "description": "The prompt to send to the LLM to make queries or ask questions.",
        "label": "Prompt",
        "show": False
    }
    {
        "paramName": "user_input",
        "type": "text",
        "label": "User Input"
    },
    {
        "paramName": "option_select",
        "type": "text",
        "options": [...]
    }
  ]
}
```

These parameters are accessible in your endpoint:

```python
@app.post("/omni-widget")
async def omni_endpoint(data: dict = Body(...)):
    user_input = data.get("user_input")
    selected_option = data.get("option_select")
    prompt = data.get("prompt")
    # Process parameters...
```

## Use Cases

The Omni widget is particularly useful for:

- AI/LLM Integration: Dynamic content generation based on user prompts
- Multi-format Data Display: Single endpoint that can return different visualizations
- Citation-heavy Applications: Research tools that need to track data sources.

---

---
title: Plotly Charts
sidebar_position: 9
description: Plotly Charts
keywords:
- plotly
- charts
- visualization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Plotly Charts | OpenBB Workspace Docs" />

## Basic Plotly Chart

A widget that demonstrates how to use the Plotly library to create a chart. This gives you the ability to create any interactive type of charts with unlimited flexibility.

<img className="pro-border-gradient" width="800" alt="Basic Plotly Chart Example" src="https://openbb-cms.directus.app/assets/5c35a4a2-750c-4284-899a-066ea923e5c8.png" />

```python
@register_widget({
    "name": "Plotly Chart",
    "description": "Plotly chart",
    "type": "chart",
    "endpoint": "plotly_chart",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart")
def get_plotly_chart():
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    # Add the line trace for returns
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2)
    ))
    
    # Add the bar trace for transactions
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5
    ))
    
    # Update layout with axis titles and secondary y-axis
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right"
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    return json.loads(fig.to_json())
```

## Plotly Chart with Theme

This endpoint extends the basic Plotly chart by adding theme support. The theme parameter is automatically provided by OpenBB Workspace based on the user's current display mode (dark/light). This enables dynamic chart styling that matches the workspace theme. The theme parameter is optional - if unused, OpenBB will still pass it but the endpoint will ignore it.

Note: OpenBB widget UI dark mode is #151518 and light mode is #FFFFFF, using these background colors make the chart look consistent with the widgets in the OpenBB Workspace.

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme Example" src="https://openbb-cms.directus.app/assets/f5037dbb-a644-4560-91f6-eaef987e5739.png" />


<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Toolbar Example" src="https://openbb-cms.directus.app/assets/70d07f0b-6ed9-4f9f-80fe-e1e4e268ecb5.png" />


```python
@register_widget({
    "name": "Plotly Chart with Theme",
    "description": "Plotly chart with theme",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme")
def get_plotly_chart_with_theme(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    if theme == "dark":
        # Dark theme colors and styling
        line_color = "#FF8000"  # Orange
        bar_color = "#2D9BF0"   # Blue
        text_color = "#FFFFFF"  # White
        grid_color = "rgba(51, 51, 51, 0.3)"
        bg_color = "#151518"    # Dark background
    else:
        # Light theme colors and styling
        line_color = "#2E5090"  # Navy blue
        bar_color = "#00AA44"   # Forest green
        text_color = "#333333"  # Dark gray
        grid_color = "rgba(221, 221, 221, 0.3)"
        bg_color = "#FFFFFF"    # White background
    
    # Add the line trace for returns with theme-specific color
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=line_color)
    ))
    
    # Add the bar trace for transactions with theme-specific color
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=bar_color
    ))
    
    # Update layout with theme-specific styling
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(color=text_color)
        ),
        paper_bgcolor=bg_color,
        plot_bgcolor=bg_color,
        font=dict(color=text_color),
        xaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        yaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    return json.loads(fig.to_json())
```

## Plotly Chart with Theme and Toolbar

This endpoint extends the basic Plotly chart by adding a toolbar to the chart. The toolbar is a set of buttons that allows the user to interact with the chart.

Note: As you can see, all the settings and styling utilized by plotly can be too much boilerplate code, so it is recommended to create a plotly_config.py file and use the functions defined in that file to create the chart.

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Toolbar Example" src="https://openbb-cms.directus.app/assets/cc9ed36b-fdb5-47ca-ba9b-c91dd4b772cd.png" />

```python
@register_widget({
    "name": "Plotly Chart with Theme and Toolbar",
    "description": "Plotly chart with Theme and toolbar",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme_and_toolbar",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme_and_toolbar")
def get_plotly_chart_with_theme_and_toolbar(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    if theme == "dark":
        # Dark theme colors and styling
        line_color = "#FF8000"  # Orange
        bar_color = "#2D9BF0"   # Blue
        text_color = "#FFFFFF"  # White
        grid_color = "rgba(51, 51, 51, 0.3)"
        bg_color = "#151518"    # Dark background
    else:
        # Light theme colors and styling
        line_color = "#2E5090"  # Navy blue
        bar_color = "#00AA44"   # Forest green
        text_color = "#333333"  # Dark gray
        grid_color = "rgba(221, 221, 221, 0.3)"
        bg_color = "#FFFFFF"    # White background
    
    # Add the line trace for returns with theme-specific color
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=line_color)
    ))
    
    # Add the bar trace for transactions with theme-specific color
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=bar_color
    ))
    
    # Update layout with theme-specific styling
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(color=text_color)
        ),
        paper_bgcolor=bg_color,
        plot_bgcolor=bg_color,
        font=dict(color=text_color),
        xaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        yaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    # Configure the toolbar and other display settings
    toolbar_config = {
        'displayModeBar': True,
        'responsive': True,
        'scrollZoom': True,
        'modeBarButtonsToRemove': [
            'lasso2d',
            'select2d',
            'autoScale2d',
            'toggleSpikelines',
            'hoverClosestCartesian',
            'hoverCompareCartesian'
        ],
        'modeBarButtonsToAdd': [
            'drawline',
            'drawcircle',
            'drawrect',
            'eraseshape'
        ],
        'doubleClick': 'reset+autosize',
        'showTips': True,
        'watermark': False,
        'staticPlot': False,
        'locale': 'en',
        'showAxisDragHandles': True,
        'showAxisRangeEntryBoxes': True,
        'displaylogo': False,
        'modeBar': {
            'bgcolor': 'rgba(0, 0, 0, 0.1)' if theme == 'light' else 'rgba(255, 255, 255, 0.1)',
            'color': text_color,
            'activecolor': line_color,
            'orientation': 'v',
            'yanchor': 'top',
            'xanchor': 'right',
            'x': 1.05,  # Increased spacing from chart
            'y': 1,
            'opacity': 0,  # Start hidden
            'hovermode': True,  # Show on hover
            'hoverdelay': 0,  # No delay on hover
            'hoverduration': 0  # No delay on hover out
        }
    }
    
    # Convert figure to JSON and add config
    figure_json = json.loads(fig.to_json())
    figure_json['config'] = toolbar_config
    
    return figure_json
```

## Plotly Chart with Theme and Config File

This widget demonstrates how to create a chart using the Plotly library and use the config file to minimize the amount of code needed to create the chart.

For reference, here's where this particular `plotly_config.py` was used: <a href="https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py" target="_blank">https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py</a>

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Config File Example" src="https://openbb-cms.directus.app/assets/ab77c29f-a554-4c13-a949-7b964f86b555.png" />

```python
@register_widget({
    "name": "Plotly Chart with Theme and Toolbar using Config File",
    "description": "Plotly chart with theme and toolbar using config file",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme_and_toolbar_using_config_file",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme_and_toolbar_using_config_file")
def get_plotly_chart_with_theme_and_toolbar_using_config_file(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Get theme colors
    colors = get_theme_colors(theme)
    
    # Create the figure
    fig = go.Figure()
    
    # Add the line trace for returns
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=colors["main_line"])
    ))
    
    # Add the bar trace for transactions
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=colors["neutral"]
    ))
    
    fig.update_layout(**base_layout(theme=theme))
    
    # Add secondary y-axis for transactions
    fig.update_layout(
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=colors["grid"],
            tickfont=dict(color=colors["text"])
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")

    figure_json = json.loads(fig.to_json())
    figure_json['config'] = get_toolbar_config()
    
    return figure_json
```

## Plotly Heatmap

This widget demonstrates that with Plotly you can create any type of chart including heatmaps, scatter plots, line charts, 3d charts, etc. and also demonstrates how parameters can influence a plotly chart.

**Note that the theme parameter always comes at the end of the function.**

<img className="pro-border-gradient" width="800" alt="Plotly Heatmap Example" src="https://openbb-cms.directus.app/assets/8bf50c78-d00c-4ecb-aeb0-be1cd23cc778.png" />

```python
@register_widget({
    "name": "Plotly Heatmap",
    "description": "Plotly heatmap",
    "type": "chart",
    "endpoint": "plotly_heatmap",
    "gridData": {"w": 40, "h": 15},
    "params": [
        {
            "paramName": "color_scale",
            "description": "Select the color scale for the heatmap",
            "value": "RdBu_r",
            "label": "Color Scale",
            "type": "text",
            "show": True,
            "options": [
                {"label": "Red-Blue (RdBu_r)", "value": "RdBu_r"},
                {"label": "Viridis", "value": "Viridis"},
                {"label": "Plasma", "value": "Plasma"},
                {"label": "Inferno", "value": "Inferno"},
                {"label": "Magma", "value": "Magma"},
                {"label": "Greens", "value": "Greens"},
                {"label": "Blues", "value": "Blues"},
                {"label": "Reds", "value": "Reds"}
            ]
        }
    ]
})
@app.get("/plotly_heatmap")
def get_plotly_heatmap(color_scale: str = "RdBu_r", theme: str = "dark"):
    # Create mock stock symbols
    symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']

    # Create mock correlation matrix directly
    corr_matrix = [
        [1.00, 0.65, 0.45, 0.30, 0.20],  # AAPL correlations
        [0.65, 1.00, 0.55, 0.40, 0.25],  # MSFT correlations
        [0.45, 0.55, 1.00, 0.35, 0.15],  # GOOGL correlations
        [0.30, 0.40, 0.35, 1.00, 0.10],  # AMZN correlations
        [0.20, 0.25, 0.15, 0.10, 1.00]   # TSLA correlations
    ]

    # Get theme colors
    colors = get_theme_colors(theme)

    # Create the figure
    fig = go.Figure()
    # Apply base layout configuration
    layout_config = base_layout(theme=theme)

    # This allows users to modify the layout configuration further
    # in case they want to steer from the default settings.
    layout_config['title'] = {
        'text': "Correlation Matrix",
        'x': 0.5,
        'y': 0.95,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': {'size': 20}
    }
    layout_config['margin'] = {'t': 50, 'b': 50, 'l': 50, 'r': 50}
    
    # Update figure with complete layout
    fig.update_layout(layout_config)

    # Add the heatmap trace
    fig.add_trace(go.Heatmap(
        z=corr_matrix,
        x=symbols,
        y=symbols,
        colorscale=color_scale,
        zmid=colors["heatmap"]["zmid"],
        text=[[f'{val:.2f}' for val in row] for row in corr_matrix],
        texttemplate='%{text}',
        textfont={"color": colors["heatmap"]["text_color"]},
        hoverongaps=False,
        hovertemplate='%{x} - %{y}<br>Correlation: %{z:.2f}<extra></extra>'
    ))
    
    # Convert figure to JSON and apply config
    figure_json = json.loads(fig.to_json())
    figure_json['config'] = {
        **get_toolbar_config(),
        'scrollZoom': False  # Disable scroll zoom
    }

    return figure_json
```

## Plotly Chart with Raw Data

This widget demonstrates how to create a Plotly chart that can toggle between displaying the chart visualization and showing the raw data. The button to switch can be found in the top right corner of the widget like seen below.

When `raw` is `True`, you will be able to switch between the data on the widget and our copilot will better understand the data in the chart. Remember that you need to set the "raw": true in the widgets.json, and raw needs to be a input parameter that is set to False so that the default view is chart. Also the data output in case raw is True, is the underlying data that is utilized for the plotly chart (and not the input parameters!).

As output, you either return JSON output for raw data or for plotly chart, but never both combined.

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Raw Data Switch" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/plotly+switch.png" />

```python
@register_widget({
    "name": "Chains Chart Example Plotly with Raw Data",
    "description": "Get current TVL of all chains and plot it with Plotly",
    "type": "chart",
    "endpoint": "chains",
    "gridData": {"w": 40, "h": 9},
    "raw": true,
})
@app.get("/chains")
def get_chains(raw: bool = False, theme: str = "dark"):
    """Get current TVL of all chains using Defi Llama"""
    params = {}
    response = requests.get("https://api.llama.fi/v2/chains", params=params)

    if response.status_code == 200:
        # Create a DataFrame from the JSON data
        df = pd.DataFrame(response.json())

        # OPTIONAL - If raw is True, return the data as a list of dictionaries
        # Otherwise, return the data as a Plotly figure
        # This is useful when you want to make sure the AI can see the data
        if raw:
            return df.to_dict(orient="records")

        # Sort the DataFrame by 'tvl' in descending order and select the top 30
        top_30_df = df.sort_values(by="tvl", ascending=False).head(30)

        # Get theme colors
        colors = get_theme_colors(theme)

        # Create a bar chart using Plotly
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=top_30_df["tokenSymbol"], 
            y=top_30_df["tvl"],
            marker_color=colors["main_line"],
            opacity=0.8
        ))

        # Apply base layout configuration
        layout_config = base_layout(theme=theme)
        layout_config.update({
            'title': {
                'text': "Top 30 Chains by TVL",
                'x': 0.5,
                'y': 0.95,
                'xanchor': 'center',
                'yanchor': 'top',
                'font': {'size': 20}
            },
            'xaxis_title': "Token Symbol",
            'yaxis_title': "Total Value Locked (TVL)",
            'margin': {'t': 80, 'b': 80, 'l': 80, 'r': 80}
        })

        fig.update_layout(layout_config)

        # Convert figure to JSON and apply config
        figure_json = json.loads(fig.to_json())
        figure_json['config'] = get_toolbar_config()

        return figure_json

    print(f"Request error {response.status_code}: {response.text}")
    return JSONResponse(
        content={"error": response.text}, status_code=response.status_code
    )
```

## Additional Resources

For more information on setting up and configuring Plotly charts within the OpenBB Workspace, you can visit the [OpenBB Backend Examples for Chart Widgets](https://github.com/OpenBB-finance/backends-for-openbb/tree/main/widget-examples/widget-types/chart_widget). This resource provides detailed examples and guidance on how to effectively utilize Plotly for creating interactive and dynamic chart widgets.


---

---
title: SSRM Mode
sidebar_position: 7
description: Server-Side Rendered Mode for handling large datasets efficiently in OpenBB Workspace widgets
keywords:
- SSRM
- server-side rendering
- large datasets
- performance
- data optimization
- advanced widgets
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="SSRM Mode | OpenBB Workspace Docs" />

# Server-Side Rendered Mode (SSRM)

Server-Side Rendered Mode (SSRM) is an advanced widget implementation approach designed to handle large datasets efficiently in OpenBB Workspace. Unlike traditional widgets that load all data at once, SSRM mode enables server-side pagination, filtering, and sorting, making it ideal for displaying massive datasets without compromising performance.

## Key Features & Use Cases

SSRM mode is designed for enterprise applications that need to handle **large datasets** (200,000+ rows) efficiently. Instead of loading all data at once, it provides server-side operations that optimize performance and user experience.

## How SSRM Differs from Standard Table Widget

| Aspect | Standard Table Widget | SSRM Mode |
|--------|------------------|-----------|
| Data Loading | All data loaded at once | Data loaded on-demand |
| Filtering | Client-side filtering | Server-side filtering |
| Sorting | Client-side sorting | Server-side sorting |
| Memory Usage | High for large datasets | Optimized memory usage |
| Initial Load Time | Slower for large datasets | Fast initial load |
| Network Traffic | High initial payload | Optimized payloads |
| Complexity | Simple implementation | Advanced server logic |

## Widget Configuration

To use SSRM mode, your widget configuration must specify the correct widget type:

```json
{
  "name": "SSRM Data Table",
  "description": "Server-side rendered table for large datasets",
  "type": "ssrm_table",
  "endpoint": "data-ssrm",
  "gridData": {"w": 12, "h": 8}
}
```

**Important**: The widget type must be set to `"ssrm_table"` to enable server-side row model functionality. This tells OpenBB Workspace to use the SSRM interface instead of the normal table widget.

## Implementation Overview

The SSRM example implementation is built as a FastAPI server that handles AgGrid's Server-Side Row Model requests.

For complete implementation examples and code samples, refer to the [SSRM Mode Examples Repository](https://github.com/OpenBB-finance/backends-for-openbb/tree/main/widget-examples/ssrm_mode).

Here's what the implementation provides:

### Core Architecture

- **FastAPI Server**: Main application handling SSRM requests from the widget
- **Database Manager**: Multi-database interface supporting SQLite, MySql, and Snowflake 
- **Custom Models**: `AgGridOptions` and `AgRows` models for structured data handling
- **Query Engine**: Modular system for converting AgGrid requests to optimized SQL queries

### Key Endpoint: `/data-ssrm`

The main POST endpoint processes AgGrid SSRM requests and handles:

- **Pagination**: Processes `startRow`/`endRow` parameters for efficient data paging
- **Filtering**: Supports text, number, and set filters with various operators (contains, equals, greaterThan, etc.)
- **Sorting**: Multi-column sorting with ascending/descending directions
- **Grouping**: Row grouping with COUNT aggregation and hierarchical support

### Request/Response Flow

1. AgGrid frontend sends SSRM request with pagination, filters, sorting, and grouping parameters
2. Server converts request to a valid query using the `AgRows` model
3. Database manager executes query against the database
4. Results are formatted and returned with `rowData` and `rowCount` for AgGrid consumption

## AI Data

When using SSRM mode with AI functionality in OpenBB Workspace, there's an important limitation to understand:

**"What You See Is What You Get"**: AI can only access and analyze the data that is currently visible in the table widget. This means:

- AI will only see the specific rows that are loaded and displayed on screen
- If your dataset has 15 million rows but only 100 are currently visible, AI can only work with those 100 rows
- Pagination, filtering, and sorting affect what data is available to AI analysis
- AI cannot access the entire dataset that exists in your database

### Current Implementation
This is the current approach for AI data access in SSRM mode. Future implementations are planned to make this more robust and provide broader data access capabilities for AI analysis.

### Best Practices for AI Integration
- Load relevant data subsets that you want AI to analyze
- Use filtering to focus on specific data ranges before engaging AI
- Consider the scope of your analysis when working with paginated data
- Be aware that AI insights will be limited to the currently displayed dataset 

---

---
title: TradingView Charts
sidebar_position: 10
description: How to implement TradingView charts in OpenBB using UDF (Universal Data Feed)
keywords:
- tradingview
- charts
- visualization
- UDF
- data feed
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="TradingView Charts | OpenBB Workspace Docs" />

This guide explains how to implement TradingView charts in OpenBB using TradingView's Universal Data Feed (UDF) protocol. The UDF protocol allows you to create custom data feeds for TradingView charts.

## Prerequisites

1. FastAPI or similar web framework for implementing the UDF endpoints
2. Data source for market data (OHLCV)

## Required UDF Endpoints

To implement TradingView charts, you need to create the following UDF endpoints:

### 1. Configuration Endpoint (`/udf/config`)

```python
@app.get("/udf/config")
async def get_config():
    """UDF configuration endpoint"""
    return {
        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],
        "supports_group_request": False,
        "supports_marks": False,
        "supports_search": True,
        "supports_timescale_marks": False,
        "supports_time": True,
        "exchanges": [
            {"value": "", "name": "All Exchanges", "desc": ""},
            {"value": "NASDAQ", "name": "NASDAQ", "desc": "NASDAQ Stock Exchange"}
        ],
        "symbols_types": [
            {"name": "All types", "value": ""},
            {"name": "Stocks", "value": "stock"}
        ]
    }
```

### 2. Symbol Search Endpoint (`/udf/search`)

```python
@app.get("/udf/search")
async def search_symbols(
    query: str = Query("", description="Search query"),
    limit: int = Query(30, description="Limit of results")
):
    """UDF symbol search endpoint"""
    results = []
    # Implement your symbol search logic here
    return results
```

### 3. Symbol Info Endpoint (`/udf/symbols`)

```python
@app.get("/udf/symbols")
async def get_symbol_info(symbol: str = Query(..., description="Symbol to get info for")):
    """UDF symbol info endpoint"""
    return {
        "name": symbol,
        "description": "Symbol Description",
        "type": "stock",
        "exchange": "NASDAQ",
        "pricescale": 100,
        "minmov": 1,
        "volume_precision": 0,
        "has_volume": True,
        "has_intraday": True,
        "has_daily": True,
        "has_weekly_and_monthly": True,
        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],
        "session-regular": "0930-1600",
        "timezone": "America/New_York"
    }
```

### 4. Historical Data Endpoint (`/udf/history`)

```python
@app.get("/udf/history")
async def get_history(
    symbol: str = Query(..., description="Symbol"),
    resolution: str = Query(..., description="Resolution"),
    from_time: int = Query(..., alias="from", description="From timestamp"),
    to_time: int = Query(..., alias="to", description="To timestamp")
):
    """UDF historical data endpoint"""
    # Implement your data fetching logic here
    return {
        "s": "ok",
        "t": [timestamp1, timestamp2, ...],  # Time array
        "o": [open1, open2, ...],  # Open prices array
        "h": [high1, high2, ...],  # High prices array
        "l": [low1, low2, ...],  # Low prices array
        "c": [close1, close2, ...],  # Close prices array
        "v": [volume1, volume2, ...]  # Volume array
    }
```

### 5. Server Time Endpoint (`/udf/time`)

```python
@app.get("/udf/time")
async def get_server_time():
    """UDF server time endpoint"""
    return int(datetime.now().timestamp())
```

## Widget Registration

To register the TradingView chart widget in OpenBB:

```python
@register_widget({
    "name": "TradingView Chart",
    "description": "Advanced charting with TradingView",
    "category": "Finance",
    "type": "advanced_charting",
    "endpoint": "/udf",
    "gridData": {
        "w": 20,
        "h": 20
    },
    "data": {
        "defaultSymbol": "AAPL",
        "updateFrequency": 60000,
        }
    }
})
def tradingview_chart():
    """Dummy function for TradingView chart widget registration"""
    pass

```

## Data Format Requirements

The historical data endpoint must return data in the following format:

```python
{
    "s": "ok",  # Status: ok
    "t": [timestamp1, timestamp2, ...],  # Time array (Unix timestamps)
    "o": [open1, open2, ...],  # Open prices array
    "h": [high1, high2, ...],  # High prices array
    "l": [low1, low2, ...],  # Low prices array
    "c": [close1, close2, ...],  # Close prices array
    "v": [volume1, volume2, ...]  # Volume array
}
```

## Best Practices

1. **Error Handling**: Implement proper error handling for all endpoints
2. **Data Validation**: Validate all input parameters
3. **Caching**: Implement caching for frequently accessed data
4. **Rate Limiting**: Add rate limiting to prevent abuse
5. **Security**: Implement proper authentication and authorization
6. **Performance**: Optimize data fetching and processing
7. **Documentation**: Document all endpoints and their parameters

## Example Implementation

Here's a complete example of implementing the historical data endpoint with mock data:

```python
def generate_mock_price_data(symbol: str, from_time: int, to_time: int, resolution: str) -> dict:
    """Generate mock OHLCV data for a symbol"""
    resolution_minutes = {
        "1": 1, "5": 5, "15": 15, "30": 30, "60": 60,
        "D": 1440, "W": 10080, "M": 43200
    }.get(resolution, 60)

    current_time = from_time
    timestamps = []
    while current_time <= to_time:
        timestamps.append(current_time)
        current_time += resolution_minutes * 60

    base_price = 100.0
    prices = []
    current_price = base_price

    for _ in timestamps:
        change = random.uniform(-2, 2)
        current_price += change
        current_price = max(current_price, 1.0)
        prices.append(current_price)

    opens = []
    highs = []
    lows = []
    closes = []
    volumes = []

    for price in prices:
        is_bullish = random.random() > 0.5
        if is_bullish:
            open_price = price * 0.99
            close_price = price * 1.01
        else:
            open_price = price * 1.01
            close_price = price * 0.99

        high_price = max(open_price, close_price) * 1.02
        low_price = min(open_price, close_price) * 0.98

        opens.append(open_price)
        highs.append(high_price)
        lows.append(low_price)
        closes.append(close_price)

        volume = int(1000000 * (1 + random.uniform(-0.2, 0.2)))
        volumes.append(volume)

    return {
        "s": "ok",
        "t": timestamps,
        "o": opens,
        "h": highs,
        "l": lows,
        "c": closes,
        "v": volumes
    }
```

## Additional Resources

- [TradingView Charting Library Documentation](https://www.tradingview.com/charting-library-docs/)
- [UDF Protocol Documentation](https://www.tradingview.com/charting-library-docs/latest/connecting_data/UDF)

The charting technology is provided by TradingView — a platform for traders and investors offering real-time market data, crypto heatmaps, screeners, and other professional tools, making it easy to follow Bitcoin, [Ethereum price](https://www.tradingview.com/symbols/ETHUSD/), and charts for any other asset.

---

---
title: Administration
sidebar_position: 4
description: Administration and management features for OpenBB Workspace Enterprise
keywords:
- Administration
- User Management
- RBAC
- Theme Settings
- System Configuration
- Monitoring
- Branding
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Administration | OpenBB Workspace Docs" />

# Administration

Enterprise administrators manage users, configure access controls, customize branding, and monitor system usage through a web-based interface.

## User Management

Import users from CSV files or connect to directory services for automated provisioning. Bulk operations handle large user lists efficiently. Account creation includes role assignment during the onboarding process. User modifications update permissions as organizational responsibilities change. Offboarding revokes access immediately while preserving audit trails.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Team Management Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/team_management.png" />
</div>

Single sign-on integrates with Azure Active Directory through OpenID Connect protocol. Google Workspace authentication uses OAuth 2.0 flows. Any SAML 2.0-compatible identity provider connects through standard configuration. Just-in-time provisioning creates accounts automatically when users first authenticate.

## Role-Based Access Control

Define custom roles that match organizational structure. Permission levels operate at four distinct layers: applications control access to entire modules, widgets govern individual analytical tools, data sources restrict information access, and AI features manage Copilot capabilities.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Role Management Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/create-role-user-list.png" />
</div>

Standard roles provide starting points for customization. Admin accounts have full system access and configuration capabilities. Analysts create and share dashboards with complete data access. Viewers access shared content in read-only mode. Data Managers handle source connections and data governance. Custom roles combine these permissions to match specific organizational needs.

## Theme and Branding Configuration

Customize visual appearance to match corporate identity. Table settings control general layouts, borders, spacing, headers, cells, icons, and typography. Each element accepts custom styling for both light and dark themes. Configuration changes apply immediately across all user sessions.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/c8c0241e-981c-4456-a8f2-66aafaab350a.png" width="100%" />
</div>

Chart customization includes base themes, color palettes, core settings, input configurations, and background images. Color palettes define schemes for different data types and analytical contexts. Core settings manage axis, grid, and legend appearance. Background images add corporate watermarks or branding elements.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/364a1419-1b57-46ea-a482-98faef8c36f3.png" width="100%" />
</div>

Preview functionality shows customizations before applying them system-wide:

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/345da327-228b-4029-9480-ef4b8777a357.png" width="100%" />
</div>

## Brand Identity

Select primary brand colors through a color picker interface. The system automatically generates complementary shades for consistent application throughout the platform. Color choices maintain accessibility compliance by ensuring readable contrast ratios. Changes propagate to all interface elements within seconds.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/815dc29f-d8a8-4c1d-8ee6-0766f9762cde.png" width="100%" />
</div>

Logo upload supports PNG, SVG, and JPG formats with automatic sizing for different display contexts. The system generates favicons from uploaded logos for browser tab branding. Logo placement options include headers, login pages, and generated reports.

<div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
  <img src="https://openbb-cms.directus.app/assets/b1055be1-ed02-400f-8876-372ae832d37c.png" width="100%" />
</div>


---

---
title: Data Control & Security
sidebar_position: 2
description: Data sovereignty, security architecture, and compliance features in OpenBB Workspace Enterprise
keywords:
- Data Sovereignty
- Enterprise Security
- Compliance
- Audit Trails
- Data Residency
- SOC 2
- MFA
- SSO
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Data Control & Security | OpenBB Workspace Docs" />

# Data Control & Security

OpenBB Workspace Enterprise ensures complete data sovereignty by running entirely within your infrastructure. Your data, AI models, and prompts never leave your secure environment while maintaining full control over sensitive financial information and meeting regulatory requirements.

## Data Sovereignty

Deploy on-premises or in your private cloud (VPC) to maintain complete control over data location and access. All processing occurs within your infrastructure boundaries, ensuring compliance with data residency requirements and regulatory obligations.

## Deployment Options

On-premises installation provides maximum control by running directly on your servers. This approach works well for organizations with strict data residency requirements or air-gapped environments that require complete network isolation.

Private cloud deployment in AWS, Azure, or GCP maintains cloud infrastructure flexibility while keeping data within your security perimeter. This option balances operational convenience with security requirements.

Hybrid architecture combines on-premises core systems with cloud-based compute resources. This approach allows organizations to balance security requirements with scalability needs while maintaining data control.

<img src="https://openbb-cms.directus.app/assets/2ad71c09-ae83-422f-975d-d4cdaefd2c74.png" alt="OpenBB Workspace Enterprise Architecture" width="100%" />

## Enterprise Security Features

The platform integrates with existing security infrastructure including SSO support for Azure and Google authentication systems. Granular role-based access control (RBAC) manages permissions across applications, widgets, data sources, and AI features. Multi-factor authentication enforcement adds security layers for all user accounts.

Detailed audit logging captures all user activities, system access, and configuration changes. The platform operates with no external product analytics and minimal operational logging to maintain privacy and security standards.

## Compliance and Audit Support

Meet regulatory requirements through complete activity logging that tracks user actions, data access patterns, and system modifications. Export controls manage how data can be extracted or shared outside the platform. Retention policies automate data lifecycle management according to organizational and regulatory requirements.

SOC 2 Type II compliance support provides standardized security controls and audit procedures. The platform maintains audit trails that support various regulatory frameworks and compliance requirements.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Activity Log Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/activity-log.png" />
</div>

## Implementation Process

Begin with a security assessment of your current environment to understand deployment requirements and integration needs. Architecture design aligns the platform with existing security controls and network configurations. Security configuration includes authentication integration, access controls, and audit logging setup.

Testing and validation ensure all security controls function correctly before production deployment. Ongoing management includes regular security reviews, access audits, and maintenance of security documentation and procedures.


---

---
title: Enterprise
sidebar_position: 1
description: Deploy OpenBB Workspace on-premises or in your private cloud with enterprise-grade security, compliance, and control.
keywords:
- OpenBB Workspace Enterprise
- On-Premises Deployment
- Private Cloud
- Enterprise Features
- Financial Analytics Platform
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Enterprise | OpenBB Workspace Docs" />

# Enterprise Overview

OpenBB Workspace Enterprise deploys within your infrastructure, ensuring data never leaves your environment. The platform operates without external dependencies while providing the same analytical capabilities as the cloud version.

## Deployment Control

Deploy on-premises within your data center for maximum control over hardware, network, and security configurations. Private cloud deployment in AWS, Azure, or GCP maintains infrastructure flexibility while keeping data within your security boundaries. Hybrid architectures combine on-premises data storage with cloud compute resources when required.

All deployment options include unlimited users, unlimited data sources, and unlimited computational resources. No artificial restrictions exist on platform usage within your environment.

[Data Control & Security Details →](/workspace/getting-started/enterprise/data-control)

## Team Operations

Multiple teams work within shared environments while maintaining separate access controls and data permissions. Shared dashboards distribute insights across departments. Real-time collaboration enables simultaneous analysis and commentary on the same datasets.

Knowledge management captures institutional analytical approaches through shared widget libraries and template repositories. Team analytics show usage patterns, popular content, and collaboration effectiveness metrics.

[Team Collaboration Features →](/workspace/getting-started/enterprise/team-collaboration)

## Administrative Control

Configure user access through role-based permissions at application, widget, data source, and AI feature levels. Import users from existing directory services or manage them locally. Customize platform appearance with corporate branding, colors, and logos.

Monitor system performance, user activity, and resource consumption through administrative dashboards. Configure automated backups, retention policies, and maintenance schedules.

[Administration Tools →](/workspace/getting-started/enterprise/administration)

## Implementation Support

Professional services include infrastructure assessment, deployment planning, security configuration, and data integration. The JumpStart package delivers operational capability within four weeks through custom app development and targeted training programs.

Dedicated support provides priority response times with direct access to technical specialists. Customer success managers coordinate long-term platform optimization and adoption strategies.

[Support & Services Options →](/workspace/getting-started/enterprise/support-services)

## Core Capabilities

OpenBB Copilot operates entirely within your environment, processing prompts and generating responses without external communication. Custom AI agents incorporate organizational knowledge and analytical methodologies. The Excel Add-in connects spreadsheet workflows to platform data through real-time synchronization.

Custom integrations connect internal systems, proprietary databases, and specialized data sources through secure network connections. Widget development creates tailored visualizations for specific analytical requirements.

## Platform Comparison

| Capability | Cloud | Enterprise |
|------------|-------|------------|
| Deployment | SaaS hosted by OpenBB | On-premises or private cloud |
| Data location | OpenBB cloud infrastructure | Customer infrastructure |
| User limits | Plan-based restrictions | Unlimited |
| Customization | Standard themes | Full branding control |
| Integrations | Public APIs only | Internal systems + public APIs |
| Support | Standard response times | Priority support with SLA |
| AI processing | Shared cloud models | Private model deployment |

## Target Organizations

Investment banks use Enterprise for equity research, trading desk analysis, risk management, and M&A advisory work. Asset management firms apply it to portfolio management, quantitative research, performance analytics, and client reporting. Hedge funds leverage the platform for systematic strategies, fundamental analysis, risk monitoring, and alpha generation research.

Corporate treasury teams, FP&A departments, investor relations groups, and strategic planning functions utilize Enterprise for internal financial analysis and reporting requirements.

## Getting Started

Contact [sales@openbb.finance](mailto:sales@openbb.finance) for requirements assessment and deployment planning. [Schedule a demonstration](https://openbb.co/schedule-demo) to see platform capabilities with your use cases. Proof-of-concept deployments enable testing with actual organizational data and workflows.

The evaluation process includes technical demonstrations, proof-of-concept testing, commercial proposals, and implementation planning. Most deployments complete within 4-8 weeks depending on integration complexity and training requirements.

---

---
title: Support & Services
sidebar_position: 5
description: Enterprise support, professional services, and success programs for OpenBB Workspace
keywords:
- Enterprise Support
- Professional Services
- JumpStart Package
- Training
- Customer Success
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Support & Services | OpenBB Workspace Docs" />

Enterprise customers receive dedicated support and professional services to maximize platform value and ensure successful implementation.

## Production Support

Enterprise support provides 8 hours daily coverage, 5 days weekly, with priority access to the support queue. Direct communication channels connect customers with technical specialists, bypassing standard routing. Priority handling ensures faster resolution of technical issues and implementation questions.

## Customer Success Partnership

Each enterprise customer receives a dedicated customer success manager for long-term platform optimization. Quarterly business reviews assess usage patterns, identify improvement opportunities, and align platform capabilities with evolving business objectives.

Success managers provide best practices consultation based on knowledge from other enterprise deployments while maintaining appropriate confidentiality. They offer strategic guidance on expanding platform adoption across teams and integrating new analytical capabilities as organizational needs grow.

## JumpStart Package

The JumpStart program delivers operational capability within weeks rather than months through structured implementation and training. This accelerated approach includes custom app development, comprehensive training, and organizational best practices establishment.

Custom app development creates a production-ready application incorporating your specific data sources, analytical workflows, and organizational requirements. The application functions both as an immediate productivity tool and a development template for future projects. Knowledge transfer ensures internal teams can maintain and extend the custom application after deployment.

Training components address different organizational roles including administrators, analysts, and specialized users. Best practices establishment covers workflow documentation, governance procedures, and platform optimization recommendations tailored to your environment.

Learn more about JumpStart implementation at [openbb.link/jumpstart](https://openbb.link/jumpstart).

## Professional Training Programs

Structured training programs provide role-specific education for administrators, analysts, and specialized users within your organization. Administrative training covers system configuration, user management, security implementation, and operational procedures.

Analyst training focuses on dashboard development, data analysis methodologies, collaboration workflows, and platform feature utilization. Custom workshops address specific industry requirements, advanced use cases, and organizational analytical approaches.

Training materials include comprehensive documentation, hands-on exercises, and reference resources for ongoing use. Follow-up sessions ensure knowledge retention and address implementation questions that arise during actual platform usage.

Explore training options at [openbb.link/workshops](https://openbb.link/workshops).

## Implementation Services

Professional implementation services include infrastructure assessment, deployment architecture design, and integration planning. The implementation team evaluates existing environments, recommends optimal configurations, and provides guidance throughout the deployment process.

Security configuration assistance ensures proper integration with authentication systems, access controls, and audit frameworks. Data integration support facilitates connections to internal systems, databases, and external sources through appropriate methods and protocols.

## Enterprise Pricing

OpenBB Enterprise uses a seat-based subscription model adapted to organizational requirements. Pricing factors include user count, deployment configuration (cloud, VPC, or on-premises), data integration complexity, and support level requirements.

Base subscriptions include software licensing, standard support, regular updates, security patches, and documentation access. Additional services including JumpStart packages, custom development, enhanced support, and specialized training require separate pricing based on project scope.

For detailed pricing information, visit [openbb.co/pricing](https://openbb.co/pricing).

## Getting Started

Contact the enterprise team at [sales@openbb.finance](mailto:sales@openbb.finance) for requirements assessment and pricing discussion. The evaluation process includes technical demonstrations, proof-of-concept testing with your data, and implementation planning sessions.

Enterprise deployments typically complete within 1-4 weeks depending on integration requirements, customization needs, and training scope. Implementation timelines account for testing phases, user onboarding activities, and platform optimization.


---

---
title: Team Collaboration
sidebar_position: 3
description: Collaborative features for teams in OpenBB Workspace Enterprise
keywords:
- Team Collaboration
- Dashboard Sharing
- Workspaces
- Audit Trails
- Export Controls
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Team Collaboration | OpenBB Workspace Docs" />

# Team Collaboration

Share dashboards, insights, and analyses securely within your organization. The collaboration system provides controlled access to analytical work while maintaining audit trails and data governance.

## Private Team Workspaces

Create dedicated spaces for different teams and projects. Each workspace maintains its own set of dashboards, user permissions, and access controls. Teams can collaborate on analysis within their designated workspace while maintaining separation from other organizational units.

## Controlled Dashboard Sharing

Share analytical dashboards with specific team members or groups. The sharing system allows dashboard owners to control who can view, interact with, or modify shared content. Recipients can access shared dashboards through their workspace interface while respecting the permissions set by the owner.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Dashboard Sharing Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/sharing_dashboard.png" />
</div>

Dashboard sharing operates through permission levels that determine user capabilities. View-only access allows users to see dashboard content without making changes. Interactive access enables parameter modifications and data exploration while preserving the original dashboard structure.

## Audit Trails

All collaborative activities generate detailed audit records. The system logs dashboard sharing events, access attempts, and modification history. User actions include timestamps, user identification, and affected resources. This information supports compliance requirements and security monitoring.

Activity logging tracks when dashboards are shared, accessed, or modified. Permission changes receive separate audit entries showing who granted or revoked access to specific resources. Export activities log when data leaves the system through sharing or download functions.

## Export Controls

Manage how data and analyses can be extracted from the platform. Export controls operate through role-based permissions that determine which users can download data, generate reports, or share content outside the system. Administrators configure these controls to match organizational data governance policies.

The export control system tracks all data movement activities. When users export dashboards or download data, the system records the action, identifies the user, and logs the specific content involved. This information supports compliance monitoring and data loss prevention initiatives.

## AI Features Integration

OpenBB Copilot operates within the collaborative environment while maintaining appropriate access controls. Team members can use AI features to analyze shared data and generate insights within their permission boundaries. AI interactions respect the same access controls that govern manual data analysis.

Learn more about AI capabilities in the [Copilot documentation](/workspace/analysts/ai-features/copilot-basics).

## Excel Integration

The Excel Add-in supports collaborative workflows by enabling team members to access shared data sources through familiar spreadsheet interfaces. Excel integration maintains the same permission structure as the web platform, ensuring data access consistency across tools.

Team members can use Excel to analyze data from shared workspaces while respecting access controls established in the main platform. Changes to data permissions automatically affect Excel access without requiring separate configuration.

Explore Excel integration details in the [Add-in documentation](/workspace/analysts/excel-addin/excel-overview).

## Implementation Considerations

Set up team workspaces according to organizational structure and project requirements. Define sharing policies that align with data governance requirements and compliance obligations. Establish audit review procedures to monitor collaborative activities and ensure appropriate access levels.

Train team members on sharing capabilities, permission levels, and audit requirements. Regular reviews of shared content and access permissions help maintain security and compliance standards over time.


---

---
title: FAQs
sidebar_position: 8
description: Common questions and answers about OpenBB Workspace, data integration, custom backends, and troubleshooting.
keywords:
  - FAQs
  - Data Integration
  - Custom Backend
  - Widget Configuration
  - API Integration
  - OpenBB Workspace
  - Backend Setup
  - Widget Templates
  - Troubleshooting
  - Data Sources
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="FAQs | OpenBB Workspace Docs" />

# Frequently Asked Questions

Find answers to common questions about OpenBB Workspace, organized by topic.

---

## General Questions

### What is the purpose of a custom backend in OpenBB Workspace?

A custom backend allows you to integrate your own data sources into OpenBB Workspace, enabling the creation of personalized widgets, dashboards, and templates that display your data in various ways. This gives you complete control over your data pipeline while leveraging OpenBB's visualization and AI capabilities.

For more details, see the [Data Integration Overview](/workspace/developers/data-integration).

### What technologies are required to set up a custom backend?

You'll need:
- An API framework (FastAPI, Flask, Express, etc.)
- A `widgets.json` file to define widget configurations
- Optionally, an `apps.json` file for layout configurations

Refer to the [Creating your own custom backend](/workspace/developers/data-integration) section for detailed setup instructions.

---

## Setup and Configuration

### How do I start setting up a custom backend?

Start with our Hello World example that demonstrates the basic structure:

1. Create your API server
2. Define your widgets.json configuration
3. Connect to OpenBB Workspace

Follow the complete guide in the [Getting Started](/workspace/developers/data-integration) section.

### What is the widgets.json file, and why is it important?

The `widgets.json` file is the bridge between your backend and OpenBB Workspace. It defines:
- Widget metadata (name, description, category)
- Data endpoints
- Display configurations
- Parameter definitions

This file tells OpenBB how to display and interact with your data. See the [Widgets Configuration Reference](/workspace/developers/json-specs/widgets-json-reference) for complete documentation.

### How do I add authorization to my custom backend?

OpenBB Workspace supports passing custom headers or query parameters to your backend on every request. You can use these for authentication:

1. Configure the authentication method when adding your backend
2. Choose between Header or Query Parameter authentication
3. Verify the token/key in your backend to allow or deny access

<div style={{display: 'flex', justifyContent: 'center', marginTop: '1rem', marginBottom: '1rem'}}>
  <img className="pro-border-gradient" width="600" alt="Authorization configuration" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/authorization.png" />
</div>

---

## Widgets and Apps

### How can I create a new widget?

Creating a widget involves two steps:

**1. Define the widget in `widgets.json`:**
- Set metadata (name, description, category)
- Specify the data endpoint
- Configure display options

**2. Create the data endpoint in your backend:**
- Return data in the expected format
- Handle any parameters

See the [Widget Creation Guide](/workspace/developers/json-specs/widgets-json-reference) for complete examples.

### Can I customize the appearance of widgets?

Yes! Widget appearance is highly customizable through the `widgets.json` file:

- **Size**: Use `gridData` to set widget dimensions
- **Tables**: Configure columns with `columnDefs`
- **Charts**: Set chart type, colors, and axes
- **Layouts**: Define default positions and groupings

Learn more in the [Widget Customization](/workspace/developers/json-specs/widgets-json-reference) documentation.

### What are apps, and how do I use them?

Apps are pre-configured collections of widgets, AI agents, and prompts designed for specific workflows. They provide:

- Curated widget selections
- Pre-linked parameters
- Custom AI prompts
- Ready-to-use dashboards

Define apps in the `apps.json` file and serve them via your API. See the [Apps Documentation](/workspace/analysts/apps) for details.

### How do I implement dynamic dropdown options in widgets?

Dynamic dropdowns fetch options from your backend in real-time:

1. Set parameter `type: "endpoint"`
2. Specify an `optionsEndpoint` URL
3. Return options array from your backend

This is perfect for data that changes frequently (e.g., available tickers, date ranges). See the [Dynamic Parameters](/workspace/developers/data-integration) guide.

### Can I group widgets to share parameters?

Yes! Parameter grouping creates synchronized widget sets:

- Use identical parameter names across widgets
- When one updates, all linked widgets refresh
- Perfect for creating cohesive dashboards

Learn more in the [Parameter Grouping](/workspace/developers/data-integration) documentation.

---

## Troubleshooting

### I can't connect to my backend using Safari/Brave. What should I do?

Safari and Brave require HTTPS for local connections. You'll need to set up SSL certificates for your backend.

**Setting up HTTPS for your API:**

**Step 1:** Create a self-signed certificate and key:

```sh
openssl req -x509 -days 3650 -out localhost.crt -keyout localhost.key \
  -newkey rsa:4096 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config <( \
  printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
```

**Step 2:** Run your API with SSL:

```sh
openbb-api --ssl_keyfile localhost.key --ssl_certfile localhost.crt
```

**Step 3:** Trust the certificate:
- Visit your API URL in the browser
- Accept the security warning
- Or add `localhost.crt` to your system's trust store

> **Note**: For work devices, contact your system administrator if you need additional permissions.

### My widget data is not refreshing as expected. What could be wrong?

Check these common causes:

1. **Refetch Settings**: Verify `refetchInterval` and `staleTime` in your `widgets.json`
2. **Run Button**: If `runButton: true`, data only refreshes on manual trigger
3. **Cache Settings**: Ensure cache duration matches your needs
4. **Network Issues**: Check browser console for API errors

See the [Data Refresh Configuration](/workspace/developers/data-integration) guide for optimal settings.

### How do I debug widget connection issues?

Follow this troubleshooting checklist:

1. **Check Backend Status**: Ensure your API is running and accessible
2. **Verify URL**: Confirm the backend URL in OpenBB settings
3. **Test Endpoints**: Use curl or Postman to test your endpoints directly
4. **Review Browser Console**: Look for CORS or network errors
5. **Validate JSON**: Ensure widgets.json has valid syntax

For detailed debugging steps, see the [Troubleshooting Guide](/workspace/developers/data-integration).

---

---
title: OpenBB Platform
sidebar_position: 7
description: Learn how to integrate the OpenBB Platform data to OpenBB Workspace
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Workspace widgets
- OpenBB Platform Installer
- Widget filtering
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Open source platform integration | OpenBB Workspace Docs" />

This section will highlight how you can run the [OpenBB Platform](https://github.com/OpenBB-finance/OpenBB) locally and integrate 350+ different datasets into the OpenBB Workspace in under 5 minutes.

If you want to learn more about the open source platform, check [our documentation](https://docs.openbb.co/platform).

Here's a video that you can use to follow step-by-step instructions.

:::warning

We've removed the "Data Connectors" tab. So instead of Data Connectors > Add Data > Custom Backend, go to Apps > Connect Backend.

:::

<div style={{position: 'relative', paddingBottom: '56.25%', height: '0', overflow: 'hidden', maxWidth: '100%'}}>
    <iframe
    style={{position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', display: 'block', margin: '0 auto'}}
    src="https://www.youtube.com/embed/DFz1WQJbT6c?si=_K3amHb8p4fkTKaj"
    title="YouTube video player"
    frameBorder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    referrerPolicy="strict-origin-when-cross-origin"
    allowFullScreen></iframe>
</div>

## Step by step

The steps are also described below:

1. Select the right installer based on your OS and architecture.
   - [Windows](https://openbb-installers.s3.amazonaws.com/OpenBB-Platform-Windows-x86_64.exe)
   - [macOS for Apple Silicon](https://openbb-installers.s3.amazonaws.com/OpenBB-Platform-MacOSX-arm64.pkg)
   - [macOS for Intel](https://openbb-installers.s3.amazonaws.com/OpenBB-Platform-MacOSX-x86_64.pkg)

   Then install it.

2. Once installation is complete, find the `OpenBB` folder that has been created in the installation directory selected. Double click on `OpenBB/openbb-api`.

   :::note
   Configure any data provider credentials in the [`user_settings.json`](/platform/settings/user_settings/api_keys) file before running.
   :::

3. The OpenBB Platform API should now be up and running.

   <div style={{display: 'flex', justifyContent: 'center'}}>
      <img
        className="pro-border-gradient"
        alt="OpenBB Platform API"
        src="https://github.com/user-attachments/assets/5015a675-7953-4807-98d2-94cdc041fd64"
        width="1000"
      />
   </div>

4. Finally, you simply need to set up the custom backend on OpenBB Workspace.

   :::note
   If you are using Brave/Safari you will need an HTTPS connection - see how [on the excel faq page](https://docs.openbb.co/excel/faqs)
   :::

   <!-- TODO - We cant do this yet - issue with localhost in name - You can do so by clicking on this [link](http://pro.openbb.co/app/data-connectors?tab=my-data&modal=data-connectors&dcTab=backend&name=OpenBB%20Platform&url=http://localhost:6900). -->

   Right click on a dashboard, then click "Add data".

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="Table Widget Example"
       src="https://openbb-cms.directus.app/assets/0c2c8866-54a8-4137-90b6-bf0db365ca6e.png"
       width="200"
     />
   </div>

   Then fill in the information as shown below:

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="Table Widget Example"
       src="https://openbb-cms.directus.app/assets/563aca68-1ec3-48c7-86d8-9129e0e5fd8c.png"
       width="800"
     />
   </div>

   Or you could also click this link to have it all filed in: [`https://pro.openbb.co/app?modal=connect-backend&name=OpenBB%20Platform&url=http://127.0.0.1:6900`](https://pro.openbb.co/app?modal=connect-backend&name=OpenBB%20Platform&url=http://127.0.0.1:6900)

5. Voila. You are now ready to access 300+ data widgets from OpenBB. For free.

   These are some apps available out of the box:

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="Table Widget Example"
       src="https://openbb-cms.directus.app/assets/9d5f9dba-1603-489c-ad47-ae0f9b7bd0da.png"
       width="800"
     />
   </div>

## Advanced - Access this data on mobile

This section will use `ngrok` as the proxy between our platform API endpoints running locally and the internet. You can do this in ngrok free plan.

1. Install ngrok by following [these](https://ngrok.com/docs/getting-started/) instructions.

2. Open a terminal and run `ngrok http 6900`. This assume that the open source platform API is running on [`http://localhost:6900`](http://localhost:6900).

   If that runs correctly, you'll get an output similar to the following.

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="ngrok"
       src="https://github.com/user-attachments/assets/e938b28b-359b-41e7-b822-6fc400e36819"
       width="1000"
     />
   </div>

   Note the **Forwarding** row. That will contain a public URL that has access to your endpoint.

3. Update your localhost endpoint with the public URL provided by ngrok.

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="ngrok-2"
       src="https://github.com/user-attachments/assets/1ceed65b-3601-4a7c-8fd5-ee79cdde3917"
       width="1000"
     />
   </div>

4. Add a request header as authentication.

   Click on "Add Authentication" button, and add the following:

   Key: ngrok-skip-browser-warning
   Value: x
   Location: Header

   You have to include the request header `ngrok-skip-browser-warning` with any value in the request header, to bypass the Ngrok Browser Warning.

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="ngrok-3"
       src="https://github.com/user-attachments/assets/03968960-e09a-46d8-98b9-718b6ae1b0db"
       width="1000"
     />
   </div>

   You are now ready to access this data on your phone, just ensure that you keep running the API endpoint and ngrok locally.

## Advanced - Filter widgets

If you run the steps above, you will have access to a dozen different data vendors and hundreds of different widgets. However, some of these may not work because you haven't set up the API key for the data vendor or you may not be interested to bring some of those widgets into your OpenBB Workspace.

This section will explore how you can filter the platform integration datasets that are made available on OpenBB.

1. Go to the [widgets filter page](https://my.openbb.co/app/platform/widgets) where you can set the data vendors you are interested and also select the widgets within. Once you are happy you can download the `widget_settings.json` configuration file by clicking on **Download**.

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="widgets"
       src="https://github.com/user-attachments/assets/c978c28d-e53a-4f83-9488-dcb524572b86"
       width="1000"
     />
   </div>

2. In the `OpenBB` folder that has been created when you installed the Platform. There must be a `Settings` folder within. This folder should be the destination of your widget settings file (`widget_settings.json`), which will serve as the configuration file for your custom backend.

   Now, similarly to the previous section, you should:

   - Run `OpenBB/openbb-api`
   - Set your PAT
   - Refresh the connection inside the ["Manage Backends"](https://pro.openbb.co/app) button or follow instructions above to add again.

   <!-- (http://pro.openbb.co/app/data-connectors?tab=my-data&modal=data-connectors&dcTab=backend&name=OpenBB%20Platform&url=http://localhost:6900) -->

   > Take into consideration that, if you change the default configurations on the OpenBB Platform settings, the URL ([`http://127.0.0.1:6900`](http://127.0.0.1:6900)) might differ.

   <div style={{display: 'flex', justifyContent: 'center'}}>
     <img
       className="pro-border-gradient"
       alt="widgets-filter"
       src="https://github.com/user-attachments/assets/692e8da3-57fb-4cff-b566-adf8d5539530"
       width="1000"
     />
   </div>


---

---
title: Progressive Web App (PWA)
description: Install OpenBB Workspace as a Progressive Web App for a native experience on desktop and mobile devices.
sidebar_position: 0
keywords:
- OpenBB Workspace
- Progressive Web App
- PWA installation
- Desktop application
- iOS application
- Android application
- Native app experience
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Progressive Web App (PWA) | OpenBB Workspace Docs" />

OpenBB Workspace is now available as a Progressive Web App (PWA), providing a seamless, native-like experience across all your devices.

<img width="800" alt="PWA" src="https://openbb-cms.directus.app/assets/dcd283e9-cc7f-42af-9d48-655565a5f6df.png" />

Installing as a PWA offers several advantages:

- **App-like Experience**: Runs in its own window without browser UI, providing a cleaner, focused workspace
- **Quick Access**: Launch directly from your dock, taskbar, or home screen without opening a browser
- **Cross-Platform**: Consistent experience across desktop and mobile devices
- **Seamless Updates**: Automatically receives the latest features when you're online
- **Better Performance**: Cached resources provide faster load times for frequently used components

## Desktop Installation

The desktop PWA provides the most complete OpenBB experience, with full keyboard support and optimized screen real estate.

### Installation Steps

1. Launch Chrome, Edge, or any Chromium-based browser
2. Navigate to [https://pro.openbb.co](https://pro.openbb.co)
3. Click the install icon in the address bar (typically a plus sign or computer icon)
4. Follow the installation prompts to add OpenBB to your desktop

<video width="100%" controls>
  <source src="https://openbb-cms.directus.app/assets/36685e54-d8c1-47ba-acd6-1692fabd768e" type="video/mp4" />
  Your browser does not support the video tag.
</video>

## Mobile Installation

### iOS Devices

1. Open Safari and navigate to [https://pro.openbb.co](https://pro.openbb.co)
2. Tap the share button (square with upward arrow) at the bottom of the screen
3. Select "Add to Home Screen" from the share menu
4. Name the app "OpenBB" and tap "Add"
5. The OpenBB icon will appear on your home screen

<video controls>
  <source src="https://openbb-cms.directus.app/assets/9bd37920-5776-4004-b6de-8650cd1f8c2a" type="video/mp4" />
  Your browser does not support the video tag.
</video>

### Android Devices

1. Open Chrome and navigate to [https://pro.openbb.co](https://pro.openbb.co)
2. Tap the three-dot menu in the top-right corner
3. Select "Add to Home screen" from the menu
4. Name the app "OpenBB" and tap "Add"
5. The OpenBB icon will appear on your home screen

<video controls>
  <source src="https://openbb-cms.directus.app/assets/5699793b-cef4-4fbb-8f2c-1deeca26ea41" type="video/mp4" />
  Your browser does not support the video tag.
</video>

## Using OpenBB PWA

The PWA version of OpenBB Workspace provides a consistent experience across all your devices while maintaining full functionality. Key features include:

- **Responsive Design**: Optimized layouts for desktop, tablet, and mobile screens
- **Touch Support**: Intuitive touch controls for mobile devices
- **Offline Capabilities**: Access key features without an internet connection
- **Cross-Device Sync**: Seamlessly continue your work across different devices

### Best Practices

- Use Chrome or Edge for the best desktop experience
- Keep your browser updated to the latest version
- Ensure you have sufficient storage space on your device
- Connect to a stable internet connection for initial setup

### Troubleshooting

If you encounter any issues during installation:

1. Clear your browser cache and try again
2. Ensure you're using a supported browser version
3. Check your device's storage space
4. Verify your internet connection

## Learn More

For a deeper dive into the OpenBB PWA, including its development journey and technical implementation, read our detailed blog post: [OpenBB Workspace is Now Available on Mobile](https://openbb.co/blog/openbb-terminal-is-now-available-on-mobile)

---

---
title: Workspace Overview
sidebar_position: 0
description: OpenBB Workspace is a secure enterprise UI application for AI workflows, featuring data integration, AI model deployment, flexible UI customization, and on-premises deployment capabilities.
keywords:
- enterprise AI application
- data integration
- AI model deployment
- flexible UI
- on-premises deployment
- secure application
- team collaboration
- OpenBB Apps
- proprietary data
- licensed data
- AI workflows
- enterprise security
- private cloud
- data privacy
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OpenBB Workspace Docs" />

OpenBB Workspace is a secure application for enterprise AI workflows. It combines flexible data integration, customizable UI components, and AI capabilities in a single solution.

Explore OpenBB Workspace at [pro.openbb.co](https://pro.openbb.co).

<img src="https://openbb-cms.directus.app/assets/8aa1a314-0e2c-41f0-a3cf-ef621e5f2a13.png" alt="OpenBB Workspace Application Interface" width="100%" />

Product demo [in this video](https://www.youtube.com/watch?v=Gll8bRSoyGM).

## Core capabilities

### Production-Ready UI Framework

Transform your workflows with a fully customizable UI that adapts to your team's specific needs. OpenBB Workspace gives you complete control over every aspect of the interface, allowing you to tailor it precisely to your workflow requirements. Teams can collaborate through shared dashboards and applications, while the flexible framework enables you to build comprehensive solutions ranging from simple data visualizations to complex AI-powered workflows.

### Unified Data Integration

OpenBB Workspace brings all your data sources together in one secure, scalable system. Whether you're working with proprietary internal data, licensed third-party feeds, or public datasets, the Workspace provides data access through a single interface. The system handles both structured and unstructured data with equal ease, and its open architecture supports flexibility as your needs evolve.

### AI Agent Integration

Deploy and manage AI agents in a secure, controlled environment that puts you in charge. OpenBB Workspace offers the flexibility to integrate any AI agent that supports your workflows, whether it's powered by a proprietary model, open-source solution, or third-party service. Agents run in a protected environment with carefully controlled data access, ensuring security and compliance when connecting AI capabilities to your existing processes. This integration happens naturally within your workflows, enhancing rather than disrupting your established practices.

### Enterprise-Grade Deployment

OpenBB Workspace provides the deployment flexibility modern enterprises demand. Deploy the Workspace on-premises or in your private cloud, maintaining complete control over your infrastructure and data. Your sensitive information never leaves your environment, staying protected within your existing security perimeter. The system includes detailed role-based access controls, allowing you to implement fine-grained security policies that align with your organization's requirements and compliance standards.

## Key concepts

### Widgets

Widgets are the fundamental data units in OpenBB Workspace. Each widget represents a self-contained data component with:

- **Data Source**: Integration with internal or external data sources
- **Metadata**: Title, description, category, sub-category and source information
- **Visual Layer**: Presentation through tables, charts, PDFs or images and other feed formats
- **Parameters**: Configurable input parameters for data display and interaction

<img width="800" alt="Widget Metadata Structure and Components" src="https://openbb-cms.directus.app/assets/132e5cda-b062-4094-8036-8c2d41db1527.png" />

### Dashboards

Dashboards are your personal spaces in OpenBB Workspace, designed to adapt to your unique analytical style and requirements. Each dashboard starts as a blank canvas where you can create your perfect analytical environment by combining elements from your entire widget library, organizing and customizing them in ways that make sense for your specific workflows.

The power of dashboards lies in their flexibility. You can add widgets and group them by linking their parameters - when you update a date range or a ticker symbol in one widget, related widgets will update automatically. This parameter grouping ensures your analysis remains synchronized across multiple data views.

<img width="800" alt="OpenBB Workspace Dashboard Interface" src="https://openbb-cms.directus.app/assets/fbf80af0-8bc3-4ac6-b349-f8e1ec388cee.png" />

Beyond dynamic data widgets, dashboards support a rich variety of content types. You can enhance your analysis by adding static files like PDFs, images, text documents, and spreadsheets, incorporating AI-generated artifacts directly from your chats, or writing notes to document your thought process and findings. This combination of dynamic data, static resources, and personal annotations creates a wide-ranging analytical workspace that captures both the quantitative and qualitative aspects of your research.

Once you've crafted your perfect dashboard, sharing it with your organization is effortless. Team members can access your shared dashboards to benefit from your analytical setup. This transforms individual insights into collective intelligence, elevating your dashboards to become organizational assets and fostering collaboration and knowledge sharing.

### AI Agents

AI Agents make OpenBB Workspace an intelligent system that understands your data and automates complex workflows. These agents leverage the metadata from your widgets to query the right datasets with appropriate parameters.

What makes AI Agents particularly powerful is their contextual awareness. They can access your entire dashboard ecosystem, understand relationships between different data sources and maintain context across multiple queries. This enables sophisticated multi-step analysis where agents can gather data from various widgets, perform calculations, generate insights, and even create new visualizations based on their findings.

<img width="800" alt="OpenBB Workspace AI Agents Interface" src="https://openbb-cms.directus.app/assets/ac287dfe-e279-42bb-8f84-a616ff9df8a8.png" />

AI Agents excel at both reactive and proactive analysis. They can respond to your specific queries about market conditions, company performance, or economic indicators while also monitoring your dashboards for anomalies, trends, or opportunities that require attention. You can configure agents with custom instructions and prompts, creating specialized assistants for different analytical tasks – from earnings analysis to risk assessment to market surveillance.

The integration between AI Agents and your widget library creates a multiplier effect. Agents can dynamically combine data from multiple sources to apply advanced analytical techniques, and present results in formats that best suit your needs.

<img width="800" alt="OpenBB Workspace AI Agent Widget Integration" src="https://openbb-cms.directus.app/assets/2b463b3b-e1cf-4079-8c11-b49cdcda60ac" />

Finally, AI agents can produce artifacts (text, tables, charts) that are added back to the dashboard, closing the feedback loop.

### Apps

Apps are pre-built dashboard templates designed for specific workflows. Each app includes a curated set of widgets with parameters already linked, a pre-selection of an AI agent for the task at hand, and custom prompts relevant to that use case. When you change a ticker or date range, all connected widgets update together.

<img width="800" alt="OpenBB Workspace Multiple Applications View" src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png" />

Examples include portfolio management apps with position tracking and risk metrics, market surveillance apps with data monitoring and anomaly detection, and research apps with fundamental analysis and news sentiment tools. The workspace supports unlimited apps that can be shared across teams and customized to fit your exact needs.

Explore our app gallery and use cases at [openbb.co/solutions](https://openbb.co/solutions).

<img width="800" alt="OpenBB Workspace Applications Overview" src="https://openbb-cms.directus.app/assets/0daf9951-9600-41e9-8886-24077ae24b14.png" />

#### Prompts: Context-Aware Suggestions

Prompts are query suggestions specific to each app. The AI agent knows your widget library and can automatically tag relevant widgets when responding to prompts. For example, in a portfolio app, prompts might suggest "Show me today's top performers" and automatically reference the position tracking and performance widgets. This context awareness means prompts always work with the actual data available in your app, eliminating guesswork and ensuring accurate, relevant responses.
