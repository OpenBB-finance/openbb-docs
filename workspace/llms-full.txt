---
title: Overview
sidebar_position: 25
description: Learn how to integrate and customize AI agents in OpenBB Workspace for enhanced financial analysis and research capabilities
keywords:
- AI
- AI Agents
- Custom AI
- LLM
- Large Language Models
- Integration
- Financial Analysis
- Research
- Workspace
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';
import ReactPlayer from 'react-player'

<HeadTitle title="AI Agents | OpenBB Workspace Docs" />

When the default OpenBB AI agent isn't a perfect fit for your financial institution—especially when proprietary data and tools are involved—OpenBB Workspace offers the 'Bring Your Own AI Agent' feature. This allows you to integrate your own custom Large Language Models (LLMs).

With this integration, you can use all of OpenBB's features while leveraging your firm's proprietary LLMs. This enhances the efficiency of analysts and researchers by aligning with your unique data and models, all while keeping research queries and data securely within your firm's infrastructure.

## Defining a custom AI agent

You can integrate your existing proprietary LLM into OpenBB Workspace by setting up an API endpoint. This allows OpenBB to interact with your custom AI agent. To help you get started, we provide an open-source Example AI Agent that guides you through the integration process.

The example code is available [here](https://github.com/OpenBB-finance/copilot-for-openbb).

## Adding a custom AI agent to OpenBB Workspace

After deploying your custom AI agent, you can add it to OpenBB Workspace. To do
this, navigate to the "Add AI agent" section and follow the prompts:

- Click on the "Add AI agent" button.

<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/custom_copilot_add_button.jpg" alt="custom AI agent add button" width="80%" height="80%" />

- Enter the API endpoint of your custom AI agent.

<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/custom_copilot_add_endpoint.jpg" alt="custom AI agent add endpoint" width="80%" height="80%" />

- Confirm the addition.
- You are now ready to use your custom AI agent.


---

---
title: AI Generated
sidebar_position: 16
description: Learn how to use AI agent outputs as widgets in your OpenBB dashboard
keywords:
- AI
- Widgets
- Dashboard
- Agent Outputs
- Persistence
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AI generated | OpenBB Workspace Docs" />

OpenBB's AI agents can generate various types of outputs including text analysis, charts, and data visualizations. These outputs can be saved as widgets in your dashboard for future reference and analysis.

<img src="https://openbb-cms.directus.app/assets/1453ffb5-a51f-4967-944d-a651d4fa57d9.png" alt="Dashboard showing AI-generated widgets and analysis outputs" width="100%" />

AI agents can generate several types of outputs that can be used as widgets: text, table or chart.

To save an AI agent's output as a widget:

1. Run your desired AI analysis command

<img src="https://openbb-cms.directus.app/assets/e9db86df-be8f-42b6-8999-fe02bafffcf0.png" alt="Terminal showing AI analysis command execution" width="100%" />

2. When the output is displayed, look for the "Create widget from X" button

<img src="https://openbb-cms.directus.app/assets/fc32872b-68b4-4ba3-aa63-04a0846c644d.png" alt="AI analysis output with 'Create widget' button highlighted" width="100%" />

3. Click the button to add the output to your dashboard

<img src="https://openbb-cms.directus.app/assets/8cd1d032-6685-4178-bb49-c3807f870094.png" alt="Widget creation dialog showing name and description fields" width="100%" />

4. Edit the name and description that have been selected based on AI

<img src="https://openbb-cms.directus.app/assets/2d2d2d3b-3ac5-49d4-9d3b-b289cb5b5fdc.png" alt="Widget settings panel with editable metadata fields" width="100%" />

5. Making it persistent

The widget will be only accessible for this session. To ensure your AI-generated widgets persist across sessions:

1. Open the widget settings by clicking the gear icon on the widget

<img src="https://openbb-cms.directus.app/assets/0b1c5e6e-76bd-48ec-9c20-0ccd1b042036.png" alt="Widget with gear icon for accessing settings" width="100%" />

2. Edit the widget metadata: Name, description, category, subcategory and source

<img src="https://openbb-cms.directus.app/assets/658af726-3c62-4d9b-b38b-491e53fbc21f.png" alt="Widget metadata editing form with fields for name, description, category, subcategory and source" width="100%" />

3. Save the changes

The widget will now persist in your dashboard and can be accessed in future sessions.


---

---
title: apps.json Reference
sidebar_position: 31
description: Learn about the structure and configuration of apps.json for creating custom applications in OpenBB Workspace
keywords:
- apps.json
- workspace configuration
- custom apps
- widget layout
- app configuration
- FastAPI endpoint
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps.json Reference | OpenBB Workspace Docs" />

While it is expected for users to create their apps.json from the UI directly, as demonstrated in [/workspace/apps](/workspace/apps). The `apps.json` file follows this structure:

| Property | Type | Description |
|----------|------|-------------|
| `name` | string | The name of your app |
| `description` | string | A detailed description of what your app does |
| `img` | string | URL to the app's thumbnail image |
| `img_dark` | string | Optional URL to the app's thumbnail for dark mode |
| `img_light` | string | Optional URL to the app's thumbnail for light mode |
| `allowCustomization` | boolean | Whether users can customize the app |
| `selected_agent` | string | Optional ID of the default AI agent for this app |
| `authentication` | string | Optional authentication requirements |
| `tabs` | object | Collection of tabs, each with an ID, name, and layout configuration |
| `groups` | array | Widget groupings for synchronized parameters |
| `prompts` | array | Optional list of prompt IDs associated with the app |

Each tab contains:
- `id`: Unique identifier for the tab
- `name`: Display name for the tab
- `layout`: Array of widget configurations with positioning and state

Each group contains:
- `name`: Display name for the group
- `type`: Type of grouping (e.g., "param", "endpointParam")
- `paramName`: The parameter being synchronized
- `widgetIds`: Array of widget IDs in this group
- `defaultValue`: Default value for the parameter

Each layout contains a reference to a widget:
- `i`: The id of the widget - This will be used to identify the widget in the app (if the widget endpoint is "test/widget_1 the id will be test_widget_1")
- `x`: The x position of the widget
- `y`: The y position of the widget
- `w`: The width of the widget
- `h`: The height of the widget
- `state`: The state of the widget

### Setting up the Apps endpoint

To serve custom apps, you need to define an endpoint in your FastAPI application that returns the content of your `apps.json` file.

Here's how to define the `/apps.json` endpoint in your FastAPI application:

```python
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/apps.json")
async def get_apps():
    # Load your apps.json file
    with open("path/to/your/apps.json", "r") as f:
        apps_config = json.load(f)
    return JSONResponse(content=apps_config)
```

Your custom apps will appear in the OpenBB Workspace under the "Apps" tab in the "My Apps" section, as shown in here:

<img width="800" alt="OpenBB Workspace Multiple Applications View" src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png" />

**Note**: The ideal image size is 250x200px

Remember, the best part is that you can build your own apps tailored to your specific needs.

## Examples

### DTCC Trade Apps

```json
[
  {
    "name": "DTCC Swaps Trade Repository",
    "img": "https://media.licdn.com/dms/image/v2/C4D12AQG0nFj-PESmJg/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1632343844606?e=2147483647&v=beta&t=M9BQQUK_UbW2fIIPNAs_kZ8iVCI1IKqjU3cKcOpbMG4",
    "img_dark": "",
    "img_light": "",
    "description": "A demonstration application utilizing data from the DTCC Trade Repository.",
    "allowCustomization": true,
    "tabs": {
      "": {
        "id": "",
        "name": "",
        "layout": [
          {
            "i": "swap_rate_levels_custom_obb",
            "x": 0,
            "y": 0,
            "w": 20,
            "h": 11,
            "state": {
              "params": {
                "tenor": [
                  "2s10s",
                  "1s5s"
                ]
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "line",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "line": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "connectMissingData": true,
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "legend": {
                      "enabled": true,
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10
                        },
                        "paddingX": 10,
                        "paddingY": 10
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Interest Rate Levels (%)"
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "bubble": {
                    "series": {
                      "marker": {
                        "enabled": false
                      },
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "date",
                    "ois_one_year_five_year_spread",
                    "ois_two_year_ten_year_spread"
                  ]
                },
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1",
                  "sort": {
                    "sortModel": [
                      {
                        "colId": "date",
                        "sort": "asc"
                      }
                    ]
                  },
                  "columnPinning": {
                    "leftColIds": [
                      "date"
                    ],
                    "rightColIds": []
                  }
                }
              }
            }
          },
          {
            "i": "swap_rate_volume_custom_obb",
            "x": 20,
            "y": 0,
            "w": 19,
            "h": 11,
            "state": {
              "params": {
                "bucket": []
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "customCombo",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "maxHeight": 50,
                      "spacing": 10,
                      "item": {
                        "paddingX": 18,
                        "paddingY": 5,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 10
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "line": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "strokeOpacity": 0.7,
                      "marker": {
                        "enabled": false
                      },
                      "lineDash": [0],
                      "strokeWidth": 2
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "bubble": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    },
                    "legend": {
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 5
                        },
                        "paddingX": 18,
                        "paddingY": 5
                      },
                      "spacing": 10
                    },
                    "title": {
                      "enabled": true,
                      "text": "Notional Trading Volumes ($)"
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "date",
                    "libor_volume",
                    "ois_volume",
                    "total_5d_ma_volume"
                  ]
                },
                "suppressChartRanges": true,
                "seriesChartTypes": [
                  {
                    "colId": "libor_volume",
                    "chartType": "groupedColumn",
                    "secondaryAxis": false
                  },
                  {
                    "colId": "ois_volume",
                    "chartType": "groupedColumn",
                    "secondaryAxis": false
                  },
                  {
                    "colId": "total_5d_ma_volume",
                    "chartType": "line",
                    "secondaryAxis": false
                  }
                ]
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1",
                  "cellSelection": {
                    "cellRanges": [
                      {
                        "startRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "endRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "colIds": [
                          "libor_volume"
                        ],
                        "startColId": "libor_volume"
                      }
                    ]
                  },
                  "columnPinning": {
                    "leftColIds": [
                      "date"
                    ],
                    "rightColIds": []
                  },
                  "focusedCell": {
                    "colId": "libor_volume",
                    "rowIndex": 0,
                    "rowPinned": null
                  },
                  "rangeSelection": {
                    "cellRanges": [
                      {
                        "startRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "endRow": {
                          "rowIndex": 0,
                          "rowPinned": null
                        },
                        "colIds": [
                          "libor_volume"
                        ],
                        "startColId": "libor_volume"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "i": "trade_distribution_custom_obb",
            "x": 0,
            "y": 11,
            "w": 20,
            "h": 14,
            "state": {
              "params": {
                "swap_type": "OIS"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "groupedColumn",
                "chartOptions": {
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "line": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "bubble": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Distribution Of Trades On Date ($)"
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "one_to_three_year",
                    "three_to_four_year",
                    "four_to_five_year",
                    "five_to_seven_year",
                    "seven_to_ten_year",
                    "ten_to_fifteen_year",
                    "fifteen_to_twenty_year"
                  ]
                },
                "switchCategorySeries": true,
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1"
                }
              }
            }
          },
          {
            "i": "swap_trades_custom_obb",
            "x": 20,
            "y": 11,
            "w": 19,
            "h": 14,
            "state": {
              "params": {
                "cleared_only": "false",
                "include_starting": "false"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              },
              "chartModel": {
                "modelType": "range",
                "chartType": "line",
                "chartOptions": {
                  "bubble": {
                    "legend": {
                      "enabled": true
                    },
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 17
                      }
                    },
                    "paired": true
                  },
                  "line": {
                    "legend": {
                      "enabled": true,
                      "position": "bottom",
                      "item": {
                        "marker": {
                          "size": 10,
                          "padding": 2
                        },
                        "paddingX": 10
                      },
                      "spacing": 21
                    },
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 13
                      },
                      "strokeWidth": 0,
                      "connectMissingData": true,
                      "strokeOpacity": 1
                    },
                    "padding": {
                      "top": 16,
                      "right": 20,
                      "bottom": 9,
                      "left": 9
                    },
                    "axes": {
                      "category": {
                        "bottom": {
                          "label": {
                            "spacing": 9
                          }
                        },
                        "top": {
                          "label": {
                            "spacing": 9
                          }
                        }
                      },
                      "number": {
                        "bottom": {
                          "gridLine": {
                            "enabled": false
                          },
                          "tick": {
                            "enabled": true,
                            "size": 5,
                            "width": 2
                          },
                          "label": {
                            "spacing": 7
                          },
                          "title": {
                            "enabled": false,
                            "text": "Time To Maturity"
                          }
                        },
                        "top": {
                          "gridLine": {
                            "enabled": false
                          },
                          "tick": {
                            "enabled": true,
                            "size": 5,
                            "width": 2
                          },
                          "label": {
                            "spacing": 7
                          },
                          "title": {
                            "enabled": false,
                            "text": "Time To Maturity"
                          }
                        },
                        "left": {
                          "title": {
                            "enabled": false,
                            "text": "Interest Rate (%)",
                            "spacing": 11
                          }
                        },
                        "right": {
                          "title": {
                            "enabled": false,
                            "text": "Interest Rate (%)",
                            "spacing": 11
                          }
                        }
                      }
                    },
                    "title": {
                      "enabled": true,
                      "text": "Swaps Traded On Date (%)",
                      "spacing": 20
                    }
                  },
                  "theme": {
                    "baseTheme": "ag-default-dark",
                    "overrides": {
                      "pie": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "donut": {
                        "series": {
                          "calloutLabel": {

                          },
                          "sectorLabel": {
                            "enabled": true
                          }
                        }
                      },
                      "scatter": {
                        "axes": {
                          "number": {
                            "title": {
                              "fontSize": 11,
                              "spacing": 10,
                              "enabled": true,
                              "text": ""
                            }
                          }
                        }
                      },
                      "common": {
                        "axes": {
                          "number": {
                            "label": {

                            }
                          },
                          "angle-number": {
                            "label": {

                            }
                          },
                          "radius-number": {
                            "label": {

                            }
                          }
                        },
                        "padding": {
                          "top": 20,
                          "bottom": 5,
                          "left": 20,
                          "right": 40
                        },
                        "background": {
                          "visible": false
                        },
                        "zoom": {
                          "enabled": true,
                          "anchorPointX": "pointer",
                          "anchorPointY": "pointer",
                          "minVisibleItems": 4,
                          "autoScaling": {
                            "enabled": true
                          }
                        },
                        "legend": {
                          "position": "top",
                          "maxHeight": 50,
                          "spacing": 20,
                          "item": {
                            "paddingX": 32,
                            "paddingY": 8,
                            "marker": {
                              "shape": "square",
                              "padding": 5,
                              "size": 11
                            },
                            "label": {
                              "color": "#fff",
                              "fontSize": 11
                            }
                          }
                        },
                        "title": {
                          "fontSize": 12
                        }
                      }
                    }
                  },
                  "common": {
                    "axes": {
                      "category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5,
                          "autoRotate": true
                        },
                        "position": "bottom"
                      },
                      "radius-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "angle-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "grouped-category": {
                        "type": "category",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "minSpacing": 5
                        }
                      },
                      "number": {
                        "type": "number",
                        "position": "left",
                        "crosshair": {
                          "label": {

                          }
                        },
                        "label": {
                          "fontSize": 11,
                          "autoRotate": false,
                          "avoidCollisions": true
                        }
                      },
                      "time": {
                        "type": "time",
                        "position": "bottom",
                        "label": {
                          "avoidCollisions": true,
                          "fontSize": 11,
                          "rotation": 0
                        }
                      }
                    },
                    "legend": {
                      "position": "top",
                      "maxHeight": 50,
                      "spacing": 20,
                      "item": {
                        "paddingX": 32,
                        "paddingY": 8,
                        "marker": {
                          "shape": "square",
                          "padding": 5,
                          "size": 11
                        },
                        "label": {
                          "color": "#fff",
                          "fontSize": 11
                        }
                      }
                    }
                  },
                  "pie": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "donut": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "calloutLabel": {
                        "enabled": true
                      },
                      "sectorLabel": {
                        "enabled": true
                      }
                    }
                  },
                  "area": {
                    "series": {
                      "label": {
                        "enabled": false
                      },
                      "tooltip": {
                        "enabled": true
                      },
                      "marker": {
                        "enabled": true,
                        "size": 17
                      }
                    }
                  },
                  "histogram": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "outside-end"
                      }
                    }
                  },
                  "scatter": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "top"
                      }
                    }
                  },
                  "treemap": {
                    "series": {
                      "group": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tile": {
                        "label": {
                          "enabled": true
                        }
                      },
                      "tooltip": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "sunburst": {
                    "series": {
                      "tooltip": {
                        "enabled": true,
                        "position": {
                          "type": "pointer"
                        },
                        "interaction": {
                          "enabled": true
                        }
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "heatmap": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": true
                      }
                    },
                    "padding": {
                      "bottom": 10
                    }
                  },
                  "waterfall": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false,
                        "placement": "inside"
                      }
                    }
                  },
                  "radar-line": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radar-area": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-bar": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "radial-column": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  },
                  "nightingale": {
                    "series": {
                      "tooltip": {
                        "enabled": true
                      },
                      "label": {
                        "enabled": false
                      }
                    }
                  }
                },
                "cellRange": {
                  "columns": [
                    "tenor",
                    "pricing_rate",
                    "cleared_and_spot_starting",
                    "uncleared_and_forward_starting"
                  ]
                },
                "suppressChartRanges": true
              },
              "columnState": {
                "default_undefined": {
                  "version": "33.2.1"
                }
              }
            }
          }
        ]
      }
    },
    "groups": [
      {
        "name": "Group 1",
        "type": "param",
        "paramName": "period",
        "defaultValue": "1y",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "swap_rate_volume_custom_obb"
        ]
      },
      {
        "name": "Group 2",
        "type": "param",
        "paramName": "currency",
        "defaultValue": "USD",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "swap_rate_volume_custom_obb",
          "trade_distribution_custom_obb",
          "swap_trades_custom_obb"
        ]
      },
      {
        "name": "Group 3",
        "type": "param",
        "paramName": "swap_type",
        "defaultValue": "OIS",
        "widgetIds": [
          "swap_rate_levels_custom_obb",
          "trade_distribution_custom_obb"
        ]
      },
      {
        "name": "Group 4",
        "type": "param",
        "paramName": "stat",
        "defaultValue": "Notional",
        "widgetIds": [
          "swap_rate_volume_custom_obb",
          "trade_distribution_custom_obb"
        ]
      }
    ]
  }
]
```

### FRED

```json
{
  "name": "Your_FED",
  "img": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "img_dark": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "img_light": "https://ohiocapitaljournal.com/wp-content/uploads/2024/08/GettyImages-2164058797-scaled-1-2048x1366.jpg",
  "description": "Make The charts that mater to you always live",
  "allowCustomization": true,
  "tabs": {
    "overview": {
      "id": "overview",
      "name": "Overview",
      "layout": [
        {
          "i": "fred_chart",
          "x": 0,
          "y": 2,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "start": "1970-01-01"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 20,
          "y": 2,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "CPI 12-month@CPIAUCSL.p12.m100,CPI 6-month@CPIAUCSL.p6.pa2,CPI 3-month@CPIAUCSL.p3.pa4",
              "title": "CPI Inflation Momentum",
              "chart": "line"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 0,
          "y": 18,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "Core CPI YoY@CPILFESL.p12.m100,CPI YoY@CPIAUCSL.p12.m100",
              "start": "2000-01-01"
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 20,
          "y": 18,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "NFP@PAYEMS.d1.m1000",
              "title": "NFP Changes "
            }
          }
        },
        {
          "i": "fred_chart",
          "x": 0,
          "y": 34,
          "w": 20,
          "h": 16,
          "state": {
            "params": {
              "query": "DGS2,DGS5,DGS10,DGS30"
            }
          }
        }
      ]
    }
  },
  "groups": []
}
```

### FED Net Liquidity

```json
[
  {
    "name": "Fed Net Liquidity",
    "img": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "img_dark": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "img_light": "https://static.vecteezy.com/system/resources/thumbnails/027/221/813/small_2x/fed-text-in-wooden-circle-on-banknotes-background-credit-card-piggybank-calculator-federal-reserve-board-system-federal-reserve-interest-rate-hike-global-economy-recession-and-finance-concept-photo.jpg",
    "description": "Data curated by @dharmatrade",
    "allowCustomization": true,
    "tabs": {
      "fed-net-liquidity": {
        "id": "fed-net-liquidity",
        "name": "FED Net Liquidity",
        "layout": [
          {
            "i": "fed-net-liquidity",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-net-liquidity-all",
            "x": 0,
            "y": 32,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-net-liquidity-data",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15,
            "state": {
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "mts-income-taxes": {
        "id": "mts-income-taxes",
        "name": "MTS Income Taxes",
        "layout": [
          {
            "i": "mts-income-taxes-current-vs-prior",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-monthly-by-year",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-yoy-comparison",
            "x": 0,
            "y": 32,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-fytd",
            "x": 0,
            "y": 47,
            "w": 40,
            "h": 15
          },
          {
            "i": "mts-income-taxes-monthly",
            "x": 0,
            "y": 62,
            "w": 40,
            "h": 15
          }
        ]
      },
      "fed-balance-sheet": {
        "id": "fed-balance-sheet",
        "name": "FED Balance Sheet",
        "layout": [
          {
            "i": "fed-balance-sheet",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 15
          },
          {
            "i": "fed-balance-sheet-weekly",
            "x": 0,
            "y": 17,
            "w": 40,
            "h": 19
          }
        ]
      }
    },
    "groups": []
  }
]
```

---

---
title: Apps
sidebar_position: 30
description: Create and customize your own OpenBB Apps for optimized workflows
keywords:
- OpenBB Apps
- Custom Apps
- Workflow Optimization
- Dashboard Templates
- AI Agents
- Data Integration
- Custom Solutions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps | OpenBB Workspace Docs" />

OpenBB Apps are powerful, customizable solutions that combine data widgets, prompts and AI agents to create optimized workflows for your specific needs.

<div style={{display: 'flex-col', justifyContent: 'center'}}>
  <img width="800" alt="PWA" src="https://openbb-cms.directus.app/assets/b1d5b799-3abe-4d45-b04c-601e2b652b18.png" />
</div>

Built on the principle that there's no one-size-fits-all approach to financial analysis, Apps empower you to own your workflows end-to-end.

## What are OpenBB Apps?

OpenBB Apps are comprehensive solutions that combine:

- **Data Integration**: Seamless connection with your data sources
- **Custom Dashboards**: Pre-configured layouts with specialized widgets
- **AI Agents**: Intelligent automation for your analysis workflows
- **Pre-saved Prompts**: Reusable AI interactions for consistent results


## Why use OpenBB Apps?

- **Complete Control**
  Build solutions tailored to your specific workflows, integrate your proprietary data and preferred AI models, and customize every aspect of your analysis environment.

- **No Vendor Lock-in**
  Avoid being limited by vendor data or technology, maintain ownership of your workflows and data, and choose your preferred data sources and AI models.

- **Optimized Workflows**
  Save time with pre-configured analysis templates, automate repetitive tasks with AI agents, and create consistent, reproducible analysis processes.

## Creating Your Own App

1. Integrate your data widgets in OpenBB Workspace, as seen in <a href="/workspace/data-widgets" target="_blank" rel="noopener noreferrer">Data Widgets</a>.
2. Organize them in a certain layout
3. Group widgets together and/or change their display (e.g. table or charts)
4. Right click on the dashboard and select "Export apps.json"
<img className="pro-border-gradient" width="800" alt="OpenBB Apps Example" src="https://openbb-cms.directus.app/assets/fd20914a-5557-43fd-a320-96dec1e70a38.png" />

5. This will create a `apps.json` file with your configuration
<img className="pro-border-gradient" width="800" alt="OpenBB Apps Example" src="https://openbb-cms.directus.app/assets/2250bf63-e7e9-447d-b2e3-14d71d23fe92.png" />

This is what you should expect as a file:

```json
[
  {
    "name": "Fama French Factors and Research Portfolio",
    "img": "https://github.com/user-attachments/assets/8b2409d6-5ddc-4cbc-b20c-89a29b1bd923",
    "img_dark": "",
    "img_light": "",
    "description": "Examine sample portfolio holdings distribution across countries, sectors, and industries, while also understanding how different assets correlate with each other over various time periods. This app provides insights into how portfolios respond to different market factors using Fama-French analysis, helping investors understand their portfolio's underlying drivers of returns and risk exposures.",
    "allowCustomization": true,
    "tabs": {
      "reference-data": {
        "id": "reference-data",
        "name": "Reference Data",
        "layout": [
          {
            "i": "fama_french_info_custom_obb",
            "x": 0,
            "y": 2,
            "w": 12,
            "h": 25
          },
          {
            "i": "load_factors_custom_obb",
            "x": 12,
            "y": 13,
            "w": 28,
            "h": 14,
            "state": {
              "params": {
                "frequency": "monthly",
                "start_date": "2021-01-01",
                "end_date": "2025-03-27"
              },
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          },
          {
            "i": "load_portfolios_custom_obb",
            "x": 12,
            "y": 2,
            "w": 28,
            "h": 11,
            "state": {
              "params": {
                "portfolio": "Portfolios_Formed_on_OP",
                "start_date": "2021-01-01",
                "end_date": "2025-03-27"
              },
              "chartView": {
                "enabled": false,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "portfolio-price--performance": {
        "id": "portfolio-price--performance",
        "name": "Portfolio Price & Performance",
        "layout": [
          {
            "i": "portfolio_unit_price_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 24,
            "state": {
              "params": {
                "portfolio": "Client 2",
                "returns": "True"
              },
              "chartView": {
                "enabled": true,
                "chartType": "line"
              }
            }
          }
        ]
      },
      "portfolio-region-and-sector-exposure": {
        "id": "portfolio-region-and-sector-exposure",
        "name": "Portfolio Region and Sector Exposure",
        "layout": [
          {
            "i": "portfolio_sectors_custom_obb",
            "x": 0,
            "y": 13,
            "w": 19,
            "h": 14,
            "state": {
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          },
          {
            "i": "portfolio_countries_custom_obb",
            "x": 0,
            "y": 2,
            "w": 19,
            "h": 11,
            "state": {
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          },
          {
            "i": "portfolio_industries_custom_obb",
            "x": 19,
            "y": 2,
            "w": 21,
            "h": 25,
            "state": {
              "params": {
                "portfolio": "Client 3"
              },
              "chartView": {
                "enabled": true,
                "chartType": "pie"
              }
            }
          }
        ]
      },
      "portfolio-holdings": {
        "id": "portfolio-holdings",
        "name": "Portfolio Holdings",
        "layout": [
          {
            "i": "portfolio_holdings_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 25,
            "state": {
              "params": {
                "portfolio": "Client 2"
              },
              "chartView": {
                "enabled": true,
                "chartType": "bar"
              }
            }
          }
        ]
      },
      "portfolio-holdings-correlations": {
        "id": "portfolio-holdings-correlations",
        "name": "Portfolio Holdings Correlations",
        "layout": [
          {
            "i": "holdings_correlation_custom_obb",
            "x": 0,
            "y": 2,
            "w": 40,
            "h": 26,
            "state": {
              "params": {
                "portfolio": "Client 2"
              }
            }
          }
        ]
      },
      "portfolio-factor-correlations": {
        "id": "portfolio-factor-correlations",
        "name": "Portfolio Factor Attributions",
        "layout": [
          {
            "i": "portfolio_factors_custom_obb",
            "x": 0,
            "y": 2,
            "w": 30,
            "h": 20,
            "state": {
              "params": {
                "portfolio": "Client 2"
              }
            }
          }
        ]
      }
    },
    "groups": [
      {
        "name": "Group 3",
        "type": "param",
        "paramName": "frequency",
        "defaultValue": "monthly",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 2",
        "type": "param",
        "paramName": "start_date",
        "defaultValue": "2021-01-01",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 4",
        "type": "param",
        "paramName": "end_date",
        "defaultValue": "2025-03-27",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 5",
        "type": "param",
        "paramName": "region",
        "defaultValue": "america",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 6",
        "type": "endpointParam",
        "paramName": "factor",
        "defaultValue": "america",
        "widgetIds": [
          "load_factors_custom_obb",
          "load_portfolios_custom_obb"
        ]
      },
      {
        "name": "Group 7",
        "type": "param",
        "paramName": "portfolio",
        "defaultValue": "Client 1",
        "widgetIds": [
          "portfolio_sectors_custom_obb",
          "portfolio_countries_custom_obb",
          "portfolio_industries_custom_obb",
          "portfolio_holdings_custom_obb",
          "portfolio_unit_price_custom_obb",
          "holdings_correlation_custom_obb",
          "portfolio_factors_custom_obb"
        ]
      }
    ],
    "prompts": [
      "Please analyze my current portfolio holdings. What are the top 5 positions by weight? Are there any concentration risks I should be aware of? How has each position performed over the last month?",
      "What are the strongest correlations between my portfolio holdings? Which positions might provide good diversification benefits? How do my holdings correlate with major market factors?",
      "What is my current sector exposure? Are there any sectors where I'm over or underweight compared to the market? What are the risks and opportunities in my current sector allocation?",
      "How does my portfolio respond to different market factors? What are my current factor exposures? Are there any factor tilts I should consider adjusting?"
    ]
  }
]


---

---
title: Core Widgets
sidebar_position: 13
description: Master OpenBB's essential widgets for building powerful financial dashboards, including navigation, notes, API integration, and real-time data visualization tools.
keywords:
- dashboard widgets
- financial analysis
- data visualization
- navigation tools
- note taking
- API integration
- RSS feeds
- market monitoring
- time tracking
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Core Widgets | OpenBB Workspace Docs" />

OpenBB's core widgets form the foundation of your financial analysis workspace. These essential components enable you to organize information, capture insights, and integrate external data sources within a unified interface, creating a powerful environment for financial analysis and decision-making.

## Navigation Bar

The Navigation Bar serves as your dashboard's command center, providing intuitive organization for complex information. This powerful tool enables you to:

- Create and manage multiple tabs for different analysis contexts
- Organize information into logical sections
- Separate research from analysis
- Track different market sectors
- Monitor various portfolios

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Navigation bar interface showing multiple tabs" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/navigation_bar.png" />
</div>

## Note Widget

The Note widget transforms your dashboard into a dynamic research platform, enabling you to capture and organize your insights effectively. This versatile tool allows you to:

- Document real-time insights during market analysis
- Record key findings and observations
- Store and organize prompts for AI-powered analysis
- Create a searchable knowledge base of your research

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Note widget interface showing text editing capabilities" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/note_widget.png" />
</div>

### AI Integration

The Note widget's AI integration capabilities enhance your analysis workflow by:

- Maintaining a library of effective prompts
- Providing context for AI analysis
- Creating a seamless workflow between manual research and automated insights
- Enabling intelligent data processing and interpretation

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Note widget being used as AI context" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/note_context.png" />
</div>

## Website and Iframe Widget

The Website widget brings external data sources directly into your dashboard, creating a unified research environment. This powerful integration enables you to:

- Access and interact with external websites without leaving OpenBB
- Compare data from multiple sources side by side
- Create a comprehensive research workspace
- Maintain context while analyzing multiple data sources

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Website widget showing embedded webpage" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/website.png" />
</div>

> **Note:** Some websites may restrict embedding. OpenBB automatically checks and only displays websites that permit embedding.

## RSS Feeds Widget

The RSS Feeds widget serves as your personal news aggregator within OpenBB, keeping you informed with market-moving information. This essential tool provides:

- Curated financial news from top sources
- Customizable news feed preferences
- Real-time market updates
- Integrated news analysis within your research workflow

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="RSS Feeds widget showing news headlines" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/rss.png" />
</div>

## Clock Widget

The Clock widget helps you track global market hours and coordinate across time zones, essential for international trading and analysis. This tool is particularly valuable for:

- Monitoring market open/close times across different regions
- Coordinating with international teams
- Planning trades across multiple time zones
- Staying aware of global market events

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Clock widget showing multiple time zones" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/clock.png" />
</div>

## Simple API Endpoints

The Simple API Endpoints widget provides a direct path to integrate custom data into your dashboard, enabling real-time data updates and analysis. This powerful feature:

- Converts API responses into interactive tables
- Requires minimal configuration
- Supports JSON data formats
- Enables real-time data updates

### Implementation Guide

1. Enter your API endpoint URL
2. Configure any required connection details
3. Select the relevant metadata
4. The widget automatically renders your data in table format

### Troubleshooting Guide

#### Data Not Displaying

- Verify your endpoint returns JSON format
- Check API response structure
- Ensure proper authentication if required

#### Connection Errors

- Use the '+ Add Headers' button to include required authentication
- Verify endpoint accessibility
- Check network connectivity

#### Data Structure Issues

- Use the "Data Key" parameter for nested JSON structures
- Consider using [Data Integration](/content/workspace/data-widgets/index.md) for complex data processing

For additional support, contact [support@openbb.finance](mailto:support@openbb.finance) with specific details about your issue.

### Pre-configured API Endpoints

We provide several pre-configured API endpoints for immediate use:

| Widget Title | Public URL | Category | Subcategory | Source | Description | Add to Pro |
| ------------ | ---------- | -------- | ----------- | ------ | ----------- | ---------- |
| Protocols | https://defillama-datasets.llama.fi/lite/v2/protocols | DeFi | TVL | DefiLLama | Comprehensive list of DeFi protocols with TVL data | <a href="https://pro.openbb.co/app?modal=data-connectors&dcTab=single&endpoint=https://defillama-datasets.llama.fi/lite/v2/protocols&name=Protocols" target="_blank"> <button className="_btn text-xs">Add</button> </a> |
| Historical Chain TVL | https://api.llama.fi/v2/historicalChainTvl | DeFi | TVL | DefiLLama | Historical TVL data across all DeFi chains | <a href="https://pro.openbb.co/app?modal=data-connectors&dcTab=single&endpoint=https://api.llama.fi/v2/historicalChainTvl&name=Historical Chain TVL" target="_blank"> <button className="_btn text-xs">Add</button> </a> |
| Chains | https://api.llama.fi/v2/chains | DeFi | TVL | DefiLLama | Current TVL metrics for all chains | <a href="https://pro.openbb.co/app?modal=data-connectors&dcTab=single&endpoint=https://api.llama.fi/v2/chains&name=Chains" target="_blank"> <button className="_btn text-xs">Add</button> </a> |
| TAO stats | https://taostats.io/data.json | Crypto | | Tao | Real-time $TAO token and subnet metrics | <a href="https://pro.openbb.co/app?modal=data-connectors&dcTab=single&endpoint=https://taostats.io/data.json&name=TAO stats" target="_blank"> <button className="_btn text-xs">Add</button> </a> |



---

---
title: Overview
sidebar_position: 10
description: Learn how to integrate your own data sources and APIs into OpenBB Workspace with a custom backend solution.
keywords:
- Data Integration
- Custom Backend
- API Endpoints
- Widget Configuration
- Data Connectors
- User Interface
- Real-time Updates
- Single Widget
- Data Key Parameter
- Nested JSON
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';
import TutorialVideo from '@site/src/components/General/TutorialVideo.tsx';

<HeadTitle title="Data Integration | OpenBB Workspace Docs" />

OpenBB Workspace provides a powerful custom backend feature that enables you to integrate your own data sources and APIs directly into the platform. This integration capability allows you to:

- Create personalized widgets that display your custom data
- Leverage OpenBB's AI agents with your proprietary data
- Build a seamless workflow between your data sources and OpenBB's analysis tools

A custom backend is an API that returns data in a format that OpenBB Workspace understands, with specifications defined in a `widgets.json` file. This approach gives you complete flexibility in choosing your technology stack while ensuring compatibility with OpenBB Workspace.

<TutorialVideo
  youtubeLink="https://www.youtube.com/embed/BbAGb-fciIc?si=IM_WJ9miEaqFKJAN"
  videoLegend="Learn how to integrate your custom backend with OpenBB Workspace"
/>

## Getting Started: Hello World Example

Let's walk through a simple example to demonstrate how to integrate a custom backend. We'll create a basic "Hello World" application that you can use as a template for your own integrations.

The complete example code is available in our [GitHub repository](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/getting-started/hello-world).

### 0. Prerequisites

Before we begin, ensure you have the following installed:

```bash
pip install fastapi uvicorn
```

### 1. Create the API Server

Create a `main.py` file with the following code:

```python
# Import required libraries
import json
from pathlib import Path
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# Initialize FastAPI application with metadata
app = FastAPI(
    title="Hello World",
    description="Hello World app for OpenBB Workspace",
    version="0.0.1"
)

# Define allowed origins for CORS (Cross-Origin Resource Sharing)
# This restricts which domains can access the API
origins = [
    "https://pro.openbb.co",
]

# Configure CORS middleware to handle cross-origin requests
# This allows the specified origins to make requests to the API
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

@app.get("/")
def read_root():
    """Root endpoint that returns basic information about the API"""
    return {"Info": "Hello World example"}

# Widgets configuration file for the OpenBB Workspace
# it contains the information and configuration about all the
# widgets that will be displayed in the OpenBB Workspace
@app.get("/widgets.json")
def get_widgets():
    """Widgets configuration file for the OpenBB Workspace
    
    Returns:
        JSONResponse: The contents of widgets.json file
    """
    # Read and return the widgets configuration file
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "widgets.json").open())
    )

# Apps configuration file for the OpenBB Workspace
# it contains the information and configuration about all the
# apps that will be displayed in the OpenBB Workspace
@app.get("/apps.json")
def get_apps():
    """Apps configuration file for the OpenBB Workspace
    
    Returns:
        JSONResponse: The contents of apps.json file
    """
    # Read and return the apps configuration file
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "apps.json").open())
    )

# Hello World endpoint - for it to be recognized by the OpenBB Workspace
# it needs to be added to the widgets.json file endpoint
@app.get("/hello_world")
def hello_world(name: str = ""):
    """Returns a personalized greeting message.

    Args:
        name (str, optional): Name to include in the greeting. Defaults to empty string.

    Returns:
        str: A greeting message with the provided name in markdown format.
    """
    # Return a markdown-formatted greeting with the provided name
    return f"# Hello World {name}"
```

### 2. Configure Widgets

Create a `widgets.json` file to define your widget's properties. This file is your main configuration and defines widget properties such as name, description, category, endpoint, type of widget, and other information. Each widget will be defined in this file:

```json
{
    "hello_world": {
        "name": "Hello World",
        "description": "A simple markdown widget that displays Hello World",
        "category": "Hello World",
        "type": "markdown",
        "endpoint": "hello_world",
        "gridData": {"w": 12, "h": 4},
        "source": "None",
        "params": [
            {
                "paramName": "name",
                "value": "",
                "label": "Name",
                "type": "text",
                "description": "Enter your name"
            }
        ]
    }
}
```

### 3. Configure App Layout (Optional)

Create an `apps.json` file to define the app's layout. This makes it so that there is a new App on OpenBB with a single markdown widget that says Hello World:

```json
[
  {
    "name": "Hello World",
    "img": "",
    "img_dark": "",
    "img_light": "",
    "description": "Hello World template",
    "allowCustomization": true,
    "tabs": {
      "": {
        "id": "",
        "name": "",
        "layout": [
          {
            "i": "hello_world",
            "x": 0,
            "y": 0,
            "w": 12,
            "h": 4,
            "state": {
              "params": {
                "name": ""
              }
            }
          }
        ]
      }
    },
    "groups": []
  }
]
```

### 4. Run the Application

Your project structure should look like this:
```
backend/
├── main.py
├── widgets.json
└── apps.json
```

Start the server with:
```bash
uvicorn main:app --reload --host 0.0.0.0 --port 7779
```

You should see output similar to:
```bash
$ uvicorn main:app --reload --host 0.0.0.0 --port 7779
INFO:     Uvicorn running on http://0.0.0.0:7779 (Press CTRL+C to quit)
INFO:     Started reloader process [59166] using WatchFiles
INFO:     Started server process [59168]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

The application will be available at `http://127.0.0.1:7779`.

### 5. Add to OpenBB

You can then add this backend to OpenBB Workspace by right clicking on the dashboard and clicking "Add data", and do the following:

<img width="800" alt="Apps" src="https://openbb-cms.directus.app/assets/80898c79-cb04-4361-afdd-945eb3e531be.png" />

### 6. Voila

<img width="800" alt="Apps" src="https://openbb-cms.directus.app/assets/b34f315c-0f17-4e14-9b0d-0288d1cf7a5c.png" />


---

---
title: AgGrid Table Charts
sidebar_position: 13
description: AgGrid Table Charts
keywords:
- asd
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="AgGrid Table Charts | OpenBB Workspace Docs" />

## Basic Table Widget

A widget that displays data in a tabular format. This example shows how to create a table with cryptocurrency data including TVL and price changes.

<img className="pro-border-gradient" width="800" alt="Table Widget Example" src="https://openbb-cms.directus.app/assets/96f31526-87c1-40f3-8ecb-6cc869d2e910.png" />

```python
@register_widget({
    "name": "Table Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/table_widget")
def table_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table Widget from API

A widget that fetches and displays data from an external API. This example demonstrates integration with the DeFi Llama API to show chain TVL data.

<img className="pro-border-gradient" width="800" alt="Table Widget from API Example" src="https://openbb-cms.directus.app/assets/ab850520-843d-4fe2-b95c-c8346b41ac93.png" />

```python
@register_widget({
    "name": "Table Widget from API Endpoint",
    "description": "A table widget from an API endpoint",
    "type": "table",
    "endpoint": "table_widget_from_api_endpoint",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/table_widget_from_api_endpoint")
def table_widget_from_api_endpoint():
    """Get current TVL of all chains using Defi LLama"""
    response = requests.get("https://api.llama.fi/v2/chains")

    if response.status_code == 200:
        return response.json()

    print(f"Request error {response.status_code}: {response.text}")
    raise HTTPException(
        status_code=response.status_code,
        detail=response.text
    )
```

## Table Widget with Column Definitions

A widget that displays data in a tabular format with customizable column definitions. The most important part of this widget is the "columnsDefs" key in the data object which allows for detailed column configuration.

<img className="pro-border-gradient" width="800" alt="Table Widget with Column Definitions Example" src="https://openbb-cms.directus.app/assets/efea3aa4-fd2a-4098-bd64-1a7c825b6c96.png" />

```python
@register_widget({
    "name": "Table Widget with Column Definitions",
    "description": "A table widget with column definitions",
    "type": "table",
    "endpoint": "table_widget_with_column_definitions",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "renderFn": "titleCase",
                    "width": 120,
                    "pinned": "left"
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",
                    "width": 150
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                    "hide": True
                },
            ]
        }
    },
})
@app.get("/table_widget_with_column_definitions")
def table_widget_with_column_definitions():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table Widget with Render Functions

A widget that demonstrates various rendering functions for table cells. The key feature is the "renderFn" key in the columnsDefs object which allows for custom cell rendering.

<img className="pro-border-gradient" width="800" alt="Table Widget with Render Functions Example" src="https://openbb-cms.directus.app/assets/ba983638-e6bb-4a3f-9c80-b360f3577b11.png" />

```python
@register_widget({
    "name": "Table Widget with Render Functions",
    "description": "A table widget with render functions",
    "type": "table",
    "endpoint": "table_widget_with_render_functions",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "renderFn": "titleCase",
                    "width": 120,
                    "pinned": "left"
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",               
                    "width": 150,
                    "renderFn": "columnColor",
                    "renderFnParams": {
                        "colorRules": [
                            {
                                "condition": "between",
                                "range": {
                                    "min": 30000000000,
                                    "max": 40000000000
                                },
                                "color": "blue",
                                "fill": False
                            },
                            {
                                "condition": "lt",
                                "value": 10000000000,
                                "color": "#FFA500",
                                "fill": False
                            },
                            {
                                "condition": "gt",
                                "value": 40000000000,
                                "color": "green",
                                "fill": True
                            }
                        ]
                    }
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                }
            ]
        }
    },
})
@app.get("/table_widget_with_render_functions")
def table_widget_with_render_functions():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

For more information on this, check [Render functions](/workspace/widget-configuration/render-functions).

## Table Widget with Hover Card

A widget that demonstrates the hover card feature, allowing additional information to be displayed when hovering over table cells.

<img className="pro-border-gradient" width="800" alt="Table Widget with Hover Card Example" src="https://openbb-cms.directus.app/assets/60a39927-8985-4f3a-8e14-0016e167b79f.png" />

```python
@register_widget({
    "name": "Table Widget with Hover Card",
    "description": "A table widget with hover card",
    "type": "table",
    "endpoint": "table_widget_with_hover_card",
    "gridData": {"w": 20, "h": 6},
    "data": {
        "table": {
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "cellDataType": "text",
                    "formatterFn": "none",
                    "width": 120,
                    "pinned": "left",
                    "renderFn": "hoverCard",
                    "renderFnParams": {
                        "hoverCard": {
                            "cellField": "value",
                            "title": "Project Details",
                            "markdown": "### {value} (since {foundedDate})\n**Description:** {description}"
                        }
                    }
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "headerTooltip": "Total Value Locked",
                    "cellDataType": "number",
                    "formatterFn": "int",               
                    "width": 150,
                    "renderFn": "columnColor",
                },
                {
                    "field": "change_1d",
                    "headerName": "24h Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                },
                {
                    "field": "change_7d",
                    "headerName": "7d Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120,
                    "maxWidth": 150,
                    "minWidth": 70,
                }
            ]
        }
    },
})
@app.get("/table_widget_with_hover_card")
def table_widget_with_hover_card():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": {
                "value": "Ethereum",
                "description": "A decentralized, open-source blockchain with smart contract functionality",
                "foundedDate": "2015-07-30"
            },
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": {
                "value": "Bitcoin",
                "description": "The first decentralized cryptocurrency",
                "foundedDate": "2009-01-03"
            },
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": {
                "value": "Solana",
                "description": "A high-performance blockchain supporting builders around the world",
                "foundedDate": "2020-03-16"
            },
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table to Chart Widget

A widget that demonstrates how to convert table data into a chart view. The key feature is the "chartView" configuration in the data object.

<img className="pro-border-gradient" width="800" alt="Table to Chart Widget Example" src="https://openbb-cms.directus.app/assets/72c0802d-34c9-4bd2-aa3f-77e7d89ccb7c.png" />

```python
@register_widget({
    "name": "Table to Chart Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_to_chart_widget",
    "gridData": {"w": 20, "h": 12},
    "data": {
        "table": {
            "enableCharts": True,
            "showAll": False,
            "chartView": {
                "enabled": True,
                "chartType": "column"
            },
            "columnsDefs": [
                {
                    "field": "name",
                    "headerName": "Asset",
                    "chartDataType": "category",
                },
                {
                    "field": "tvl",
                    "headerName": "TVL (USD)",
                    "chartDataType": "series",
                },
            ]
        }
    },
})
@app.get("/table_to_chart_widget")
def table_to_chart_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "name": "Ethereum",
            "tvl": 45000000000,
            "change_1d": 2.5,
            "change_7d": 5.2
        },
        {
            "name": "Bitcoin",
            "tvl": 35000000000,
            "change_1d": 1.2,
            "change_7d": 4.8
        },
        {
            "name": "Solana",
            "tvl": 8000000000,
            "change_1d": -0.5,
            "change_7d": 2.1
        }
    ]
    return mock_data
```

## Table to Time Series Widget

A widget that demonstrates how to display time series data in a chart format. The key feature is the use of "chartDataType": "time" for date fields.

<img className="pro-border-gradient" width="800" alt="Table to Time Series Widget Example" src="https://openbb-cms.directus.app/assets/f2b0f099-795a-4c97-8361-069d91aca150.png" />

```python
@register_widget({
    "name": "Table to Time Series Widget",
    "description": "A table widget",
    "type": "table",
    "endpoint": "table_to_time_series_widget",
    "gridData": {"w": 20, "h": 12},
    "data": {
        "table": {
            "enableCharts": True,
            "showAll": False,
            "chartView": {
                "enabled": True,
                "chartType": "line"
            },
            "columnsDefs": [
                {
                    "field": "date",
                    "headerName": "Date",
                    "chartDataType": "time",
                },
                {
                    "field": "Ethereum",
                    "headerName": "Ethereum",
                    "chartDataType": "series",
                },
                {
                    "field": "Bitcoin",
                    "headerName": "Bitcoin",
                    "chartDataType": "series",
                },
                {
                    "field": "Solana",
                    "headerName": "Solana",
                    "chartDataType": "series",
                }
            ]
        }
    },
})
@app.get("/table_to_time_series_widget")
def table_to_time_series_widget():
    """Returns a mock table data for demonstration"""
    mock_data = [
        {
            "date": "2024-06-06",
            "Ethereum": 1.0000,
            "Bitcoin": 1.0000,
            "Solana": 1.0000
        },
        {
            "date": "2024-06-07",
            "Ethereum": 1.0235,
            "Bitcoin": 0.9822,
            "Solana": 1.0148
        },
        {
            "date": "2024-06-08",
            "Ethereum": 0.9945,
            "Bitcoin": 1.0072,
            "Solana": 0.9764
        },
        {
            "date": "2024-06-09",
            "Ethereum": 1.0205,
            "Bitcoin": 0.9856,
            "Solana": 1.0300
        },
        {
            "date": "2024-06-10",
            "Ethereum": 0.9847,
            "Bitcoin": 1.0195,
            "Solana": 0.9897
        }
    ]
    return mock_data
```

## OTHERS

### Table Interface

The Table widget offers comprehensive data manipulation and visualization capabilities:

- **Column Resizing**: Adjust column widths manually or use the "Autosize all columns" feature for automatic optimization.

- **Column Reorganization**: Implement drag-and-drop functionality to reorder columns. Click and hold any column header to reposition it.

- **Column Filtering**: Toggle column visibility through column settings to focus on relevant data for your analysis.

- **Sorting**: Click column headers to sort data in ascending or descending order.

- **Data Selection**: Select specific data points or ranges to generate visualizations.

### Table to Chart Conversion

The widget supports two primary methods for converting table data into charts:

1. **Selection-based Charting**: Select desired data points, choose a chart type, and generate visualizations instantly. This feature is particularly useful for quantitative analysis.

The example below demonstrates data selection and right-click menu options for creating a line chart:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img className="pro-border-gradient" width="800" alt="selection-charting" src="https://openbb-assets.s3.amazonaws.com/docs/pro/selection-charting-1.png" />
</div>

2. **ChartView Mode**: Access the "ChartView" icon to transform the table into a dynamic chart. This mode automatically updates the visualization as underlying data changes.

The following example shows the ChartView interface:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img className="pro-border-gradient" width="800" alt="chartview" src="https://openbb-assets.s3.amazonaws.com/docs/pro/chartview-setting.png" />
</div>

The highlighted ChartView option enables seamless conversion between table and chart views.

### Available Chart Types

The built-in charts support a variety of types. Here are the allowed values:

- **Column Charts**: `column`, `groupedColumn`, `stackedColumn`, `normalizedColumn`
- **Bar Charts**: `bar`, `groupedBar`, `stackedBar`, `normalizedBar`
- **Line and Scatter Charts**: `line`, `scatter`, `bubble`
- **Pie and Donut Charts**: `pie`, `donut`, `doughnut`
- **Area Charts**: `area`, `stackedArea`, `normalizedArea`
- **Other Types**: `histogram`, `radarLine`, `radarArea`, `nightingale`, `radialColumn`, `radialBar`, `sunburst`, `rangeBar`, `rangeArea`, `boxPlot`, `treemap`, `heatmap`, `waterfall`

### Chart Customization

You can change the chart settings by clicking on the three dots and then the `Chart Settings` in the dropdown menu.

<img className="pro-border-gradient" width="400" alt="chart" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings.png" />

Here you can change the chart type, the chart settings, and some other settings in each tab.

<img className="pro-border-gradient" width="400" alt="chart" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings+2.png" />

The customization interface provides three main configuration areas:

- **Visual Customization**: Modify chart appearance, including titles, colors, and styling elements.
- **Data Series Management**: Control the visibility and configuration of data series.
- **Chart Type Selection**: Choose from various chart types to best represent your data.

Example of a customized chart with multiple visualization types:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img className="pro-border-gradient" width="800" alt="example" src="https://openbb-assets.s3.amazonaws.com/docs/pro/combo-chart.png" />
</div>

The final example demonstrates how to combine different chart types for enhanced data visualization.

---

---
title: File Viewer
sidebar_position: 7
description: Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace
keywords:
- widgets
- pdf
- file viewer
- base64
- multi-file viewer
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="File Viewer | OpenBB Workspace Docs" />

## Single File

The (multi) file viewer widget supports two methods for serving files:

1. Base64 Encoding: The file content is encoded in base64 and sent directly in the response.

2. URL Reference: A URL to the file is provided, which can be a presigned URL for secure access to files stored in cloud storage.

The endpoint should return a JSON response with the following structure:

```json
{
  "headers": {
    "Content-Type": "application/json"
  },
  "data_format": {
    "data_type": "pdf",
    "filename": "example.pdf"
  },
  "content": "base64_encoded_content",  // For base64 method
  // OR
  "file_reference": "https://example.com/path/to/file.pdf"  // For URL method
}
```

Note:

- **data_format.data_type**: The type of file (e.g., "pdf", "csv", "txt")
- **data_format.filename**: The name of the file to display
- **content**: Base64-encoded file content (for base64 method)
- **file_reference**: URL to the file (for URL method)

### PDF Widget with Base64

A widget that displays a PDF file using base64 encoding. This method is useful for displaying PDFs directly in the workspace.

<img className="pro-border-gradient" width="800" alt="PDF Widget with Base64 Example" src="https://openbb-cms.directus.app/assets/9e202a65-eb71-4e43-b111-5f5c79dfa6dc.png" />

```python
@register_widget({
    "name": "PDF Widget with Base64",
    "description": "Display a PDF file with base64 encoding",
    "endpoint": "pdf_widget_base64",
    "gridData": {
        "w": 20,
        "h": 20
    },
    "type": "pdf",
})
@app.get("/pdf_widget_base64")
def get_pdf_widget_base64():
    """Serve a file through base64 encoding."""
    try:
        name = "sample.pdf"
        with open(ROOT_PATH / name, "rb") as file:
            file_data = file.read()
            encoded_data = base64.b64encode(file_data)
            content = encoded_data.decode("utf-8")
    
    except FileNotFoundError as exc:
        raise HTTPException(
            status_code=404,
            detail="File not found"
        ) from exc
    
    return JSONResponse(
        headers={"Content-Type": "application/json"},
        content={
            "data_format": {
                "data_type": "pdf",
                "filename": name,
            },
            "content": content,
        },
    )
```

### PDF Widget with URL

A widget that displays a PDF file using a direct URL. This method is more efficient for larger PDFs as it doesn't require base64 encoding.

<img className="pro-border-gradient" width="800" alt="PDF Widget with URL Example" src="https://openbb-cms.directus.app/assets/7d4fc0e6-f458-49a1-9be9-161d2bec1886.png" />

```python
@register_widget({
    "name": "PDF Widget with URL",
    "description": "Display a PDF file",
    "type": "pdf", 
    "endpoint": "pdf_widget_url",
    "gridData": {
        "w": 20,
        "h": 20
    },
})
@app.get("/pdf_widget_url")
def get_pdf_widget_url():
    """Serve a file through URL."""
    file_reference = "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf"
    if not file_reference:
        raise HTTPException(status_code=404, detail="File not found")
    return JSONResponse(
        headers={"Content-Type": "application/json"},
        content={
            "data_format": {
                "data_type": "pdf",
                "filename": "Sample.pdf",
            },
            "url": file_reference,
        },
    )
```

## Multi File

<img className="pro-border-gradient" width="800" alt="Multi PDF Viewer with Base64 Example" src="https://openbb-cms.directus.app/assets/610ec2bc-2768-4d48-9f0b-0ad08a69b41e.png" />

:::warning Deprecation Notice
The GET-based approach for multi-file viewers is deprecated. Please use the new POST-based approach shown in the example below.
The major change is the GET request to fetch the files is not a POST request that can take in and return a list of files.
:::

### Implementation

The new implementation uses POST requests to handle multiple files efficiently in a single request. This approach provides better performance and error handling.

#### Required Models

First, define the necessary Pydantic models:

```python
from pydantic import BaseModel
from typing import List, Union

class FileOption(BaseModel):
    label: str
    value: str

class FileRequest(BaseModel):
    filenames: List[str]

class DataFormat(BaseModel):
    data_type: str
    filename: str

class DataContent(BaseModel):
    content: str
    data_format: DataFormat

class DataUrl(BaseModel):
    url: str
    data_format: DataFormat

class DataError(BaseModel):
    error_type: str
    content: str
```

#### Sample Data

```python
# Sample whitepaper data
WHITEPAPERS = {
    "bitcoin.pdf": {
        "label": "Bitcoin",
        "filename": "bitcoin.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",
        "category": "l1",
    },
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",
        "category": "l1",
    },
    "chainlink.pdf": {
        "label": "Chainlink",
        "filename": "chainlink.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",
        "category": "oracles",
    },
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",
        "category": "l1",
    },
}
```

#### Options Endpoint

```python
@app.get("/options")
async def get_options(category: str = "all") -> List[FileOption]:
    """Get list of available files filtered by category"""
    if category == "all":
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
    return [
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
    ]
```

#### Multi File Viewer with Base64 (POST)

```python
@app.post("/whitepapers/base64")
async def get_whitepapers_base64(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple PDF files in base64 format"""
    files = []
    for name in request.filenames:
        if whitepaper := WHITEPAPERS.get(name):
            file_name_with_extension = whitepaper["filename"]
            file_path = Path.cwd() / "whitepapers" / file_name_with_extension
            if file_path.exists():
                with open(file_path, "rb") as file:
                    base64_content = base64.b64encode(file.read()).decode("utf-8")
                    files.append(
                        DataContent(
                            content=base64_content,
                            data_format=DataFormat(
                                data_type="pdf",
                                filename=file_name_with_extension,
                            ),
                        ).model_dump()
                    )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="File not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{name}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```

#### Multi File Viewer with URL (POST)

```python
@app.post("/whitepapers/url")
async def get_whitepapers_url(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple PDF files via URLs"""
    files = []
    for name in request.filenames:
        if whitepaper := WHITEPAPERS.get(name):
            file_name_with_extension = whitepaper["filename"]
            if url := whitepaper.get("url"):
                files.append(
                    DataUrl(
                        url=url,
                        data_format=DataFormat(
                            data_type="pdf", filename=file_name_with_extension
                        ),
                    ).model_dump()
                )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="URL not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{name}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```


The corresponding `widgets.json` would have the following format (for url just change the ```endpoint```):

```json
{
  "whitepapers": {
    "type": "multi_file_viewer",
    "name": "Whitepapers",
    "description": "A collection of crypto whitepapers.",
    "endpoint": "/whitepapers/base64",
    "gridData": {
      "w": 40,
      "h": 10
    },
    "params": [
      {
        "type": "endpoint",
        "paramName": "whitepaper",
        "value": ["bitcoin.pdf"],
        "label": "Whitepaper",
        "description": "Whitepaper to display.",
        "optionsEndpoint": "/whitepapers/options",
        "show": false,
        "multiSelect": true,
        "roles": ["fileSelector"]
      }
    ]
  }
}
```


### More complex example

<img className="pro-border-gradient" width="600" alt="multi-file-viewer" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/multi-file-viewer.png" />

This multi-file-viewer widget introduces a parameter called `optionsParams` which allows you to pass the options to an endpoint from a different parameter. More information [here](../widget-parameters/dependent-dropdown.md).

In our case we want to pass the options in the `type` parameter to the `/whitepapers/options` endpoint to filter the list of whitepapers.

```python
# You can find these files in the OpenBB GitHub repository in the backend-examples-for-openbb-workspace folder.
# https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace
# Sample whitepaper data for the multi-file viewer widget
# This is a dictionary where keys are filenames and values contain metadata
# Each whitepaper has the following properties:
# - label: The display name of the whitepaper
# - filename: The filename of the whitepaper
# - url: The URL to the whitepaper
# - category: The category/type of whitepaper
WHITEPAPERS = {
    "bitcoin.pdf": {
        "label": "Bitcoin",
        "filename": "bitcoin.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",
        "category": "l1",
    },
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
    "ethereum.pdf": {
        "label": "Ethereum",
        "filename": "ethereum.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",
        "category": "l1",
    },
    "chainlink.pdf": {
        "label": "ChainLink",
        "filename": "chainlink.pdf",
    "chainlink.pdf": {
        "label": "ChainLink",
        "filename": "chainlink.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",
        "category": "oracles",
    },
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
    "solana.pdf": {
        "label": "Solana",
        "filename": "solana.pdf",
        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",
        "category": "l1",
    },
}
}


@app.get("/whitepapers/options")
async def get_whitepaper_options(category: str = Query("all")) -> List[FileOption]:
    """Get list of available whitepapers filtered by category"""
    if category == "all":
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
        return [
            FileOption(label=whitepaper["label"], value=whitepaper["filename"])
            for whitepaper in WHITEPAPERS.values()
        ]
    return [
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
        FileOption(label=whitepaper["label"], value=whitepaper["filename"])
        for whitepaper in WHITEPAPERS.values()
        if whitepaper["category"] == category
    ]

# This is an example of how to return a list of base64 encoded files using POST.
@app.post("/whitepapers/view-base64")
async def view_whitepapers_base64(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple whitepapers in base64 format"""
    files = []
    for filename in request.filenames:
        if whitepaper := WHITEPAPERS.get(filename):
            file_path = Path.cwd() / whitepaper["filename"]
            if file_path.exists():
                with open(file_path, "rb") as file:
                    base64_content = base64.b64encode(file.read()).decode("utf-8")
                    files.append(
                        DataContent(
                            content=base64_content,
                            data_format=DataFormat(
                                data_type="pdf", filename=whitepaper["filename"]
                            ),
                        ).model_dump()
                    )
            else:
                files.append(
                    DataError(
                        error_type="not_found", content="Whitepaper file not found"
                    ).model_dump()
                )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{filename}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)


# This is an example of how to return a list of URLs using POST.
# You would want to return your own presigned URLs here for the files to load correctly 
# or else the files will not load due to CORS policy.
@app.post("/whitepapers/view-url")
async def view_whitepapers_url(
    request: FileRequest,
) -> List[Union[DataContent, DataUrl, DataError]]:
    """Get multiple whitepapers via URLs"""
    files = []
    for filename in request.filenames:
        if whitepaper := WHITEPAPERS.get(filename):
            # Fetch the presigned url and return it for the `url`.
            # In the code below, we are simulating the presigned url by returning the url directly.
            presigned_url = whitepaper["url"]
            
            files.append(
                DataUrl(
                    url=presigned_url,
                    data_format=DataFormat(
                        data_type="pdf", filename=whitepaper["filename"]
                    ),
                ).model_dump()
            )
        else:
            files.append(
                DataError(
                    error_type="not_found", content=f"Whitepaper '{filename}' not found"
                ).model_dump()
            )
    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)
```

The corresponding `widgets.json` would have the following format:

```json
{
  "whitepapers": {
    "type": "multi_file_viewer",
    "name": "Whitepapers",
    "description": "A collection of crypto whitepapers.",
    "endpoint": "/whitepapers/base64",
    "gridData": {
      "w": 40,
      "h": 10
    },
    "params": [
      {
        "type": "endpoint",
        "paramName": "whitepaper",
        "value": ["bitcoin.pdf"],
        "label": "Whitepaper",
        "description": "Whitepaper to display.",
        "optionsEndpoint": "/whitepapers/options",
        "show": false,
        "optionsParams": {
          "category": "$category"
        },
        "multiSelect": true,
        "roles": ["fileSelector"]
      },
      {
        "type": "text",
        "paramName": "category",
        "value": "all",
        "label": "Category",
        "description": "Category of whitepaper to fetch.",
        "options": [
          {
            "label": "All",
            "value": "all"
          },
          {
            "label": "L1",
            "value": "l1"
          },
          {
            "label": "L2",
            "value": "l2"
          },
          {
            "label": "Oracles",
            "value": "oracles"
          },
          {
            "label": "Defi",
            "value": "defi"
          }
        ]
      }
    ]
  }
}
```

More examples can be found on the github repository at https://github.com/OpenBB-finance/backends-for-openbb

---

---
title: Highcharts Chart
sidebar_position: 18
description: Learn how to create Highcharts widgets for OpenBB Workspace, with step-by-step instructions for backend integration, configuration, and theme support.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Highcharts
- Chart widgets
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Highcharts Chart | OpenBB Workspace Docs" />

This guide will walk you through the process of creating a chart widget for OpenBB Workspace using Highcharts. By the end of this guide, you will have a working Highcharts widget that you can add to OpenBB.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/content/workspace/data-integration#1-create-the-api-server.md) page.

## Step 2: Create the Chart Endpoint

Edit the `main.py` file and add the following code. This code sets up a FastAPI application with an endpoint to serve the widget configuration and data for a Highcharts chart:

```python
from pathlib import Path
import json
import pandas as pd
import requests
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from highcharts_core.chart import Chart

app = FastAPI()

# Configure CORS
origins = [
    "https://pro.openbb.co",
    "https://excel.openbb.co"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/widgets.json")
def get_widgets():
    """Widgets configuration file for the OpenBB Data Integration"""
    return JSONResponse(
        content=json.load((Path(__file__).parent.resolve() / "widgets.json").open())
    )

# Highcharts chart endpoint
@app.get("/chains-highchart")
def get_chains_highchart(theme: str = "dark"):
    """Get current TVL of all chains using Defi Llama"""
    response = requests.get("https://api.llama.fi/v2/chains")

    if response.status_code == 200:
        df = pd.DataFrame(response.json())

        top_30_df = df.sort_values(by='tvl', ascending=False).head(30)
        
        # Format TVL values to be more readable (in billions)
        top_30_df['formatted_tvl'] = top_30_df['tvl'].apply(lambda x: round(x / 1e9, 2))

        categories = top_30_df['name'].tolist()
        data = top_30_df['formatted_tvl'].tolist()

        # Configure chart options with theme support
        chart_options = {
            'chart': {
                'type': 'column', 
                'height': "50%",
                'backgroundColor': 'transparent'
            },
            'title': {'text': 'Top 30 Chains by TVL'},
            'xAxis': {
                'categories': categories, 
                'title': {'text': 'Chain Name'},
                'labels': {
                    'style': {
                        'color': '#ffffff' if theme == 'dark' else '#000000'
                    }
                }
            },
            'yAxis': {
                'title': {'text': 'Total Value Locked (TVL in billions $)'},
                'labels': {
                    'style': {
                        'color': '#ffffff' if theme == 'dark' else '#000000'
                    }
                }
            },
            'tooltip': {
                'pointFormat': '<b>${point.y:.2f}B</b>'
            },
            'series': [{
                'name': 'Chain',
                'data': data
            }]
        }

        # Apply theme-specific styling
        if theme == 'dark':
            chart_options.update({
                'title': {'style': {'color': '#ffffff'}},
                'legend': {'itemStyle': {'color': '#ffffff'}},
                'plotOptions': {
                    'series': {
                        'color': '#3498db'
                    }
                }
            })

        chart = Chart.from_options(chart_options)

        return chart.to_dict()

    print(f"Request error {response.status_code}: {response.text}")
    return JSONResponse(
        content={"error": response.text}, status_code=response.status_code
    )
```

For Highcharts integration, we're using the `highcharts_core` Python package to create and configure the chart. The chart is then converted to a dictionary using `chart.to_dict()` before being returned to the frontend.

## Step 3: Edit the widgets.json File

Edit the `widgets.json` file and add the following JSON data. This configuration defines the widget's properties and how it should be displayed:

```json
{
  "chains_highchart": {
    "name": "Chains chart example Highcharts",
    "description": "Get current TVL of all chains and plot it with Highcharts",
    "category": "crypto",
    "type": "chart-highcharts",
    "endpoint": "chains-highchart",
    "gridData": {
      "w": 20,
      "h": 9
    }
  }
}
```

Note that for Highcharts, the `type` field is set to `"chart-highcharts"` instead of just `"chart"` which is used for Plotly charts.

For more information on the `widgets.json` file, see the [Widgets.json](../widgets-json-reference) page.

## Step 4: Run the Application

Start the FastAPI Server using Uvicorn. This will host your backend locally:

```bash
uvicorn main:app --port 5050
```

## Step 5: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the `Crypto` category with the name `Chains chart example Highchart`.

<img className="pro-border-gradient" width="600" alt="highcharts-chart" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/highcharts.png" />

### Theme Support

The example doesn't include theme support, but you can easily add it by adapting the endpoint to include the `theme` parameter.

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).

For more information on Highcharts configuration options, visit the [Highcharts API Documentation](https://api.highcharts.com/highcharts/).


---

---
title: Data Widgets
sidebar_position: 11
description: Build powerful financial dashboards with OpenBB Workspace's flexible widget system
keywords:
- widgets
- data
- visualization
- charts
- tables
- forms
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Data Widgets | OpenBB Workspace Docs" />

# Data Widgets in OpenBB Workspace

OpenBB Workspace provides a powerful and flexible UI framework that lets you create sophisticated financial dashboards through customizable data widgets.

## Getting Started

In our [Data Integration](../data-integration.md) guide, we introduced the basic structure using `main.py` and `widgets.json`. To make development even easier, we've created a Python decorator that keeps your widget specifications right next to their implementation code. You can add it as part of the initial boilerplate, so you can build a backend with a single `main.py` file:

```python
# Import required libraries
from pathlib import Path
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from functools import wraps
import asyncio

# Initialize empty dictionary for widgets
WIDGETS = {}

# Decorator that registers a widget configuration in the WIDGETS dictionary.
def register_widget(widget_config):
    """
    Decorator that registers a widget configuration in the WIDGETS dictionary.
    
    Args:
        widget_config (dict): The widget configuration to add to the WIDGETS 
            dictionary. This should follow the same structure as other entries 
            in WIDGETS.
    
    Returns:
        function: The decorated function.
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            # Call the original function
            return await func(*args, **kwargs)
            
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            # Call the original function
            return func(*args, **kwargs)
        
        # Extract the endpoint from the widget_config
        endpoint = widget_config.get("endpoint")
        if endpoint:
            # Add an id field to the widget_config if not already present
            if "id" not in widget_config:
                widget_config["id"] = endpoint
            
            WIDGETS[endpoint] = widget_config
        
        # Return the appropriate wrapper based on whether the function is async
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        return sync_wrapper
    return decorator

# Initialize FastAPI application with metadata
app = FastAPI(
    title="Simple Backend",
    description="Simple backend app for OpenBB Workspace",
    version="0.0.1"
)

# Define allowed origins for CORS (Cross-Origin Resource Sharing)
# This restricts which domains can access the API
origins = [
    "https://pro.openbb.co",
]

# Configure CORS middleware to handle cross-origin requests
# This allows the specified origins to make requests to the API
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

ROOT_PATH = Path(__file__).parent.resolve()

@app.get("/")
def read_root():
    """Root endpoint that returns basic information about the API"""
    return {"Info": "Hello World"}


# Endpoint that returns the registered widgets configuration
# The WIDGETS dictionary is maintained by the registry.py helper
# which automatically registers widgets when using the @register_widget decorator
@app.get("/widgets.json")
def get_widgets():
    """Returns the configuration of all registered widgets
    
    The widgets are automatically registered through the @register_widget decorator
    and stored in the WIDGETS dictionary from registry.py
    
    Returns:
        dict: The configuration of all registered widgets
    """
    return WIDGETS


# Simple markdown widget
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

## Example Widgets

Throughout this documentation, you'll find examples that include both a visual preview and the corresponding code implementation, using our `register_widget` decorator. Each example includes the complete widget configuration and data.

<div className="flex justify-center">
  <img width="800" alt="Example Markdown Widget" src="https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png" />
</div>

```python
# Simple markdown widget
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

For more examples and complete implementations, visit our [reference backend repository](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/getting-started/reference-backend).


---

---
title: Live Grid
sidebar_position: 16
description: Create a real-time data grid widget for OpenBB Workspace that displays live updates in a table format
keywords:
- live grid
- real-time data
- websocket
- streaming data
- data table
- live updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Live Grid | OpenBB Workspace Docs" />


This guide will walk you through the process of creating a live grid widget for OpenBB Workspace. By the end of this guide, you will have a working live grid widget that can display real-time data updates for a table. The live grid widget can be configured to only update certain cells when their values change or all of the cells.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/content/workspace/data-integration#1-create-the-api-server.md) page.

## Step 2: Create the Live Feed Endpoints

Edit the `main.py` file and add the following code. This sets up both a REST endpoint for initial data and a WebSocket endpoint for live updates:

```python
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.websockets import WebSocketState
import numpy as np
import asyncio
from typing import List
from datetime import datetime


# Sample data store
WS_DATA = {
    "AAPL": {
        "price": 150.0,
        "prev_close": 145.54,
        "volume": 1000000,
        "change": 4.46,
        "change_percent": 0.03,
    },
    # ... other symbols ...
}

def get_ws_data(symbol: str):
    """Generate real-time data for a symbol"""
    data = WS_DATA.get(symbol, {"price": 100.0, "prev_close": 100.0, "volume": 1000000})
    
    price = data["price"] + np.random.uniform(-10, 10)
    volume = data["volume"] + np.random.randint(100, 1000)
    change = price - data["prev_close"]
    change_percent = change / data["prev_close"]
    
    WS_DATA[symbol].update(dict(price=price, volume=volume))
    
    return {
        "symbol": symbol,
        "price": price,
        "change": change,
        "change_percent": change_percent,
        "volume": volume,
    }

# Live Feed Initial Data Endpoint (This sets the initial data for the widget + allows Copilot to grab the data)
@app.get("/test_websocket")
def test_websocket(symbol: str):
    """Initial data endpoint"""
    symbols = symbol.split(",")
    return [
        {
            "date": datetime.now().date(),
            **get_ws_data(symbol),
            "market_cap": np.random.randint(1000000000, 2000000000),
        }
        for symbol in symbols
    ]

# Live Feed WebSocket Endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for live updates"""
    await websocket.accept()
    try:
        await websocket_handler(websocket)
    except WebSocketDisconnect:
        return
    except Exception as e:
        await websocket.close(code=1011)
        raise HTTPException(status_code=500, detail=str(e))

# Sample WebSocket Handler
async def websocket_handler(websocket: WebSocket):
    subbed_symbols: set[str] = set()

    async def consumer_handler(ws: WebSocket):
        try:
            async for data in ws.iter_json():
                if symbols := data.get("params", {}).get("symbol"):
                    if isinstance(symbols, str):
                        symbols = symbols.split(",")

                    subbed_symbols.clear()
                    subbed_symbols.update(set(symbols))

        except WebSocketDisconnect:
            pass
        except RuntimeError:
            await ws.close()

    async def producer_handler(ws: WebSocket):
        try:
            while websocket.client_state != WebSocketState.DISCONNECTED:
                current_symbols = list(subbed_symbols)
                np.random.shuffle(current_symbols)

                for symbol in current_symbols:
                    await ws.send_json(get_ws_data(symbol))
                    await asyncio.sleep(np.random.uniform(0.5, 0.8))

                await asyncio.sleep(np.random.uniform(0.1, 0.3))

        except WebSocketDisconnect:
            pass
        except RuntimeError:
            await ws.close()

    consumer_task = asyncio.create_task(consumer_handler(websocket))
    producer_task = asyncio.create_task(producer_handler(websocket))

    done, pending = await asyncio.wait(
        [consumer_task, producer_task], return_when=asyncio.FIRST_COMPLETED
    )

    for task in pending:
        task.cancel()
```

### Edit the widgets.json File

Open the `widgets.json` file and add the following configuration:

```json
{
  "live_grid_example": {
    "name": "Live Grid",
    "description": "Live Grid",
    "type": "live_grid",
    "endpoint": "test_websocket",
    "wsEndpoint": "ws",
    "data": {
      "wsRowIdColumn": "symbol",
      "table": {
        "showAll": true,
        "columnsDefs": [
          {
            "field": "symbol",
            "headerName": "Symbol"
          },
          {
            "field": "price",
            "headerName": "Price",
            "renderFn": "showCellChange",
            "renderFnParams": {
              "colorValueKey": "change"
            }
          },
          {
            "field": "change_percent",
            "headerName": "Change %",
            "renderFn": "greenRed"
          },
          {
            "field": "volume",
            "enableCellChangeWs": false,
            "headerName": "Volume"
          }
        ]
      }
    },
    "params": [
      {
        "paramName": "symbol",
        "description": "The symbol to get details for",
        "value": "TSLA",
        "label": "Symbol",
        "type": "text",
        "multiSelect": true,
        "options": [
          {"label": "AAPL", "value": "AAPL"},
          {"label": "GOOGL", "value": "GOOGL"},
          {"label": "MSFT", "value": "MSFT"},
          {"label": "AMZN", "value": "AMZN"},
          {"label": "TSLA", "value": "TSLA"}
        ]
      }
    ],
    "gridData": {
      "w": 20,
      "h": 9
    }
  }
}
```

A few key points:

- The `endpoint` is the endpoint that will be used to get the initial data for the widget.
- The `wsEndpoint` is the endpoint that will be used to get the live updates for the widget.
- The `enableCellChangeWs` is a boolean that will be used to determine if the cell change will be sent over the WebSocket. Use this to prevent the cell from being updated over the WebSocket. By default, it is set to `true` for fields that are sent in the websocket and appear in the data. The only field that is special here is the `wsRowIdColumn` which is the column that will be used to identify the row.
- The `wsRowIdColumn` is the column that will be used to identify the row. This is important to set correctly to ensure the live updates are displayed correctly. This the key between your ws and the initial data.
- The `renderFn` is the function that will be used to render the cell. You can find more information on the [Render Functions](/content/workspace/widget-configuration/render-functions.md) page. In our case we are using a custom function `showCellChange` to display the change in price and providing the key to use.

## Step 3: Run the Application

Start the FastAPI Server using Uvicorn. This will host your backend locally:

```bash
uvicorn main:app --host localhost --port 5050
```

## Step 4: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the default category with the name `Live Grid`. The widget will display real-time price updates for the selected symbols.

<img className="pro-border-gradient" width="600" alt="live-feed" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/live_grid.png" />

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).

---

---
title: Markdown
sidebar_position: 4
description: Learn how to create and customize markdown widgets in OpenBB Workspace, including basic markdown display and data-rich markdown with dynamic content integration.
keywords:
- markdown widget
- widget configuration
- dynamic markdown
- data integration
- widget display
- markdown formatting
- widget customization
- OpenBB Workspace
- widget development
- markdown content
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Markdown | OpenBB Workspace Docs" />

A simple widget that displays markdown content.

<img className="pro-border-gradient" width="800" alt="Markdown Widget Example" src="https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png" />

```python
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

The gridData parameter specifies the widget's size in the OpenBB Workspace grid system. More on that can be found [here](/workspace/widget-configuration/grid-size).

## Data rich markdown

<img className="pro-border-gradient" width="600" alt="markdown" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/markdown-widget.png" />

```python
@register_widget({
  "name": "Defi Llama Protocol Details",
  "description": "Details for a given protocol",
  "category": "Crypto",
  "defaultViz": "markdown",
  "endpoint": "defi_llama_protocol_details",
  "gridData": {"w": 20, "h": 9},
  "source": "Defi Llama",
  "params": [
    {
      "paramName": "protocol_id",
      "value": "aave",
      "label": "Protocol",
      "type": "text",
      "description": "Defi Llama ID of the protocol"
    }
  ]
})
@app.get("/defi_llama_protocol_details")
def defi_llama_protocol_details(protocol_id: str = None):
    """Get details for a given protocol using Defi Llama"""
    data = requests.get(f'https://api.llama.fi/protocol/{protocol_id}')

    if data.status_code == 200:
        data = data.json()
    else:
        return JSONResponse(content={"error": data.text}, status_code=data.status_code)

    github_links = ""
    if 'github' in data and data['github']:
        github_links = "**GitHub:** " + ", ".join(data['github'])

    # Use HTML for multi-column layout
    markdown = dedent(f"""
        ![{data.get('name', 'N/A')} Logo]({data.get('logo', '')}) 
        # {data.get('name', 'N/A')} ({data.get('symbol', 'N/A').upper()})
        **Description:** {data.get('description', 'N/A')}
        ---
        ## Twitter
        **Twitter:** {data.get('twitter', 'N/A')}
        ## Links
        **Website:** {data.get('url', 'N/A')}
        {github_links}
    """)
    return markdown
```

**Note:** The `dedent` function is used to remove leading whitespace from the markdown string. This is a good practice to ensure the markdown is formatted correctly.




## Markdown Widget with Local Image

A widget that displays markdown content with an embedded local image. The image is converted to base64 for display.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Local Image Example" src="https://openbb-cms.directus.app/assets/f2847732-a01e-4146-8095-5dc389c98c7a.png" />

```python
@register_widget({
    "name": "Markdown Widget with Local Image",
    "description": "A markdown widget with a local image",
    "type": "markdown",
    "endpoint": "markdown_widget_with_local_image",
    "gridData": {"w": 20, "h": 20},
})
@app.get("/markdown_widget_with_local_image")
def markdown_widget_with_local_image():
    """Returns a markdown widget with a local image"""
    try:
        with open("img.png", "rb") as image_file:
            image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
            return f"![Local Image](data:image/png;base64,{image_base64})"
    except FileNotFoundError:
        raise HTTPException(
            status_code=500,
            detail="Image file not found"
        ) from e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error reading image: {str(e)}"
        ) from e
```

## Markdown Widget with Image from URL

The Markdown widget also provides image handling capabilities, supporting both local and remote images. Images are converted to base64 format for displaying.

Below is a markdown widget that displays markdown content with an image fetched from a URL. The image is converted to base64 for display.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Image from URL Example" src="https://openbb-cms.directus.app/assets/bf26f507-ec62-45d8-bec2-531fe75624e4.png" />

```python
@register_widget({
    "name": "Markdown Widget with Image from URL",
    "description": "A markdown widget with an image from a URL",
    "type": "markdown",
    "endpoint": "markdown_widget_with_image_from_url",
    "gridData": {"w": 20, "h": 20},
})
@app.get("/markdown_widget_with_image_from_url")
def markdown_widget_with_image_from_url():
    """Returns a markdown widget with an image from a URL"""
    image_url = "https://api.star-history.com/svg?repos=openbb-finance/OpenBB&type=Date&theme=dark"
    
    try:
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        
        content_type = response.headers.get('content-type', '')
        if not content_type.startswith('image/'):
            raise HTTPException(
                status_code=500,
                detail=f"URL did not return an image. Content-Type: {content_type}"
            )

        image_base64 = base64.b64encode(response.content).decode('utf-8')
        return f"![OpenBB Logo](data:{content_type};base64,{image_base64})"
        
    except requests.RequestException as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to fetch image: {str(e)}"
        ) from e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error processing image: {str(e)}"
        ) from e
``` 

---

---
title: Metric
sidebar_position: 5
description: Learn how to integrate your own backend with OpenBB Workspace using the cookie-cutter or language-agnostic API approaches, with illustrative guides and principles for handling widget.json files, APIs, interfaces, Python, FastAPI, and more.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Language-Agnostic API
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Metric | OpenBB Workspace Docs" />

A widget that displays key metrics with labels, values, and delta changes. Useful for showing important statistics and their trends.

<img className="pro-border-gradient" width="600" alt="metric" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/metric-widget.png" />

```python
@register_widget({
  "name": "Metric Widget",
  "description": "A metric widget example",
  "category": "Test",
  "endpoint": "test_metric",
  "type": "metric"
})
@app.get("/test_metric")
def test_metric():
    """Example endpoint to provide metric data."""
    # Example data structure
    data = {
        "label": "Example Label",
        "value": "12345",
        "delta": "5.67"
    }

    return JSONResponse(content=data)
```

As you can see in the example the data structure is as follows:

- `label`: The label of the metric.
- `value`: The value of the metric.
- `delta`: The delta of the metric.

## Multiple metrics

<img className="pro-border-gradient" width="800" alt="Metric Widget Example" src="https://openbb-cms.directus.app/assets/ba37bbbb-371a-40e8-a7e1-e48edcc6c0c8.png" />

```python
@register_widget({
    "name": "Metric Widget",
    "description": "A metric widget",
    "endpoint": "metric_widget",
    "gridData": {
      "w": 5,
      "h": 5
    },
    "type": "metric"
})
@app.get("/metric_widget")
def metric_widget():
    data = [
        {
            "label": "Total Users",
            "value": "1,234,567",
            "delta": "12.5"
        },
        {
            "label": "Active Sessions",
            "value": "45,678",
            "delta": "-2.3"
        },
        {
            "label": "Revenue (USD)",
            "value": "$89,432",
            "delta": "8.9"
        },
        {
            "label": "Conversion Rate",
            "value": "3.2%",
            "delta": "0.0"
        },
        {
            "label": "Avg. Session Duration",
            "value": "4m 32s",
            "delta": "0.5"
        }
    ]

    return JSONResponse(content=data)
```


---

---
title: Newsfeed
sidebar_position: 17
description: Learn how to create a newsfeed widget for OpenBB Workspace that displays articles in a clean, organized format.
keywords:
- widgets.json
- OpenBB API
- Newsfeed widget
- Article display
- News integration
- FastAPI
- Custom Backend
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Newsfeed | OpenBB Workspace Docs" />

This guide will walk you through creating a newsfeed widget for OpenBB Workspace. We'll use CoinDesk's API as an example, but you can adapt this to any news source.

## Step 1: Set Up Your Project

To get started, create the main application file and the widget configuration file. You will only need these two files:

- `main.py`: This file will contain your FastAPI application code.
- `widgets.json`: This file will define the configuration for your widget.

The backend will use the same FastAPI setup and structure as described in the [Overview](/content/workspace/data-integration#1-create-the-api-server.md) page.

## Step 2: Create the Newsfeed Endpoint

Edit the `main.py` file and add the following code.

The newsfeed widget expects articles in a specific format. Each article must include:

```python
{
    "title": string,    # Article title
    "date": string,    # ISO 8601 formatted date
    "author": string,  # Article author
    "excerpt": string, # Short preview of the article
    "body": string,    # Full article text (can include markdown)
}
```

Here's an example implementation using CoinDesk's API:

```python
...

class CoindeskArticle(TypedDict):
    TYPE: str
    ID: int
    TITLE: str
    SUBTITLE: Optional[str]
    AUTHORS: str
    URL: str
    BODY: str
    PUBLISHED_ON: int
    IMAGE_URL: str
    KEYWORDS: str
    LANG: str
    SENTIMENT: str


class TransformedArticle(TypedDict):
    title: str
    date: str
    author: str
    excerpt: str
    body: str


def transform_article(article: CoindeskArticle) -> TransformedArticle:
    """Transform a CoinDesk article to a standardized format."""
    # Convert UNIX timestamp to ISO format
    date = datetime.fromtimestamp(article["PUBLISHED_ON"]).isoformat()
    
    # Create excerpt from body (first 150 characters)
    body = article["BODY"]
    excerpt = f"{body[:150]}..." if len(body) > 150 else body
    
    return {
        "title": article["TITLE"],
        "date": date,
        "author": article["AUTHORS"],
        "excerpt": excerpt,
        "body": body,
    }


def fetch_news(limit: str, lang: str, categories: Optional[str] = None) -> List[TransformedArticle]:
    """Fetch news from the CoinDesk API."""
    url = f"https://data-api.coindesk.com/news/v1/article/list?lang={lang}&limit={limit}"
    
    if categories:
        url += f"&categories={categories}"
    
    response = requests.get(url)
    
    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail=f"Failed to fetch news: {response.reason}")
    
    data = response.json()
    return [transform_article(article) for article in data.get("Data", [])]


@app.get("/news")
def get_coindesk_news(limit: str = "10", lang: str = "EN", categories: Optional[str] = None):
    """Get news from CoinDesk."""
    try:
        news = fetch_news(limit, lang, categories)
        return news
    except Exception as e:
        return JSONResponse(content={"error": f"Failed to fetch news: {str(e)}"}, status_code=500)
```

## Step 3: Configure widgets.json

Add the widget configuration to your `widgets.json` file:

```json
{
  "coindesk_news": {
    "type": "newsfeed",
    "name": "CoinDesk News",
    "description": "Get the latest crypto news from CoinDesk",
    "endpoint": "/news",
    "gridData": {
      "w": 40,
      "h": 20
    },
    "source": "coindesk",
    "params": [
      {
        "paramName": "limit",
        "label": "Limit",
        "description": "The number of news articles to fetch",
        "type": "number",
        "value": "10"
      },
      {
        "paramName": "lang",
        "label": "Language",
        "description": "The language of the news articles",
        "type": "text",
        "value": "EN",
        "options": [
          {
            "label": "English",
            "value": "EN"
          },
          {
            "label": "Spanish",
            "value": "ES"
          }
        ]
      }
    ]
  }
}
```

## Step 4: Run the Application

Start your FastAPI server:

```bash
uvicorn main:app --host localhost --port 5050
```

## Step 5: Add to OpenBB Pro

Navigate to [OpenBB Pro Apps](https://pro.openbb.co/app) and add your backend by clicking on the `Manage Backends` button in the top right corner. Select `Add Backend` and fill in the details. Your URL will be `http://localhost:5050`.

Once you have added your backend, you can find the widget in the `Test` category with the name `Test Metric`.

<img className="pro-border-gradient" width="600" alt="newsfeed" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/newsfeed.png" />

## Additional Resources

You can find more examples of how to set up your own backend in the [Backend for OpenBB Workspace GitHub](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace).

---

---
title: Omni
sidebar_position: 19
description: Learn how to create versatile Omni widgets for OpenBB Workspace that can dynamically return different content types based on input parameters.
keywords:
- omni widget
- dynamic content
- POST request
- multi-format output
- widget configuration
- citations
- flexible widgets
- OpenBB Workspace
- widget development
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Omni Widget | OpenBB Workspace Docs" />

The Omni widget is a versatile widget type that can dynamically return different content formats (markdown, tables, or charts). Unlike other widgets that use GET requests, the Omni widget uses POST requests and passes all parameters in the request body. This widget requires the `prompt` parameter to be passed in the params section of the widget configuration.

## Key Features

- **Dynamic Output Control**: Can return different content types (text, table, chart)
- **Create Widgets from Responses**: Create widgets directly from the response types returned by the backend.
- **POST Request Method**: Uses POST instead of GET, with parameters passed in the request body
- **Citation Support**: Built-in support for adding citations and source information
- **Flexible Parameter Handling**: All widget parameters are passed in the POST data

## Basic Omni Widget

Below is an example of a basic Omni widget that demonstrates the versatility by returning different content types based on the `type` parameter. In a real world example you might choose to dynamically return different content types based on your backend logic.

<img className="pro-border-gradient" width="800" alt="Omni Widget Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget.png" />

```python
from pydantic import BaseModel, Field
from typing import Any, List, Literal
from uuid import UUID
from fastapi import FastAPI, Body, Query
import json

class DataFormat(BaseModel):
    data_type: str
    parse_as: Literal["text", "table", "chart"]

class ExtraCitation(BaseModel):
    source_info: SourceInfo | None = Field(default=None)
    details: List[dict] | None = Field(default=None)

class OmniWidgetResponse(BaseModel):
    content: Any
    data_format: DataFormat
    extra_citations: list[ExtraCitation] | None = Field(default_factory=list)
    citable: bool = Field(default=True)

@register_widget({
    "name": "Omni Widget Example",
    "description": "A versatile omni widget that can display multiple types of content",
    "category": "General",
    "type": "omni",
    "endpoint": "omni-widget",
    "params": [
        {
            "paramName": "prompt",
            "type": "text",
            "description": "The prompt to send to the LLM to make queries or ask questions.",
            "label": "Prompt",
            "show": False
        },
        {
            "paramName": "type",
            "type": "text",
            "description": "Type of content to return",
            "label": "Content Type",
            "show": True,
            "options": [
                {"value": "markdown", "label": "Markdown"},
                {"value": "chart", "label": "Chart"},
                {"value": "table", "label": "Table"}
            ]
        }
    ],
    "gridData": {"w": 30, "h": 12}
})
@app.post("/omni-widget")
async def get_omni_widget(
    data: str | dict = Body(...)
):
    if isinstance(data, str):
        data = json.loads(data)

    # Return table format
    if data.get("type") == "table":
        content = [
            {"col1": "value1", "col2": "value2", "col3": "value3", "col4": "value4"},
            {"col1": "value5", "col2": "value6", "col3": "value7", "col4": "value8"},
            {"col1": "value9", "col2": "value10", "col3": "value11", "col4": "value12"},
        ]
        
        return OmniWidgetResponse(
            content=content,
            data_format=DataFormat(data_type="object", parse_as="table")
        )

    # Return chart format
    if data.get("type") == "chart":
        content = {
            "data": [
                {"x": [1, 2, 3], "y": [4, 1, 2], "type": "bar"},
                {"x": [1, 2, 3], "y": [2, 4, 5], "type": "bar"},
                {"x": [1, 2, 3], "y": [2, 3, 6], "type": "bar"},
            ],
            "layout": {
                "title": "Dynamic Chart",
                "template": "plotly_dark"
            },
        }
        
        return OmniWidgetResponse(
            content=content,
            data_format=DataFormat(data_type="object", parse_as="chart")
        )

    # Return markdown format (default)
    content = f"""### Dynamic Omni Widget Response

**Input Parameters:**
- **Search Query:** `{search}`
- **Content Type:** `{data.get('type', 'markdown')}`
- **Prompt:** `{data.get('prompt', 'No prompt provided')}`

#### Raw Data:
    {json.dumps(data, indent=2)}        

    """
        
    return OmniWidgetResponse(
        content=content,
        data_format=DataFormat(data_type="object", parse_as="text")
    )
```

## Omni Widget with Citations

This example demonstrates how to add citation support to your Omni widget, which is useful when you want to use the widget in conjunction with an agent. The citations are added to the response if the `citable` parameter is set to `True`. This is shown in the example below and returned when the user is interacting with the widget through an agent.

<img className="pro-border-gradient" width="800" alt="Omni Widget with Citations Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget+with+citation.png" />

```python
@register_widget({
    "name": "Omni Widget with Citations",
    "description": "An omni widget that includes citation information",
    "category": "General",
    "type": "omni",
    "endpoint": "omni-widget-citations",
    "params": [
        {
            "paramName": "prompt",
            "type": "text",
            "description": "The prompt to send to the LLM to make queries or ask questions.",
            "label": "Prompt",
            "show": True
        },
        {
            "paramName": "include_metadata",
            "type": "boolean",
            "description": "Include metadata in response",
            "label": "Include Metadata",
            "show": True,
            "value": True
        }
    ],
    "gridData": {"w": 30, "h": 15}
})
@app.post("/omni-widget-citations")
async def get_omni_widget_with_citations(
    data: str | dict = Body(...)
):
    if isinstance(data, str):
        data = json.loads(data)

    # Create citation information
    source_info = SourceInfo(
        type="widget",
        widget_id="omni_widget_citations",
        origin="custom_backend",
        name="Omni Widget with Citations",
        description="Example widget demonstrating citation functionality",
        metadata={
            "prompt": data.get("prompt", ""),
            "search_term": search,
            "timestamp": "2024-01-01T00:00:00Z",
            "data_source": "Custom API"
        }
    )
    
    extra_citation = ExtraCitation(
        source_info=source_info,
        details=[
            {
                "Source": "Custom Backend API",
                "Prompt": data.get("prompt", ""),
                "Search": search,
                "Metadata_Included": data.get("include_metadata", False),
                "Response_Type": "Dynamic Content"
            }
        ]
    )

    # Generate content based on parameters
    content = f"""# Query Results

**Search Query:** {search}
**User Prompt:** {data.get('prompt', 'No prompt provided')}

## Results
This is dynamically generated content based on your input parameters.

### Metadata
"""
    
    if data.get("include_metadata"):
        content += f"""
- **Widget ID:** omni_widget_citations
- **Timestamp:** 2024-01-01T00:00:00Z
- **Data Source:** Custom API
- **Parameters:** {json.dumps(data, indent=2)}
"""
    else:
        content += "Metadata hidden (set 'Include Metadata' to true to view)"

    return OmniWidgetResponse(
        content=content,
        data_format=DataFormat(data_type="object", parse_as="text"),
        extra_citations=[extra_citation],
        citable=True
    )
```

## Important Implementation Notes

### POST Request Method

Unlike other widget types that use GET requests, the Omni widget uses POST requests. This allows for more complex parameter handling and larger payloads:

```python
@app.post("/omni-widget")  # Note: POST, not GET
async def omni_endpoint(
    data: str | dict = Body(...)      # Main parameters in request body
):
    # Handle both string and dict formats
    if isinstance(data, str):
        data = json.loads(data)
    
    # All widget parameters are available in the 'data' object
    param_value = data.get("paramName")
```

### Dynamic Output Control

The Omni widget can return different content types based on the parse_as field in the DataFormat:

"text": For markdown/text content
"table": For tabular data (list of dictionaries)
"chart": For Plotly chart objects

```python
# Text/Markdown output
return OmniWidgetResponse(
    content="# Markdown content",
    data_format=DataFormat(data_type="object", parse_as="text")
)
```

```python
# Table output
return OmniWidgetResponse(
    content=[{"col1": "val1", "col2": "val2"}],
    data_format=DataFormat(data_type="object", parse_as="table")
)   
```

```python
# Chart output
return OmniWidgetResponse(
    content={"data": [...], "layout": {...}},
    data_format=DataFormat(data_type="object", parse_as="chart")
)
```

### Parameter Handling

All widget parameters defined in the widget configuration are passed in the POST request body, and the `prompt` parameter is required:

```json
{
  "params": [
    {
        // Required parameter for the LLM to make queries or ask questions
        "paramName": "prompt",
        "type": "text",
        "description": "The prompt to send to the LLM to make queries or ask questions.",
        "label": "Prompt",
        "show": False
    }
    {
        "paramName": "user_input",
        "type": "text",
        "label": "User Input"
    },
    {
        "paramName": "option_select",
        "type": "text",
        "options": [...]
    }
  ]
}
```

These parameters are accessible in your endpoint:

```python
@app.post("/omni-widget")
async def omni_endpoint(data: dict = Body(...)):
    user_input = data.get("user_input")
    selected_option = data.get("option_select")
    prompt = data.get("prompt")
    # Process parameters...
```

## Use Cases

The Omni widget is particularly useful for:

- AI/LLM Integration: Dynamic content generation based on user prompts
- Multi-format Data Display: Single endpoint that can return different visualizations
- Citation-heavy Applications: Research tools that need to track data sources.

---

---
title: Plotly Charts
sidebar_position: 14
description: Plotly Charts
keywords:
- plotly
- charts
- visualization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Plotly Charts | OpenBB Workspace Docs" />

## Basic Plotly Chart

A widget that demonstrates how to use the Plotly library to create a chart. This gives you the ability to create any interactive type of charts with unlimited flexibility.

<img className="pro-border-gradient" width="800" alt="Basic Plotly Chart Example" src="https://openbb-cms.directus.app/assets/5c35a4a2-750c-4284-899a-066ea923e5c8.png" />

```python
@register_widget({
    "name": "Plotly Chart",
    "description": "Plotly chart",
    "type": "chart",
    "endpoint": "plotly_chart",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart")
def get_plotly_chart():
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    # Add the line trace for returns
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2)
    ))
    
    # Add the bar trace for transactions
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5
    ))
    
    # Update layout with axis titles and secondary y-axis
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right"
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    return json.loads(fig.to_json())
```

## Plotly Chart with Theme

This endpoint extends the basic Plotly chart by adding theme support. The theme parameter is automatically provided by OpenBB Workspace based on the user's current display mode (dark/light). This enables dynamic chart styling that matches the workspace theme. The theme parameter is optional - if unused, OpenBB will still pass it but the endpoint will ignore it.

Note: OpenBB widget UI dark mode is #151518 and light mode is #FFFFFF, using these background colors make the chart look consistent with the widgets in the OpenBB Workspace.

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme Example" src="https://openbb-cms.directus.app/assets/f5037dbb-a644-4560-91f6-eaef987e5739.png" />


<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Toolbar Example" src="https://openbb-cms.directus.app/assets/70d07f0b-6ed9-4f9f-80fe-e1e4e268ecb5.png" />


```python
@register_widget({
    "name": "Plotly Chart with Theme",
    "description": "Plotly chart with theme",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme")
def get_plotly_chart_with_theme(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    if theme == "dark":
        # Dark theme colors and styling
        line_color = "#FF8000"  # Orange
        bar_color = "#2D9BF0"   # Blue
        text_color = "#FFFFFF"  # White
        grid_color = "rgba(51, 51, 51, 0.3)"
        bg_color = "#151518"    # Dark background
    else:
        # Light theme colors and styling
        line_color = "#2E5090"  # Navy blue
        bar_color = "#00AA44"   # Forest green
        text_color = "#333333"  # Dark gray
        grid_color = "rgba(221, 221, 221, 0.3)"
        bg_color = "#FFFFFF"    # White background
    
    # Add the line trace for returns with theme-specific color
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=line_color)
    ))
    
    # Add the bar trace for transactions with theme-specific color
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=bar_color
    ))
    
    # Update layout with theme-specific styling
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(color=text_color)
        ),
        paper_bgcolor=bg_color,
        plot_bgcolor=bg_color,
        font=dict(color=text_color),
        xaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        yaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    return json.loads(fig.to_json())
```

## Plotly Chart with Theme and Toolbar

This endpoint extends the basic Plotly chart by adding a toolbar to the chart. The toolbar is a set of buttons that allows the user to interact with the chart.

Note: As you can see, all the settings and styling utilized by plotly can be too much boilerplate code, so it is recommended to create a plotly_config.py file and use the functions defined in that file to create the chart.

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Toolbar Example" src="https://openbb-cms.directus.app/assets/cc9ed36b-fdb5-47ca-ba9b-c91dd4b772cd.png" />

```python
@register_widget({
    "name": "Plotly Chart with Theme and Toolbar",
    "description": "Plotly chart with Theme and toolbar",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme_and_toolbar",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme_and_toolbar")
def get_plotly_chart_with_theme_and_toolbar(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Create the figure with secondary y-axis
    fig = go.Figure()
    
    if theme == "dark":
        # Dark theme colors and styling
        line_color = "#FF8000"  # Orange
        bar_color = "#2D9BF0"   # Blue
        text_color = "#FFFFFF"  # White
        grid_color = "rgba(51, 51, 51, 0.3)"
        bg_color = "#151518"    # Dark background
    else:
        # Light theme colors and styling
        line_color = "#2E5090"  # Navy blue
        bar_color = "#00AA44"   # Forest green
        text_color = "#333333"  # Dark gray
        grid_color = "rgba(221, 221, 221, 0.3)"
        bg_color = "#FFFFFF"    # White background
    
    # Add the line trace for returns with theme-specific color
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=line_color)
    ))
    
    # Add the bar trace for transactions with theme-specific color
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=bar_color
    ))
    
    # Update layout with theme-specific styling
    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Returns (%)',
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(color=text_color)
        ),
        paper_bgcolor=bg_color,
        plot_bgcolor=bg_color,
        font=dict(color=text_color),
        xaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        ),
        yaxis=dict(
            gridcolor=grid_color,
            tickfont=dict(color=text_color)
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")
    
    # Configure the toolbar and other display settings
    toolbar_config = {
        'displayModeBar': True,
        'responsive': True,
        'scrollZoom': True,
        'modeBarButtonsToRemove': [
            'lasso2d',
            'select2d',
            'autoScale2d',
            'toggleSpikelines',
            'hoverClosestCartesian',
            'hoverCompareCartesian'
        ],
        'modeBarButtonsToAdd': [
            'drawline',
            'drawcircle',
            'drawrect',
            'eraseshape'
        ],
        'doubleClick': 'reset+autosize',
        'showTips': True,
        'watermark': False,
        'staticPlot': False,
        'locale': 'en',
        'showAxisDragHandles': True,
        'showAxisRangeEntryBoxes': True,
        'displaylogo': False,
        'modeBar': {
            'bgcolor': 'rgba(0, 0, 0, 0.1)' if theme == 'light' else 'rgba(255, 255, 255, 0.1)',
            'color': text_color,
            'activecolor': line_color,
            'orientation': 'v',
            'yanchor': 'top',
            'xanchor': 'right',
            'x': 1.05,  # Increased spacing from chart
            'y': 1,
            'opacity': 0,  # Start hidden
            'hovermode': True,  # Show on hover
            'hoverdelay': 0,  # No delay on hover
            'hoverduration': 0  # No delay on hover out
        }
    }
    
    # Convert figure to JSON and add config
    figure_json = json.loads(fig.to_json())
    figure_json['config'] = toolbar_config
    
    return figure_json
```

## Plotly Chart with Theme and Config File

This widget demonstrates how to create a chart using the Plotly library and use the config file to minimize the amount of code needed to create the chart.

For reference, here's where this particular `plotly_config.py` was used: <a href="https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py" target="_blank">https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py</a>

<img className="pro-border-gradient" width="800" alt="Plotly Chart with Theme and Config File Example" src="https://openbb-cms.directus.app/assets/ab77c29f-a554-4c13-a949-7b964f86b555.png" />

```python
@register_widget({
    "name": "Plotly Chart with Theme and Toolbar using Config File",
    "description": "Plotly chart with theme and toolbar using config file",
    "type": "chart",
    "endpoint": "plotly_chart_with_theme_and_toolbar_using_config_file",
    "gridData": {"w": 40, "h": 15}
})

@app.get("/plotly_chart_with_theme_and_toolbar_using_config_file")
def get_plotly_chart_with_theme_and_toolbar_using_config_file(theme: str = "dark"):
    # Generate mock time series data
    mock_data = [
        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},
        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},
        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},
        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},
        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},
        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},
        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},
        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},
        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},
        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}
    ]
    
    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]
    returns = [d["return"] for d in mock_data]
    transactions = [d["transactions"] for d in mock_data]
    
    # Get theme colors
    colors = get_theme_colors(theme)
    
    # Create the figure
    fig = go.Figure()
    
    # Add the line trace for returns
    fig.add_trace(go.Scatter(
        x=dates,
        y=returns,
        mode='lines',
        name='Returns',
        line=dict(width=2, color=colors["main_line"])
    ))
    
    # Add the bar trace for transactions
    fig.add_trace(go.Bar(
        x=dates,
        y=transactions,
        name='Transactions',
        opacity=0.5,
        marker_color=colors["neutral"]
    ))
    
    fig.update_layout(**base_layout(theme=theme))
    
    # Add secondary y-axis for transactions
    fig.update_layout(
        yaxis2=dict(
            title="Transactions",
            overlaying="y",
            side="right",
            gridcolor=colors["grid"],
            tickfont=dict(color=colors["text"])
        )
    )
    
    # Update the bar trace to use secondary y-axis
    fig.data[1].update(yaxis="y2")

    figure_json = json.loads(fig.to_json())
    figure_json['config'] = get_toolbar_config()
    
    return figure_json
```

## Plotly Heatmap

This widget demonstrates that with Plotly you can create any type of chart including heatmaps, scatter plots, line charts, 3d charts, etc. and also demonstrates how parameters can influence a plotly chart.

**Note that the theme parameter always comes at the end of the function.**

<img className="pro-border-gradient" width="800" alt="Plotly Heatmap Example" src="https://openbb-cms.directus.app/assets/8bf50c78-d00c-4ecb-aeb0-be1cd23cc778.png" />

```python
@register_widget({
    "name": "Plotly Heatmap",
    "description": "Plotly heatmap",
    "type": "chart",
    "endpoint": "plotly_heatmap",
    "gridData": {"w": 40, "h": 15},
    "params": [
        {
            "paramName": "color_scale",
            "description": "Select the color scale for the heatmap",
            "value": "RdBu_r",
            "label": "Color Scale",
            "type": "text",
            "show": True,
            "options": [
                {"label": "Red-Blue (RdBu_r)", "value": "RdBu_r"},
                {"label": "Viridis", "value": "Viridis"},
                {"label": "Plasma", "value": "Plasma"},
                {"label": "Inferno", "value": "Inferno"},
                {"label": "Magma", "value": "Magma"},
                {"label": "Greens", "value": "Greens"},
                {"label": "Blues", "value": "Blues"},
                {"label": "Reds", "value": "Reds"}
            ]
        }
    ]
})
@app.get("/plotly_heatmap")
def get_plotly_heatmap(color_scale: str = "RdBu_r", theme: str = "dark"):
    # Create mock stock symbols
    symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']

    # Create mock correlation matrix directly
    corr_matrix = [
        [1.00, 0.65, 0.45, 0.30, 0.20],  # AAPL correlations
        [0.65, 1.00, 0.55, 0.40, 0.25],  # MSFT correlations
        [0.45, 0.55, 1.00, 0.35, 0.15],  # GOOGL correlations
        [0.30, 0.40, 0.35, 1.00, 0.10],  # AMZN correlations
        [0.20, 0.25, 0.15, 0.10, 1.00]   # TSLA correlations
    ]

    # Get theme colors
    colors = get_theme_colors(theme)

    # Create the figure
    fig = go.Figure()
    # Apply base layout configuration
    layout_config = base_layout(theme=theme)

    # This allows users to modify the layout configuration further
    # in case they want to steer from the default settings.
    layout_config['title'] = {
        'text': "Correlation Matrix",
        'x': 0.5,
        'y': 0.95,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': {'size': 20}
    }
    layout_config['margin'] = {'t': 50, 'b': 50, 'l': 50, 'r': 50}
    
    # Update figure with complete layout
    fig.update_layout(layout_config)

    # Add the heatmap trace
    fig.add_trace(go.Heatmap(
        z=corr_matrix,
        x=symbols,
        y=symbols,
        colorscale=color_scale,
        zmid=colors["heatmap"]["zmid"],
        text=[[f'{val:.2f}' for val in row] for row in corr_matrix],
        texttemplate='%{text}',
        textfont={"color": colors["heatmap"]["text_color"]},
        hoverongaps=False,
        hovertemplate='%{x} - %{y}<br>Correlation: %{z:.2f}<extra></extra>'
    ))
    
    # Convert figure to JSON and apply config
    figure_json = json.loads(fig.to_json())
    figure_json['config'] = {
        **get_toolbar_config(),
        'scrollZoom': False  # Disable scroll zoom
    }

    return figure_json
```



---

---
title: TradingView Charts
sidebar_position: 15
description: How to implement TradingView charts in OpenBB using UDF (Universal Data Feed)
keywords:
- tradingview
- charts
- visualization
- UDF
- data feed
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="TradingView Charts | OpenBB Workspace Docs" />

This guide explains how to implement TradingView charts in OpenBB using TradingView's Universal Data Feed (UDF) protocol. The UDF protocol allows you to create custom data feeds for TradingView charts.

## Prerequisites

1. FastAPI or similar web framework for implementing the UDF endpoints
2. Data source for market data (OHLCV)

## Required UDF Endpoints

To implement TradingView charts, you need to create the following UDF endpoints:

### 1. Configuration Endpoint (`/udf/config`)

```python
@app.get("/udf/config")
async def get_config():
    """UDF configuration endpoint"""
    return {
        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],
        "supports_group_request": False,
        "supports_marks": False,
        "supports_search": True,
        "supports_timescale_marks": False,
        "supports_time": True,
        "exchanges": [
            {"value": "", "name": "All Exchanges", "desc": ""},
            {"value": "NASDAQ", "name": "NASDAQ", "desc": "NASDAQ Stock Exchange"}
        ],
        "symbols_types": [
            {"name": "All types", "value": ""},
            {"name": "Stocks", "value": "stock"}
        ]
    }
```

### 2. Symbol Search Endpoint (`/udf/search`)

```python
@app.get("/udf/search")
async def search_symbols(
    query: str = Query("", description="Search query"),
    limit: int = Query(30, description="Limit of results")
):
    """UDF symbol search endpoint"""
    results = []
    # Implement your symbol search logic here
    return results
```

### 3. Symbol Info Endpoint (`/udf/symbols`)

```python
@app.get("/udf/symbols")
async def get_symbol_info(symbol: str = Query(..., description="Symbol to get info for")):
    """UDF symbol info endpoint"""
    return {
        "name": symbol,
        "description": "Symbol Description",
        "type": "stock",
        "exchange": "NASDAQ",
        "pricescale": 100,
        "minmov": 1,
        "volume_precision": 0,
        "has_volume": True,
        "has_intraday": True,
        "has_daily": True,
        "has_weekly_and_monthly": True,
        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],
        "session-regular": "0930-1600",
        "timezone": "America/New_York"
    }
```

### 4. Historical Data Endpoint (`/udf/history`)

```python
@app.get("/udf/history")
async def get_history(
    symbol: str = Query(..., description="Symbol"),
    resolution: str = Query(..., description="Resolution"),
    from_time: int = Query(..., alias="from", description="From timestamp"),
    to_time: int = Query(..., alias="to", description="To timestamp")
):
    """UDF historical data endpoint"""
    # Implement your data fetching logic here
    return {
        "s": "ok",
        "t": [timestamp1, timestamp2, ...],  # Time array
        "o": [open1, open2, ...],  # Open prices array
        "h": [high1, high2, ...],  # High prices array
        "l": [low1, low2, ...],  # Low prices array
        "c": [close1, close2, ...],  # Close prices array
        "v": [volume1, volume2, ...]  # Volume array
    }
```

### 5. Server Time Endpoint (`/udf/time`)

```python
@app.get("/udf/time")
async def get_server_time():
    """UDF server time endpoint"""
    return int(datetime.now().timestamp())
```

## Widget Registration

To register the TradingView chart widget in OpenBB:

```python
@register_widget({
    "name": "TradingView Chart",
    "description": "Advanced charting with TradingView",
    "category": "Finance",
    "type": "advanced_charting",
    "endpoint": "/udf",
    "gridData": {
        "w": 20,
        "h": 20
    },
    "data": {
        "defaultSymbol": "AAPL",
        "updateFrequency": 60000,
        "chartConfig": {
            "upColor": "#26a69a",
            "downColor": "#ef5350",
            "borderUpColor": "#26a69a",
            "borderDownColor": "#ef5350",
            "wickUpColor": "#26a69a",
            "wickDownColor": "#ef5350",
            "volumeUpColor": "#26a69a",
            "volumeDownColor": "#ef5350",
            "showVolume": True
        }
    }
})
def tradingview_chart():
    """Dummy function for TradingView chart widget registration"""
    pass

```

## Data Format Requirements

The historical data endpoint must return data in the following format:

```python
{
    "s": "ok",  # Status: ok
    "t": [timestamp1, timestamp2, ...],  # Time array (Unix timestamps)
    "o": [open1, open2, ...],  # Open prices array
    "h": [high1, high2, ...],  # High prices array
    "l": [low1, low2, ...],  # Low prices array
    "c": [close1, close2, ...],  # Close prices array
    "v": [volume1, volume2, ...]  # Volume array
}
```

## Best Practices

1. **Error Handling**: Implement proper error handling for all endpoints
2. **Data Validation**: Validate all input parameters
3. **Caching**: Implement caching for frequently accessed data
4. **Rate Limiting**: Add rate limiting to prevent abuse
5. **Security**: Implement proper authentication and authorization
6. **Performance**: Optimize data fetching and processing
7. **Documentation**: Document all endpoints and their parameters

## Example Implementation

Here's a complete example of implementing the historical data endpoint with mock data:

```python
def generate_mock_price_data(symbol: str, from_time: int, to_time: int, resolution: str) -> dict:
    """Generate mock OHLCV data for a symbol"""
    resolution_minutes = {
        "1": 1, "5": 5, "15": 15, "30": 30, "60": 60,
        "D": 1440, "W": 10080, "M": 43200
    }.get(resolution, 60)

    current_time = from_time
    timestamps = []
    while current_time <= to_time:
        timestamps.append(current_time)
        current_time += resolution_minutes * 60

    base_price = 100.0
    prices = []
    current_price = base_price

    for _ in timestamps:
        change = random.uniform(-2, 2)
        current_price += change
        current_price = max(current_price, 1.0)
        prices.append(current_price)

    opens = []
    highs = []
    lows = []
    closes = []
    volumes = []

    for price in prices:
        is_bullish = random.random() > 0.5
        if is_bullish:
            open_price = price * 0.99
            close_price = price * 1.01
        else:
            open_price = price * 1.01
            close_price = price * 0.99

        high_price = max(open_price, close_price) * 1.02
        low_price = min(open_price, close_price) * 0.98

        opens.append(open_price)
        highs.append(high_price)
        lows.append(low_price)
        closes.append(close_price)

        volume = int(1000000 * (1 + random.uniform(-0.2, 0.2)))
        volumes.append(volume)

    return {
        "s": "ok",
        "t": timestamps,
        "o": opens,
        "h": highs,
        "l": lows,
        "c": closes,
        "v": volumes
    }
```

## Additional Resources

- [TradingView Charting Library Documentation](https://www.tradingview.com/charting-library-docs/)
- [UDF Protocol Documentation](https://www.tradingview.com/charting-library-docs/latest/connecting_data/UDF)

The charting technology is provided by TradingView — a platform for traders and investors offering real-time market data, crypto heatmaps, screeners, and other professional tools, making it easy to follow Bitcoin, [Ethereum price](https://www.tradingview.com/symbols/ETHUSD/), and charts for any other asset.

---

---
title: Enterprise
sidebar_position: 2
description: Comprehensive guide to OpenBB Workspace Enterprise features, including role-based access control, security compliance, team collaboration, and on-premises deployment capabilities.
keywords:
- OpenBB Workspace Enterprise
- Role-Based Access Control
- Enterprise Security
- Compliance Requirements
- Team Collaboration
- On-Premises Deployment
- Private Cloud
- Data Protection
- Enterprise Support
- RBAC
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Enterprise | OpenBB Workspace Docs" />

# OpenBB Workspace Enterprise

OpenBB Workspace Enterprise provides a secure, compliant solution for organizations that require the highest level of data protection and control. Deploy our platform entirely within your infrastructure—either on-premises or in your private cloud (VPC)—to maintain complete control over your sensitive financial data and AI workflows.

<img src="https://openbb-cms.directus.app/assets/2ad71c09-ae83-422f-975d-d4cdaefd2c74.png" alt="OpenBB Workspace Enterprise Architecture" width="100%" />

## Key Benefits

- **Complete Data Control**: Deploy within your infrastructure—on-premises or private cloud (VPC)
- **Enhanced Security**: Keep all data, models, and prompts within your secure environment
- **Compliance Ready**: Meet strict regulatory requirements with built-in compliance features
- **Seamless Integration**: Connect with your internal systems, data sources, and authentication providers
- **Granular Access Control**: Implement enterprise-grade role-based access control
- **Enterprise Support**: Access dedicated support and service-level agreements (SLAs)

## Team Collaboration

OpenBB Workspace Enterprise enables secure team collaboration while maintaining strict access controls. When you sign up, we create a dedicated organization account for your team, allowing you to:

- Keep dashboards private and accessible only to authorized team members
- Share findings and insights with specific colleagues
- Collaborate on alpha generation while maintaining data security

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Dashboard Sharing Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/sharing_dashboard.png" />
</div>

## Role-Based Access Control (RBAC)

Our enterprise-grade RBAC system provides granular control over user permissions. Instead of managing individual permissions, you can create roles that define specific access levels for different user groups.

### Creating and Managing Roles

To set up role-based access:

1. Create a new role with a descriptive name
2. Provide a clear description of the role's purpose
3. Assign users to the role

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Role Creation Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/create-role-empty.png" />
</div>

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Role Creation Form" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/create-role-popup.png" />
</div>

> **Note**: You can only assign users who have already been added to the Workspace. See the User Management section for adding new users.

After creating a role, you can view all assigned users and role metadata in the Roles tab:

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Role User List" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/create-role-user-list.png" />
</div>

### Permission Management

Permissions are organized into three key categories:

1. **Apps**: Manage dashboard access through apps
2. **Widgets**: Granular control over widget access
3. **Prompts**: Control access to AI prompts

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="800" alt="Permissions Overview" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/role+permissions.png" />
</div>

#### App Permissions

To set up app permissions:

1. Configure your data integration in the App tab
2. Click the information toast message to access the Permissions section
3. Update data connection permissions from "No Access" to "Access"
4. (Optional) Grant access to specific widgets associated with the data integration instead of the entire app

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Backend Setup Notification" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/new-apps.png" />
</div>

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Permission Edit Interface" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/app2.png" />
</div>

**Efficient Permission Assignment:**

- Search by category or data provider
- Use multi-select for bulk permission assignment
- Widgets with "No Access" remain hidden from users with that role

#### Widget Permissions

If you want to grant access to specific widgets instead of the entire app, you can do so by setting widget permissions.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Permission Edit Interface" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/widgets+permissions.png" />
</div>

#### Prompt Permissions

Manage access to prompts through:

1. Custom backend configuration
2. Manual setup within the Workspace
3. Role Management in the Admin Portal

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Prompt Setup Interface" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/prompts.png" />
</div>

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Prompt Sharing Controls" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/prompts-permissions.png" />
</div>

### Activity Logging

The Activity Log provides comprehensive tracking of all role and permission changes:

- Role creation, modification, and deletion
- User role assignments and removals
- Permission updates

Each log entry includes:
- Timestamp
- User who performed the action
- Action type
- Detailed change information

The log supports filtering and searching by activity type for quick access to relevant entries.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Activity Log Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/activity-log.png" />
</div>

## User Management

The User Management interface provides comprehensive control over workspace access:

- Invite or remove team members
- Export user lists
- View detailed user profiles including permissions, user type, and login history

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Team Management Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/team_management.png" />
</div>

### User Invitation Process

Invite users by providing:
- First name
- Last name
- Email address

**Invitation Options:**
- Standard invitation requiring user acceptance
- Bypass invitation for immediate access

**Invitation Methods:**
1. Single User Invitation
2. Bulk Invitation (recommended for multiple users)

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Single User Invitation" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/user-invitation-single.png" />
</div>

For bulk invitations:
1. Download the template
2. Remove sample data
3. Add your user information
4. Upload the completed file

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Bulk User Invitation" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/user-invitation-bulk.png" />
</div>

### User Profile Management

The user profile interface enables:

- User deletion
- User type changes (Normal User/Admin)
- Permission review and adjustment
- Aggregated view of all permissions across roles

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="User Profile Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/permission-preview.png" />
</div>

### User Export

Export complete user lists with details in CSV or XLS format:

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="User Export Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/onprem-mar-25/user-export.png" />
</div>

## Others

### Data Export Capabilities

Enterprise users can export data in multiple formats:
- CSV
- JSON
- XLSX
- Other supported formats

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Data Export Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/export_data.png" />
</div>

### Dashboard Reporting

Export dashboards to PDF with a single click:

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Report Export Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/export_report.png" />
</div>

Example exported report:

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="488" alt="Exported Dashboard Report" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/dashboard_export.png" />
</div>

## Excel Integration

Enterprise users can:

- Access OpenBB sandbox data directly from Excel
- Export datasets to Excel format
- Use the OpenBB Add-in for Excel

For detailed information, see [OpenBB Add-in for Excel](http://docs.openbb.co/excel).

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Excel Add-in Interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/excel_addin.png" />
</div>


---

---
title: FAQs
sidebar_position: 4
description: Comprehensive guide to frequently asked questions about OpenBB Workspace data integration, custom backend setup, widget configuration, and troubleshooting common issues.
keywords:
  - FAQs
  - Data Integration
  - Custom Backend
  - Widget Configuration
  - API Integration
  - OpenBB Workspace
  - Backend Setup
  - Widget Templates
  - Troubleshooting
  - Data Sources
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="FAQs | OpenBB Workspace Docs" />

### General

**Q: What is the purpose of a custom backend in OpenBB Workspace?**

A: A custom backend allows you to integrate your own data sources into OpenBB Workspace, enabling the creation of personalized widgets, dashboards, and templates that display your data in various ways. For more details, see the [Overview](/workspace/data-integration#1-create-the-api-server) section.

**Q: What technologies are required to set up a custom backend?**

A: You will need to use an API framework and a `widgets.json` file to define widget configurations. Optionally, you can use a `apps.json` file for layout configurations. Refer to the [Creating your own custom backend](/workspace/data-widgets) section for more information.

### Setup and Configuration

**Q: How do I start setting up a custom backend?**

A: Follow the structure outlined in the [Overview](/workspace/data-integration#getting-started-hello-world-example) section.

**Q: What is the `widgets.json` file, and why is it important?**

A: The `widgets.json` file is a configuration file that connects your custom backend data to the widgets displayed in OpenBB Workspace. It defines widget properties such as name, description, category, endpoint, and more. See the [Example Widgets Configuration](/workspace/widgets-json-reference#example-widgets-json) section for details.

**Q: How do I add Authorization to my custom backend?**

A: We provide an the ability when adding a custom backend to pass a custom Header or Query Parameter to your backend on every request. You can then verify this in your backend and either allow or deny access to the request.

<details>
<summary mdxType="summary">Authorization</summary>

<div style={{display: 'flex', justifyContent: 'left'}}>
  <img className="pro-border-gradient" width="600" alt="folder" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/authorization.png" />
</div>
</details>


### Widgets and Templates

**Q: How can I create a new widget?**

A: Define the widget in the `widgets.json` file with necessary properties like name, description, category, and endpoint. Then, create an endpoint in your FastAPI application to serve the data for this widget. Check the [Widgets json reference](/workspace/widgets-json-reference) page for guidance.

**Q: Can I customize the appearance of widgets?**

A: Yes, you can customize widget appearance using properties in the `widgets.json` file, such as `gridData` for size and `columnsDefs` for table widgets. More information is available in the [Customizing Widgets](/workspace/widgets-json-reference) section.

**Q: What are templates, and how do I use them?**

A: Templates allow you to define and manage the layout and behavior of widgets on your dashboard. You can create a `templates.json` file to structure these templates and serve them via a FastAPI endpoint. See the [Apps](/workspace/apps) section for more details.

**Q: How do I implement dynamic dropdown options in widgets?**

A: Use the `type: "endpoint"` in your parameter configuration and specify an `optionsEndpoint` that returns the available options. See the [Input Parameters](/workspace/widget-parameters/advanced-dropdown) page for implementation details.

**Q: Can I group widgets to share parameters?**

A: Yes, widgets can be grouped by using the same parameter configuration. This allows a single parameter selection to update all related widgets. More information is available in the [Parameter Grouping](/workspace/widget-parameters/parameter-grouping) page.

### Troubleshooting

**Q: I can't connect to my backend using Safari/Brave. What should I do?**

A: Ensure your API is running over HTTPS. You may need to create a self-signed certificate and configure your browser to trust it.

<details>
<summary mdxType="summary">Safari/Brave HTTPS Setup</summary>

OpenBB Platform API Over HTTPS

To run the API over the HTTPS protocol, you must first create a self-signed certificate and the associated key. After steps 1 & 2 above, you can generate the files by entering this to the command line:

```sh
openssl req -x509 -days 3650 -out localhost.crt -keyout localhost.key   -newkey rsa:4096 -nodes -sha256   -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
```

Two files will be created, in the current working directory, that are passed as keyword arguments to the `openbb-api` entry point.

```sh
openbb-api --ssl_keyfile localhost.key --ssl_certfile localhost.crt
```

**Note**: Adjust the command to include the full path to the file if the current working directory is not where they are located.


The certificate - `localhost.crt` - will need to be added to system's trust store. The process for this will depend on the operating system and the user account privilege.

A quick solution is to visit the server's URL, show the details of the warning, and choose to continue anyways.

Contact the system administrator if you are using a work device and require additional permissions to complete the configuration.

![This Connection Is Not Private](https://in.norton.com/content/dam/blogs/images/norton/am/this_connection_not_is_private.png)

</details>

**Q: My widget data is not refreshing as expected. What could be wrong?**

A: Check the `refetchInterval` and `staleTime` settings in your `widgets.json` file. Ensure they are set appropriately for your data's update frequency. Refer to the [Refetch Interval](/workspace/widget-configuration/refetch-interval) section for more information. Or you have set the [`runButton`](/workspace/widget-configuration/run-button) to `true` in the `widgets.json` file which doesn't refresh the data until you click on it.


---

---
title: Apps Gallery
sidebar_position: 31
description: Browse our curated collection of apps for financial analysis, market research, portfolio management and much more.
keywords:
- Dashboard Templates
- Financial Analysis
- Market Research
- Portfolio Management
- Charting
- News
- Equity Research
- Economic Indicators
- ETF Analysis
- Community Templates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Apps Gallery | OpenBB Workspace Docs" />

This is an example of what your Apps page may look like for different workflows & apps.

<img width="800" alt="OpenBB Workspace Multiple Applications View" src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png" />

## Portfolio Risk Management

Monitor and analyze your portfolio's risk metrics, including volatility, beta, and correlation analysis. This dashboard helps you make informed decisions about risk management and portfolio optimization.

<img width="800" alt="Portfolio Risk Management Dashboard" src="https://openbb-cms.directus.app/assets/b1d5b799-3abe-4d45-b04c-601e2b652b18.png" />

- Code open source [here](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/demo-apps/demo-risk).
- Available to be added with https://openbb-demo-risk.fly.dev

## DTCC Trades

Track and analyze Depository Trust & Clearing Corporation (DTCC) trades in real-time. Monitor large transactions, identify unusual trading patterns, and stay informed about market movements.

<img width="800" alt="DTCC Trades Dashboard" src="https://openbb-cms.directus.app/assets/4e3dc7ec-3b79-447d-b573-9762212f715f.png" />

- Open source code [here](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/demo-apps/dtcc_trade_repository).
- Available to be added with https://dtcc-trade-repo.fly.dev

## FED Net Liquidity

Monitor the Federal Reserve's net liquidity measures and their impact on financial markets. Track changes in the Fed's balance sheet and understand their implications for market conditions.

<img width="800" alt="FED Net Liquidity Dashboard" src="https://openbb-cms.directus.app/assets/93280111-380d-4620-b7a9-487ec7db2e71.png" />

- Open source code [here](https://github.com/DidierRLopes/dharmatech-openbb).
- Available to be added with https://dharmatech-openbb.fly.dev

## Macro Analysis

Comprehensive macroeconomic analysis dashboard featuring key economic indicators, market trends, and global economic data. Stay informed about broader market conditions and economic trends.

<img width="800" alt="Macro Analysis Dashboard" src="https://openbb-cms.directus.app/assets/5648c15c-9f75-44c3-b4fa-b17cfde5974a.png" />

- Blog on this app: https://openbb.co/blog/from-excel-to-agents-rebuilding-the-macro-research-workflow-for-the-ai-era

## Congressional Data & Executive Orders

Track and analyze legislative activities and executive actions that impact financial markets. Monitor congressional bills, voting records, and executive orders to stay informed about potential regulatory changes and policy developments that could affect your investments.

<img width="800" alt="Congressional Data & Executive Orders Dashboard" src="https://openbb-cms.directus.app/assets/bd8eb192-ec73-4fb4-9bce-038af1928016.png" />

- Open source code [here](https://github.com/andrewkenreich/congress).
- API key required.

## Crypto Analysis

Comprehensive cryptocurrency analysis platform built by Matt, featuring real-time price data, market trends, and trading insights. Monitor crypto markets and make informed investment decisions.

<img width="800" alt="Crypto Analysis Dashboard" src="https://openbb-cms.directus.app/assets/441e937c-e8aa-49f8-a3e9-5b4463192e9d.png" />

- Open source code [here](https://github.com/MattMaximo/CryptoBB).
- API key required.

## Opening Bell Daily

Start your trading day with the Opening Bell Daily dashboard, providing pre-market analysis, key events, and market-moving news to help you prepare for the trading session. This highlights how you can use your watermark.

<img width="800" alt="Opening Bell Daily Dashboard" src="https://openbb-cms.directus.app/assets/3f92b5d8-9942-4b9e-81cf-8722a1296f2c.png" />

- Open source code [here](https://openbb-opening-bell-daily.fly.dev).
- Available to be added with https://openbb-opening-bell-daily.fly.dev

## FRED Economic Data

Access and analyze Federal Reserve Economic Data (FRED) with real-time updates on economic indicators, historical data, and trend analysis. Monitor key economic metrics that influence market movements.

<img width="800" alt="FRED Economic Data Dashboard" src="https://openbb-cms.directus.app/assets/6d218f61-4702-4998-8dad-f590aaae616b.png" />

- Part of the [OpenBB Platform](/workspace/platform-installer) package.
- API key required.

## BLS Statistics

Track Bureau of Labor Statistics (BLS) data including employment, inflation, and other key economic indicators. Stay updated with the latest labor market trends and economic statistics.

<img width="800" alt="BLS Statistics Dashboard" src="https://openbb-cms.directus.app/assets/f3b176e5-e362-4e4f-8a47-2aed57100279.png" />

- Part of the [OpenBB Platform](/workspace/platform-installer) package.
- API key required.

## IMF Data

Access International Monetary Fund (IMF) data and analysis on global economic trends, financial stability, and economic forecasts. Monitor international economic developments and their impact on markets.

<img width="800" alt="IMF Data Dashboard" src="https://openbb-cms.directus.app/assets/08fde756-98e5-474a-8f00-8233dfdbb49f.png" />

- Part of the [OpenBB Platform](/workspace/platform-installer) package.
- API key required.

## Charting

Visualize price action, perform technical analysis, and overlay multiple time series. Our platform supports a wide range of time series, including stocks, funds, ETFs, and economic data.

<img className="pro-border-gradient" width="800" alt="Advanced Charting Dashboard" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/new_charting.png" />

## News

Stay up-to-date with the latest global and industry news, featuring over 200 full-length stories and 1,000 content pieces added daily. Use our RSS feeds to manage and add custom feeds of your choice.

<img className="pro-border-gradient" width="800" alt="News Dashboard" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/new_news_template.png" />

## Equity Research

Research any company's business and financial performance, including company details, financial metrics, comparative analysis, ownership insights, event calendars, and analyst estimates.

<img className="pro-border-gradient" width="800" alt="Equity Research Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/equity-template.png" />

## Analyst Dashboard

Manage your portfolio holdings and their latest updates using our Watchlist widget, along with real-time news, valuation multiples, price targets, and analyst estimates.

<img className="pro-border-gradient" width="800" alt="Analyst Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/analyst-template.png" />

## World Economics

Stay updated with near real-time economic calendars and the historical performance of global currency pairs.

<img className="pro-border-gradient" width="800" alt="World Economics Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/world-economics.png" />

## Country Economics

Research country-specific economic indicators, including GDP, inflation, and unemployment rates.

<img className="pro-border-gradient" width="800" alt="Country Economics Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/country-economics.png" />

## ETF Analysis

Research ETFs with information on metadata, price performance, classification, and historical holdings.

<img className="pro-border-gradient" width="800" alt="ETF Analysis Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/etf-template.png" />

## Comparison Analysis

Quickly Compare any two companies' performance, including valuation multiples, analyst estimates, price performance, and price targets.

<img className="pro-border-gradient" width="800" alt="Company Comparison Dashboard" src="https://openbb-assets.s3.amazonaws.com/docs/pro/comparison-template.png" />


---

---
title: Overview
sidebar_position: -1
description: OpenBB Workspace is a secure enterprise UI platform for AI workflows, featuring data integration, AI model deployment, flexible UI customization, and on-premises deployment capabilities.
keywords:
- enterprise AI platform
- data integration
- AI model deployment
- flexible UI
- on-premises deployment
- secure platform
- team collaboration
- OpenBB Apps
- proprietary data
- licensed data
- AI workflows
- enterprise security
- private cloud
- data privacy
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="OpenBB Workspace Docs" />

# OpenBB Workspace: Your Enterprise AI Platform

OpenBB Workspace is a powerful, secure platform designed specifically for enterprise AI workflows. It combines flexible data integration, customizable UI components, and robust AI capabilities in a single, cohesive solution.

<img src="https://openbb-cms.directus.app/assets/8aa1a314-0e2c-41f0-a3cf-ef621e5f2a13.png" alt="OpenBB Workspace Platform Interface" width="100%" />

## Core Capabilities

### Production-Ready UI Framework

Transform your workflows with a fully customizable UI that adapts to your team's specific needs:

- **Complete Control**: Customize every aspect of the interface to match your workflow requirements
- **Team Collaboration**: Enable seamless teamwork through shared dashboards and applications
- **Application Development**: Build comprehensive solutions from data visualization to complex AI workflows

### Unified Data Integration

Bring all your data sources together in one secure, scalable platform:

- **Comprehensive Data Access**: Integrate proprietary, licensed, and public data sources
- **Flexible Data Types**: Support for both structured and unstructured data
- **Future-Proof**: Avoid vendor lock-in with our open architecture

### AI Model Integration

Deploy and manage AI models in a secure, controlled environment:

- **Model Flexibility**: Integrate any AI model that supports your workflows
- **Secure Deployment**: Run AI models in a protected environment with controlled data access
- **Workflow Integration**: Seamlessly connect AI capabilities with your existing processes

### Enterprise-Grade Deployment

Deploy with confidence using our on-premises or private cloud options:

- **Complete Control**: Deploy securely on-premises or in your private cloud
- **Data Security**: Keep sensitive data within your infrastructure
- **Access Management**: Implement role-based access control for enhanced security

## Key Concepts

### Widgets: Your Data Building Blocks

Widgets are the fundamental data units in OpenBB Workspace. Each widget represents a self-contained data component with:

- **Data Source**: Integration with internal or external data sources
- **Metadata**: Title, description, category, sub-category and source information
- **Visual Layer**: Presentation through PDF, table, chart, or feed formats
- **Parameters**: Configurable options for data display and interaction

<img width="800" alt="Widget Metadata Structure and Components" src="https://openbb-cms.directus.app/assets/132e5cda-b062-4094-8036-8c2d41db1527.png" />

### Dashboards: Your Financial Analysis Workspace

Dashboards serve as your primary workspace for organizing and analyzing financial data through customizable widgets. Each dashboard acts as a dedicated canvas where you can arrange and combine different data visualizations to create comprehensive financial analysis views.

<img width="800" alt="OpenBB Workspace Dashboard Interface" src="https://openbb-cms.directus.app/assets/fbf80af0-8bc3-4ac6-b349-f8e1ec388cee.png" />

#### Managing Your Dashboards

Access dashboard management options by clicking the ellipsis in the left sidebar next to the dashboard of interest. This opens a menu with the following capabilities:

- **Rename** - Customize your dashboard's name for better organization
- **Move to** - Organize dashboards by moving them into folders
- **Duplicate** - Create a copy of your dashboard with all its widgets and settings
- **Open in new window** - Expand your workspace across multiple screens
- **Share** - Collaborate by sharing dashboards with team members in your organization
- **Delete** - Remove unused dashboards
- **Export report** - Generate static reports in PDF or PNG format
- **Refresh data** - Update all widget data to the latest available

Note: Some dashboards may be hidden by a folder. By clicking in the folder, you will be able to expand the dashboards contained within.

#### Collaboration Features

Share dashboards with team members by right-clicking and selecting "Share". Search for team members within your organization, and recipients without OpenBB Pro access will receive an email invitation. Shared dashboards appear in the recipient's sidebar with read-only access. Recipients can duplicate the dashboard to create their own editable version while maintaining the original.

#### Creating Static Reports

Export your interactive dashboards as static reports in PDF or PNG format. Include notes and insights from the note widget to capture the exact state of your analysis. This feature enables you to create periodic analysis reports, document investment decisions, share insights with stakeholders, and maintain historical records of your analysis.

### AI Agents: Intelligent Automation

Create AI agents to automate tasks and enhance your dashboards with this intelligence layer.

<img width="800" alt="OpenBB Workspace AI Agents Interface" src="https://openbb-cms.directus.app/assets/ac287dfe-e279-42bb-8f84-a616ff9df8a8.png" />

The reason why AI agents work on OpenBB workspace is due to the metadata from each widget which allows AI to understand which widget has access to the right dataset and query it accordingly (along with the right parameters!).

<img width="800" alt="OpenBB Workspace AI Agent Widget Integration" src="https://openbb-cms.directus.app/assets/2b463b3b-e1cf-4079-8c11-b49cdcda60ac" />

### Apps: End-to-End Workflows

Combine dashboards and AI agents to create powerful applications:

- **Integrated Workflows**: AI agents can access and process all dashboard data
- **Data Integration**: Connect your existing systems and services
- **Scalable Architecture**: Create and manage multiple applications within the platform

<img width="800" alt="OpenBB Workspace Applications Overview" src="https://openbb-cms.directus.app/assets/5778561c-5c09-4d70-bde8-952acbccaa01.png" />

You can have a large amount of different applications on OpenBB.

<img width="800" alt="OpenBB Workspace Multiple Applications View" src="https://openbb-cms.directus.app/assets/2fc9097e-0941-49df-8d83-7d6b5a87bb45.png" />

#### Prompts: Reusable AI Interactions

Enhance your applications with reusable prompts:

- **Workflow Efficiency**: Save and reuse common AI interactions
- **Consistent Results**: Maintain standardized AI responses across your team
- **Process Automation**: Streamline repetitive AI tasks

## See It in Action

Watch our comprehensive demo to see OpenBB Workspace in action:

<div style={{position: 'relative', paddingBottom: '56.25%', height: '0', overflow: 'hidden', maxWidth: '100%'}}>
    <iframe 
    style={{position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', display: 'block', margin: '0 auto'}} 
    src="https://www.youtube.com/embed/Gll8bRSoyGM?si=X7xpy9yPBaBeEjbg" 
    title="YouTube video player" 
    frameBorder="0" 
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
    referrerPolicy="strict-origin-when-cross-origin" 
    allowFullScreen></iframe>
</div>

Join thousands of professionals already using OpenBB Workspace.

Start with our generous free tier at [pro.openbb.co](https://pro.openbb.co).


---

---
title: Native Installation (PWA)
description: Learn how to install and use OpenBB Workspace as a Progressive Web App (PWA) on your desktop and mobile devices.
sidebar_position: 3
keywords:
- OpenBB Workspace
- PWA installation
- Desktop application
- iOS application
- Android application
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Native Installation (PWA) | OpenBB Workspace Docs" />

OpenBB Workspace is now available as a Progressive Web App (PWA), providing a seamless, native-like experience across all your devices.

<img width="800" alt="PWA" src="https://openbb-cms.directus.app/assets/b1d5b799-3abe-4d45-b04c-601e2b652b18.png" />

This installation method offers several advantages:

- **Offline Access**: Continue working even without an internet connection
- **Native Performance**: Faster loading times and smoother interactions
- **Cross-Platform**: Consistent experience across desktop and mobile devices
- **Automatic Updates**: Always have the latest features without manual updates

## Desktop Installation

The desktop PWA provides the most complete OpenBB experience, with full keyboard support and optimized screen real estate.

### Installation Steps

1. Launch Chrome, Edge, or any Chromium-based browser
2. Navigate to [https://pro.openbb.co](https://pro.openbb.co)
3. Click the install icon in the address bar (typically a plus sign or computer icon)
4. Follow the installation prompts to add OpenBB to your desktop

<video width="100%" controls>
  <source src="https://openbb-cms.directus.app/assets/36685e54-d8c1-47ba-acd6-1692fabd768e" type="video/mp4" />
  Your browser does not support the video tag.
</video>

## Mobile Installation

### iOS Devices

1. Open Safari and navigate to [https://pro.openbb.co](https://pro.openbb.co)
2. Tap the share button (square with upward arrow) at the bottom of the screen
3. Select "Add to Home Screen" from the share menu
4. Name the app "OpenBB" and tap "Add"
5. The OpenBB icon will appear on your home screen

<video controls>
  <source src="https://openbb-cms.directus.app/assets/9bd37920-5776-4004-b6de-8650cd1f8c2a" type="video/mp4" />
  Your browser does not support the video tag.
</video>

### Android Devices

1. Open Chrome and navigate to [https://pro.openbb.co](https://pro.openbb.co)
2. Tap the three-dot menu in the top-right corner
3. Select "Add to Home screen" from the menu
4. Name the app "OpenBB" and tap "Add"
5. The OpenBB icon will appear on your home screen

<video controls>
  <source src="https://openbb-cms.directus.app/assets/5699793b-cef4-4fbb-8f2c-1deeca26ea41" type="video/mp4" />
  Your browser does not support the video tag.
</video>

## Using OpenBB PWA

The PWA version of OpenBB Workspace provides a consistent experience across all your devices while maintaining full functionality. Key features include:

- **Responsive Design**: Optimized layouts for desktop, tablet, and mobile screens
- **Touch Support**: Intuitive touch controls for mobile devices
- **Offline Capabilities**: Access key features without an internet connection
- **Cross-Device Sync**: Seamlessly continue your work across different devices

### Best Practices

- Use Chrome or Edge for the best desktop experience
- Keep your browser updated to the latest version
- Ensure you have sufficient storage space on your device
- Connect to a stable internet connection for initial setup

### Troubleshooting

If you encounter any issues during installation:

1. Clear your browser cache and try again
2. Ensure you're using a supported browser version
3. Check your device's storage space
4. Verify your internet connection

## Learn More

For a deeper dive into the OpenBB PWA, including its development journey and technical implementation, read our detailed blog post: [OpenBB Workspace is Now Available on Mobile](https://openbb.co/blog/openbb-terminal-is-now-available-on-mobile)

---

---
title: OpenBB Copilot
sidebar_position: 26
description: Learn how to use OpenBB Copilot to interact with the OpenBB Workspace
keywords:
- OpenBB Copilot
- copilot
- AI
- agent
- assistant
- Large language model
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';
import ReactPlayer from 'react-player'

<HeadTitle title="OpenBB Copilot | OpenBB Workspace Docs" />

OpenBB Copilot is your AI companion that helps you interact with OpenBB
Workspace, and perform a wide variety of research and analysis tasks.

With OpenBB Copilot, you can:

- Answer general knowledge questions
- Interact with widgets added explicitly to its context
- Interact with your uploaded files
- Automatically use data from the dashboard
- Automatically retrieve data using the OpenBB API or any custom backend you have added
- Create charts, tables, and other text artifacts, like summaries
- Iteratively manipulate and transform data and charts
- Be used to search the web for additional information
- Provide citations

## Introduction

To use OpenBB Copilot, click on the purple icon located at the center right of the
Workspace screen:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/open_copilot.jpg" alt="open openbb copilot" width="70%" height="70%" />
</div>

Under most circumstances, you can treat OpenBB Copilot like a personal research
assistant. OpenBB Copilot has access to the widgets (including your uploaded
files) on your currently-active dashboard, the OpenBB API and any custom backend
endpoints you have added to OpenBB Workspace. 

By utilizing all of these sources of data, OpenBB Copilot can assist you in
performing a wide variety of research and analysis tasks.

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/copilot/ada_opened.png" alt="opened openbb copilot" width="70%" height="70%" />
</div>

## Understanding Chats

OpenBB Copilot is a chat-based assistant that leverages multiple LLMs (Large
Language Models) under-the-hood to understand your queries and provide answers.

Since OpenBB Copilot is a chat-based assistant, it maintains a conversation history
to provide contextual responses. This means you can have natural back-and-forth
discussions, ask follow-up questions, and refine your queries based on previous
responses. The conversation history helps OpenBB Copilot understand the context of
your questions and provide more relevant and personalized assistance throughout
your interaction.

For example, if you ask about the price-to-earnings (P/E) ratio, and then follow
up by asking about other important financial ratios, OpenBB Copilot will
understand the context and suggest relevant ratios:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_chat_history.png" alt="chat history openbb copilot" width="60%" height="60%" />
</div>

If you'd like to clear the history of the current conversation, you can do so by
clicking on the trashcan icon in the upper right corner of the OpenBB Copilot
window. It is **highly recommended** to clear the chat history when you have a
new question that is unrelated to your current conversation, to prevent
confusing OpenBB Copilot:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_trash_can_icon.png" alt="clear chat button openbb copilot" width="100%" height="100%" />
</div>

## General question answering

The simplest functionality of OpenBB Copilot is its general question answering
capability. For example, you can ask Copilot things like:

- "What's the difference between stocks and bonds?"
- "Explain inflation."
- "Can you explain the concept of dollar-cost averaging?"

For general questions, OpenBB Copilot will rely on its underlying model's
extensive training data to formulate answers. We suggest you spend some time    
exploring this functionality with a range of questions across different topics
to get a feel for how OpenBB Copilot works and behaves.

## Interacting with data sources using OpenBB Copilot

For OpenBB Copilot, widgets are data sources that can be used to retrieve data relevant to answer your queries. OpenBB Copilot uses the current values of widget parameters (e.g. symbol, start date, etc.) as suggestions to answer your query, but it can also change them if required.

This allows you to treat a widget as a data that can return data for multiple tickers and inputs, rather than just the data that is currently being displayed.

Widgets have the following priority:

1. Widgets added to the context explicitly
2. Widgets in the currently-active dashboard
3. Any widget available to be added to the OpenBB app, including widgets from custom backends or API endpoints (optional)

You can toggle on/off global widgets (option 3) the button highlighted in the image below.

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_extra_toggle.png" alt="toggle extra data" width="80%" height="80%" />
</div>

### Analyze specific widgets only

Sometimes, you might want OpenBB Copilot to analyze data from only a specific
widget (or set of widgets) on your dashboard. For example, if you want to deep
dive into an earnings transcript, and ignore all other widgets on your
dashboard, you can do so by clicking on the "Add widgets as context" button on
the widgets you want OpenBB Copilot to use:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/add_specific_widget_context.png" alt="add widget context openbb copilot" width="80%" height="80%" />
</div>

The OpenBB Copilot chat window will also show you which widgets are currently
selected as explicitly-added context:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_window_explicit_context.png" alt="query widget context openbb copilot" width="80%" height="80%" />
</div>

### Automatically use data from the dashboard

OpenBB Copilot can access information from all widgets you have added to your
currently-active dashboard. If no widgets have been explicitly added to the
context, OpenBB Copilot will fallback to retrieve data from
widgets on the currently-active dashboard if they are required to answer your query.

For example, if you add the "Historical Stock Price" widget to your dashboard,
you can ask OpenBB Copilot to give you the monthly highs for a particular year
for AAPL, and OpenBB Copilot will use the "Historical Stock
Price" widget to provide an answer:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_retrieve_from_dashboard.png" alt="copilot retrieve from dashboard" width="100%" height="100%" />
</div>

Also note how OpenBB Copilot displays the reasoning steps that it took to
retrieve the data:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_reasoning_steps.png" alt="reasoning steps openbb copilot" width="50%" height="50%" />
</div>

OpenBB Copilot also provides a citation for the data source after its response.

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_citation_example.png" alt="citation example openbb copilot" width="100%" height="100%" />
</div>

To learn more about reasoning steps and citations, please see the [Reasoning
Steps](#reasoning-steps) and [Citations](#citations) sections below.

:::note

Sometimes, you might need to be more specific with your query when you want
Copilot to use one or more widgets from your dashboard, since vague queries
might lead OpenBB Copilot to retrieve the data automatically from all of the
available data sources it has access to (See more about this capability in the
[Automatically using data sources available to OpenBB Workspace](#automatically-using-data-sources-available-to-openbb-workspace) section
below).

To remedy this, simply add a phrase such as "Use the widgets on my dashboard" to
the end of your query to "nudge" OpenBB Copilot to retrieve the data from the
relevant widgets on your dashboard.

:::


### Using your own files

OpenBB Copilot can also analyze and answer questions using files you provide, such as PDF, CSV, and XLSX files.

To add a file to OpenBB Copilot, first [upload it and add it as a widget to the currently-active dashboard](https://docs.openbb.co/workspace/static-files).

The file can then be used by OpenBB Copilot to answer questions (either by adding the file widget to the [context explicitly](#analyze-specific-widgets-only), or by allowing OpenBB Copilot to [automatically retrieve the data](#automatically-use-data-from-the-dashboard) if it is relevant to your query).

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_custom_pdf_chat_example.png" alt="custom pdf copilot chat" width="100%" height="100%" />
</div>

Alternatively, you can also upload files directly to OpenBB Copilot by clicking
on the paper clip icon in the OpenBB Copilot window. Files uploaded directly to
OpenBB Copilot in this manner will **not** be persisted between sessions:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_anonymous_files.png" alt="upload file to copilot" width="80%" height="80%" />
</div>


:::note

When uploading files directly to OpenBB Copilot, we use filenames to determine
if a file is relevant to your query. For best results, use descriptive
filenames. For example, if you have a technical report from Tesla released in
2024, a good filename would be `tsla_technical_report_2024.pdf`.

:::

### Automatically using data sources available to OpenBB Workspace

OpenBB Copilot can also access external data sources to provide additional
insights. This allows you to ask questions that go beyond the data displayed on
your dashboard.

External data can be retrieved from all data sources available to OpenBB,
including the OpenBB API (which powers first-party widgets), and any custom
backend endpoints that you have added.

:::note

OpenBB Copilot prioritizes data in the following order:

1. Explicitly-added context widgets
2. Data from widgets on the currently-active dashboard
3. Data from the OpenBB API or any active custom backend.

:::

For example, you can ask OpenBB Copilot to fetch the latest stock price for a
specific company, or to provide a summary of the latest news for a particular
stock without having to add a widget to your dashboard, as long as you have the global data toggle enabled.

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_direct_retrieval_example.png" alt="direct retrieval example" width="60%" height="60%" />
</div>

If OpenBB Copilot retrieved data directly from a data source, you can add that
data to your dashboard by hovering over the appropriate citation, and clicking
on the "Add to dashboard" button:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_add_to_dashboard_from_citation.png" alt="add to dashboard from citation" width="50%" height="50%" />
</div>

## Producing charts and tables using OpenBB Copilot

OpenBB Copilot can produce charts and tables using the data that it has access
to. We call these special outputs "artifacts".

For charts, OpenBB Copilot can currently produce the following plot types:

- Line chart
- Vertical bar chart
- Scatter plot

To produce a chart or a table, mention the output that you want in your query.
For example, to produce a chart of the latest stock price for Apple, you can
ask OpenBB Copilot to "Create a chart of the latest stock price for Apple":

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_chart_artifact.png" alt="chart artifact openbb copilot" width="60%" height="60%" />
</div>

If you want a table instead, you can just modify your query slightly to ask for
a table:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_table_artifact.png" alt="table artifact openbb copilot" width="60%" height="60%" />
</div>

This behaviour works across all structured data.

### Converting artifacts to widgets

Every artifact that OpenBB Copilot generates can be converted to a widget. To do
this, click the "Create widget from [text, table, or chart]" button:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/create_widget_from_artifact.png" alt="create widget from artifact openbb copilot" width="60%" height="60%" />
</div>

This will create a new widget on your dashboard containing the artifact.

:::note

The newly-created widget contains all of the data in the artifact, so you can
interact with it just like any other widget on your dashboard (including
switching between different types of charts, or toggling between chart and table
views, or adding it as explicitly-added context to OpenBB Copilot for further
analysis).

:::

## Searching the web

OpenBB Copilot has the ability to search the web. 

To search the web, use the `@web` keyword in your query to tell OpenBB Copilot
to search the web for information. For example:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_web_search_example.png" alt="web search openbb copilot" width="80%" height="80%" />
</div>

## Reasoning Steps

As OpenBB Copilot goes through the process of answering your query, it will show
you the reasoning steps it took to arrive at the answer.  These reasoning steps
appear above Copilot's responses. Reasoning steps can be expanded to see more
information about the intermediate steps OpenBB Copilot took to arrive at the
answer:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/ada_expanded_reasoning_steps.png" alt="expanded reasoning steps openbb copilot" width="80%" height="80%" />
</div>

The reasoning steps can contain parameters for data sources, internal queries,
which files are accessed, intermediate artifacts, and more.

## Citations

When accessing data (whether from widgets on your dashboard, files you have
uploaded, or external data sources), OpenBB Copilot will always cite the data
source it referenced when responding to your query:

<div style={{display: 'flex', justifyContent: 'center'}}>
<img src="https://openbb-assets.s3.amazonaws.com/docs/copilot/citation_example.png" alt="citations openbb copilot" width="80%" height="80%" />
</div>

If the widget that was cited is present on your dashboard with the same arguments used by OpenBB Copilot,
hovering over the citation will give you the option to scroll to that widget.

If the widget is not present or the arguments were changed, hovering over the citation will give you the
option to add the data to your dashboard.

## Prompting guidelines

The OpenBB Copilot is designed to assist you in your research and analysis. To
get the most out of OpenBB Copilot, it is important to have a good understanding
of prompting techniques.

We recommend reading through the [OpenAI Prompt Engineering Guide](https://beta.openai.com/docs/guides/prompt-engineering) to learn more
about how to structure your prompts to get the best results.


---

---
title: OpenBB Platform
sidebar_position: 33
description: Learn how to integrate the OpenBB Platform data to OpenBB Workspace
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Workspace widgets
- OpenBB Platform Installer
- Widget filtering
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Open source platform integration | OpenBB Workspace Docs" />

This section will highlight how you can run the [OpenBB Platform](https://github.com/OpenBB-finance/OpenBB) locally and integrate 350+ different datasets into the OpenBB Workspace in under 5 minutes.

If you want to learn more about the open source platform, check [our documentation](https://docs.openbb.co/platform).

Here's a video that you can use to follow step-by-step instructions.

:::warning

We've removed the "Data Connectors" tab. So instead of Data Connectors > Add Data > Custom Backend, go to Apps > Connect Backend.

:::

<div style={{position: 'relative', paddingBottom: '56.25%', height: '0', overflow: 'hidden', maxWidth: '100%'}}>
    <iframe 
    style={{position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', display: 'block', margin: '0 auto'}} 
    src="https://www.youtube.com/embed/DFz1WQJbT6c?si=_K3amHb8p4fkTKaj" 
    title="YouTube video player" 
    frameBorder="0" 
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
    referrerPolicy="strict-origin-when-cross-origin" 
    allowFullScreen></iframe>
</div>

## Step by step

The steps are also described below:

1. Download the OpenBB Platform Installer which can be found [here](https://my.openbb.co/app/platform/downloads).

<img className="pro-border-gradient" width="1000" alt="Installer" src="https://github.com/user-attachments/assets/f161c50a-93a4-45db-a504-9c9c45f59082" />


Select the right installer based on your OS and architecture. Then install it.

2. Once installation is complete, find the `OpenBB` folder that has been created in the installation directory selected. Double click on `OpenBB/openbb-api`.

<img className="pro-border-gradient" width="1000" alt="OpenBB API" src="https://github.com/user-attachments/assets/baba4613-8253-431c-bce2-f9764533de41" />

3. A popup should be initiated, and you will be prompted to insert your personal access token (PAT), which can be retrieved from [here](https://my.openbb.co/app/platform/pat).

<img className="pro-border-gradient" width="1000" alt="PAT" src="https://github.com/user-attachments/assets/43ac8f94-a0ce-4c38-9589-94d03322cfd7" />

Note: This assumes that the user has spent time setting up their API keys [here](https://my.openbb.co/app/platform/credentials).

<img className="pro-border-gradient" width="1000" alt="API Keys" src="https://github.com/user-attachments/assets/f3e565c7-d343-421a-bfee-6be7acb79042" />


4. The OpenBB Platform API should now be up and running.

<img className="pro-border-gradient" width="1000" alt="OpenBB Platform API" src="https://github.com/user-attachments/assets/5015a675-7953-4807-98d2-94cdc041fd64" />

5. Finally, you simply need to set up the custom backend on OpenBB Workspace.

:::note
If you are using Brave/Safari you will need an HTTPS connection - see how [here](https://docs.openbb.co/workspace/faqs)
:::

<!-- TODO - We cant do this yet - issue with localhost in name - You can do so by clicking on this [link](http://pro.openbb.co/app/data-connectors?tab=my-data&modal=data-connectors&dcTab=backend&name=OpenBB%20Platform&url=http://localhost:6900). -->

Right click on a dashboard, then click "Add data".

<img className="pro-border-gradient" width="200" alt="Table Widget Example" src="https://openbb-cms.directus.app/assets/0c2c8866-54a8-4137-90b6-bf0db365ca6e.png" />

Then fill in the information as shown below:

<img className="pro-border-gradient" width="800" alt="Table Widget Example" src="https://openbb-cms.directus.app/assets/563aca68-1ec3-48c7-86d8-9129e0e5fd8c.png" />

Or you could also click this link to have it all filed in: https://pro.openbb.co/app?modal=connect-backend&name=OpenBB%20Platform&url=https://127.0.0.1:6900


6. Voila. You are now ready to access 300+ data widgets from OpenBB. For free.

These are some apps available out of the box:

<img className="pro-border-gradient" width="800" alt="Table Widget Example" src="https://openbb-cms.directus.app/assets/9d5f9dba-1603-489c-ad47-ae0f9b7bd0da.png" />

## Advanced - Access this data on mobile

This section will use `ngrok` as the proxy between our platform API endpoints running locally and the internet. You can do this in ngrok free plan.

1. Install ngrok by following [these](https://ngrok.com/docs/getting-started/) instructions.

2. Open a terminal and run `ngrok http 6900`. This assume that the open source platform API is running on http://localhost:6900.

If that runs correctly, you'll get an output similar to the following.

<img className="pro-border-gradient" width="1000" alt="ngrok" src="https://github.com/user-attachments/assets/e938b28b-359b-41e7-b822-6fc400e36819" />

Note the **Forwarding** row. That will contain a public URL that has access to your endpoint.

3. Update your localhost endpoint with the public URL provided by ngrok.

<img className="pro-border-gradient" width="1000" alt="ngrok-2" src="https://github.com/user-attachments/assets/1ceed65b-3601-4a7c-8fd5-ee79cdde3917" />

4. Add a request header as authentication.

Click on "Add Authentication" button, and add the following:

Key: ngrok-skip-browser-warning
Value: x
Location: Header

You have to include the request header `ngrok-skip-browser-warning` with any value in the request header, to bypass the Ngrok Browser Warning.

<img className="pro-border-gradient" width="1000" alt="ngrok-3" src="https://github.com/user-attachments/assets/03968960-e09a-46d8-98b9-718b6ae1b0db" />

You are now ready to access this data on your phone, just ensure that you keep running the API endpoint and ngrok locally.

## Advanced - Filter widgets

If you run the steps above, you will have access to a dozen different data vendors and hundreds of different widgets. However, some of these may not work because you haven't set up the API key for the data vendor or you may not be interested to bring some of those widgets into your OpenBB Workspace.

This section will explore how you can filter the platform integration datasets that are made available on OpenBB.

1. Go to the [widgets filter page](https://my.openbb.co/app/platform/widgets) where you can set the data vendors you are interested and also select the widgets within. Once you are happy you can download the `widget_settings.json` configuration file by clicking on **Download**.

<img className="pro-border-gradient" width="1000" alt="widgets" src="https://github.com/user-attachments/assets/c978c28d-e53a-4f83-9488-dcb524572b86" />

2. In the `OpenBB` folder that has been created when you installed the Platform. There must be a `Settings` folder within. This folder should be the destination of your widget setttings file (`widget_settings.json`), which will serve as the configuration file for your custom backend.

Now, similarly to the previous section, you should:
- Run `OpenBB/openbb-api`
- Set your PAT
- Refresh the connection inside the ["Manage Backends"](https://pro.openbb.co/app) button or follow instructions above to add again.

<!-- (http://pro.openbb.co/app/data-connectors?tab=my-data&modal=data-connectors&dcTab=backend&name=OpenBB%20Platform&url=http://localhost:6900) -->

> Take into consideration that, if you change the default configurations on the OpenBB Platform settings, the URL (http://127.0.0.1:6900) might differ.

<img className="pro-border-gradient" width="1000" alt="widgets-filter" src="https://github.com/user-attachments/assets/692e8da3-57fb-4cff-b566-adf8d5539530" />


---

---
title: Static Files
sidebar_position: 14
description: Learn how to import and manage static files in OpenBB, including structured and unstructured data formats, with support for PDF, CSV, JSON, PNG, and JPG files.
keywords:
- file import
- data import
- structured data
- unstructured data
- file formats
- data management
- file upload
- data visualization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Static Files | OpenBB Workspace Docs" />

OpenBB provides a powerful and intuitive way to import data through file uploads. This feature supports a wide range of file formats, allowing you to seamlessly integrate both structured and unstructured data into your analysis workflow.

## File Upload Process

The file upload interface offers a straightforward way to import your data. You can either select files individually or drag and drop them into the Add Data pop-up window. This flexibility supports importing multiple files simultaneously, regardless of their format.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="File upload interface showing the Add Data pop-up" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/upload_file.png" />
</div>

### File Size Limitations

To ensure optimal performance and processing capabilities, OpenBB maintains a 25MB file size limit. While the system can technically handle larger files, this limit ensures that OpenBB Copilot can process your data effectively and provide meaningful insights.

### Metadata Management

Upon uploading your files, OpenBB automatically generates initial metadata for the widget, including the name and description. You have the flexibility to modify these fields to better suit your needs. Note that Enterprise customers can customize this automatic metadata generation feature.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Metadata configuration interface" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/metadata.png" />
</div>

### Accessing Uploaded Data

Once you've uploaded and configured your data, you can access the resulting widget through two primary methods:

1. The Search feature, which provides quick access to all your widgets
2. The Data Connector page, which offers a comprehensive view of your data sources

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Search interface showing widget results" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/search_widget.png" />
</div>

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Data Connector interface showing available widgets" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/data_connector_widget.png" />
</div>

## Supported File Types

OpenBB supports two main categories of data files, each with specific use cases and visualization capabilities.

### Structured Data

Structured data files, including XLSX, JSON, and CSV formats, are ideal for quantitative analysis and data processing. Currently, XLSX files are limited to single-sheet imports. The system automatically converts these files into interactive widgets that display your data in a clear, organized format.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Example of structured data visualization" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/structured_data.png" />
</div>

### Unstructured Data

OpenBB supports three types of unstructured data, each serving different analytical needs:

- Images (PNG and JPG): Perfect for visual analysis and documentation
- PDF Documents: Ideal for research papers, reports, and documentation
- Text Files (TXT and DOCX): Suitable for notes, research, and qualitative analysis

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="Example of unstructured data visualization" src="https://openbb-web-assets.s3.amazonaws.com/docs/launch_oct_24/unstructured_data.png" />
</div>


---

---
title: Categories and Subcategories
sidebar_position: 2
description: Learn how to organize widgets using categories and subcategories in OpenBB Workspace.
keywords:
- category
- subcategory
- organization
- widgets
- structure
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Categories and Subcategories | OpenBB Workspace Docs" />

The category and subcategory specify the category and subcategory of the widget in the OpenBB Workspace. This is important to organize the widgets in the search for OpenBB Workspace and also for AI agents to find the best widgets to utilize for a given task.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Category and Subcategory Example" src="https://openbb-cms.directus.app/assets/bdedbc4e-64ac-44b4-a176-8f2ca31b99cf.png" />

```python
@register_widget({
    "name": "Markdown Widget with Category and Subcategory",
    "description": "A markdown widget with category and subcategory",
    "type": "markdown",
    "category": "Widgets",
    "subcategory": "Markdown Widgets",
    "endpoint": "markdown_widget_with_category_and_subcategory",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget_with_category_and_subcategory")
def markdown_widget_with_category_and_subcategory():
    """Returns a markdown widget with category and subcategory"""
    return f"# Markdown Widget with Category and Subcategory"
``` 

---

---
title: Error Handling
sidebar_position: 3
description: Learn how to handle errors in your widgets in OpenBB Workspace.
keywords:
- error handling
- HTTPException
- error management
- widgets
- status codes
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Error Handling | OpenBB Workspace Docs" />

This is a simple widget that demonstrates how to handle errors in your widgets.

We display the error detail message in the markdown widget that is returned from the endpoint.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Error Handling Example" src="https://openbb-cms.directus.app/assets/c8671675-d4d0-4b3d-ada1-d4eae95ca859.png" />

```python
@register_widget({
    "name": "Markdown Widget with Error Handling",
    "description": "A markdown widget with error handling",
    "type": "markdown",
    "endpoint": "markdown_widget_with_error_handling",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget_with_error_handling")
def markdown_widget_with_error_handling():
    """Returns a markdown widget with error handling"""
    raise HTTPException(
        status_code=500,
        detail="Error that just occurred"
    )
``` 

---

---
title: Grid Size
sidebar_position: 1
description: Learn about the grid-based layout system for widgets in OpenBB Workspace, including width and height specifications.
keywords:
- grid
- layout
- width
- height
- widgets
- gridData
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Grid Size | OpenBB Workspace Docs" />

Widgets use a grid-based layout system where you can specify their width and height in the `gridData` object. Here's a simple example:

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Error Handling Example" src="https://openbb-cms.directus.app/assets/efd6fb45-063a-4aa7-ae42-64b440bc8682.png" />

```python
@register_widget({
    "name": "Markdown Widget",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget",
    "gridData": {"w": 12, "h": 4},
})
@app.get("/markdown_widget")
def markdown_widget():
    """Returns a markdown widget"""
    return "# Markdown Widget"
```

The grid system works as follows:

**Width (w)**: Horizontal span (10-40 units)

- 12 units is a good default for most widgets
- Use 40 units for full-width widgets

**Height (h)**: Vertical span (4-100 units)

- 4-8 units for simple widgets
- 8-20 units for standard widgets
- Larger values for detailed charts or tables

### Example

This is the code utilized to add the widgets in the image above.

```python
@register_widget({
    "name": "Markdown Widget w-12 x h-20",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget2",
    "gridData": {"w": 12, "h": 20},
})
@app.get("/markdown_widget2")
def markdown_widget2():
    """Returns a markdown widget"""
    return "# Markdown Widget w-12 x h-20"

@register_widget({
    "name": "Markdown Widget w-40 x h-4",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget3",
    "gridData": {"w": 40, "h": 4},
})
@app.get("/markdown_widget3")
def markdown_widget3():
    """Returns a markdown widget"""
    return "# Markdown Widget w-40 x h-4"

@register_widget({
    "name": "Markdown Widget w-14 x h-12",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget4",
    "gridData": {"w": 14, "h": 12},
})
@app.get("/markdown_widget4")
def markdown_widget4():
    """Returns a markdown widget"""
    return "# Markdown Widget w-14 x h-12"

@register_widget({
    "name": "Markdown Widget w-28 x h-8",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget5",
    "gridData": {"w": 28, "h": 8},
})
@app.get("/markdown_widget5")
def markdown_widget5():
    """Returns a markdown widget"""
    return "# Markdown Widget w-28 x h-8"

@register_widget({
    "name": "Markdown Widget w-14 x h-6",
    "description": "A markdown widget",
    "type": "markdown",
    "endpoint": "markdown_widget6",
    "gridData": {"w": 14, "h": 6},
})
@app.get("/markdown_widget6")
def markdown_widget6():
    """Returns a markdown widget"""
    return "# Markdown Widget w-14 x h-6"
```

---

---
title: Refetch Interval
sidebar_position: 6
description: Learn about configuring refetch intervals for widgets in OpenBB Workspace.
keywords:
- refetch interval
- auto refresh
- data updates
- refresh rate
- widget updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Refetch Interval | OpenBB Workspace Docs" />

The refetch interval is the interval at which the widget will be refreshed. Use lower values for real-time data (e.g., 60000 for 1-minute updates). Higher values are recommended for static or slowly changing data.

- Default: 900000 (15 minutes) (minimum 1000)
- Set to `false` to disable automatic refreshing
- Use lower values for real-time data (e.g., 60000 for 1-minute updates)
- Higher values recommended for static or slowly changing data

Note that when interacting with a particular widget this will trigger a refresh.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Short Refetch Interval Example" src="https://openbb-cms.directus.app/assets/4b016db5-5265-4e3b-84f9-506aa4fd9c42.png" />

```python
@register_widget({
    "name": "Markdown Widget with Short Refetch Interval",
    "description": "A markdown widget with a short refetch interval",
    "type": "markdown",
    "endpoint": "markdown_widget_with_short_refetch_interval",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 1000
})
@app.get("/markdown_widget_with_short_refetch_interval")
def markdown_widget_with_short_refetch_interval():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

## Refetch Interval with Stale Time


The refetch interval is set to 10000ms (10 seconds) and the stale time is set to 5000ms (5 seconds). Data older than stale time will make the refresh button in the widget become orange to indicate that the data is stale, and once it reaches the refetch interval, the widget will be refreshed and the indicator will turn green again.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Refetch Interval and Stale Time Example" src="https://openbb-cms.directus.app/assets/9313f7e3-0ab6-42ae-877d-8868c84d044b.png" />

```python
@register_widget({
    "name": "Markdown Widget with Refetch Interval and Shorter Stale Time",
    "description": "A markdown widget with a short refetch interval and a shorter stale time",
    "type": "markdown",
    "endpoint": "markdown_widget_with_refetch_interval_and_shorter_stale_time",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 10000,
    "staleTime": 5000
})
@app.get("/markdown_widget_with_refetch_interval_and_shorter_stale_time")
def markdown_widget_with_refetch_interval_and_shorter_stale_time():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

## Refetch interval with Run Button


The refresh interval is set to 10000ms (10 seconds) but the run button is enabled, which means that the user can refresh the widget manually.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Short Refetch Interval and Run Button Example" src="https://openbb-cms.directus.app/assets/24d777ae-d455-412d-9832-255e28eea11e.png" />

```python
@register_widget({
    "name": "Markdown Widget with Short Refetch Interval and a Run Button",
    "description": "A markdown widget with a short refetch interval and a run button",
    "type": "markdown",
    "endpoint": "markdown_widget_with_short_refetch_interval_and_run_button",
    "gridData": {"w": 12, "h": 4},
    "refetchInterval": 10000,
    "runButton": True
})
@app.get("/markdown_widget_with_short_refetch_interval_and_run_button")
def markdown_widget_with_short_refetch_interval_and_run_button():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
```

---

---
title: Render Functions
sidebar_position: 21
description: Learn how to configure and use custom render functions in OpenBB Workspace to customize data display and interactions.
keywords:
- custom render functions
- OpenBB API
- widget configuration
- data visualization
- interactive widgets
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Render Functions | OpenBB Workspace Docs" />

In the `widgets.json` configuration, you can specify render functions to customize how the data is displayed in the widget - These functions are only compatible with widgets that use a `columnsDefs`.

### Available Render Functions

| Function | Description |
|----------|-------------|
| `greenRed` | Applies a green or red color based on conditions |
| `titleCase` | Converts text to title case |
| `hoverCard` | Displays additional information when hovering over a cell |
| `cellOnClick` | Triggers an action when a cell is clicked |
| `columnColor` | Changes the color of a column based on specified rules |
| `showCellChange` | Highlights cells when their values change via WebSocket updates. Only used with the [Live Grid Widget](/content/workspace/data-widgets/live-grid.md) |

### Render Function Parameters

| Parameter | Type | Description |
|-----------|------|-------------|
| **actionType** | `string` | Specifies the action type for the render function (`"openUrl"`, `"openModal"`, `"openWidget"`, `"groupBy"`, `"sendToAgent"`) |
| **colorValueKey** | `string` | Specifies which field to use for determining the color when showing cell changes |
| **hoverCardData** | `array of strings` | Specifies columns to show in the hover card |
| **colorRules** | `array of objects` | An array of rules for conditional coloring |
| **sendToAgent** | `object` | Configuration for sending data to an AI agent |

### Send to Agent Parameters

| Parameter | Type | Description |
|-----------|------|-------------|
| **markdown** | `string` | Markdown content to send to the agent, supports template variables from row data |
| **agentId** | `string` | (Optional) Specific agent ID to send the message to |

### Color Rules Parameters

| Parameter | Type | Description | Options |
|-----------|------|-------------|---------|
| **condition** | `string` | The condition for applying the color | `"eq"`, `"ne"`, `"gt"`, `"lt"`, `"gte"`, `"lte"`, `"between"` |
| **value** | `number` | The value for the condition | - |
| **range** | `object` | An object specifying `min` and `max` values for the between condition | `{min: number, max: number}` |
| **color** | `string` | The color to apply | Hex code or `"green"`, `"red"`, `"blue"` |
| **fill** | `boolean` | Indicates if the color should fill the cell | `true`/`false` |

## Example Configurations

### Column Color

To use the column color render function, you need to add it to the `columnsDefs` array in your `widgets.json` file for the column you want to apply it to.

The below example would apply a green color to the cell if the value is between 50 and 90, a red color if the value is less than 50, and a blue color if the value is greater than 90.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="color example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/color.png" />
</div>

```json
{
    ...
    "columnsDefs": [
        {
            "field": "Analyst",
            "headerName": "Analyst",
            "renderFn": "columnColor",
            "renderFnParams": {
                "colorRules": [
                    {
                        "condition": "between",
                        "range": {
                            "min": 50,
                            "max": 90
                        },
                        "color": "blue",
                        "fill": true
                    },
                    {
                        "condition": "lt",
                        "value": 50,
                        "color": "red",
                        "fill": true
                    },
                    {
                        "condition": "gt",
                        "value": 90,
                        "color": "green",
                        "fill": true
                    }
                ]
            }
        }
    ]
}
```

### Multiple Render Functions and Color Rules

If you want to use multiple render functions, you can pass an array of render functions to the `renderFn` parameter. Below is an example of a column that uses both the `cellOnClick` and `columnColor` render functions. We also specify the `colorValueKey` so that the `columnColor` render function knows which field to use for determining the color. In this case we want to color the symbol cell based on the `Analyst` field.

```json
{
    ...
      "columnsDefs": [
          {
            "field": "Symbol",
            "headerName": "Symbol",
            "renderFn": [
              "cellOnClick",
              "columnColor"
            ],
            "renderFnParams": {
              "actionType": "groupBy",
              "groupByParamName": "symbol",
              "colorValueKey": "Analyst",
              "colorRules": [
                {
                  "condition": "eq",
                  "value": "Sarah Johnson",
                  "color": "blue",
                  "fill": true
                }
              ]
            }
        },
      ] 
}
```

### Hover Card

To use the hover card render function, you need to add it to the `columnsDefs` array in your `widgets.json` file for the column you want to apply it to.

<div style={{display: 'flex', justifyContent: 'center'}}>
  <img className="pro-border-gradient" width="600" alt="color example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/hover+data.png" />
</div>

```json
{
    ...
    "columnsDefs": [
          {
            "field": "analyst",
            "headerName": "Analyst",
            "renderFn": "hoverCard",
            "renderFnParams": {
              "hoverCard": {
                "cellField": "value",
                "title": "Analyst Details",
                "markdown": "### {value}\n- **Description:** {description}\n- **Additional Info:** {additionalInfo}"
              }
            }
          }
        ]
}
```

The hover card example would use the below data to display the hover card.

```json
[
  {
    "id": 1,
    "name": "Item 1",
    "analyst": {
      "value": "Cool Guy 1",
      "description": "This is a detailed description for Item 1, but it's not as long as the others",
      "additionalInfo": "Some additional information about Item 1"
    }
  },
  {
    "id": 2,
    "name": "Item 2",
    "analyst": {
      "value": "Cool Guy 2",
      "description": "This is a detailed description for Item 2, but it's a bit longer than the first one",
      "additionalInfo": "Some additional information about Item 2"
    }
  },
  {
    "id": 3,
    "name": "Item 3",
    "analyst": {
      "value": "Cool Guy 3",
      "description": "This is a detailed description for Item 3, but it's the longest one yet and it's still going",
      "additionalInfo": "Some additional information about Item 3"
    }
  }
]
```

#### Additional Notes for Hover Card

- You can pass a simple configuration to get a hover card with default settings, excluding the title and value.
- The `hoverCard` render function allows for markdown customization, providing flexibility in how information is displayed.

### Prefix and Suffix

The `prefix` and `suffix` parameters can also be used in the `columnsDefs` to add a prefix or suffix to the column values. [See the widgets-json-reference](/content/workspace/widgets-json-reference.md) for more information.

### Send to Agent

The `sendToAgent` action type allows users to click on table cells to send contextual data directly to an AI agent for analysis. This is particularly useful for getting insights about specific data points or rows.

```json
{
    ...
    "columnsDefs": [
        {
            "field": "company",
            "headerName": "Company",
            "renderFn": "cellOnClick",
            "renderFnParams": {
                "actionType": "sendToAgent",
                "sendToAgent": {
                    "markdown": "Please analyze the company **{company}** with the following details:\n\n- **Revenue:** ${revenue}M\n- **Growth Rate:** {growth_rate}%\n- **Market Cap:** ${market_cap}B\n- **Sector:** {sector}\n\nProvide insights on the company's financial performance, growth prospects, and market position."
                }
            }
        },
        {
            "field": "revenue",
            "headerName": "Revenue (M)",
            "renderFn": "cellOnClick",
            "renderFnParams": {
                "actionType": "sendToAgent",
                "sendToAgent": {
                    "markdown": "Analyze the revenue figure of **${revenue}M** for {company}. How does this compare to industry standards in the {sector} sector?",
                    "agentId": "financial-analyst-agent"
                }
            }
        }
    ]
}
```

#### Template Variables

The `markdown` content in `sendToAgent` supports template variables using curly braces `{}`. You can reference any field from the row data:

- `{company}` - References the company field value
- `{revenue}` - References the revenue field value  
- `{growth_rate}` - References the growth_rate field value
- And so on for any field in your data


---

---
title: Run Button
sidebar_position: 4
description: Learn about the run button functionality in OpenBB Workspace widgets.
keywords:
- run button
- manual refresh
- widget control
- refresh
- manual execution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Run Button | OpenBB Workspace Docs" />

The run button allows you to run a widget by clicking it rather than having it run automatically when you change a parameter. It is located in the top right corner of the widget and replaces the refresh button. A Ctrl-click on the run button performs a hard refresh, while a regular click runs the new parameters.

Setting the refreshInterval will allow you to still refresh the widget automatically, but it is off by default when using the run button.

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Run Button Example" src="https://openbb-cms.directus.app/assets/48d7d762-a39f-46f3-b205-2b1ffe13c3ef.png" />

```python
@register_widget({
    "name": "Markdown Widget with Run Button",
    "description": "A markdown widget with a run button",
    "type": "markdown",
    "endpoint": "markdown_widget_with_run_button",
    "gridData": {"w": 12, "h": 4},
    "runButton": True,
})
@app.get("/markdown_widget_with_run_button")
def markdown_widget_with_run_button():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

---

---
title: Stale Time
sidebar_position: 5
description: Learn about configuring stale time for widgets in OpenBB Workspace.
keywords:
- stale time
- data freshness
- refresh indicators
- data staleness
- widget updates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Stale Time | OpenBB Workspace Docs" />

The stale time is the time after which the data will be considered stale. You will see a refresh button in the widget becoming orange to indicate that the data is stale.

- Default: 300000 (5 minutes)
- Data older than this value will trigger a refresh when the widget is viewed again
- Should typically be less than or equal to `refetchInterval`
- Set higher for data that updates infrequently

<img className="pro-border-gradient" width="800" alt="Markdown Widget with Stale Time Example" src="https://openbb-cms.directus.app/assets/d601fda5-0ea3-40cc-8290-d0789ccb0e33.png" />

```python
@register_widget({
    "name": "Markdown Widget with Stale Time",
    "description": "A markdown widget with stale time",
    "type": "markdown",
    "endpoint": "markdown_widget_with_stale_time",
    "gridData": {"w": 12, "h": 4},
    "staleTime": 5000
})
@app.get("/markdown_widget_with_stale_time")
def markdown_widget_with_stale_time():
    """Returns a markdown widget with current time"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"### Current time: {current_time}"
``` 

---

---
title: Advanced Dropdown
sidebar_position: 25
description: Learn how to implement and use advanced dropdown parameters in OpenBB Workspace widgets, including dynamic options from endpoints and additional information display
keywords:
- advanced dropdown
- dynamic dropdown
- endpoint dropdown
- widget parameters
- enhanced selection
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Advanced Dropdown | OpenBB Workspace Docs" />

Sometimes you may want to pass a list from an endpoint rather then specify the options in the `widgets.json` file.

By using `type: "endpoint"`, you'll need to specify an `optionsEndpoint` that returns the available options.

Below is an example of an advanced dropdown parameter that includes additional information for each option.

<img className="pro-border-gradient" width="800" alt="Advanced Dropdown Parameter Example" src="https://openbb-cms.directus.app/assets/9ae41bfc-65ad-4578-aeeb-efca97112bfc.png" />

The dropdown options are fetched from an endpoint and can include extra details.

```python
@app.get("/advanced_dropdown_options")
def advanced_dropdown_options():
    """Returns a list of stocks with their details"""
    return [
        {
            "label": "Apple Inc.",
            "value": "AAPL", 
            "extraInfo": {
                "description": "Technology Company",
                "rightOfDescription": "NASDAQ"
            }
        },
        {
            "label": "Microsoft Corporation",
            "value": "MSFT",
            "extraInfo": {
                "description": "Software Company", 
                "rightOfDescription": "NASDAQ"
            }
        },
        {
            "label": "Google",
            "value": "GOOGL",
            "extraInfo": {
                "description": "Search Engine",
                "rightOfDescription": "NASDAQ"
            }
        }
    ]
```

Note how the `optionsEndpoint` is pointing to the endpoint `"/advanced_dropdown_options"`.

We also set the `style` parameter to `popupWidth` to `450` to set the width of the dropdown.

```python
@register_widget({
    "name": "Markdown Widget with Multi Select Advanced Dropdown",
    "description": "A markdown widget with a multi select advanced dropdown parameter",
    "endpoint": "markdown_widget_with_multi_select_advanced_dropdown",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "stock_picker",
            "description": "Select a stock to analyze",
            "value": "AAPL",
            "label": "Select Stock",
            "type": "endpoint",
            "multiSelect": True,
            "optionsEndpoint": "/advanced_dropdown_options",
            "style": {
                "popupWidth": 450
            }
        }
    ]
})
@app.get("/markdown_widget_with_multi_select_advanced_dropdown")
def markdown_widget_with_multi_select_advanced_dropdown(stock_picker: str):
    """Returns a markdown widget with multi select advanced dropdown parameter"""
    return f"""# Multi Select Advanced Dropdown
Selected stocks: {stock_picker}
""" 

---

---
title: Boolean Toggle
sidebar_position: 22
description: Learn how to implement and use boolean toggle parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- boolean toggle
- switch
- toggle
- widget parameters
- enable/disable
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Boolean Toggle | OpenBB Workspace Docs" />

A widget that includes a boolean toggle parameter allowing users to enable or disable features. The toggle state is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Boolean Toggle Parameter Example" src="https://openbb-cms.directus.app/assets/c4cc2d7f-c8f0-417c-a7ac-3842150e1aa1.png" />

```python
@register_widget({
    "name": "Markdown Widget with Boolean Toggle",
    "description": "A markdown widget with a boolean parameter",
    "endpoint": "markdown_widget_with_boolean",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "condition",
            "description": "Enable or disable this feature",
            "label": "Toggle Option",
            "type": "boolean",
            "value": True,
        }
    ]
})
@app.get("/markdown_widget_with_boolean")
def markdown_widget_with_boolean(condition: bool):
    """Returns a markdown widget with boolean parameter"""
    return f"""# Boolean Toggle
Current state: {'Enabled' if condition else 'Disabled'}
""" 

---

---
title: Cell Click Grouping
sidebar_position: 28
description: Learn how to implement cell click grouping in OpenBB Workspace widgets, allowing users to click on cells in a table to update related widgets
keywords:
- cell click grouping
- table cell click
- interactive tables
- widget parameters
- cell interaction
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Cell Click Grouping | OpenBB Workspace Docs" />

A widget that demonstrates how to use cell clicks to trigger parameter updates across multiple widgets. This feature allows users to click on cells in a table to automatically update related widgets with the selected data.

<img className="pro-border-gradient" width="1000" alt="Cell Click Grouping Example" src="https://openbb-cms.directus.app/assets/9e3fe731-2a87-4c85-8650-0404c3c400b2.png" />

The implementation consists of three main components:

1. An endpoint that provides a list of available stock symbols that can be selected in the widgets.

```python
@app.get("/get_tickers_list")
def get_tickers_list():
    """Returns a list of available stock symbols"""
    return [
        {"label": "Apple Inc.", "value": "AAPL"},
        {"label": "Microsoft Corporation", "value": "MSFT"},
        {"label": "Google", "value": "GOOGL"},
        {"label": "Amazon", "value": "AMZN"},
        {"label": "Tesla", "value": "TSLA"}
    ]
```

2. A table widget that displays stock data and allows users to click on symbol cells to update related widgets. The key feature is the `cellOnClick` renderFn in the symbol column, which triggers the `groupBy` action when a cell is clicked.

```python
@register_widget({
    "name": "Table widget with grouping by cell click",
    "description": "A table widget that groups data when clicking on symbols. Click on a symbol to update all related widgets.",
    "type": "table",
    "endpoint": "table_widget_with_grouping_by_cell_click",
    "params": [
        {
            "paramName": "symbol",  # This parameter name is crucial - it's used for grouping
            "description": "Select stocks to display",
            "value": "AAPL",
            "label": "Symbol",
            "type": "endpoint",
            "optionsEndpoint": "/get_tickers_list",
            "multiSelect": False,
            "show": True
        }
    ],
    "data": {
        "table": {
            "showAll": True,
            "columnsDefs": [
                {
                    "field": "symbol",
                    "headerName": "Symbol",
                    "cellDataType": "text",
                    "width": 120,
                    "pinned": "left",
                    "renderFn": "cellOnClick",
                    "renderFnParams": {
                        "actionType": "groupBy",
                        "groupByParamName": "symbol"
                    }
                },
                {
                    "field": "price",
                    "headerName": "Price",
                    "cellDataType": "number",
                    "formatterFn": "none",
                    "width": 120
                },
                {
                    "field": "change",
                    "headerName": "Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 120
                },
                {
                    "field": "volume",
                    "headerName": "Volume",
                    "cellDataType": "number",
                    "formatterFn": "int",
                    "width": 150
                }
            ]
        }
    },
    "gridData": {
        "w": 20,
        "h": 9
    }
})
```

3. A markdown widget that displays detailed information about the selected stock. This widget uses the same `symbol` parameter as the table widget, so it automatically updates when a symbol is clicked in the table.

```python
@register_widget({
    "name": "Widget managed by parameter from cell click on table widget",
    "description": "This widget demonstrates how to use the grouped symbol parameter from a table widget. When a symbol is clicked in the table, this widget will automatically update to show details for the selected symbol.",
    "type": "markdown",
    "endpoint": "widget_managed_by_parameter_from_cell_click_on_table_widget",
    "params": [
        {
            "paramName": "symbol",  # Must match the groupByParamName in the table widget
            "description": "The symbol to get details for",
            "value": "AAPL",
            "label": "Symbol",
            "type": "endpoint",
            "optionsEndpoint": "/get_tickers_list",
            "show": True
        }
    ],
    "gridData": {
        "w": 20,
        "h": 6
    }
})
```

This functionality is achieved through three key components:

1. Both widgets must share the same `paramName` (in this case "symbol") to enable parameter synchronization
2. The table widget's `cellOnClick` renderFn must be configured with `actionType: "groupBy"` and specify the `groupByParamName` as "symbol"
3. Both widgets must reference the same endpoint (`/get_tickers_list`) for their options data

The interaction flow works as follows:

1. When a user clicks a symbol cell in the table, the `cellOnClick` renderFn activates the `groupBy` action
2. The `groupBy` action then updates the shared `symbol` parameter value
3. Any widget that uses the `symbol` parameter will automatically refresh to display data for the newly selected symbol

This implementation creates an intuitive user experience where selecting a symbol in the table instantly updates all connected widgets with the corresponding stock information. 

---

---
title: Date Picker
sidebar_position: 20
description: Learn how to implement and use date picker parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- date picker
- date input
- calendar
- widget parameters
- date selection
- datetime
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Date Picker | OpenBB Workspace Docs" />

A widget that includes a date picker parameter allowing users to select a specific date. The selected date is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Date Picker Parameter Example" src="https://openbb-cms.directus.app/assets/9adb2a80-cca6-4efd-a106-f76d570f0a5c.png" />

```python
@register_widget({
    "name": "Markdown Widget with Date Picker",
    "description": "A markdown widget with a date picker parameter",
    "endpoint": "markdown_widget_with_date_picker",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "date_picker",
            "description": "Choose a date to display",
            "value": "$currentDate-1d",
            "label": "Select Date",
            "type": "date"
        }
    ]
})
@app.get("/markdown_widget_with_date_picker")
def markdown_widget_with_date_picker(
    date_picker: str = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
):
    """Returns a markdown widget with date picker parameter"""
    return f"""# Date Picker
Selected date: {date_picker}
"""
```

Note : We use the `$currentDate` variable to get the current date. More info here : [Date Modifier in widgets.json](../widgets-json-reference#date-modifier)


---

---
title: Dependent Dropdown
sidebar_position: 26
description: Learn how to implement and use dependent dropdown parameters in OpenBB Workspace widgets, where options in one dropdown depend on the selection in another
keywords:
- dependent dropdown
- cascading dropdown
- linked dropdown
- widget parameters
- dynamic options
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dependent Dropdown | OpenBB Workspace Docs" />

A widget that demonstrates how to create dependent dropdowns where the options in one dropdown depend on the selection in another dropdown. This is useful when you want to filter options in a second dropdown based on the selection in the first dropdown.

<img className="pro-border-gradient" width="800" alt="Dependent Dropdown Parameters Example" src="https://openbb-cms.directus.app/assets/4900061b-078a-4294-8d76-a36f55bbad80.png" />

<img className="pro-border-gradient" width="800" alt="Dependent Dropdown Parameters Example 2" src="https://openbb-cms.directus.app/assets/2f16ae18-78c4-4657-b569-8faed443fce1.png" />

First, we create an endpoint that will provide the filtered list of documents based on the selected category. This endpoint takes a `category` parameter and returns only the documents that match that category.

```python
@app.get("/document_options")
def get_document_options(category: str = "all"):
    """Get filtered list of documents based on category"""
    SAMPLE_DOCUMENTS = [
        {
            "name": "Q1 Report",
            "category": "reports"
        },
        {
            "name": "Q2 Report",
            "category": "reports"
        },
        {
            "name": "Investor Presentation",
            "category": "presentations"
        },
        {
            "name": "Product Roadmap",
            "category": "presentations"
        }
    ]

    filtered_docs = (
        SAMPLE_DOCUMENTS if category == "all"
        else [doc for doc in SAMPLE_DOCUMENTS if doc["category"] == category]
    )
    
    return [
        {
            "label": doc["name"],
            "value": doc["name"]
        }
        for doc in filtered_docs
    ]
```

Next, we create the widget that uses these dependent dropdowns. The widget has two parameters:

1. A category dropdown that lets users select between "All", "Reports", or "Presentations"
2. A document dropdown that shows documents filtered based on the selected category

The key to making this work is the `optionsParams` field in the second parameter, which uses `$category` to reference the value from the first parameter. This creates the dependency between the two dropdowns. These parameters are passed to the endpoint as a query parameter.

```python
@register_widget({
    "name": "Dropdown Dependent Widget",
    "description": "A simple widget with a dropdown depending on another dropdown",
    "endpoint": "dropdown_dependent_widget",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "category",
            "description": "Category of documents to fetch",
            "value": "all",
            "label": "Category",
            "type": "text",
            "options": [
                {"label": "All", "value": "all"},
                {"label": "Reports", "value": "reports"},
                {"label": "Presentations", "value": "presentations"}
            ]
        },
        {
            "paramName": "document_type",
            "description": "Document to display",
            "label": "Select Document",
            "type": "endpoint",
            "optionsEndpoint": "/document_options",
            "optionsParams": {
                "category": "$category"
            }
        },
    ]
})
@app.get("/dropdown_dependent_widget")
def dropdown_dependent_widget(category: str = "all", document_type: str = "all"):
    """Returns a dropdown dependent widget"""
    return f"""# Dropdown Dependent Widget
- Selected category: **{category}**
- Selected document: **{document_type}**
"""
```

When a user selects a category in the first dropdown, the second dropdown will automatically update to show only the documents that belong to that category. For example:
- If "Reports" is selected, only "Q1 Report" and "Q2 Report" will appear in the second dropdown
- If "Presentations" is selected, only "Investor Presentation" and "Product Roadmap" will appear
- If "All" is selected, all documents will be shown 

---

---
title: Dropdown
sidebar_position: 24
description: Learn how to implement and use dropdown parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- dropdown
- select
- combobox
- widget parameters
- selection list
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dropdown | OpenBB Workspace Docs" />

A widget that includes a dropdown parameter allowing users to select from predefined options. The selected option is passed to the widget as a parameter.

Note that multiSelect can be turned on and off.

<img className="pro-border-gradient" width="800" alt="Dropdown Parameter Example" src="https://openbb-cms.directus.app/assets/d657c7d2-e096-42ea-9d9a-92a10093afd0.png" />

```python
@register_widget({
    "name": "Markdown Widget with Dropdown",
    "description": "A markdown widget with a dropdown parameter",
    "endpoint": "markdown_widget_with_dropdown",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "days_picker",
            "description": "Number of days to look back",
            "value": "1",
            "label": "Select Days",
            "type": "text",
            "multiSelect": True,
            "options": [
                {
                    "value": "1",
                    "label": "1"
                },
                {
                    "value": "5",
                    "label": "5"
                },
                {
                    "value": "10",
                    "label": "10"
                },
                {
                    "value": "20",
                    "label": "20"
                },
                {
                    "value": "30",
                    "label": "30"
                }
            ]
        }
    ]
})
@app.get("/markdown_widget_with_dropdown")
def markdown_widget_with_dropdown(days_picker: str):
    """Returns a markdown widget with dropdown parameter"""
    return f"""# Dropdown
Selected days: {days_picker}
""" 

---

---
title: Input Form
sidebar_position: 27
description: Input Form
keywords:
- input
- form
- configuration
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Input Form | OpenBB Workspace Docs" />


The form parameter type (`"type": "form"`) allows you to create complex input forms with a parameter. This is useful if you want to update some data that is tied to the table or chart and have it update when the form is submitted. Possible use cases are updating a database entry or sending data to an endpoint to be processed then a chart created.

Forms require a dedicated endpoint and are always sent with a POST request. This endpoint will be called when the form is submitted.

You can see a full example of this in the [Form Example](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/advanced_examples/form_parameter) section.

<img className="pro-border-gradient" width="500" alt="form-parameter" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/form-parameter.png" />

A form can include various input types:

- **Date**: Select a specific date for the data
- **Number**: Numeric input field
- **Dropdown**: Selection menu (can be populated dynamically from an API)
- **Text**: Text input field
- **Button**: Button to trigger the data submission

<details>
<summary mdxType="summary">Example form parameter configuration</summary>

```json
{
  "form_submit_widget": {
    "name": "Financial Entry Form",
    "description": "Example of a financial data entry form",
    "category": "forms",
    "searchCategory": "form",
    "endpoint": "all_forms",
    "type": "table",
    "gridData": {
      "w": 20,
      "h": 9
    },
    "params": [
      {
        "paramName": "form",
        "description": "Form example",
        "type": "form",
        "endpoint": "form_submit",
        "inputParams": [
          {
            "paramName": "client_first_name",
            "type": "text",
            "value": "",
            "label": "First Name",
            "description": "Client's first name"
          },
          {
            "paramName": "client_last_name",
            "type": "text",
            "value": "",
            "label": "Last Name",
            "description": "Client's last name"
          },
          {
            "paramName": "investment_types",
            "type": "text",
            "value": null,
            "label": "Investment Types",
            "description": "Selected investment vehicles",
            "multiSelect": true,
            "options": [
              {
                "label": "Stocks",
                "value": "stocks"
              },
              {
                "label": "Bonds",
                "value": "bonds"
              },
              {
                "label": "Mutual Funds",
                "value": "mutual_funds"
              },
              {
                "label": "ETFs",
                "value": "etfs"
              },
              {
                "label": "Real Estate",
                "value": "real_estate"
              },
              {
                "label": "Commodities",
                "value": "commodities"
              },
              {
                "label": "Cryptocurrency",
                "value": "cryptocurrency"
              },
              {
                "label": "Options",
                "value": "options"
              },
              {
                "label": "Futures",
                "value": "futures"
              },
              {
                "label": "Retirement Accounts",
                "value": "retirement_accounts"
              },
              {
                "label": "CDs",
                "value": "cds"
              }
            ]
          },
          {
            "paramName": "risk_profile",
            "type": "text",
            "value": "",
            "label": "Risk Profile",
            "description": "Client risk tolerance assessment"
          },
          {
            "paramName": "add_record",
            "type": "button",
            "value": true,
            "label": "Add Client",
            "description": "Add client record"
          },
          {
            "paramName": "update_record",
            "type": "button",
            "value": true,
            "label": "Update Client",
            "description": "Update client record"
          }
        ]
      }
    ]
  }
}
```

</details>

### Backend Implementation

For forms to work properly, you need to implement two endpoints in your backend:

1. **POST endpoint** to handle form submission (specified in the `endpoint` field of the form parameter)
2. **GET endpoint** to retrieve and display the updated data (specified in the widget's main `endpoint` field)

Below you can find a quick example of how to implement the endpoints and have a form that updates a table.

<details>
<summary mdxType="summary">Example backend implementation</summary>

```python
...
ALL_FORMS = []

# Submit form endpoint to handle the form submission
@app.post("/form_submit")
async def form_submit(params: dict) -> JSONResponse:
    global ALL_FORMS
    
    # Check if first name and last name are provided
    if not params.get("client_first_name") or not params.get("client_last_name"):
        # IMPORTANT: Even with a 400 status code, the error message is passed to the frontend
        # and can be displayed to the user in the OpenBB widget
        return JSONResponse(
            status_code=400,
            content={"error": "Client first name and last name are required"}
        )
    
    # Check if investment types and risk profile are provided
    if not params.get("investment_types") or not params.get("risk_profile"):
        return JSONResponse(
            status_code=400,
            content={"error": "Investment types and risk profile are required"}
        )

    # Check if add_record or update_record is provided
    add_record = params.pop("add_record", None)
    if add_record:
        ALL_FORMS.append(
            {k: ",".join(v) if isinstance(v, list) else v for k, v in params.items()}
        )
    update_record = params.pop("update_record", None)
    if update_record:
        for record in ALL_FORMS:
            if record["client_first_name"] == params.get("client_first_name") and record[
                "client_last_name"
            ] == params.get("client_last_name"):
                record.update(params)
    
    # IMPORTANT: The OpenBB Workspace only checks for a 200 status code from this endpoint
    # The actual content returned doesn't matter for the widget refresh mechanism
    # After a successful submission, Workspace will automatically refresh the widget
    # by calling the GET endpoint defined in the widget configuration
    return JSONResponse(content={"success": True})


# Get all forms
@app.get("/all_forms")
async def all_forms() -> list:
    print(ALL_FORMS)
    # IMPORTANT: This GET endpoint is called by the OpenBB widget after form submission
    # The widget refresh mechanism works by:
    # 1. User submits form (POST to /form_submit)
    # 2. If POST returns 200, widget automatically refreshes
    # 3. Widget refresh calls this GET endpoint to fetch updated data
    # 4. This function must return ALL data needed to display the updated widget
    return (
        ALL_FORMS
        if ALL_FORMS
        else [
            {"client_first_name": None, "client_last_name": None, "investment_types": None, "risk_profile": None}
        ]
    )
```

</details>


---

---
title: Number Input
sidebar_position: 23
description: Learn how to implement and use number input parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- number input
- numeric input
- number field
- widget parameters
- numerical entry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Number Input | OpenBB Workspace Docs" />

A widget that includes a number input parameter allowing users to enter numerical values. The entered number is passed to the widget as a parameter.

<img className="pro-border-gradient" width="800" alt="Number Input Parameter Example" src="https://openbb-cms.directus.app/assets/dc2395cf-a452-46a6-9ae4-e2be882a21c2.png" />

```python
@register_widget({
    "name": "Markdown Widget with Number Input",
    "description": "A markdown widget with a number input parameter",
    "endpoint": "markdown_widget_with_number_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "number_box",
            "description": "Enter a number",
            "value": 20,
            "label": "Enter Number",
            "type": "number"
        }
    ]
})
@app.get("/markdown_widget_with_number_input")
def markdown_widget_with_number_input(number_box: int):
    """Returns a markdown widget with number input parameter"""
    return f"""# Number Input
Entered number: {number_box}
""" 

---

---
title: Parameter Grouping
sidebar_position: 29
description: Learn how to implement parameter grouping in OpenBB Workspace widgets, allowing multiple widgets to share and respond to the same parameter input
keywords:
- parameter grouping
- shared parameters
- synchronized parameters
- widget parameters
- parameter synchronization
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Parameter Grouping | OpenBB Workspace Docs" />

Parameter grouping allows multiple widgets to share and respond to the same parameter input. When widgets are grouped, you only need to select a value once to update all related widgets simultaneously. This is useful for dashboards where multiple widgets display different aspects of the same data source. If multiple widgets use the same `paramName` and `options` parameter configuration, they can be grouped together.

Below is an example of how to group parameters across multiple widgets, allowing them to share and synchronize parameter values.

<img className="pro-border-gradient" width="1000" alt="Parameter Grouping Example" src="https://openbb-cms.directus.app/assets/0cac96ae-6915-4183-b5db-a02e2be96fe0.png" />

The implementation consists of three main components that work together to create a cohesive user interface:

1. Provides a list of available car manufacturers that can be selected in the widgets.

```python
@app.get("/company_options")
def get_company_options():
    """Returns a list of available car manufacturers"""
    return [
        {"label": "Toyota Motor Corporation", "value": "TM"},
        {"label": "Volkswagen Group", "value": "VWAGY"},
        {"label": "General Motors", "value": "GM"},
        {"label": "Ford Motor Company", "value": "F"},
        {"label": "Tesla Inc.", "value": "TSLA"}
    ]
```

2. Displays performance metrics for the selected car manufacturer in a table format. This widget uses parameters (`company` and `year`) that are grouped with other widgets. As it is possible to see by the color box before the parameter and the same id. When a user selects a company or year, all widgets using these parameters will update automatically.

```python
@register_widget({
    "name": "Car Manufacturer Performance",
    "description": "Displays performance metrics for the selected car manufacturer",
    "type": "table",
    "endpoint": "company_performance",
    "gridData": {"w": 16, "h": 8},
    "params": [
        {
            "paramName": "company",  # Shared paramName with company_details widget
            "description": "Select a car manufacturer to view performance",
            "value": "TM",
            "label": "Manufacturer",
            "type": "endpoint",
            "optionsEndpoint": "/company_options"  # Shared endpoint with company_details widget
        },
        {
            "paramName": "year",  # Shared paramName with company_details widget
            "description": "Select model year to view performance",
            "value": "2024",
            "label": "Model Year",
            "type": "text",
            "options": [
                {"label": "2024", "value": "2024"},
                {"label": "2023", "value": "2023"},
                {"label": "2022", "value": "2022"}
            ]
        }
    ],
    "data": {
        "table": {
            "showAll": True,
            "columnsDefs": [
                {
                    "field": "metric",
                    "headerName": "Metric",
                    "cellDataType": "text",
                    "width": 150
                },
                {
                    "field": "value",
                    "headerName": "Value",
                    "cellDataType": "text",
                    "width": 150
                },
                {
                    "field": "change",
                    "headerName": "Change",
                    "cellDataType": "number",
                    "formatterFn": "percent",
                    "renderFn": "greenRed",
                    "width": 150
                }
            ]
        }
    }
})
@app.get("/company_performance")
def get_company_performance(company: str, year: str = "2024"):
    """Returns car manufacturer performance metrics"""
    performance_data = {
        "TM": {
            "2024": [
                {"metric": "Global Sales", "value": "10.5M", "change": 5.2},
                {"metric": "EV Sales", "value": "1.2M", "change": 45.8},
                {"metric": "Operating Margin", "value": "8.5%", "change": 1.2},
                {"metric": "R&D Investment", "value": "$12.5B", "change": 15.3}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "9.98M", "change": 3.1},
                {"metric": "EV Sales", "value": "0.82M", "change": 35.2},
                {"metric": "Operating Margin", "value": "7.3%", "change": 0.8},
                {"metric": "R&D Investment", "value": "$10.8B", "change": 12.5}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "9.67M", "change": 1.2},
                {"metric": "EV Sales", "value": "0.61M", "change": 25.4},
                {"metric": "Operating Margin", "value": "6.5%", "change": -0.5},
                {"metric": "R&D Investment", "value": "$9.6B", "change": 8.7}
            ]
        },
        "VWAGY": {
            "2024": [
                {"metric": "Global Sales", "value": "9.2M", "change": 4.8},
                {"metric": "EV Sales", "value": "1.5M", "change": 52.3},
                {"metric": "Operating Margin", "value": "7.8%", "change": 1.5},
                {"metric": "R&D Investment", "value": "$15.2B", "change": 18.5}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "8.78M", "change": 3.2},
                {"metric": "EV Sales", "value": "0.98M", "change": 42.1},
                {"metric": "Operating Margin", "value": "6.3%", "change": 0.9},
                {"metric": "R&D Investment", "value": "$12.8B", "change": 15.2}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "8.5M", "change": 1.8},
                {"metric": "EV Sales", "value": "0.69M", "change": 32.5},
                {"metric": "Operating Margin", "value": "5.4%", "change": -0.7},
                {"metric": "R&D Investment", "value": "$11.1B", "change": 10.8}
            ]
        },
        "GM": {
            "2024": [
                {"metric": "Global Sales", "value": "6.8M", "change": 3.5},
                {"metric": "EV Sales", "value": "0.8M", "change": 48.2},
                {"metric": "Operating Margin", "value": "8.2%", "change": 1.8},
                {"metric": "R&D Investment", "value": "$9.5B", "change": 16.5}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "6.57M", "change": 2.1},
                {"metric": "EV Sales", "value": "0.54M", "change": 38.5},
                {"metric": "Operating Margin", "value": "6.4%", "change": 1.2},
                {"metric": "R&D Investment", "value": "$8.15B", "change": 14.2}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "6.43M", "change": 0.8},
                {"metric": "EV Sales", "value": "0.39M", "change": 28.7},
                {"metric": "Operating Margin", "value": "5.2%", "change": -0.5},
                {"metric": "R&D Investment", "value": "$7.13B", "change": 9.8}
            ]
        },
        "F": {
            "2024": [
                {"metric": "Global Sales", "value": "4.2M", "change": 2.8},
                {"metric": "EV Sales", "value": "0.6M", "change": 42.5},
                {"metric": "Operating Margin", "value": "7.5%", "change": 1.5},
                {"metric": "R&D Investment", "value": "$8.2B", "change": 15.8}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "4.08M", "change": 1.5},
                {"metric": "EV Sales", "value": "0.42M", "change": 35.2},
                {"metric": "Operating Margin", "value": "6.0%", "change": 1.0},
                {"metric": "R&D Investment", "value": "$7.08B", "change": 13.5}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "4.02M", "change": 0.5},
                {"metric": "EV Sales", "value": "0.31M", "change": 25.8},
                {"metric": "Operating Margin", "value": "5.0%", "change": -0.8},
                {"metric": "R&D Investment", "value": "$6.24B", "change": 8.9}
            ]
        },
        "TSLA": {
            "2024": [
                {"metric": "Global Sales", "value": "2.1M", "change": 35.2},
                {"metric": "EV Sales", "value": "2.1M", "change": 35.2},
                {"metric": "Operating Margin", "value": "15.5%", "change": 3.7},
                {"metric": "R&D Investment", "value": "$4.5B", "change": 25.8}
            ],
            "2023": [
                {"metric": "Global Sales", "value": "1.55M", "change": 28.5},
                {"metric": "EV Sales", "value": "1.55M", "change": 28.5},
                {"metric": "Operating Margin", "value": "11.8%", "change": 2.5},
                {"metric": "R&D Investment", "value": "$3.58B", "change": 22.3}
            ],
            "2022": [
                {"metric": "Global Sales", "value": "1.21M", "change": 21.8},
                {"metric": "EV Sales", "value": "1.21M", "change": 21.8},
                {"metric": "Operating Margin", "value": "9.3%", "change": 1.8},
                {"metric": "R&D Investment", "value": "$2.93B", "change": 18.5}
            ]
        }
    }
    
    return performance_data.get(company, {}).get(year, [
        {"metric": "No Data", "value": "N/A", "change": 0}
    ])
```

3. Displays detailed information about the selected car manufacturer in a markdown format. Like the Performance widget, it uses the same shared parameters and updates automatically when they change. The widget includes error handling to display fallback data when the selected company or year is not found.

```python
@register_widget({
    "name": "Car Manufacturer Details",
    "description": "Displays detailed information about the selected car manufacturer",
    "type": "markdown",
    "endpoint": "company_details",
    "gridData": {"w": 16, "h": 8},
    "params": [
        {
            "paramName": "company",  # Shared paramName with company_performance widget
            "description": "Select a car manufacturer to view details",
            "value": "TM",
            "label": "Manufacturer",
            "type": "endpoint",
            "optionsEndpoint": "/company_options"  # Shared endpoint with company_performance widget
        },
        {
            "paramName": "year",  # Shared paramName with company_performance widget
            "description": "Select model year to view details",
            "value": "2024",
            "label": "Model Year",
            "type": "text",
            "options": [
                {"label": "2024", "value": "2024"},
                {"label": "2023", "value": "2023"},
                {"label": "2022", "value": "2022"}
            ]
        }
    ]
})
@app.get("/company_details")
def get_company_details(company: str, year: str = "2024"):
    """Returns car manufacturer details in markdown format"""
    company_info = {
        "TM": {
            "name": "Toyota Motor Corporation",
            "sector": "Automotive",
            "market_cap": "280B",
            "pe_ratio": 9.5,
            "dividend_yield": 2.1,
            "description": "Toyota Motor Corporation designs, manufactures, assembles, and sells passenger vehicles, minivans, commercial vehicles, and related parts and accessories worldwide.",
            "models": {
                "2024": ["Camry", "Corolla", "RAV4", "Highlander"],
                "2023": ["Camry", "Corolla", "RAV4", "Highlander"],
                "2022": ["Camry", "Corolla", "RAV4", "Highlander"]
            }
        },
        "VWAGY": {
            "name": "Volkswagen Group",
            "sector": "Automotive",
            "market_cap": "75B",
            "pe_ratio": 4.2,
            "dividend_yield": 3.5,
            "description": "Volkswagen Group manufactures and sells automobiles worldwide. The company offers passenger cars, commercial vehicles, and power engineering systems.",
            "models": {
                "2024": ["Golf", "Passat", "Tiguan", "ID.4"],
                "2023": ["Golf", "Passat", "Tiguan", "ID.4"],
                "2022": ["Golf", "Passat", "Tiguan", "ID.4"]
            }
        },
        "GM": {
            "name": "General Motors",
            "sector": "Automotive",
            "market_cap": "45B",
            "pe_ratio": 5.8,
            "dividend_yield": 1.2,
            "description": "General Motors designs, builds, and sells cars, trucks, crossovers, and automobile parts worldwide.",
            "models": {
                "2024": ["Silverado", "Equinox", "Malibu", "Corvette"],
                "2023": ["Silverado", "Equinox", "Malibu", "Corvette"],
                "2022": ["Silverado", "Equinox", "Malibu", "Corvette"]
            }
        },
        "F": {
            "name": "Ford Motor Company",
            "sector": "Automotive",
            "market_cap": "48B",
            "pe_ratio": 7.2,
            "dividend_yield": 4.8,
            "description": "Ford Motor Company designs, manufactures, markets, and services a line of Ford trucks, cars, sport utility vehicles, electrified vehicles, and Lincoln luxury vehicles.",
            "models": {
                "2024": ["F-150", "Mustang", "Explorer", "Mach-E"],
                "2023": ["F-150", "Mustang", "Explorer", "Mach-E"],
                "2022": ["F-150", "Mustang", "Explorer", "Mach-E"]
            }
        },
        "TSLA": {
            "name": "Tesla Inc.",
            "sector": "Automotive",
            "market_cap": "800B",
            "pe_ratio": 65.3,
            "dividend_yield": 0.0,
            "description": "Tesla Inc. designs, develops, manufactures, leases, and sells electric vehicles, and energy generation and storage systems in the United States, China, and internationally.",
            "models": {
                "2024": ["Model 3", "Model Y", "Model S", "Model X"],
                "2023": ["Model 3", "Model Y", "Model S", "Model X"],
                "2022": ["Model 3", "Model Y", "Model S", "Model X"]
            }
        }
    }
    
    details = company_info.get(company, {
        "name": "Unknown",
        "sector": "Unknown",
        "market_cap": "N/A",
        "pe_ratio": 0,
        "dividend_yield": 0,
        "description": "No information available for this manufacturer.",
        "models": {"2024": [], "2023": [], "2022": []}
    })
    
    models = details['models'].get(year, [])
    
    return f"""# {details['name']} ({company}) - {year} Models
**Sector:** {details['sector']}
**Market Cap:** ${details['market_cap']}
**P/E Ratio:** {details['pe_ratio']}
**Dividend Yield:** {details['dividend_yield']}%

{details['description']}

## {year} Model Lineup
{', '.join(models)}
"""
```

This implementation demonstrates how to create a cohesive user interface where multiple widgets work together to provide different views of the same data, while maintaining parameter synchronization across all components. 

---

---
title: Parameter Positioning
sidebar_position: 19
description: Learn how to control the layout and positioning of widget parameters in OpenBB Workspace, including row positioning and parameter ordering
keywords:
- parameter positioning
- parameter layout
- parameter rows
- widget parameters
- parameter ordering
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Parameter Positioning | OpenBB Workspace Docs" />

By default, widget parameters are displayed in a single row at the top of the widget. However, you can control the positioning and layout of parameters by organizing them into multiple rows and changing their order within those rows.

<img className="pro-border-gradient" width="1000" alt="Parameter Grouping Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/markdown-organized-params.png" />

## Row Positioning

To position parameters in different rows, you can structure the `params` array as a nested array where each sub-array represents a row of parameters.

### Single Row (Default)

```python
"params": [
    {
        "paramName": "param1",
        "type": "text",
        "value": "value1"
    },
    {
        "paramName": "param2",
        "type": "text",
        "value": "value2"
    }
]
```

### Multiple Rows

```python
"params": [
    [], # Empty first row
    [ # Second row with parameters
        {
            "paramName": "param1",
            "type": "text",
            "value": "value1"
        },
        {
            "paramName": "param2",
            "type": "text",
            "value": "value2"
        }
    ]
]
```

## Complete Example

Here's a comprehensive example showing how to position different types of parameters across multiple rows:

```python
@register_widget({
    "name": "Moving Parameters Example",
    "description": "Show example of moving parameter positions",
    "endpoint": "moving_parameters_example",
    "gridData": {"w": 20, "h": 9},
    "type": "table",
    "params": [
        [],  # Empty first row - pushes all parameters to second row
        [    # Second row with all parameters
            {
                "paramName": "datePicker1",
                "value": "$currentDate-1d",
                "label": "Param 1",
                "description": "I'm a Date Picker!",
                "type": "date"
            },
            {
                "paramName": "textBox1",
                "value": "Hello!",
                "label": "Param 2",
                "description": "I'm a text input box!",
                "type": "text"
            },
            {
                "paramName": "TrueFalse",
                "value": True,
                "label": "True/False",
                "description": "I'm a True/False selector!",
                "type": "boolean"
            },
            {
                "paramName": "daysPicker1",
                "value": "1",
                "label": "Days",
                "type": "text",
                "multiSelect": True,
                "description": "Number of days to look back",
                "options": [
                    {"value": "1", "label": "1"},
                    {"value": "5", "label": "5"},
                    {"value": "10", "label": "10"},
                    {"value": "20", "label": "20"},
                    {"value": "30", "label": "30"}
                ]
            }
        ]
    ]
})
@app.get("/moving_parameters_example")
def moving_parameters_example(
    datePicker1: str = None,
    textBox1: str = None,
    daysPicker1: str = "1",
    TrueFalse: bool = True
):
    """Show example of how to move parameters - This will put them all on the second row of the widget"""
    return {
        "datePicker1": datePicker1,
        "textBox1": textBox1,
        "daysPicker1": daysPicker1.split(","),
        "TrueFalse": TrueFalse
    }
```

## Advanced Positioning Examples

### Parameters Across Multiple Rows

```python
"params": [
    [ # First row
        {
            "paramName": "symbol",
            "type": "text",
            "value": "AAPL",
            "label": "Symbol"
        }
    ],
    [ # Second row
        {
            "paramName": "start_date",
            "type": "date",
            "value": "$currentDate-30d",
            "label": "Start Date"
        },
        {
            "paramName": "end_date",
            "type": "date",
            "value": "$currentDate",
            "label": "End Date"
        }
    ],
    [ # Third row
        {
            "paramName": "show_volume",
            "type": "boolean",
            "value": True,
            "label": "Show Volume"
        }
    ]
]

### Skipping Multiple Rows

```python
"params": [
    [], # Skip first row
    [], # Skip second row
    [ # Parameters on third row
    {
        "paramName": "param1",
        "type": "text",
        "value": "value1"
    }
    ]
]
```

## Parameter Ordering

Within each row, parameters are displayed in the order they appear in the array. You can change the visual order by rearranging the parameter objects:

```python
# Original order: Date, Text, Boolean, Dropdown
[
    {"paramName": "date_param", "type": "date", ...},
    {"paramName": "text_param", "type": "text", ...},
    {"paramName": "bool_param", "type": "boolean", ...},
    {"paramName": "dropdown_param", "type": "text", "options": [...], ...}
]
# Reordered: Boolean, Dropdown, Date, Text
[
    {"paramName": "bool_param", "type": "boolean", ...},
    {"paramName": "dropdown_param", "type": "text", "options": [...], ...},
    {"paramName": "date_param", "type": "date", ...},
    {"paramName": "text_param", "type": "text", ...}
]
```

In the above example, the parameters are displayed in the order: Date, Text, Boolean, Dropdown. Then, the parameters are reordered to: Boolean, Dropdown, Date, Text based on the order of the parameters in the array.


---

---
title: Text Input
sidebar_position: 21
description: Learn how to implement and use text input parameters in OpenBB Workspace widgets, including configuration options and example usage
keywords:
- text input
- text box
- input field
- widget parameters
- text entry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Text Input | OpenBB Workspace Docs" />

A widget that includes a text input parameter allowing users to enter custom text. The entered text is passed to the widget as a parameter.

There are two types of text input parameters:

Simple text input and a multiple options text input.

## Simple Text Input

<img className="pro-border-gradient" width="800" alt="Text Input Parameter Example" src="https://openbb-cms.directus.app/assets/b126ba58-ff29-4923-b124-1a0314ad4842.png" />

```python
@register_widget({
    "name": "Markdown Widget with Text Input",
    "description": "A markdown widget with a text input parameter",
    "endpoint": "markdown_widget_with_text_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "text_box",
            "value": "hello",
            "label": "Enter Text",
            "description": "Type something to display",
            "type": "text"
        }
    ]
})
@app.get("/markdown_widget_with_text_input")
def markdown_widget_with_text_input(text_box: str):
    """Returns a markdown widget with text input parameter"""
    return f"""# Text Input
Entered text: {text_box}
""" 
```

## Multiple Options Text Input

<img className="pro-border-gradient" width="800" alt="Text Input Parameter Example" src="https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/text-input-with-dd.png" />


```python
@register_widget({
    "name": "Markdown Widget with Text Input",
    "description": "A markdown widget with a text input parameter",
    "endpoint": "markdown_widget_with_text_input",
    "gridData": {"w": 16, "h": 6},
    "type": "markdown",
    "params": [
        {
            "paramName": "text_box",
            "value": "var1,var2,var3",
            "label": "Enter Text",
            "description": "Type something to display",
            "multiple": true,
            "type": "text"
        }
    ]
})
@app.get("/markdown_widget_with_text_input")
def markdown_widget_with_text_input(text_box: str):
    """Returns a markdown widget with text input parameter"""
    return f"""# Text Input
Entered text: {text_box}
""" 
```


---

---
title: widgets.json Reference
sidebar_position: 22
description: Learn how to integrate your own backend with OpenBB Workspace using
  the cookie-cutter or language-agnostic API approaches, with illustrative guides
  and principles for handling widget.json files, APIs, interfaces, Python, FastAPI
  and more.
keywords:
- widgets.json
- OpenBB API
- Endpoint integration
- widget configuration
- Language-Agnostic API
- API implementation
- Python
- FastAPI
- Workspace widgets
- Widget definitions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Widgets.json | OpenBB Workspace Docs" />

# Widgets.json Overview

The `widgets.json` file is your configuration file that connects custom backend data to the widgets displayed in the application. Key components include:

- **Basic Information**: Defines the widget's name, description, and API endpoint that the data comes from.
- **Metadata**: Provide categories for organization and AI enhancement.
- **Display Settings**: Specifies widget type and grid dimensions.
- **Data Configuration**:  Details table and chart settings, including column level information and data types.
- **Parameters**: Details query parameters that can be passed to the API endpoint for customization.

Each entry in this file will directly map to a widget in the app. You can find example backends [here](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main), where each folder contains a `widgets.json` file specifying the available widgets.

Below are all of the configurable fields and their descriptions.

A `Widgets.json` table is a configuration structure with any of the named attributes listed below.

### Attributes

- **name**
  _Type:_ `string` (required)
  Sets the display name of the widget shown to the user.
  _Example:_ `"Options EOD Data"`

- **description**
  _Type:_ `string` (required)
  Provides a brief description of the widget for user info and selection menu.
  This is important for Copilot to understand what the widget does.
  _Example:_ `"Provides EOD data for all options chains for a given ticker."`

- **endpoint**
  _Type:_ `string` (required)
  Specifies the backend API endpoint for retrieving data.
  _Example:_ `"chains"`
  _Possible values:_ Any valid API endpoint path as a string.

- **wsEndpoint**
  _Type:_ `string`
  Specifies the WebSocket endpoint for live data updates. Only used with the Live Grid Widget.
  _Example:_ `"ws"`

- **category**
  _Type:_ `string`
  Defines the category for organizing widgets.
  _Example:_ `"Equity"`
  _Possible values:_ Any string representing a category.

- **subCategory**
  _Type:_ `string`
  Provides a secondary category for refining search results.
  _Example:_ `"Options"`

- **type**
  _Type:_ `string`
  Sets the default visualization type for the widget.
  _Possible values:_ `"chart"`, `"table"`, `"markdown"`, `"metric"`, `"note"`,  `"multi_file_viewer"`, `"live_grid"`, `"newsfeed"`, `"advanced-chart"`, `"chart-highcharts"`
  _Default:_ `"table"`

- **runButton**
  _Type:_ `boolean`
  If true, a run button will be displayed instead of the refresh button.
  _Possible values:_ `true`, `false`
  _Default:_ `false`

- **gridData**
  _Type:_ object containing the following keys:

  - **w**
    _Type:_ `number`
    Sets the width of the widget in grid units.
    _Example:_ `20`
    _Maximum value:_ `40`

  - **h**
    _Type:_ `number`
    Sets the height of the widget in grid units.
    _Example:_ `9`
    _Maximum value:_ `100`

  - **minW**
    _Type:_ `number`
    Sets the minimum width of the widget in grid units.
    _Example:_ `10`

  - **minH**
    _Type:_ `number`
    Sets the minimum height of the widget in grid units.
    _Example:_ `10`

  - **maxW**
    _Type:_ `number`
    Sets the maximum width of the widget in grid units.
    _Example:_ `40`

  - **maxH**  
    _Type:_ `number`
    Sets the maximum height of the widget in grid units.
    _Example:_ `100`

- **data**
  _Type:_ object containing the following keys:

  - **dataKey**
    _Type:_ `string`
    A key to identify the data within the widget.
    _Example:_ `"customDataKey"`

  - **wsRowIdColumn**
    _Type:_ `string`
    The column that will be used to identify the row. This is important to set correctly to ensure the live updates are displayed correctly.
    This the key between your ws and the initial data. Only used with the Live Grid Widget.
    _Example:_ `"symbol"`

  - **table**
    _Type:_ object containing the following keys:

    - **enableCharts**
      _Type:_ `boolean`
      Enables chart visualization for table data.
      _Example:_ `true`

    - **showAll**
      _Type:_ `boolean`
      Displays all available data in the table.
      _Example:_ `true`

    - **chartView**
      _Type:_ object containing the following keys:

      - **enabled**
        _Type:_ `boolean`
        Sets the chart view as the default view.
        _Example:_ `true`

      - **chartType**
        _Type:_ `string`
        Specifies the type of chart to display.
        _Example:_ `"column"`
        _Possible values:_ see [ChartView chart types](#chartview-chart-types)

      - **cellRangeCols**
        _Type:_ `object`
        Defines the default column mappings for different chart types. Each key represents a chart type, and the value is an array of column names that specify the category and series columns for that chart type.
        The array structure is: `[category, series1, series2, ...]` where:
        - First element: The category column (x-axis)
        - Remaining elements: The series columns (y-axis data)
        _Example:_ 
        ```json
        "cellRangeCols": {
          "line": ["ticker", "weight", "weight2"],
          "column": ["date", "price", "volume"]
        }
        ```

      - **ignoreCellRange**
        _Type:_ `boolean`
        Ignores stored cell range for the chart.
        _Example:_ `false`

    - **columnsDefs**
      _Type:_ list of objects, each containing the following keys:

      - **field**
        _Type:_ `string`
        The name of the field from the JSON data.
        _Example:_ `"column1"`

      - **headerName**
        _Type:_ `string`
        The display name of the column header.
        _Example:_ `"Column 1"`

      - **chartDataType**
        _Type:_ `string`
        Specifies how data is treated in a chart.
        _Example:_ `"category"`
        _Possible values:_ `"category"`, `"series"`, `"time"`, `"excluded"`

      - **cellDataType**
        _Type:_ `string`
        Specifies the data type of the cell.
        _Example:_ `"text"`
        _Possible values:_ `"text"`, `"number"`, `"boolean"`, `"date"`, `"dateString"`, `"object"`

      - **enableCellChangeWs**
        _Type:_ `boolean`
        Controls whether the cell can be updated via WebSocket messages. Only used with the Live Grid Widget.
        _Default:_ `true`
        _Example:_ `false`

      - **formatterFn**
        _Type:_ `string`
        Specifies how to format the data.
        _Example:_ `"int"`
        _Possible values:_ see [`formatterFn`](#formatterfn)

      - **renderFn**
        _Type:_ `string` or `array`
        Specifies a rendering function for cell data. See [Render Functions](../workspace/widget-configuration/render-functions.md) for more information.
        _Example:_ `"titleCase"`
        _Possible values:_ `"greenRed"`, `"titleCase"`, `"hoverCard"`, `"cellOnClick"`, `"columnColor"`, `"showCellChange"`

      - **renderFnParams**
        _Type:_ `object`
        Required if `renderFn` is used. Specifies the parameters for the render function.
        _Example:_ `{"actionType": "sendToAgent", "sendToAgent": {"markdown": "Analyze **{company}** data"}}`

        - **actionType**
          _Type:_ `string`
          Specifies the action type for the render function.
          _Example:_ `"sendToAgent"`
          _Possible values:_ `"groupBy"`, `"sendToAgent"`

        - **groupByParamName**
          _Type:_ `string`
          Group by parameter for the render function.
          _Example:_ `"symbol"`

        - **colorValueKey**
          _Type:_ `string`
          Specifies which field to use for determining the color when showing cell changes.
          _Example:_ `"Analyst"`

        - **hoverCardData**
          _Type:_ `array of strings`
          Specifies columns to show in the hover card.
          _Example:_ `["column1", "column2"]`

        - **colorRules**
          _Type:_ `array of objects`
          An array of rules for conditional coloring.
          _Example:_ `[{"condition": "gt", "value": 50, "color": "green", "fill": true}]`

        - **hoverCard**
          _Type:_ `object`
          Hover card configuration.
          Contains the following keys:

          - **cellField**
            _Type:_ `string`
            Field to display on table cell.
            _Example:_ `"value"`

          - **title**
            _Type:_ `string`
            Title for the hover card.
            _Example:_ `"Analyst Details"`

          - **markdown**
            _Type:_ `string`
            Markdown content for the hover card.
            _Example:_ `"### {value}\n- **Description:** {description}"`

        - **sendToAgent**
          _Type:_ `object`
          Configuration for sending data to an AI agent.
          Contains the following keys:

          - **markdown**
            _Type:_ `string`
            Markdown content to send to the agent, supports template variables from row data using curly braces.
            _Example:_ `"Please analyze the company **{company}** with revenue of ${revenue}M"`

          - **agentId**
            _Type:_ `string`
            (Optional) Specific agent ID to send the message to.
            _Example:_ `"financial-analyst-agent"`

      - **width**
        _Type:_ `number`
        Specifies the width of the column in pixels.
        _Example:_ `100`

      - **maxWidth**
        _Type:_ `number`
        Specifies the maximum width of the column in pixels.
        _Example:_ `200`

      - **minWidth**
        _Type:_ `number`
        Specifies the minimum width of the column in pixels.
        _Example:_ `50`

      - **hide**
        _Type:_ `boolean`
        Hides the column from the table.
        _Example:_ `false`

      - **pinned**
        _Type:_ `string`
        Pins the column to the left or right of the table.
        _Example:_ `"left"`
        _Possible values:_ `"left"`, `"right"`

      - **headerTooltip**
        _Type:_ `string`
        Tooltip text for the column header.
        _Example:_ `"This is a tooltip"`

      - **prefix**
        _Type:_ `string`
        Prefix to be added to the column header.
        _Example:_ `"$"`

      - **suffix**
        _Type:_ `string`
        Suffix to be added to the column header.
        _Example:_ `"USD"`

- **params**
  _Type:_ list of objects, each containing the following keys:

  - **type**
    _Type:_ `string`
    The type of the parameter.
    _Example:_ `"date"`
    _Possible values:_ `"date"`, `"text"`, `"ticker"`, `"number"`, `"boolean"`, `"endpoint"`, `"form"`

  - **paramName**
    _Type:_ `string`
    The name of the parameter in the URL.
    _Example:_ `"startDate"`

  - **value**
    _Type:_ `string`, `number`, `boolean`
    The default value of the parameter.
    _Example:_ `"2024-01-01"`

  - **label**
    _Type:_ `string`
    The label to display in the UI for the parameter.
    _Example:_ `"Start Date"`

  - **optionsEndpoint**
    _Type:_ `string`
    Endpoint to fetch options for the parameter.
    _Example:_ `"v1/test/values"`

  - **multiple**
    _Type:_ `boolean`
    If true, the parameter will be a dropdown with multiple selectable options that you can add add-hoc.
    _Example:_ `true`

  - **optionsParams**
    _Type:_ `object`
    Parameters to pass to the options endpoint. You can use the parameter name from the `params` array to pass a value to the options endpoint.
    _Example:_ `{"type": "$type"}`

  - **show**
    _Type:_ `boolean`
    Displays the parameter in the UI.
    _Example:_ `true`

  - **description**
    _Type:_ `string`
    Description of the parameter, shown on hover.
    _Example:_ `"The start date for the data"`

  - **roles**
    _Type:_ `array`
    Only used on the Multi-File Viewer Widget - Specifies which parameter is used to select the files.
    _Example:_ `["fileSelector"]`

  - **multiSelect**
    _Type:_ `boolean`
    Allows multiple values to be selected from your parameter options.
    _Example:_ `true`

  - **style**
    _Type:_ `object`
    Styling options for the parameter. Only popupWidth is currently supported minimum value is 200px max value is 1000px.
    _Example:_ `{"popupWidth": 450}`

  - **options**
    _Type:_ list of objects, each containing the following keys:

    - **label**
      _Type:_ `string`
      The label for a dropdown option.
      _Example:_ `"Option 1"`

    - **value**
      _Type:_ `string`, `number`, `boolean`
      The value for a dropdown option.
      _Example:_ `"option1"`

    - **extraInfo**
      _Type:_ `object`
      Additional information to display for the dropdown option.
      _Example:_ `{"description": "Technology Company", "rightOfDescription": "NASDAQ"}`

      Contains the following keys:

      - **description**
        _Type:_ `string`
        Additional descriptive text shown below the label.
        _Example:_ `"Technology Company"`

      - **rightOfDescription**
        _Type:_ `string`
        Text shown to the right of the description.
        _Example:_ `"NASDAQ"`

- **source**
  _Type:_ array of strings
  Specifies the data source(s) for the widget.
  _Example:_ `["API", "Database"]`

- **refetchInterval**
  _Type:_ `number` or `false`
  Time in milliseconds before the widget's data will refresh if on the page.  Minimum value is `1000`.
  _Default:_ `900000` (15m)

- **staleTime**
  _Type:_ `number`
  Time in milliseconds before the widget's data is considered stale and will refresh on the next visit to the dashboard.
  _Default:_ `300000` (5m)

## Example widgets.json {#example-widgets-json}

Below is an example `widgets.json` with a single widget defined. This widget will default to a column chart but have the ability to switch between a table and chart view.  The widget will have a start date parameter, a ticker parameter, and a colors parameter, all of which will be able to be selected on the widget in the application.

```json
{
    "custom_widget": {
        "name": "Custom Widget Example",
        "description": "A widget to demonstrate custom configuration",
        "endpoint": "custom-endpoint",
        "runButton": false,
        "data": {
            "dataKey": "customDataKey",
            "table": {
                "enableCharts": true,
                "showAll": true,
                "chartView": {
                    "enabled": true,
                    "chartType": "column",
                    "cellRangeCols" : {
                        "line": ["ticker", "weight"]
                    }
                },
                "columnsDefs": [
                    {
                        "field": "column1",
                        "headerName": "Column 1",
                        "chartDataType": "category",
                        "cellDataType": "text",
                        "formatterFn": "none",
                        "renderFn": "titleCase",
                        "width": 100,
                        "maxWidth": 200,
                        "minWidth": 50,
                        "hide": false,
                        "pinned": "left"
                    },
                    {
                        "field": "column2",
                        "headerName": "Column 2",
                        "chartDataType": "series",
                        "cellDataType": "number",
                        "formatterFn": "int",
                        "renderFn": "greenRed",
                        "width": 150
                    }
                ]
            }
        },
        "params": [
            {
                "type": "date",
                "paramName": "startDate",
                "value": "2024-01-01",
                "label": "Start Date",
                "show": true,
                "description": "The start date for the data",
            },
            {
                "type": "text",
                "paramName": "ticker",
                "value": "AAPL",
                "label": "Ticker",
                "show": true,
                "description": "Stock ticker symbol",
            },
            {
                "type": "text",
                "paramName": "colors",
                "value": "red",
                "label": "Colors",
                "show": true,
                "description": "Stock ticker symbol",
                "multiSelect": true,
                "options": [
                  { "label": "Red", "value": "red" },
                  { "label": "Green", "value": "green" },
                  { "label": "Blue", "value": "blue" }
                ],
            }
        ],
        "source": [
            "My First API"
        ],
        "refetchInterval" : 900000,
        "staleTime": 300000
    }
}

```

## Special Properties

### Date Modifier

This is used to display a dynamic date.

The reference is `$currentDate` and if a user wants to add or subtract they need to append to the variable:

- h, for hour
- d, for day
- w, for week
- M, for month
- y, for year

For instance, `$currentDate-1w` stands for 1 week ago.

If you don't want to set a date you can omit the value parameter or pass ```null```.

#### Examples

```json
[
  {
    "paramName": "start_date",
    "value": "$currentDate-2y",
    "label": "Start Date",
    "type": "date",
    "description": "Current Date for the stock price"
  },
  {
    "paramName": "end_date",
    "value": "$currentDate+1d",
    "label": "End Date",
    "type": "date",
    "description": "End Date for the stock price"
  },
    {
    "paramName": "end_date",
    "value": null,
    "label": "End Date",
    "type": "date",
    "description": "End Date for the stock price"
  },
  {
    "paramName": "interval",
    "value": "1d",
    "label": "Interval",
    "options": [
      { "label": "Daily", "value": "1d" },
      { "label": "Weekly", "value": "1w" },
      { "label": "Monthly", "value": "1m" }
    ],
    "type": "text",
    "description": "Select the interval"
  }
]
```

### ChartView chart types

**`chartType`**: The type of chart to display by default. These charts are provided using the AgGrid library. Custom charts can also be created using Plotly. For examples, refer to the [GitHub repository](https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main).

**Allowed values:** column, groupedColumn, stackedColumn, normalizedColumn, bar, groupedBar, stackedBar, normalizedBar, line, scatter, bubble, pie, donut, doughnut, area, stackedArea, normalizedArea, histogram, radarLine, radarArea, nightingale, radialColumn, radialBar, sunburst, rangeBar, rangeArea, boxPlot, treemap, heatmap, waterfall

### formatterFn

`formatterFn` (optional): Specifies the function used to format the data in the table. The following values are allowed:

- `int`: Formats the number as an integer.
- `none`: Does not format the number.
- `percent`: Adds `%` to the number.
- `normalized`: Multiplies the number by 100.
- `normalizedPercent`: Multiplies the number by 100 and adds `%` (e.g., `0.5` becomes `50 %`).
- `dateToYear`: Converts a date to just the year.
