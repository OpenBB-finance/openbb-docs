---
title: API Keys
sidebar_position: 4
description: Manage and store API credentials for data providers securely within the ODP Desktop App.
keywords:
  - API Keys
  - Credentials
  - Configuration
  - .env
  - Environment
  - user_settings.json
  - system_settings.json
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="API Keys | ODP Desktop App Docs" />

The API Keys screen is for managing data provider credentials accessible to the Open Data Platform Python packages and API interface. Environment variables and credentials can be configured centrally across any environment using the `openbb-core` and its extension framework.

In the environment setup panels, data provider extensions highlight if an API key is required. Values there represent the name of the key(s) needing to be set.

:::info
The initial installation creates entries for each selected extension requiring credentials, just add your key.

For example, if `openbb-fred` was selected, `fred_api_key` will appear on the screen as, `Undefined`.

<img width="1356" height="282" alt="api-keys-provider" src="https://github.com/user-attachments/assets/a844a1e4-4854-4ad0-9408-2b3ee56f5542" />
<p align="center">
<img width="1704" height="1080" alt="api-keys-undefined" src="https://github.com/user-attachments/assets/73491240-f51f-4ec7-8957-725eded1f491" />
</p>
:::

## Features

- Interface for adding and modifying `credentials` entries stored in the [`user_settings.json`](/python/settings/user_settings/api_keys) file.
  - Import key:value pairs from file (`.json` or `.env`).
- Easy access to key ODP configuration files in the `~/.openbb_platform` directory, opening directly in the default text editor:
  - `user_settings.json` (see the docs [here](/python/settings/user_settings).)
  - `system_settings.json` (see the docs [here](/python/settings/system_settings).)
  - `.env` (see the docs [here](/python/settings/environment_variables).)

## Edit, Save, & Remove

Hover the mouse over an entry to reveal the icons. The `edit` button is the first in the row of three.

<img width="1704" height="1080" alt="api-keys-edit" src="https://github.com/user-attachments/assets/722153fb-7bf7-4fe7-b465-4c85817b7a1d" />

Enter the changes and press `Save` to update the file and close the modal.

:::note
Backend servers and Python interpreters will need to be restarted for the changes to be reflected.
:::

## Configuration Files

The button to the right of, `Import Keys`, is for opening ODP configuration files (listed above with documentation links).

:::tip
The `.env` file can be added to any [Backend](/desktop/backends) configuration.
:::

Clicking the button will open it with the system's default text editor.

<img width="1704" height="1080" alt="api-keys-config-files" src="https://github.com/user-attachments/assets/551b71b9-bed6-47f3-8150-e1987c29006d" />


---

---
title: Backends
sidebar_position: 3
description: Run and manage background processes like the OpenBB API server, data streaming pipelines, or custom Python scripts directly within the OpenBB GUI.
keywords:
  - Backends
  - API Server
  - Background Processes
  - Micro-services
  - Data Pipelines
  - Local Development
  - Certificate
  - SSL
  - CA
  - HTTPS
  - Encryption
  - X.509
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Backends | ODP Desktop App Docs" />

# Backends

The **Backends** screen is a central location for development server entry points and launch script configurations.

:::info
Presets for OpenBB API & OpenBB MCP are created with default settings during the initial environment installation.
:::

## Features

- Configure, control, and monitor multiple application servers from a simple interface.
- Use any executable available to the selected environment from the command line.
- User-friendly environment variable management.
- Start services on operating system login.
- Generate X.509 certificates and PKCS#12 bundles to easily run over HTTPS.
- All backends terminate on application exit.

<img width="1704" height="1474" alt="backends-page" src="https://github.com/user-attachments/assets/dfa67577-6275-47e7-a653-79bf0a0dda85" />

:::tip
A JavaScript server can be started from the `openbb` environment by using the `npm` executable.

Node can be added to any envrionment as a Conda package, `nodejs`, independent of any global installations.
:::

## Configuration

Each backend created will appear on the screen as a new box, with details about its status and configuration.

When the backend is running, the display will update to the server's URL after startup is complete.

Edit the settings for an existing backend by clicking the gear icon, on the right-side of the panel.

The configuration panels for creating or editing a service allows setting runtime arguments, environment variables, and the working directory.

<img width="2272" height="1816" alt="backend-configuration-panel" src="https://github.com/user-attachments/assets/79149c2b-93e9-4e97-9b69-581489796c1c" />

### Create New

1. Click **New Backend**.
2. Fill the **Backend Name** (required).
3. Select the **Environment** that contains the required packages.
4. **Executable** – anything you would type in a shell, e.g. `openbb-api`, `uvicorn myapp:app --reload`, `python feed.py --ws`.
5. *(Optional)* **Working Directory** – folder from which the command is executed.
6. *(Optional)* **Environment File** – path to a `.env` file whose variables are exported before launch.
7. *(Optional)* **Environment Variables** - multi-line text input where each line should be a KEY=VALUE pair.
    - Exported *after* the `.env` file.
8. Enable **Start Automatically**, if desired.
    - Enable `Start at Login`, in the tray icon menu, to start on operating system login.
9. Press **Create**.

The new backend appears in the list. Use the **Start** button to launch it.

## Logs

Pressing the `Logs` button opens a window with the console output (colors removed) from the running backend.

Each backend will buffer up to 10K of the most recent lines, in memory, and are discarded on application quit.

<img width="2224" height="1482" alt="backend-logs" src="https://github.com/user-attachments/assets/45853aa2-bee5-4374-ac4c-bad75f03ff21" />

:::tip
Experiencing problems with a backend? Press the `Logs` button to see errors.
:::

## Self-Signed Certificate

Self-signed certificates can enable backends to run securely over HTTPS. This feature is the simplest way for anyone to generate the required files. No additional software, or technical knowledge, is required.

:::important
X.509 certificates and files are generated by standard OpenSSL binaries, compiled from the most recent version. No other encryption tools, or parameters beyond what is available in the screen, are available.
:::

<img width="2006" height="1990" alt="backends-generate-cert" src="https://github.com/user-attachments/assets/843d4fc4-406d-4de0-ab4a-87f42495e124" />

### How To Generate

1. Click **Generate Certificate**
2. Enter the required fields:
    - Common Name (e.g., 127.0.0.1)
      - Address for which the certificate is valid.
    - Organization Name (e.g., My Organization)
    - Output Directory
      - Where the files will be created.
3. Enter any optional fields:
    - Alternative Names (e.g., localhost,0.0.0.0)
      - Aliases for the `Common Name`
    - Password (set for PKCS#12 bundle)
    - Days Valid (default 1 year)
4. Check the box to also add the certificate to the user's trust store.
    - An operating system dialog will open to confirm adding the certificate.
    - This allows making HTTPS requests to the server, from the machine, without any additional configuration.
5. Press **Generate**
    - Open the folder to inspect the results and move the `private.key` file to a secure destination.
6. Return to the `Backends` screen by clicking **X**, in the top-right.

### How To Use

:::danger
Do not store the `private.key` file in the same location as the public certificate.
:::

Use environment variables, or a `.env` file, to configure the backend for HTTPS. For backends using `uvicorn` or `openbb-api` as the executable, set the items below.

```env
UVICORN_SSL_CERTFILE = "/pathto/public_folder/certificate.pem"
UVICORN_SSL_KEYFILE = "/pathto/private_folder/private.key"
```

When opening a server URL (i.e. `/docs`) in a browser, you will need to manually allow the certificate through the warning dialog.

## Example: MCP Server

The REST API generated by the ODP python packages can be run as a MCP server, which can be added to the Agent Chat Interface in OpenBB Workspace.

Before creating the backend, install the `openbb-mcp-server` extension to the target [environment](/desktop/environments) (`openbb`).

1. Press the **New Backend** button.
2. Select `openbb` as the environment.
3. Give it a name like, `OpenBB MCP`.
4. Enter executable as, `openbb-mcp --port 6950`.
    - See the [documentation](/python/extensions/interface/openbb-mcp) for additional configuration options.
5. Click **Create**.
6. **Start** the backend.
7. Open Workspace from the tray icon menu and add the MCP server address - i.e, `http://127.0.0.1:6950/mcp/` - from the chat window.
    - The server URL showing after startup will be missing the transport path, `/mcp/`. Be sure to include it as part of the URL.

<img width="2514" height="1870" alt="add-workspace-mcp" src="https://github.com/user-attachments/assets/60709625-c0ee-459d-a527-82b33c27407e" />

## Troubleshooting & FAQ

:::note
Backend server management is intended for single-user, desktop operating systems. The operating system may close network connections when the machine sleeps, backend services may not reflect their status.
:::

| Question | Answer |
| --- | --- |
| Backend stuck at *starting*. | After 30s, if an error is not detected the status will update as running. |
| Backend URL displayed is incorrect. | The UI looks for a host:port pattern from the application startup. Check the logs for errors and report unexpected outcomes on [Github](https://github.com/OpenBB-finance/OpenBB/issues/). |
| Startup traceback. | The GUI captures the full traceback and stops the service; open logs for details, fix code, then **Start** again. |
| Port already in use. | Edit the backend and set the `--port` runtime argument, or stop the conflicting process. |
| Port different than expected. | Launchers such as, `openbb-api`, will find the next available port. Is a service already running? |
| How do I expose the API to my LAN? | Set the `--host` runtime argument as, `0.0.0.0`, and ensure the firewall allows the chosen port. |
| Can I run non-Python services? | Yes – any executable/script is allowed as long as it runs inside the selected Conda environment. |
| Status shows as running, but backend failed to start. | Refresh the window by right-clicking and selecting reload. Does the status change? Press **Stop**. Is the process terminated? Consult the logs and report unexpected outcomes on [Github](https://github.com/OpenBB-finance/OpenBB/issues/). |
| Backend fails to terminate on ODP exit. | This is likely a bug, please report on [Github](https://github.com/OpenBB-finance/OpenBB/issues/), with context. |


---

---
title: Environments
sidebar_position: 2
description: Create and manage isolated Conda environments for your Python projects. Install packages, manage dependencies, and launch development tools like JupyterLab, all from the OpenBB GUI.
keywords:
  - Environments
  - Conda
  - Python
  - Package Management
  - Jupyter
  - Isolated Development
  - Virtual Environments
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Environments | ODP Desktop App Docs" />

# Environments

The Environments screen is for creating and managing **isolated Conda environments**. Each environment (package extensions and binaries) lives inside the OpenBB installation folder, contains its own Python interpreter, and can be modified or deleted at any time.

Environments protect the system, and other external projects, by not using shared components. They make it easy to jump between projects, programming languages, and package versions without fear of contamination.

<img width="1704" height="1192" alt="environments-panel" src="https://github.com/user-attachments/assets/dc461455-39af-4fb3-887f-42b4a7e15f4e" />

## Features

- Create, customize, and manage Conda environments directly on-screen, no command line required.
  - Build environments from `pyproject.toml`, `requirements.txt`, or Conda environment `.yaml` files.
- Safely update whole environments or individual packages.
- Searchable environment package lists, with installed version.
- Action buttons for opening system terminals and starting Python, iPython, Jupyter, or ODP CLI sessions.
  - Define a current working directory.
  - Monitor console output of an environment's Jupyter server.
  - Opens Jupyter Lab in a dedicated window.

Every environment created from the screen will include a version of Python and `pip`, along with any Conda or PyPI installable package added by the user.

The initial, `openbb`, environment will have a few extras that are included.

## Initial Environment

During the setup process, an environment is created, `openbb`, with the selected version of Python and extension choices.

The extra tools included in this environment are:
- iPython
- Juptyer Lab and Notebook
  - ipywidget
  - anywidget
  - Python language server
- NodeJS

## Environment Panel

Each environment will have its own panel with dedicated action buttons (add `ipython` as a `pip` package to show button). Click on its name to expand the panel and view or manage the installed packages.

<img width="1704" height="1630" alt="environments-panel-expanded" src="https://github.com/user-attachments/assets/a364d082-fb3e-4c51-8291-1850a692e6ac" />

:::info
Environments are updated with Conda's `libmamba` solver, where the packages to solve for were explicitly added to the environment or defined in the originally imported environment file. Conda itself will be updated before the environment is solved.

Updating an individual package from the panel's update button will not engage the environment solver and may have unintended outcomes, such as incompatibility.
:::

### Action Buttons

The number of large icon buttons will depend on the environment's packages. At miniumum, there will be one for opening a system shell with the environment active, and another for opening a system shell with a Python session started.

<img width="604" height="108" alt="environments-action-buttons" src="https://github.com/user-attachments/assets/aab1006e-2e77-4f5e-b993-830114c3d9de" />

All environments use the same Current Working Directory (CWD), which by default is, the installation folder selected during the initial setup.

From left-to-right, the buttons are:
- Open default system shell with the environment active.
  - On macOS, it will prefer iTerm2 over the system Terminal.app.
  - On Windows, it will open with CMD.
- Start an ODP CLI session, if `openbb-cli` is installed.
- Start a Python session in the default system shell.
- Start an iPython session in the default system shell, if installed.
- Start Jupyter Lab, serving notebooks from CWD, if installed.
  - Opens Jupyter Lab in a dedicated window.
    - If the window is asking for a login, get the token from the Logs or close the window and press the button again.
  - Jupyter folder, with runtime, will be in the installation folder selected during the initial setup.
  - Server terminates on application quit, or by pressing `Stop Jupyter`.
- Update environment and engage the Conda solver.
- Delete the environment.

## Creating New Environments

There are two ways to create a new environment from the screen:

### **New Environment**
- Press the button and follow the steps to define and create the environment.
  - The basic OpenBB tooling will be installed in this environment, which includes:
    - openbb-core
      - Pydantic, FastAPI, Uvicorn, Pandas, Numpy, Requests, AIOHTTP, Ruff, PyJWT, UUID7, Python-Dotenv.
    - openbb-platform-api

### **From Environment File**
- Press **Import Environment**
  - Select a supported environment file:
    - `requirements.txt`
    - `pyproject.toml`
      - If this is a local Python package, it will be installed in "develop" mode instead of `site-packages`.
    - A Conda `YAML` environment definition.

:::note
When you import an environment from a file, it will be read and converted to a Conda YAML environment file. Changes to the original file will not be reflected in your environment.

Find the Conda YAML environment files for each installed environment in: `~/.openbb_platform/environments/`

Manual edits can be reflected in the environment by clicking the icon to the right of the large icon buttons.
:::

When complete, press `Done` to return to the Environments screen.

<img width="2116" height="1910" alt="environments-create-done" src="https://github.com/user-attachments/assets/95415178-78a5-47da-a16a-f8685d68a0a5" />

## Adding/Modifying Packages

Expand the panel of the desired environment and press the `Add Extensions` button.

Define the package without a version to use the latest available. The modal supports installation of packages from Conda channels, and from `pip`.

<img width="1938" height="1344" alt="environments-add-extensions" src="https://github.com/user-attachments/assets/804cdb38-e5fe-40e4-8f45-f7addfa23491" />

### Version Pinning

If an extension was already added to the environment, it can be pinned by using standard version markers - i.e, `numpy==2.2.0` - for the package name.

## Refresh Button

The button in the top-right of the screen will refresh the UI completely and request new contents for each detected environment. Use this button if the UI is out-of-sync with the current state.

## Clearing Caches

Conda and PyPI package caches can be cleared from the command line of any environment.

1. Press the button (very left of the large icon buttons) to open a system shell.
2. Enter: `conda clean -a -y`
3. Enter: `pip cache purge`
4. Enter: `exit`

## Troubleshooting & FAQ

| Question | Answer |
| --- | --- |
| Can I use other package managers, such as UV? | Tools such as, UV or Poetry, can be installed in a Conda environment by adding it as a PyPI package. Using them within a global context may have unexpected results and should be configured to use the active environment explicitly.
| Where can I find the `.condarc` file? | Open the installation location, and enter the `conda` folder. It will likely be hidden, so enable Explorer/Finder to show system files, and then open it in any text editor.
| How do I remove a corrupt environment? | It is safe to manually remove any environment in the `InstallDirectory\conda\envs` folder by deleting it from Finder/Explorer. Press the `Refresh` button to update the screen's state.
| Importing an environment fails. | Check the output for errors and adjust where needed. The environment's base may have been created successfully, in which case open the system shell and attempt to install manually from the command line. Please report any bugs on [GitHub](https://github.com/OpenBB-finance/OpenBB/issues).
| "Directory does not exist" | Ensure the path is reachable by the OS user account. Network drives may require additional permissions. |
| "FutureWarning" during install | These are non-fatal; the GUI continues automatically. |
| "Prefix record insertion error" | A known Conda bug – the environment is usually created successfully. The GUI handles this automatically. |
| How do I find the token for the Jupyter server when the window opens to the login page? | Press `Logs` on the environment's panel to open the console's output stream. It will be displayed with the final startup events. Alternatively, close the window and press the Jupyter button again to open a new one.
| How do I keep a Jupyter server running while I browse other pages? | The server will remain running in the background until shut down or quit the ODP application. |
| Can I change how Jupyter is configured? | Yes - the Jupyter folder is located in the installation directory. See the official [documentation](https://jupyter-server.readthedocs.io/en/latest/users/configuration.html) for more details.
| Can I edit `pyproject.toml` after import? | Yes – open the Extensions tab and manage packages as usual. See the note in the New Environments section for details. |


---

---
title: Introduction
sidebar_position: 0
description: An overview of the Open Data Platform desktop application for creating and managing local environments and backend servers.
keywords:
  - ODP
  - Open Data Platform by OpenBB
  - OpenBB Platform
  - GUI
  - Local Development
  - Backends
  - Environments
  - API Keys
  - Desktop Application
---

<!-- markdownlint-disable MD012 MD031 MD033 MD037 -->

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";
import NewReferenceCard from "@site/src/components/General/NewReferenceCard";

<HeadTitle title="Introduction | ODP Desktop App Docs" />

Open Data Platform by OpenBB (ODP) is the open-source toolset that helps data engineers to integrate proprietary, licensed,
and public data sources into downstream applications like AI copilots and research dashboards.
ODP operates as the "connect once, consume everywhere" infrastructure layer that consolidates and exposes data to multiple surfaces at once:

- Python environment for quants
- OpenBB Workspace and Excel for analysts
- MCP servers for AI agents
- REST APIs for other applications

## ODP Desktop

ODP Desktop is a light-weight application (macOS & Windows) for installing and using the open-source tools, along with your favourite developer tools and resources. Its features are well-suited for building language-agnostic OpenBB Workspace [Applications](/workspace/analysts/apps) and agentic workflows.

<details>
<summary mdxType="summary">Application Screenshot</summary>

![backends-screen](https://github.com/user-attachments/assets/d9a885bb-7776-4926-b043-f9b5d49987d9)

</details>

## Quick Start

Download and install the latest release from: https://github.com/OpenBB-finance/OpenBB/releases/tag/ODP

<details>
<summary mdxType="summary">Installation Summary - See the [installation](/desktop/installation) page for more details.</summary>

The initial environment (`openbb`) is setup when you first run the application, and comes with:
- OpenBB Core Python packages
  - `openbb-api` and `openbb-mcp` executables
- Optional packages selected during installation
- Jupyter Lab & Notebook in a dedicated window
  - Python langugage server
- Isolated `npm` executable

</details>

:::important
When the application is started (except first launch), no window is created. Access it from the tray icon menu, or doubleclick on the shortcut again.
:::

### **Step 1**

Go to the [API Keys](/desktop/api-keys) page, add or import your provider credentials, if needed.

### **Step 2**

Navigate to the [Backends](/desktop/backends) page by clicking on it in the header, or selecting from the tray icon's menu.

### **Step 3**

Press the, `Start`, button for the `OpenBB API` backend.

:::info
By default, this will run: `openbb-api --host 127.0.0.1 --port 6900`
:::


<details>
<summary mdxType="summary">Application Screenshot</summary>

![backends-running](https://github.com/user-attachments/assets/2ec97b99-a19f-43ed-b735-f5757e51b4c4)

</details>

4. Open Workspace in your browser and connect to http://127.0.0.1:6900.  You now have a fully local data stack.

<details>
<summary mdxType="summary">Workspace Screenshot</summary>

![Add To Workspace](https://openbb-cms.directus.app/assets/563aca68-1ec3-48c7-86d8-9129e0e5fd8c.png)

:::note
Number of widgets and applications will depend on packages and versions installed in the environment.
:::

</details>

## Overview

The application operates as a system tray icon, and its main window has three, navigatable, screens:

<ul className="grid grid-cols-1 gap-2 -ml-6">
  <NewReferenceCard
    title="Backends"
    description="Define and control background servers such as `openbb-api` or any custom script."
    url="desktop/backends"
  />
  <NewReferenceCard
    title="Environments"
    description="Create and manage isolated Conda Python environments."
    url="desktop/environments"
  />
  <NewReferenceCard
    title="API Keys"
    description="Manage API Keys for use with the OpenBB Python packages and API."
    url="desktop/api-keys"
  />
</ul>

---
## Next Steps

* Use the OpenBB Python Package as a Workspace [backend](/python/quickstart/workspace).
* Create your own custom [Environments](/desktop/environments), or modify the existing.
* Define custom [Backends](/desktop/backends) to run independently, in any environment.


---

---
title: Installation
sidebar_position: 1
description:
  This page presents the general system requirements and installation instructions for the Open Data Platform (ODP) desktop application.
keywords:
  - ODP
  - OpenBB Platform
  - Python
  - Requirements
  - Installation
  - Virtual Environment
  - Windows
  - macOS
  - Jupyter
  - Conda
  - API
  - PyPI
  - MCP
  - Node.js
  - npm
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Installation | ODP Desktop App Docs" />

## Requirements

A modern laptop or desktop machine is recommended. It is not intended to be run in virtual machines or as a CI application.

### System

- Windows 11 or macOS (10.15+)
- 2+ GB of usable storage space
- 8 GB of RAM
- Internet connection

### Permissions

This application is scoped to the operating system user account, and the OS may ask you to grant permissions. The general needs of this application are:

- Access the internet, download files, and install packages from repositories.
  - Packages can be installed from `conda` or `pip`.
- Manage files in the user and temp directories.
- Run background tasks and shell scripts.
- Configure the operating system for the `Start at Login` feature. 

## Installation

Download the appropriate file for your machine from the link [here](https://github.com/OpenBB-finance/OpenBB/releases/ODP)

### macOS

Open the DMG file and then drag-and-drop the app into the Applications folder.

### Windows

Execute the installer file, and then start the application.


## First Run

When first run, you will be asked to select an installation location.
This is where Miniforge, environments, and other application data will be stored.

The user data directory is where the OpenBB Python packages should store data, such as data/HTTP cache. It is recommeneded to use separate locations for each.

<img width="889" height="802" alt="install-step-1" src="https://github.com/user-attachments/assets/5f648dcd-00de-4ac8-a650-115efcc05346" />

Click, Begin Installation, when you're ready.

<img width="854" height="564" alt="install-miniforge" src="https://github.com/user-attachments/assets/d801051a-275d-4b62-b9bd-503445df5f2c" />

### OpenBB Environment

After Miniforge is installed, you will be directed to pick a version of Python for the initial environment.

<img width="1704" height="1326" alt="install-step-2" src="https://github.com/user-attachments/assets/9e17c18b-59ed-48a7-960b-799042958f55" />

Upon clicking the, Next Step, button, an `openbb` environment will be created with the core packages.

<img width="1704" height="1182" alt="install-initial-env" src="https://github.com/user-attachments/assets/043b6617-cf85-4df2-81ff-004cdea13542" />

When complete, you can customize the environment by adding OpenBB Python modules or arbitrary libraries from PyPI.

<img width="2306" height="1966" alt="install-step-3" src="https://github.com/user-attachments/assets/3a439d09-9ff1-4f08-a29d-62278bef6ada" />

Finally, click the button to go to the [Environments](/desktop/environments) page.

<img width="2446" height="1988" alt="install-complete" src="https://github.com/user-attachments/assets/8a1b1612-1c0e-4105-aae1-4753066e68b1" />


---

---
title: Uninstall
sidebar_position: 4
description: Uninstall the Open Data Platform application.
keywords:
  - Uninstall
  - Remove
  - Delete
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Uninstall | ODP Desktop App Docs" />

Uninstall the Open Data Platform application by selecting `Uninstall` from the tray icon menu.

When confirmed, the process will remove Miniforge, environments, all application data, and optionally, the `OpenBBUserData` and `~./openbb_platform` folders.

:::note
On Windows, using `uninstall.exe` or removing via Control Panel will only remove the GUI. Environments and other files will not be removed.
:::

<img width="897" height="865" alt="uninstall" src="https://github.com/user-attachments/assets/28419487-17db-4480-a306-8073753e53d2" />
