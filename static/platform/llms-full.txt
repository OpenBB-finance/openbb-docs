---
title: Architecture Overview
sidebar_position: 1
description: This guide provides insights into the architecture and components of the OpenBB Platform. It covers the key classes, import statements, and the TET pattern used in building the Fetcher classes.
keywords:
  - OpenBB Platform Architecture
  - Python Interface
  - Build script
  - FastAPI
  - API
  - Key Classes
  - Import Statements
  - TET Pattern
  - Fetcher Classes
  - Core Dependencies
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Architecture Overview - Developer Guidelines - Development | OpenBB Platform Docs" />

This page provides a general overview of the OpenBB Platform architecture and the key Python classes most processes interact with.

<img
  src="https://openbb-cms.directus.app/assets/67ec2d35-b194-4ce2-8403-bfe274ac54b2.png"
  alt="Overview"
  width="100%"
/>

## Overview

The `openbb-core` package relies on a set of carefully selected Python libraries, including:

- FastAPI for building the API.
- Uvicorn as the ASGI server.
- Pandas for data manipulation and analysis.
- Pydantic for data validation and serialization using Python type annotations.
- Requests/AIOHTTP for making HTTP requests.
- WebSockets for handling WebSocket connections.

The current specifications can be found in the `pyproject.toml` [file](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/refs/heads/develop/openbb_platform/core/pyproject.toml) of the GitHub repository.

:::info Deploying Custom Applications
Keeping the application as lean as possible is crucial for maintaining its performance, and to eliminate bloat. Install only the components required to get the job(s) done.
:::

With just the Core, there are no routers or endpoints. Users and developers are free to create their own combinations of extensions, tailored to suit specific requirements.

The `openbb-core` package comes with the ability to operate two, independent, interfaces.

- Python Interface
  - Python application wrapping the installed routers.
  - A build script writes static files to create the application, which includes all installed extensions.
    - Docstrings and function signatures are generated by this process.
  - Configurable, and extendable, response object handling data validation, timestamping, and more.
- REST API
  - An instance of FastAPI

The application - both Python Interface and REST API - share core logic and models. It is the product of all installed [extensions](/platform/usage/extensions/overview).

All routes are a subclass of the Router class.

### Python Interface

:::important Key Information

The build script requires write access to the site-packages folder, post-installation, for generating static assets.

When a new extension is installed, or removed, the static assets must be regenerated in order to reflect the changes.

Remote deployments utilizing the interface should invoke the `openbb-build` command line script from the shell script establishing the environment, packages, and file system.
:::

Using the import below initializes the application instance from static files generated by the build script.

```python
from openbb import obb
```

The build script is not part of the `openbb-core` package. It is in the main package (`pip install openbb`), and it can be installed without any other components.

If `openbb` is not an installed package, but `openbb-core` is:

```sh
pip install openbb --no-deps
```

To build the assets:

```python
import openbb

openbb.build()
```

Restart the Python interpreter to begin using the application with:

```python
from openbb import obb
```

Alternatively, the process above can be run from the command line shell:

```sh
openbb-build
```

The bare interface includes:

- /account: This module contains methods for logging in to, and updating, an [OpenBB Hub](https://my.openbb.co) account.
- /user: The [`user_settings.json`](/platform/settings/environment_variables) object.
- /system: The [`system_settings.json`](/platform/settings/system_settings) object.
- /coverage: Information and metadata about the data provider extensions and their definitions (providers, commands, command_model, command_schemas, reference)

:::tip Python Settings
See [`system_settings.json`](/platform/settings/system_settings) for configuring runtime parameters.
:::

### API Interface

Items described immediately above will be included as routers by setting the [environment variable](/platform/settings/environment_variables), `OPENBB_DEV_MODE='1'`

The FastAPI instance, with all installed routers and extensions, can be imported with:

```python
from openbb_core.rest_api import app
```

Launched via Uvicorn:

```sh
uvicorn openbb_core.rest_api:app
```

:::tip API Settings
See [`system_settings.json`](/platform/settings/system_settings) for configuring runtime parameters.
:::

## Providers

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/cc978d76-269b-4793-a0bf-fe892b757e89.png"
    alt="Providers"
    width="60%"
  />
</div>

### QueryParams Class

The QueryParams class is a standardized model for handling query input parameters. Similar to `Data`, it is a subclass of `pydantic.BaseModel`.

Behaviour described here is mostly applicable to endpoints utilizing the `ProviderInterface`.

The class is used by the `ProviderInterface` to validate, merge, and discriminate endpoint parameters shared by multiple provider extensions.

Along with `__alias_dict__`, `QueryParams` uses `__json_schema_extra__` to constrict parameter inputs, and to deterimine when more than one entry should be accepted as a list.

```python
from openbb_core.provider.abstract.query_params import QueryParams
```

<details>
<summary mdxType="summary">Example</summary>

```python
"""Some Query Model."""

from datetime import date as dateType
from typing import Optional
from warnings import warn

from openbb_core.provider.abstract.query_params import QueryParams
from pydantic import Field, field_validator


class SomeQueryParams(QueryParams):
    """Some Query Parameters."""

    __alias_dict__ = {
        "symbol": "ticker",
        "start_date": "begin",
        # "input_field": "output_alias"
    }
    __json_schema_extra__ = {
        "symbol": {"multiple_items_allowed": True, "choices": SOME_SYMBOL_LIST},
        "interval": {"multiple_items_allowed": False},  # No need to define this, it is the default behaviour.
    }

    symbol: str = Field(description="The ticker symbol.")
    interval: Literal["1d", "1w", "1m"] = Field(
        default="1d",
        description="The interval of the timeseries. Choices: ["1d", "1w", "1m"]",
    )
    start_date: Optional[dateType] = Field(
        default=None,
        description="The start date, as YYYY-MM-SS, or datetime.date object",
    )
    end_date: Optional[dateType] = Field(
        default=None,
        description="The end date, as YYYY-MM-SS, or datetime.date object",
    )

    @field_validator("symbol", mode="before", check_fields=False)
    @classmethod
    def _validate_symbol(cls, v) -> str:
        """Validate the symbol."""
        if not v:
            raise ValueError("Please enter a symbol.")
        symbol = v if isinstance(v, list) else v.upper().split(",")

        new_symbols: list = []

        for s in symbol:
            if s not in SOME_SYMBOL_LIST:
                msg = f"Invalid symbol provided {s}"
                warn(msg)
                continue
            new_symbols.append(s)

        if not new_symbols:
            raise ValueError(f"No valid symbols supplied. Choices are: {SOME_SYMBOL_LIST}")

        return ",".join(new_symbols)
```

</details>

### Data Class

The OpenBB Standardized Data Model, and is a subclass of `pydantic.BaseModel`.

This is the base class for all data returned via the `ProviderInterface`, and is used for `POST` requests to the `data` field.

```python
from openbb_core.provider.abstract.data import Data
```

Key Features:

- Dynamic field support: Dynamically handles fields that are not pre-defined in the model,
- Alias handling: Maintain compatibility with different naming conventions across various data formats.
- Datetime/string interoperability.

<details>
<summary mdxType="summary">Example</summary>

```python
# Direct instantiation
data_record = Data(name="OpenBB", value=42)

# Conversion from a dictionary
data_dict = {"name": "OpenBB", "value": 42}
data_record = Data(**data_dict)

# __alias_dict__
class SomeData(Data):
    """Some Data Model."""

    __alias_dict__ = {
        "output_field": "someWhackyInputName",
    }
    output_field: str = Field(description="My Output")

SomeData(someWhackyInputName="Some Output")
```

Output:

```sh
SomeData(output_field=Some Output)
```

</details>

Using  as a function

The `Fetcher` class imposes a standardized structure, namely:

- Transform the query: output of this method should be `QueryParams` child.
- Extract the data: output of this method can be `Any` but it's recommended to be a `dict`.
- Transform the data: output of this method should be a `List[Data]` or `Data` (or a child of it - i.e. SomeData).
- Built-in test for verifying basic operation at each stage.

#### The TET Pattern

Each `Fetcher` follows this pattern. It stands for **Transform, Extract, Transform**.

The workflow divides data collection into three, seperate, tasks.

![Diagram](https://github.com/OpenBB-finance/OpenBB/assets/48914296/ae9908be-00c0-40af-8acb-afeeb9629f2b)

```python
from openbb_core.provider.abstract.fetcher import Fetcher
```

The generic methods are meant to be overwritten with the implementation.

```python

class SomeFetcher(Fetcher[SomeQueryParams, list[SomeData]]):
    """Some Fetcher."""

    # Tell query executor if credentials are required. Can be overridden by subclasses.
    # Useful if a provider has some endpoints requiring API keys, but not all.
    require_credentials = False

    @staticmethod
    def transform_query(params: dict[str, Any]) -> SomeQueryParams:
        """Transform the params to the provider-specific query."""
        raise NotImplementedError

    @staticmethod
    async def aextract_data(query: SomeQueryParams, credentials: Optional[dict[str, str]], **kwargs: Any) -> dict:
        """Asynchronously extract the data from the provider."""
        raise NotImplementedError

    @staticmethod
    def extract_data(query: SomeQueryParams, credentials: Optional[dict[str, str]], **kwargs: Any) -> dict:
        """Extract the data from the provider."""
        raise NotImplementedError

    @staticmethod
    def transform_data(query: SomeQueryParams, data: dict, **kwargs: Any) -> list[SomeData]:
        """Transform the provider-specific data."""
        raise NotImplementedError
```

:::note Notes

- One of, `extract_data`, or, `aextract_data`, must be implemented.
- All parameters for these methods are positional and should be defined as described above.
  :::

## Extensions

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/a25f6c03-19a8-4775-9e52-180aff8bf186.png"
    alt="Extensions"
    width="60%"
  />
</div>

### Routers

Router extensions are registered in the `pyproject.toml` file, and installed as a Python package.

```toml
[tool.poetry.plugins."openbb_core_extension"]
my_router = "my_router.my_router:router"
```

The `Router` class is a subclass of `fastapi.APIRouter`, helping validate and complete function signatures, ensuring that the functions registered as API endpoints have the correct parameters and return types.

```python
from openbb_core.provider.app.router import Router
```

Initialize the class with a prefix and description.

```python
some_router = Router(prefix="", description="Some description of this router.")
some_router.include_router(some_sub_router)
```

The `api_router` property provides access to the underlying APIRouter instance, allowing for direct interaction with the FastAPI routing system, if needed.

### @router.command

A `@router.command` decorator is exposed upon initialization, extending the functionality of `FastAPI().add_api_route()` to include additional parameters:

- `model`
  - A model name shared by all Provider extensions feeding the same input - i.e, "EquityHistorical"
- `examples`
  - Examples for use to include in documentation and Python docstring - see the page [here](extensions) for an explanation.
- `no_validate`
  - A flag to disable response validation for the endpoint.
    - The output type is assigned as `Any`
- All other arguments and keyword arguments are passed to `APIRouter.add_api_route` - i.e, `openapi_extra=dict(some_key=some_value)`

#### Response Model

Define the response model as part of the function's definition.

```python
@router.command(
    methods=["POST"],
    examples=[
        PythonEx(
            description="Calculate HMA with historical stock data.",
            code=[
                "stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')",
                "hma_data = obb.technical.hma(data=stock_data.results, target='close', length=50, offset=0)",
            ],
        ),
    ],
)
def hma(
    data: list[Data],
    target: str = "close",
    index: str = "date",
    length: int = 50,
    offset: int = 0,
) -> list[Data]: ...
```

### OBBject Class

The `OBBject` class is the standard response object from output functions, and has the following attributes:

- `results`: Serializable data that was returned by the command.
- `provider`: The name of the provider that was used to obtain the data, if any.
- `warnings`: Warnings generated by the command execution.
- `extra`: Additional metadata about the command run, including any arguments, the route, the timestamp, etc.

It is extendable, similar to a Pandas extension, and has methods for converting the results to different formats.

```python
from openbb_core.app.model.obbject import OBBject
```

A bare instance can be created by defining `results` as None.

```python
obbject = OBBject(results=None)
```

#### Output Conversion

Various formats and filtering can be applied to the function's output.

- `model_dump()`: Pydantic method for converting the complete object to a Python dictionary.
- `model_dump_json()`: Pydantic method for converting the complete object to a serialized JSON string.
- `to_df()`: Alias for `to_dataframe()`, and converts the contents of `obbject.results` to a Pandas DataFrame.
- `to_dict()`: Converts the contents of `obbject.results` to a Python dictionary object with a given `orientation`.
- `to_numpy()`: Convert the contents of `obbject.results` to a NumPy array.
- `to_polars()`: Converts the contents of `obbject.results` to a Polars DataFrame.

:::note
Polars is not included with OpenBB packages and must be installed.
:::

#### OBBject Extensions

An OBBject extension is created by defining `pyproject.toml` and installing the package.

```toml
[tool.poetry.plugins."openbb_obbject_extension"]
some_extension = "some_extension:ext"
```

The module's `__init__.py` file creates an instance of the extension object, and is attached to the output of every command.

```python
from openbb_core.app.model.extension import Extension

ext = Extension(name="some_extension")

@ext.obbject_accessor
class SomeExtension:
    def __init__(self, obbject):
        self._obbject = obbject

    def hello(self):
        print(f"Say Hello!")
```

An example of this type of extension is, [`openbb-charting`](https://pypi.org/project/openbb-charting/).

## Provider to Extension

<img
  src="https://openbb-cms.directus.app/assets/67ec2d35-b194-4ce2-8403-bfe274ac54b2.png"
  alt="Overview"
  width="100%"
/>

### ProviderInterface

The `ProviderInterface` is the map of all installed provider extensions to their respective callables, and is a Singleton accepting no initialization parameters.

It is responsible for handling the `provider` parameter - i.e, `provider="yfinance"` at execution, and is called by internal processes.

There is not a general need to interact with this class directly; however, it is useful to know that it exists.

```python
from openbb_core.app.provider_interface import ProviderInterface
```

Each item in the `ProviderInterface` maps to a `Fetcher`, which executes the TET pattern.

#### Provider Extensions

A provider extension is created by defining `pyproject.toml` and installing the package.

```toml
[tool.poetry.plugins."openbb_provider_extension"]
some_provider = "some_provider:some_provider"
```

It is a collection of data-collecting Fetchers that should be added to the application via the `provider` parameter.

### Provider Class

The `Provider` class is initialized in the `__init__.py` file of a provider extension module.

```python
from openbb_core.provider.abstract.provider import Provider
```

It maps the `Router` to the `Provider`, and defines other key metadata for the extension. The example below is from `openbb-bls`.

This is how the `ProviderInterface` maps any `@router.command(model="SomeModel")` function to all known instances.

<details>
<summary mdxType="summary">Example</summary>

```python
"""BLS Provider Module."""

from openbb_bls.models.search import BlsSearchFetcher
from openbb_bls.models.series import BlsSeriesFetcher
from openbb_core.provider.abstract.provider import Provider

bls_provider = Provider(
    name="bls",
    website="https://www.bls.gov/developers/api_signature_v2.htm",
    description="The Bureau of Labor Statistics' (BLS) Public Data Application Programming Interface (API)"
    + " gives the public access to economic data from all BLS programs."
    + " It is the Bureau's hope that talented developers and programmers will use the BLS Public Data API to create"
    + " original, inventive applications with published BLS data.",
    credentials=["api_key"],
    fetcher_dict={
        "BlsSearch": BlsSearchFetcher,
        "BlsSeries": BlsSeriesFetcher,
    },
    repr_name="Bureau of Labor Statistics' (BLS) Public Data API",
    instructions="Sign up for a free API key here: https://data.bls.gov/registrationEngine/",
)
```

</details>

### Using Fetcher Class as a function

A `Fetcher` can be executed without initialization, as an async function. It requires two positional arguments as dictionaries:

- `query` - a dictionary to be converted into the QueryParams class.
- `credentials` - a dictionary of credentials required for the provider and endpoint.
  - Pass as an empty dictionary when no credentials are required.

```python
results = await SomeFetcher.fetch_data({"symbol": "btcusd"}, {})
```

The return is the output of `SomeFetcher.tranform_data`

To implement the `ProviderInterface` as a `Router` endpoint, follow the pattern below in the extension's `router` file.

<details>
<summary mdxType="summary">Example</summary>

```python

from openbb_core.app.model.command_context import CommandContext  # A FastAPI Depends injection with the initialized user and system preferences
from openbb_core.app.model.obbject import OBBject  # The OpenBB standard response object with output validation.
from openbb_core.app.provider_interface import (
    ExtraParams, # All provider-specific parameters.
    ProviderChoices, # All providers feeding the endpoint.
    StandardParams,  # Parameters defined in the common 'Standard' model, if any.
)
from openbb_core.app.query import Query  # The query executor.
from openbb_core.app.router import Router


router = Router(prefix="", description="Some Router.")


@router.command(
    model="SomeModel",
    examples=[
        APIEx(parameters={"symbol": "btcusd", "interval": "1d", "provider": "some_provider"}),
    ],
)
async def some_function(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Use the `SomeModel` Fetcher."""
    return await OBBject.from_query(Query(**locals()))
```

</details>


---

---
title: Data Provider
sidebar_position: 7
description: This guide outlines the process for adding a new data provider extension to the OpenBB Platform.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - data
  - endpoint
  - existing
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - provider model
  - how to
  - new
  - template
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New Provider Extension - How-To | OpenBB Platform Docs" />

This page will walk through adding a new data provider extension to the OpenBB Platform.

<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
  <img src="https://openbb-cms.directus.app/assets/cc978d76-269b-4793-a0bf-fe892b757e89.png" alt="Provider" width="60%" />
</div>

## Getting Started

An easy way to get started is to copy and paste something existing. In the OpenBB GitHub repository, provider extensions are located [here](https://github.com/OpenBB-finance/OpenBB/tree/develop/openbb_platform/providers).

For convenience's sake, download this template [zip file](https://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip). It contains the basic folder structure and everything required to get started creating new data models.

For demonstration purposes, we'll assume this is from the perspective of somebody who will open a pull request and contribute the code to the OpenBB repository. The process, however, also applies to publishing directly via PyPI. Anyone can make an OpenBB extension.

The structure of the folder will look something like this:

```md
template/
├── openbb_template/
│ ├── models/
│ │ ├── __init__.py
│ │ └── some_model.py
│ ├── utils/
│ │ ├── __init__.py
│ │ └── helpers.py
│ ├── tests/
│ │ ├── record/
│ │ ├── __init__.py
│ │ └── test_template_fetchers.py
│ ├── __init__.py
├── __init__.py
├── pyproject.toml
└── README.md
```

The `__init__.py` file where models are mapped to the router is under, `/openbb_template`.

To get started:

- Unpack the downloaded [zip](ttps://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip) file.

  - If working with a cloned GitHub repo, the folder is:

  ```console
  ~/OpenBB/openbb_platform/providers
  ```

- Rename everything, "template", to suit. File names, models, import statements, docstrings.
- Add any provider-specific package requirements in the `pyproject.toml` file.
- Update the Provider information in the `__init__.py` file.
  - If credentials are required, add a line to the Provider class initialization.

  ```python
  credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"
  ```

- From a terminal command line, navigate into the folder where the extension is, then install the empty blank package in "editable" mode.

  ```console
  poetry lock
  pip install -e .
  ```

- Start creating data models using the steps outlined [here](/platform/developer_guide/tutorials/add_new_provider_to_existing_extension)

### Cookiecutter

In order to speed up the process of building an extension, we have created a [**Cookiecutter**](https://github.com/OpenBB-finance/openbb-cookiecutter) template.

It serves as a jumpstart for your extension development, and can be used instead of the template ZIP referenced earlier. Instructions are located on the [GitHub page](https://github.com/OpenBB-finance/openbb-cookiecutter).

:::note
The cookiecutter tool will get you most of the way there, but it still requires some tweaks to the file names and initializations.
:::

ver are typically included as, XAU and XAG, respectively.


## Provider module


Below is the contents from the template's `__init__.py` file, modified to create a provider extension for [Tradier](https://documentation.tradier.com/brokerage-api/overview/endpoints).

```python
"""Tradier Provider Module."""

from openbb_core.provider.abstract.provider import Provider
from openbb_tradier.models.options_chains import TradierOptionsChainsFetcher

tradier_provider = Provider(
    name="tradier",
    website="https://tradier.com",
    description= "Tradier provides a full range of services in a scalable, secure,"
        + " and easy-to-use REST-based API for businesses and individual developers."
        + " Fast, secure, simple. Start in minutes."
        + " Get access to trading, account management, and market-data for"
        + " Tradier Brokerage accounts through our APIs.",
    credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"
    fetcher_dict={
        "OptionsChains": TradierOptionsChainsFetcher,
    },
)
```

Note: Access to most data sources is authorized with an API key, issued by the source. Sometimes there are multiple authorization fields, and other times there may be a need to change the base URL depending on the type of account.

> If no authorization is required, leave out the 'credentials' parameter.

### Rebuild python interface and assets

The application will need to rebuild the static files in order to recognize any changes to the `fetcher_dict` in the `__init__.py` file.

This is also required to reflect any changes to parameters, docstrings and function signatures.

Open a terminal, start a new Python session, then enter:

```python
import openbb

openbb.build()

exit()
```

The updated endpoint's function signature will now display the additional provider.

```python
Signature:
obb.derivatives.options.chains(
    symbol: typing.Annotated[str, OpenBBField(description='Symbol to get data for.')],
    provider: Optional[Literal['cboe', 'intrinio', 'tmx', 'tradier']] = None,
    **kwargs,
) -> openbb_core.app.model.obbject.OBBject
```


## Dependencies

The `pyproject.toml` file defines the package itself.

:::tip

- Before adding any dependency, ensure it aligns with the Platform's existing dependencies.
- If possible, use loose versioning.

  :::

```toml
[tool.poetry]
name = "openbb-template"
version = "1.0.0"
description = "Template Provider Extension for the OpenBB Platform"
authors = ["Name <my@emailaddress.com>"]
readme = "README.md"
packages = [{ include = "openbb_template" }]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
openbb = "^4.1.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."openbb_provider_extension"]
template = "openbb_template:template_provider"
```

The last line (poetry.plugins) maps to the provider defined in the `__init__.py` file.

Additionally, for local extensions, you can add this line in the `LOCAL_DEPS` variable in the `dev_install.py` file, located in `~/OpenBB/openbb_platform/`:

```toml
# If this is a community dependency, add this under "Community dependencies",
# with additional argument optional = true
openbb-extension = { path = "<relative-path-to-the-extension>", develop = true }
```

Now you can use the `python dev_install.py [-e]` command to install the local extension.


## Standard Model

The essence of a standard model is to be a shared resource with common ground between all sources.
It should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence.

Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform. If in doubbt, contact the OpenBB team.

### File Structure

We're going to map this new endpoint in the interface to, `obb.currency.snapshots()`. We'll name the model accordingly, `CurrencySnapshots`, and create a file, `currency_snapshots.py`. The file should be created here:

```console
~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/
```

The first line of the file should be a docstring, the second line should be empty, and the import statements follow.

The code block below are the typical imports in a standard model file, modify to suit the specific requirements.

:::tip

Constrained types can be imported from the Pydantic library, i.e. `PositiveInt`, `NonNegativeFloat`, etc.

:::

<details>
<summary mdxType="summary">File imports</summary>

```python
"""Currency Snapshots Standard Model."""

from typing import Literal, Optional

from pydantic import Field, field_validator

from openbb_core.provider.abstract.data import Data
from openbb_core.provider.abstract.query_params import QueryParams
from openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS
```
</details>

### Standard QueryParams

Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.
The same applies to `Literal` types, set as a generic `str` or `int` type and redefine it within the provider model as a `Literal["choice1", "choice2"]`.
We don't want a standard model parameter to provide invalid choices for individual providers.

Our `CurrencySnapshotsQueryParams` model is going to be very similar to `MarketSnapshotsQueryParams`, with the only difference being the field name "base".

:::important

If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - `Union[str, List[str]]`.
Instead, define it for the single value, `str`, and then add the property below to the provider's QueryParams model.

```python
__json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

:::

<details>
<summary mdxType="summary">Code example</summary>

The code block below is a continuation of the section above.

```python
class CurrencySnapshotsQueryParams(QueryParams):
    """Currency Snapshots Query Params."""

    base: str = Field(description="The base currency symbol.", default="usd")
    quote_type: Literal["direct", "indirect"] = Field(
        description="Whether the quote is direct or indirect."
        + " Selecting 'direct' will return the exchange rate"
        + " as the amount of domestic currency required to buy one unit"
        + " of the foreign currency."
        + " Selecting 'indirect' (default) will return the exchange rate"
        + " as the amount of foreign currency required to buy one unit"
        + " of the domestic currency.",
        default="indirect",
    )
    counter_currencies: Optional[Union[str, List[str]]] = Field(
        description="An optional list of counter currency symbols to filter for."
        + " None returns all.",
        default=None,
    )

    @field_validator("base", mode="before", check_fields=False)
    @classmethod
    def to_upper(cls, v):
        """Convert the base currency to uppercase."""
        return v.upper()

    @field_validator("counter_currencies", mode="before", check_fields=False)
    @classmethod
    def convert_string(cls, v):
        """Convert the counter currencies to an upper case string list."""
        if v is not None:
            return ",".join(v).upper() if isinstance(v, list) else v.upper()
        return None
```

</details>

It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.
This can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations.

### Standard Data

Like `QueryParams`, we don't want to attempt to define every potential future field. We want a core foundation for others to build on.
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
data parsing requirements for this endpoint:

- Split the six-letter symbol as two symbols.
- If the provider only returns `{"symbol": "price"}`, it will need to coerced accordingly within the `transform_data` static method of the `Fetcher` class.

<details>
<summary mdxType="summary">Code example</summary>

```python
class CurrencySnapshotsData(Data):
    """Currency Snapshots Data."""

    base_currency: str = Field(description="The base, or domestic, currency.")
    counter_currency: str = Field(description="The counter, or foreign, currency.")
    last_rate: float = Field(
        description="The exchange rate, relative to the base currency."
        + " By default, rates are expressed as the amount of foreign currency"
        + " received from selling one unit of the base currency,"
        + " or the quantity of foreign currency required to purchase"
        + " one unit of the domestic currency."
        + " To inverse the perspective, set the 'quote_type' parameter as 'direct'.
    )
    open: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("open", ""),
        default=None,
    )
    high: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("high", ""),
        default=None,
    )
    low: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("low", ""),
        default=None,
    )
    close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("close", ""),
        default=None,
    )
    volume: Optional[int] = Field(
        description=DATA_DESCRIPTIONS.get("volume", ""), default=None
    )
    prev_close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("prev_close", ""),
        default=None,
    )
```

</details>

## Provider Model

### File structure

We need to create a new file for our data provider.

:::note

If we created a standard model previously, the name will be the same.

```console
~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py
```

:::

The first line in the file will always be a docstring, with the import statements beginning below an empty line.

```python
"""FMP Currency Snapshots Model."""

# pylint: disable=unused-argument

from datetime import datetime
from typing import Any, Dict, List, Optional

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.currency_snapshots import (
    CurrencySnapshotsData,
    CurrencySnapshotsQueryParams,
)
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import amake_request
from pandas import DataFrame, concat
from pydantic import Field, field_validator
```

### Provider QueryParams

If we have defined a Standard Model for this provider, then our life is simplified as that base model already exists that we will inherit.

#### Iheritance

All that's added is a URL to the endpoint's documentation, and then the `__json_schema_extra__` dictionary which will allow multiple base symbols to be accepted by this provider.

```python
class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):
    """
    FMP Currency Snapshots Query.

    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote
    """

    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

#### One off

```python
from openbb_core.provider.abstract.query_params import QueryParams


class CongressBillsQueryParams(QueryParams):
    """Congress Bills Query Parameters."""

    __json_schema_extra__ = {
        "format": {
            "x-widget_config": {
                "exclude": True,
            },
        },
        "offset": {
            "x-widget_config": {
                "exclude": True,
            },
        },
    }

    format: Literal["json", "xml"] = Field(
        default="json", description="The data format. Value can be xml or json."
    )
    limit: int = Field(
        default=100,
        description="The number of records returned. The maximum limit is 250.",
    )
    offset: Optional[int] = Field(
        default=None, description="The starting record returned. 0 is the first record."
    )
    ...
```

### Provider Data

If we have defined a Standard Model we'll need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining. If there isn't a standard model, then we just need to define all the fields here.

For instance, if the sample output data from the source looks like this:

```json
[
  {
    "symbol": "AEDAUD",
    "name": "AED/AUD",
    "price": 0.40401,
    "changesPercentage": 0.3901,
    "change": 0.0016,
    "dayLow": 0.40211,
    "dayHigh": 0.40535,
    "yearHigh": 0.440948,
    "yearLow": 0.356628,
    "marketCap": null,
    "priceAvg50": 0.39494148,
    "priceAvg200": 0.40097216,
    "volume": 0,
    "avgVolume": 0,
    "exchange": "FOREX",
    "open": 0.40223,
    "previousClose": 0.40244,
    "eps": null,
    "pe": null,
    "earningsAnnouncement": null,
    "sharesOutstanding": null,
    "timestamp": 1677792573
  }
]
```

We can see that there are some fields which don't have anything to do with currencies. Those will be added here so the user still has access to them, since they aren't inherited from the standard model.

```python
class FMPCurrencySnapshotsData(CurrencySnapshotsData):
    """FMP Currency Snapshots Data."""

    __alias_dict__ = {
        "last_rate": "price",
        "high": "dayHigh",
        "low": "dayLow",
        "ma50": "priceAvg50",
        "ma200": "priceAvg200",
        "year_high": "yearHigh",
        "year_low": "yearLow",
        "prev_close": "previousClose",
        "change_percent": "changesPercentage",
        "last_rate_timestamp": "timestamp",
    }

    change: Optional[float] = Field(
        description="The change in the price from the previous close.", default=None
    )
    change_percent: Optional[float] = Field(
        description="The change in the price from the previous close, as a normalized percent.",
        default=None,
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    ma50: Optional[float] = Field(
        description="The 50-day moving average.", default=None
    )
    ma200: Optional[float] = Field(
        description="The 200-day moving average.", default=None
    )
    year_high: Optional[float] = Field(description="The 52-week high.", default=None)
    year_low: Optional[float] = Field(description="The 52-week low.", default=None)
    last_rate_timestamp: Optional[datetime] = Field(
        description="The timestamp of the last rate.", default=None
    )

    @field_validator("change_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize the percent."""
        return v / 100 if v is not None else None
```

A validator is setup to convert the percentage to a normalized value (1% -> 0.01).

### Provider Fetcher

The Fetcher class will always have the same general construction, in this instance we will use the `transform_data` stage to parse and filter the returned data before validating the model on output.

This is where the TET (transform-extract-transform) pattern is applied.

```python
class FMPCurrencySnapshotsFetcher(
    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]
):
    """FMP Currency Snapshots Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:
        """Transform the query parameters."""
        return FMPCurrencySnapshotsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: FMPCurrencySnapshotsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Extract the data from the FMP endpoint."""

        api_key = credentials.get("fmp_api_key") if credentials else ""

        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"

        return await amake_request(url, **kwargs)  # type: ignore

    @staticmethod
    def transform_data(
        query: FMPCurrencySnapshotsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[FMPCurrencySnapshotsData]:
        """Filter by the query parameters and validate the model."""

        if not data:
            raise EmptyDataError("No data was returned from the FMP endpoint.")

        # Drop all the zombie columns FMP returns.
        df = (
            DataFrame(data)
            .dropna(how="all", axis=1)
            .drop(columns=["exchange", "avgVolume"])
        )

        new_df = DataFrame()

        # Filter for the base currencies requested and the quote_type.
        for symbol in query.base.split(","):
            temp = (
                df.query("`symbol`.str.startswith(@symbol)")
                if query.quote_type == "indirect"
                else df.query("`symbol`.str.endswith(@symbol)")
            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})
            temp["base_currency"] = symbol
            temp["counter_currency"] = (
                [d.split("/")[1] for d in temp["counter_currency"]]
                if query.quote_type == "indirect"
                else [d.split("/")[0] for d in temp["counter_currency"]]
            )
            # Filter for the counter currencies, if requested.
            if query.counter_currencies is not None:
                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable
                    query.counter_currencies
                    if isinstance(query.counter_currencies, list)
                    else query.counter_currencies.split(",")
                )
                temp = (
                    temp.query("`counter_currency`.isin(@counter_currencies)")
                    .set_index("counter_currency")
                    # Sets the counter currencies in the order they were requested.
                    .filter(items=counter_currencies, axis=0)
                    .reset_index()
                )
            # If there are no records, don't concatenate.
            if len(temp) > 0:
                # Convert the Unix timestamp to a datetime.
                temp.timestamp = temp.timestamp.apply(
                    lambda x: datetime.fromtimestamp(x)
                )
                new_df = concat([new_df, temp])
            if len(new_df) == 0:
                raise EmptyDataError(
                    "No data was found using the applied filters. Check the parameters."
                )
            # Fill and replace any NaN values with NoneType.
            new_df = new_df.fillna("N/A").replace("N/A", None)
        return [
            FMPCurrencySnapshotsData.model_validate(d)
            for d in new_df.reset_index(drop=True).to_dict(orient="records")
        ]
```

If there are functions or constants that are required for the fetcher - these are typically added in a `/utils` folder with naming `helpers.py` and `constants.py` accordingly.

## Tests

### Testing the Fetcher

```python
"""Unit tests for FMP provider modules."""

from openbb_fmp.models.currency_snapshots import FMPCurrencySnapshotsFetcher

import pytest

test_credentials = UserService().default_user_settings.credentials.model_dump(
    mode="json"
)


def response_filter(response):
    """Filter the response."""
    if "Location" in response["headers"]:
        response["headers"]["Location"] = [
            re.sub(r"apikey=[^&]+", "apikey=MOCK_API_KEY", x)
            for x in response["headers"]["Location"]
        ]
    return response


@pytest.fixture(scope="module")
def vcr_config():
    """VCR configuration."""
    return {
        "filter_headers": [("User-Agent", None)],
        "filter_query_parameters": [
            ("apikey", "MOCK_API_KEY"),
        ],
        "before_record_response": response_filter,
    }


@pytest.mark.record_http
def test_fmp_currency_snapshots_fetcher(credentials=test_credentials):
    """Test FMP currency snapshots fetcher."""
    params = {
        "base": "XAU",
        "quote_type": "indirect",
        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",
    }

    fetcher = FMPCurrencySnapshotsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None

```

The filters might need to be updated for the specific provider, to ensure that API key or any authorization is sent correctly, and not logged. Particularly in the cassetes that are used for the CI.

### Records

The folder `/records` will contain the recordings of the data seen when running the test.

In order to get that you will need to run:

```sh
pytest test_fmp_fetchers.py --record http --record-no-overwrite
```

This will generate a file such as:

```sh
~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml
```

Make sure that it doesn't contain any of your API keys or credentials.


---

---
title: Extensions
sidebar_position: 12
description: This guide provides detailed instructions for including command examples in the router endpoints of the OpenBB Platform.
keywords:
  - OpenBB community
  - OpenBB Platform
  - Custom commands
  - API
  - Python Interface
  - Examples
  - Usage
  - Parameters
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Extensions | OpenBB Platform Docs" />

<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
    <img src="https://openbb-cms.directus.app/assets/a25f6c03-19a8-4775-9e52-180aff8bf186.png" alt="Extensions" width="60%" />
</div>


## Getting Started

The structure of the folder should look something like this:

```md
category/
├── openbb_category/
│ ├── subcategory1/
│ │ ├── __init__.py
│ │ └── subcategory1_router.py
│ │
│ ├── subcategory2/
│ │ ├── __init__.py
│ │ └── subcategory2_router.py
│ │
│ ├── category_router.py
│ ├── category_views.py
│ │
│ └── helpers.py
│
│── integration/
│ ├── test_category_api.py
│ └── test_category_python.py
│
│── tests/
│ └── test_helpers.py
│
├─- __init__.py
├── pyproject.toml
└── README.md
```

## Router implementation

The router implementation corresponds to the `subcategory1_router.py`, `subcategory2_router.py` and even `category_router.py`.

This is where you add the router commands. Here is an example for `openbb_category/economy_router.py`:

```python
"""Economy Router."""

# pylint: disable=unused-argument

from typing import Union

from openbb_core.app.deprecation import OpenBBDeprecationWarning
from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router

from openbb_economy.gdp.gdp_router import router as gdp_router
from openbb_economy.shipping.shipping_router import router as shipping_router
from openbb_economy.survey.survey_router import router as survey_router

router = Router(prefix="", description="Economic data.")
router.include_router(gdp_router)
router.include_router(shipping_router)
router.include_router(survey_router)


@router.command(
    model="EconomicCalendar",
    examples=[
        APIEx(
            parameters={"provider": "fmp"},
            description="By default, the calendar will be forward-looking.",
        ),
        APIEx(
            parameters={
                "provider": "fmp",
                "start_date": "2020-03-01",
                "end_date": "2020-03-31",
            }
        ),
        APIEx(
            description="By default, the calendar will be forward-looking.",
            parameters={"provider": "nasdaq"},
        ),
    ],
)
async def calendar(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get the upcoming, or historical, economic calendar of global events."""
    return await OBBject.from_query(Query(**locals()))
```

### Nested router

There can be a nested router in order to highlight hierarchy. We typically stope at hierarchy 2, i.e. `obb.category.subcategory.function`.

The subcategory routers are equivalent, at the exception that they don't include other routers.

<details>
<summary mdxType="summary">`openbb_category/gdp/gdp_router.py`</summary>

```python
"""Economy GDP Router."""

from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router

router = Router(prefix="/gdp")

# pylint: disable=unused-argument


@router.command(
    model="GdpForecast",
    examples=[
        APIEx(parameters={"provider": "oecd"}),
        APIEx(
            parameters={
                "country": "united_states,germany,france",
                "frequency": "annual",
                "units": "capita",
                "provider": "oecd",
            }
        ),
    ],
)
async def forecast(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get Forecasted GDP Data."""
    return await OBBject.from_query(Query(**locals()))
```

</details>

### Smoke test

Save the file, start a new Python session in a Terminal window, rebuild the app, and test it.

```console
import openbb

openbb.build()

exit()
```

Then run:

```python
from openbb import obb

obb.economy.calendar(
    "provider": "fmp",
    "start_date": "2020-03-01",
    "end_date": "2020-03-31",
).to_df()

obb.economy.gdp.forecast(
    "country": "united_states,germany,france",
    "frequency": "annual",
    "units": "capita",
    "provider": "oecd",
).to_df()
```

This should allow you to understand whether the command has been implemented correctly.

### Model Examples

Usage examples are defined in the router and are expected to provide working syntax, with descriptions for complex functions requiring many parameters. It is encouraged to include examples for every endpoint.

There are two models for defining examples, `APIEx` and `PythonEx`.

```python
from openbb_core.app.model.example import APIEx, PythonEx
```

:::info

When a provider is not installed, its example will be excluded from `openapi.json` and Python docstrings.

Submissions to our repository require:

- If any endpoint is excluded from the schema it only needs to contain a Python example.
- POST method examples should have both API and Python examples, unless they are excluded from the schema.

:::

#### APIEx

`APIEx` is more structured (and has less freedom) aiming to be language agnostic.

Requirements:
- At least one example using all required parameters. It cannot use any provider-specific parameters here. It should not specify the provider field.
- If there are more than three parameters, a description must be supplied in the example.

```python
@router.command(
    model="WorldNews",
    examples=[
        APIEx(parameters={}),
        APIEx(parameters={"limit": 100}),
        APIEx(
            description="Get news on the specified dates.",
            parameters={"start_date": "2024-02-01", "end_date": "2024-02-07"},
        ),
        APIEx(
            description="Display the headlines of the news.",
            parameters={"display": "headline", "provider": "benzinga"},
        ),
        APIEx(
            description="Get news by topics.",
            parameters={"topics": "finance", "provider": "benzinga"},
        ),
        APIEx(
            description="Get news by source using 'tingo' as provider.",
            parameters={"provider": "tiingo", "source": "bloomberg"},
        ),
        APIEx(
            description="Filter aticles by term using 'biztoc' as provider.",
            parameters={"provider": "biztoc", "term": "apple"},
        ),
    ],
)
```

#### PythonEx

`PythonEx` gives more freedom to create complex examples.

Requirements:
- Descriptions are mandatory.

```python
@router.command(
    methods=["POST"],
    include_in_schema=False,
    examples=[
        PythonEx(
            description="Perform Ordinary Least Squares (OLS) regression.",
            code=[
                "stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()",
                'obb.econometrics.ols_regression(data=stock_data, y_column="close", x_columns=["open", "high", "low"])',
            ],
        )
    ],
)
```

## Views implementation

This `category_views.py` file only exists, if we want to display a specific chart from that dataset.

This expects the user to utilize the `openbb-charting` extension. Here's what it looks like.

![FRED Chart](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00)

In terms of implementation, these files can be quite large due to inherent customizability associated with charting.

Here's an example for port information.

```python
"""Views for the Economy Extension."""

# flake8: noqa: PLR0912
# pylint: disable=too-many-branches

from typing import TYPE_CHECKING, Any, Optional
from warnings import warn

if TYPE_CHECKING:
    from openbb_charting.core.openbb_figure import (
        OpenBBFigure,
    )


class EconomyViews:
    """economy Views."""

    @staticmethod
    def economy_shipping_port_info(
        **kwargs,
    ) -> tuple["OpenBBFigure", dict[str, Any]]:
        """Port Info Chart."""
        # pylint: disable=import-outside-toplevel

        provider = kwargs.get("provider")

        if provider != "imf":
            raise RuntimeError(
                f"This charting method does not support {provider}. Supported providers: imf."
            )

        try:
            from openbb_imf.views.port_info import (
                plot_port_info_map,
            )
        except Exception as e:
            raise RuntimeError("Unable to import the required module.") from e

        data = (
            kwargs.pop("data", None)
            if "data" in kwargs and kwargs["data"] is not None
            else kwargs.get("obbject_item")
        )
        fig = plot_port_info_map(data)  # type: ignore
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
        )
        content = fig.to_plotly_json()

        content["config"] = dict(
            responsive=False,
            displayModeBar=False,
            dragMode="pan",
            doubleClick="reset",
        )

        return fig, content
```

## Helpers implementation

This file in general doesn't exist, particularly if we are building a data extension.

However, for a toolkit extension, this may be helpful to add helper functions or others.

Example for `openbb_quantitative/helpers.py`:

```python
"""Helper functions for Quantitative Analysis."""

from typing import TYPE_CHECKING, Union

if TYPE_CHECKING:
    from pandas import DataFrame, Series


def validate_window(input_data: Union["Series", "DataFrame"], window: int) -> None:
    """Validate the window input.

    Parameters
    ----------
    input_data : Union[Series, DataFrame]
        The input data to be validated.
    window : int
        The window to be validated.

    Raises
    ------
    ValueError
        If the window is greater than the input data length.
    """
    if window > len(input_data):
        raise ValueError(
            f"Window '{window}' is greater than the input data length '{len(input_data)}'"
        )

```

## Tests

This folder is usually empty for data extensions. With a `.gitkeep` file so the folder is recognized by git, even if empty.

Unless we are doing a toolkit extension and the user wants to add additional tests to the `helpers.py` file created.

In that case we may have something like `tests/test_quantitative_helpers.py`:

```python
"""Test the quantitative helpers."""

import pandas as pd
from extensions.quantitative.openbb_quantitative.helpers import (
    validate_window,
)


def test_validate_window():
    """Test the validate_window function."""
    input_data = pd.Series(range(1, 100))
    validate_window(
        input_data=input_data,
        window=20,
    )
```

## Integration Tests

The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider.

### API

Here's an example of our `integration/test_economy_api.py`:

```python
"""Test Economy API."""

import base64

import pytest
import requests
from extensions.tests.conftest import parametrize
from openbb_core.env import Env
from openbb_core.provider.utils.helpers import get_querystring


@pytest.fixture(scope="session")
def headers():
    """Get the headers for the API request."""
    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"
    userpass_bytes = userpass.encode("ascii")
    base64_bytes = base64.b64encode(userpass_bytes)

    return {"Authorization": f"Basic {base64_bytes.decode('ascii')}"}


# pylint: disable=redefined-outer-name


@parametrize(
    "params",
    [
        (
            {
                "provider": "nasdaq",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
                "country": "united_states,japan",
            }
        ),
        (
            {
                "provider": "tradingeconomics",
                "start_date": "2023-01-01",
                "end_date": "2023-06-06",
                "country": "mexico,sweden",
                "importance": "low",
                "group": "gdp",
                "calendar_id": None,
            }
        ),
        (
            {
                "provider": "fmp",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
            }
        ),
    ],
)
@pytest.mark.integration
def test_economy_calendar(params, headers):
    """Test the economy calendar endpoint."""
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/economy/calendar?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

To run this test, we will need to open a second terminal and start the server.

```console
uvicorn openbb_core.api.rest_api:app
```

Go back to the first terminal and run the test by entering:

```console
pytest test_economy_api.py
```

### Python

Here's an example of our `integration/test_economy_python.py`:


```python
"""Test economy extension."""

import pytest
from extensions.tests.conftest import parametrize
from openbb_core.app.model.obbject import OBBject


@pytest.fixture(scope="session")
def obb(pytestconfig):  # pylint: disable=inconsistent-return-statements
    """Fixture to setup obb."""

    if pytestconfig.getoption("markexpr") != "not integration":
        import openbb  # pylint: disable=import-outside-toplevel

        return openbb.obb


# pylint: disable=redefined-outer-name


@parametrize(
    "params",
    [
        (
            {
                "provider": "nasdaq",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
                "country": "united_states,japan",
            }
        ),
        (
            {
                "provider": "tradingeconomics",
                "start_date": "2023-01-01",
                "end_date": "2023-06-06",
                "country": "mexico,sweden",
                "importance": "low",
                "group": "gdp",
                "calendar_id": None,
            }
        ),
        (
            {
                "provider": "fmp",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
            }
        ),
    ],
)
@pytest.mark.integration
def test_economy_calendar(params, obb):
    """Test economy calendar."""
    params = {p: v for p, v in params.items() if v}

    result = obb.economy.calendar(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

You can run the test by running:

```console
pytest test_economy_python.py
```


---

---
title: Contributing
sidebar_position: 8
description: This guide outlines the expectations for contributors to the OpenBB Platform. It covers aspects such as use cases, documentation, code quality, testing, performance, and collaboration. Whether you're enhancing functionality, building extensions, or contributing code.
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Code contribution
- Documentation
- Code quality
- Testing
- Performance optimization
- Collaboration
- Use cases
- OpenBB extensions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Contributing - Developer Guide | OpenBB Platform Docs" />

Thank you for taking the time to engage as a contributor. There is no contribution that is too small.
whether it is a spelling error in the documentation, or contributing code and participating in the
standardization of data, we appreciate all of you.

We hope your contributing experience is a good one, and if there's anything we can do to improve, please send us your feedback.
The list below is intended to provide some guidance on what the general expectations are.

1. Use Cases:
   - Ensure that your contributions directly enhance the OpenBB Platform's functionality or extension ecosystem.

2. Documentation:
   - All code contributions should come with relevant documentation, including the purpose of the contribution, how it works, and any changes it makes to existing functionalities.
   - Update any existing documentation if your contribution alters the behavior of the OpenBB Platform.
   - New router functions must have usage [examples](/platform/usage/extensions/overview) defined.

3. Code Quality:
   - Your code should adhere strictly to the OpenBB Platform's coding standards and [conventions](/platform/developer_guide/architecture_overview).
   - Ensure clarity, maintainability, and proper organization in your code.

4. [Testing](tests):
   - All contributions must be thoroughly tested to avoid introducing bugs to the OpenBB Platform.
   - Contributions should include relevant automated tests (unit and integration), and any new feature should come with its test cases.
   - See the page [here](tests) for details on the testing and QA infrastructure.

5. Performance:
   - Your contributions should be optimized for performance and should not degrade the overall efficiency of the OpenBB Platform.
   - Address any potential bottlenecks and ensure scalability.

6. Collaboration:
   - Engage actively with the OpenBB development team to ensure that your contributions align with the project's goals and standards.
   - Welcome feedback and be open to making revisions based on reviews and suggestions from the community.


---

---
title: Dependency Management
sidebar_position: 4
description: Dealing with dependencies when developing with the OpenBB Platform. Learn how to add new dependencies to the OpenBB Platform and how to add new dependencies to your custom extension.
keywords:
- OpenBB Platform
- Open source
- Python interface
- Dependency Management
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dependency Management - Development | OpenBB Platform Docs" />

- **Core**: Serves as the main infrastructure. All extensions and providers have `openbb-core` as a dependency.
- **Extensions**: Utility packages that leverage Core's infrastructure. Each extension is its own package.
- **Providers**: Utility packages extending functionality to different providers, where each provider is its own package.

> This page assumes that the OpenBB GitHub repo has been cloned.


## Core installation

:::warning
Do not run these commands in an already-installed OpenBB Platform environment. Do not run both `pip` and `poetry`.
:::

- **pip**: `pip install -e OpenBB/openbb_platform/platform/core`

or

- **poetry**: `poetry install OpenBB/openbb_platform/platform/core`

### Add dependencies

Ensure you're in a fresh conda environment before adjusting dependencies.

- **Add a Dependency**: `poetry add <my-dependency>`
- **Update Dependencies**:
  - All: `poetry update`
  - Specific: `poetry update <my-dependency>`
- **Remove a Dependency**: `poetry remove <my-dependency>`

## Development setup

For development setup, use the provided script to install all extensions and their dependencies:

- `python dev_install.py [-e|--extras]`

> **Note**: If developing an extension, avoid installing all extensions to prevent unnecessary overhead.

## Dependency Management

Utilizing Poetry.

- **Add Platform Extension**: `poetry add openbb-extension-name [--dev]`
- **Resolve Conflicts**: Adjust versions in `pyproject.toml` if notified by Poetry.
- **Lock Dependencies**: `poetry lock`
- **Update Platform**: `poetry update openbb-platform`
- **Documentation**: Maintain `pyproject.toml` and `poetry.lock` for a clear record of dependencies.


---

---
title: Deprecating Endpoints
sidebar_position: 6
description: This guide provides detailed instructions on how to deprecate an endpoint in the OpenBB Platform.
keywords:
- OpenBB community
- OpenBB Platform
- Custom commands
- API
- Python Interface
- Deprecation
- Deprecated
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Deprecating Endpoints - How-To | OpenBB Platform Docs" />

Deprecating commands is essential to maintaining the OpenBB Platform. This guide outlines the process for deprecating an endpoint.

1. Add the new endpoint that will replace the deprecated one.

2. Add the deprecation warning

    Navigate to the **router** where the endpoint to be deprecated exists. Set the `deprecated` flag to `True` and add `deprecation=OpenBBDeprecationWarning(…)` argument to the decorator. Refer to the example below:

    ```python

    from openbb_core.app.deprecation import OpenBBDeprecationWarning

        @router.command(
            model="MarketIndices",
            deprecated=True,
            deprecation=OpenBBDeprecationWarning(
                message="This endpoint is deprecated; use `/index/price/historical` instead.",
                since=(4, 1),
                expected_removal=(4, 5),
            ),
        )
        async def market(
            cc: CommandContext,
            provider_choices: ProviderChoices,
            standard_params: StandardParams,
            extra_params: ExtraParams,
        ) -> OBBject:
            """Historical Market Indices."""
        return await OBBject.from_query(Query(**locals()))
    ```

3. Get approval from a OpenBB Platform maintainer: We will help you determine the appropriate version for the deprecation warning, and communicate the change(s) to the relevant personnel that might depend on the endpoint you are deprecating.

4. Remove as we say - the endpoint will be removed in the version specified in the deprecation warning.


---

---
title: Disabling Output Validation
sidebar_position: 3
description: This page provides instructions for disabling output validation, when defining a new router function.
keywords:
- Validation
- Pydantic
- Python
- Development
- OpenBB Platform
- Provider Interface
- Router
- Custom
- Commands
- FastAPI
- extensions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Disabling Output Validation - Developer Guides | OpenBB Platform Docs" />

In some cases, it may be desirable to disable output validation for a custom router endpoint.
The example below demonstrates how to do it within your own custom router path.

:::important
This section refers to settings available beginning OpenBB v4.4.0
:::

In boths functions, the output will be typed as "Any", regardless of what the `return` definition states.

Within the `@router.command` decorator, add the keyword argument:

```python
no_validate = True
```

## Example

This example assumes that ficticious extensions have been defined and installed.

```python
from datetime import datetime

from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx, PythonEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router
from openbb_core.provider.abstract.data import Data

router = Router(prefix="", description="Some OpenBB Router Extension.")

# This uses the Provider Interface.
@router.command(
    model="SomeModel",
    no_validate=True,
    examples=[
        APIEx(parameters={"provider": "some_provider"}),
        PythonEx(
            description="Say Hello.",
            code=[
                "result = obb.some_extension.some_provider_function()",
            ],
        ),
    ],
)
async def some_provider_function(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject[Data]:
    """Some function using the Provider Interface."""
    obbject = await OBBject.from_query(Query(**locals()))

    new_output = []
    results = obbject.results

    # Do something with results and append to `new_output` list.

    return new_output


# This is a standard router "get" command.
@router.command(
    methods=["GET"],
    no_validate=True
    examples=[
        PythonEx(
            description="Say Hello.",
            code=[
                "result = obb.some_extension.hello()",
            ],
        ),
    ],
)
async def hello() -> (
    Any
):
    """Hello World."""
    return {
        datetime.now().strftime(
            "%Y-%m-%d"
        ): "Hello from the Empty Router extension!"
    }
```


---

---
title: Dynamic Command Execution
sidebar_position: 5
description: This guide provides detailed instructions on how to execute commands dynamically in the OpenBB Platform.
keywords:
- OpenBB community
- OpenBB Platform
- Custom commands
- API
- Python Interface
- Dynamic Execution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dynamic Command Execution | OpenBB Platform Docs" />


Dynamic execution provides an alternate entry point to functions. This method requires formatting the query as demonstrated below.

```python
from openbb_core.app.command_runner import CommandRunner
runner = CommandRunner()
output = await runner.run(
    "/equity/fundamental/ratios",
    provider_choices={
        "provider": "fmp",
    },
    standard_params={
        "symbol" : "TSLA",
        "period" : "quarter",
    },
    extra_params={}
)
```

```console
>>> output
OBBject

id: 065241b7-bd9d-7313-8000-9406d8afab75
results: [{'symbol': 'TSLA', 'date': '2023-06-30', 'period': 'Q2', 'current_ratio':...
provider: fmp
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'fmp'}, 'standa...
```


---

---
title: HTTP Requests
sidebar_position: 1
description: This guide outlines OpenBB processes for making HTTP requests synchronously and asynchronously. Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Code contribution
- Requests
- HTTP
- Async
- Synchronous
- provider
- extension
- data
- fetch
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="HTTP Requests - Contributor Guidelines - Development | OpenBB Platform Docs" />

Any function fetching data requires making an outbound HTTP request. Utility functions within the `openbb-core` simplify the procedure for making both asynchronous and synchronous requests. These cover the majority of typical requests and should be imported for use instead of creating a new client from scratch.

Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.

:::info
See [Environment Variables](/platform/settings/environment_variables) and [System Settings](/platform/settings/system_settings) for information on configuring global settings and the session object.
:::

## Generate Query String

To pass parameters to a URL, they need to be formatted as a query string. The helper function, `get_querystring()`, converts a dictionary of parameters to a standard query URL string.

```python
from openbb_core.provider.utils.helpers import get_querystring
```

```python
    Parameters
    ----------
    items: dict
        The dictionary to be turned into a querystring.

    exclude: List[str]
        The keys to be excluded from the querystring.

    Returns
    -------
    str
        The querystring.
```

Within the context of the Fetcher, the "query" object is a Pydantic model. To pass the query parameters to the helper function, apply `model_dump()` to the query object. This removes any key:values where the value is `None`.

There may be parameters that are not intended to be included in the parameters portion of the URL string. Pass those as a `List` to the `exclude` parameter of `get_querystring()`.

```python
query_string = get_querystring(query.model_dump(), ["interval"])
```

In the example above, the "base url" is dedicated to the "interval" of the OHLC data. We want to exclude `&interval=1d` from the parameters portion of the final URL. Or, daily/monthly/intraday levels are all different end points from the provider's API.

## Asynchronous vs Synchronous

Every function in the router is asynchronous. This is the only place an asynchronous function *must* be used. Data-fetching router functions all follow the same format.

```python
@router.command(model="MarketSnapshots")
async def market_snapshots(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get a current, complete, market snapshot."""
    return await OBBject.from_query(Query(**locals()))
```

The code above executes the endpoint consumed by the user. Each data provider model mapped to the model name in the router decorator could be asynchronous or synchronous.

### Why Async?

An asynchronous fetcher is suitable for data sources demanding multiple queries per command. Options chains, for example, could be served as only a single expiration date, but others will provide the complete chain as a single request.

In the case of the former, dozens of requests, an asynchronous fetcher will dramatically improve performance. The latter is only one request and the code can be simplified as a synchronous process.

Some data providers allow for bulk downloading from a list of symbols, while many do not. It might be desirable to enhance a data source by adding support for bulk downloading. Wrapping it as list of asynchronous tasks makes it an efficient process. The time to download one item should be the same as two because the tasks are carried out concurrently.

Ultimately, the choice is at the discretion of the developer. OpenBB has made the implementation of both methods easy and fast, the next sections will elaborate.


### Synchronous - Requests

```python
from openbb_core.provider.utils import make_request
```

This function is an abstract helper to make requests from a URL with potential headers and parameters. It accepts `**kwargs` and returns a `requests.Response` object. If no headers are supplied, it will attempt to use a generic user-agent. Add headers as a dictionary to the `headers` parameter of the query.

All parameters of `requests.get` or `requests.post`are accessible and passed through as `**kwargs`.

```python

    Parameters
    ----------
    url : str
        Url to make the request to
    method : str, optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout

    Returns
    -------
    requests.Response
        Request response object

    Raises
    ------
    ValueError
        If invalid method is passed
```


### Asynchronous - AIOHTTP

Single-URL requests can be made asynchronously. The name of the function now starts with, `a`.

```python
from openbb_core.provider.utils.helpers import amake_request
```

This function uses the `aiohttp` client and accepts `kwargs`. It has a default callback function that assumes the content is `json`. No post-request object parsing is required, but this behaviour is overridden with the `response_callback` parameter.

```python
    Parameters
    ----------
    url : str
        Url to make the request to
    method : str, optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout
    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional
        Async callback with response and session as arguments that returns the json, by default None
    session : ClientSession, optional
        Custom session to use for requests, by default None


    Returns
    -------
    Union[dict, List[dict]]
        Response json
```

:::tip
Don't forget to `await`!

```python
url = "https://someurlwithdata.profit"
response_json = await amake_requests(url)
```

Absent `await`, the response is a coroutine - a task waiting to be executed.

:::

### Multi-URL Requests

The helper function becomes plural, `amake_requests`, when fetching for a list of URLs. Under the hood, it is using `asyncio.gather` to perform the tasks concurrently. The same default callback function from `amake_request` exists, only here it appends the expected `json` output to a `List[Dict]`.

```python
from openbb_core.provider.utils.helpers import amake_requests
```

```python
    Parameters
    ----------
    urls : Union[str, List[str]]
        List of urls to make requests to
    method : Literal["GET", "POST"], optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout
    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional
        Async callback with response and session as arguments that returns the json, by default None
    session : ClientSession, optional
        Custom session to use for requests, by default None

    Returns
    -------
    Union[dict, List[dict]]
        Response json
```

### Custom Callback

Customize the response parsing by creating a specific callback function. The example below is a method for converting CSV data to a dictionary and appending it to a list.

```python
from io import StringIO
from typing import Any
from pandas import DataFrame

results = []

async def response_callback(response, _: Any):
    """Callback for HTTP Client Response."""
    response = await response.text()
    data = DataFrame(StringIO(response), skiprows=2)
    results.append(data.to_dict("records"))
```


### Asynchronous Fetchers

When a Fetcher is asynchronous, the `extract_data` static method needs to be defined accordingly - `aextract_data` instead of `extract_data`.

```python
    @staticmethod
    async def aextract_data(
        query: SourceModelQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
```

These helper functions simplify and standardize the majority of HTTP requests.

They are starting points for building or modifying data provider extensions, and they can also be imported as a standalone utility within any Python session.


---

---
title: Standardization
sidebar_position: 5
description: Learn about the OpenBB Platform, an open-source solution built by the community. Understand its use via Python interface and REST API, and acquaint yourself with how to build a custom extension or contribute directly to the platform
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Data integration
- Data standardization
- OpenBB extensions
- openbb-core
- Python package
- High-Level Architecture
- Custom extension
- Contribution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Standardization - Development | OpenBB Platform Docs" />

The Standardization Framework is a set of tools and guidelines that enable the user to query and obtain data in a consistent way across multiple providers.

Each provider data model should inherit from an already defined [standard](https://docs.openbb.co/platform/data_models) model. All standard models are created and maintained by the OpenBB team.

If a standard model needs to be created, please open a pull request and detail its use.

Standardizing provider query parameters and response data enhances the user experience by overcoming things like:

- Consistent query parameters across all data sources for a function, or type of function.
- Output data that has conformed types, is validated, and will be JSON serializable.
  - `NaN`, `NaT`, `"None"`, empty strings, are always returned as `NoneType` (null).
- Transparently defined schemas for the data and query parameters.
- Outputs from multiple sources are comparable with each other and easily interchanged.

The standard models are all defined in the `/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/` [directory](https://github.com/OpenBB-finance/OpenBB/tree/main/openbb_platform/core/openbb_core/provider/standard_models).

Every standard model consists of two classes, with each being a Pydantic model.

- [`QueryParams`](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/query_params.py)
- [`Data`](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/data.py)

Any parameter or field can be assigned a custom `field_validator`, or the entire model can be passed through a `model_validator` on creation.

## Caveats

The standardization framework is a very powerful tool, but it has some caveats that you should be aware of:

- We standardize fields and parameters that are shared between multiple providers.
  - In some cases, it can be undesirable to define common items in the standard model. In this event, we still want consistent names and descriptions.
- When mapping the column names from a provider-specific model to the standard model, the CamelCase to snake_case conversion is done automatically. If the column names are not the same, you'll need to manually map them.
  - e.g., `__alias_dict__ = {"o": "open"}`
- The standard models are created and maintained by the OpenBB team. If you want to add or modify a field within a standard model, you'll need to open a PR to the OpenBB Platform.


---

---
title: Tests
sidebar_position: 7
description: This section provides an in-depth look at the Quality Assurance (QA) process in the OpenBB Platform. It covers the use of QA tools for testing extensions, creation of unit and integration tests, and the importance of maintaining a short import time for the package.
keywords:
  - OpenBB QA process
  - Unit and integration tests
  - QA tools
  - Extension testing
  - Import time optimization
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Tests - Contributor Guidelines - Development | OpenBB Platform Docs" />

We are strong believers in the Quality Assurance (QA) process and we want to make sure that all the extensions that are added to the OpenBB Platform are of high quality.

To ensure this, we have a set of QA tools that you can use to test your work.

Primarily, we have tools that semi-automate the creation of unit and integration tests.

> The QA tools are still in development and we are constantly improving them.

## Unit tests

Each `Fetcher` comes equipped with a `test` method that will ensure it is implemented correctly, that it is returning the expected data, that all types are correct, and that the data is valid.

To create unit tests for your Fetchers, you can run the following command:

```bash
python openbb_platform/providers/tests/utils/unit_tests_generator.py
```

> Run this file from the root of the repository, and the `tests` folder must exist, in order to generate the tests.

The automatic unit test generation will add unit tests for all the fetchers available in a given provider.

To record the unit tests, you can run the following command:

```bash
pytest <path_to_the_unit_test_file> --record=all
```

:::note
Sometimes manual intervention is needed. For example, adjusting out-of-top level imports or adding specific arguments for a given fetcher.
:::

## Integration tests

The integration tests are a bit more complex than the unit tests, as we want to test both the Python interface and the API interface. For this, we have two scripts that will help you generate the integration tests.

To generate the integration tests for the Python interface, you can run the following command:

```bash
python openbb_platform/extensions/tests/utils/integration_tests_generator.py
```

To generate the integration tests for the API interface, you can run the following command:

```bash
python openbb_platform/extensions/tests/utils/integration_tests_api_generator.py
```

When testing the API interface, you'll need to run the OpenBB Platform locally before running the tests. To do so, you can run the following command:

```bash
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

These automated tests are a great way to reduce the amount of code you need to write, but they are not a replacement for manual testing and might require tweaking. That's why we have unit tests that test the generated integration tests to ensure they cover all providers and parameters.

To run the tests we can do:

- Unit tests only:

```bash
pytest openbb_platform -m "not integration"
```

- Integration tests only:

```bash
pytest openbb_platform -m integration
```

- Both integration and unit tests:

```bash
pytest openbb_platform
```

## Import time

We aim to have a short import time for the package. To measure that we use `tuna`.

- [https://pypi.org/project/tuna/](https://pypi.org/project/tuna/)

To visualize the import time breakdown by module and find potential bottlenecks, run the
following commands from `openbb_platform` directory:

```bash
pip install tuna
python -X importtime openbb/__init__.py 2> import.log
tuna import.log
```

## Known caveats

When using the OpenBB QA Framework it is important to be aware of the following caveats:

- The tests are semi-automated and might require manual intervention. For example, adjusting out-of-top level imports or changing specific arguments for a given payload.

- The integration tests are more complex and if your newly added provider integration is already covered by the
  integration tests from previous commands or providers, you will need to manually inject the payload for the new
  provider.

- In the integration test parametrized payload, the first item is always the set of standard parameters. Every
  consecutive item is a set of parameters for a specific provider with the standard parameters included.

- The integration tests require you to be explicit, by using all of the standard parameters and provider-specific
  parameters in the payload. If you want to exclude a parameter, you can use `None` as its value.

- The integration tests require you to be explicit by specifying the `provider` parameter in provider-specific
  payloads.

- When recording unit tests, you might run into issues with the cache that is tied to your specific provider and present
  on your local machine. You will know that this is the case if your tests pass locally, but fail on the CI. To fix this,
  you can delete the cache file from your local machine and re-record the tests.

      > Note that the cache is likely located here:
      > Windows: `C:\Users\user\AppData\Local\`
      > Linux: `/home/user/.cache/`
      > Mac: `/Users/user/Library/Caches`

- Some providers (we are aware only of YFinance so far) do an additional request when used from the US region. As our CI
  is running from the US region, this might cause the tests to fail. A workaround for this is to use a VPN to record the
  tests from a different region.


---

---
title: Using OpenBB With FastAPI and Depends
sidebar_position: 9
description: This page demonstrates how to efficiently import the OpenBB Python package into a FastAPI application, for use in any endpoint.
keywords:
  - OBB
  - Python
  - Development
  - OpenBB Platform
  - FastAPI
  - Depends
  - Router
  - Custom
  - Application
  - API
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Using OpenBB With FastAPI and Depends - Developer Guides | OpenBB Platform Docs" />

This page demonstrates how to efficiently import the OpenBB Python package into a FastAPI application,
for use in any endpoint.

The code below is a complete example for wrapping the Python interface in an API that calls `obb.equity.price.quote`.

Best practice would be to create, `OpenBBApp`, as a separate file and import directly in each router file requiring it.

## Example

```python
"""Example of using the OpenBB Python Interface as a FastAPI Dependency."""

from typing import Annotated
from openbb_core.app.model.abstract.singleton import SingletonMeta
from fastapi import (
    Depends,
    FastAPI,
)

app = FastAPI()


class OpenBB(metaclass=SingletonMeta):
    def __init__(self):
        import openbb

        self._obb = openbb.sdk

    @property
    def obb(self):
        return self._obb


def get_openbb():
    return OpenBB().obb


OpenBBApp = Annotated[OpenBB, Depends(get_openbb)]


@app.get("/quote")
async def quote(obb: OpenBBApp, symbol: str = "AAPL", provider: str = "yfinance"):
    return obb.equity.price.quote(symbol, provider=provider).model_dump()["results"]


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app)
```

:::info
Launch the server by copying the code block above into a new file, then run it as a script from the command line.
:::


---

---
title: Validators
sidebar_position: 2
description: This guide provides detailed instructions on how and where validators should be used.
keywords:
- OpenBB Platform
- Data point addition
- Provider creation
- Query parameters
- Data output models
- Fetcher class
- validator
- field
- param
- Fast API
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Validators - Developer Guidelines - Development | OpenBB Platform Docs" />

Both QueryParams and Data models can benefit from the tactical use of Pydantic validators.
This page will outline some of the key scenarios where they are deployed.

Overall, they assist with enforcing Fast API compliance for both inputs and outputs,
and they work in the final stage of transformation immediately before output.

Some situations where they are used include:

- Transform, conform, or otherwise alter the entered query parameter or returned data value.
- A query parameter or data field is a date.
- A query parameter requires a dynamic default state.
- Normalizing percent values.
- Cleaning NaN values.

## Examples

The items to import from the Pydantic library are:

```python
from pydantic import field_validator, model_validator
```

### Parsing Dates

Providers will format dates in a number of ways. OpenBB uses YYYY-MM-DD as the standard convention, for both inputs and outputs.

Outputs are a `datetime` object or JSON serialized string. Validators are used to parse the date from the specific format.
This example is used within a provider's `Data` model.

```python
@field_validator("last_trade_timestamp", mode="before", check_fields=False)
@classmethod
def parse_timestamp(cls, v):
    """Parse a Unix timestamp."""
    return datetime.fromtimestamp(v)
```

### Normalize Percent Values

At the provider level, we want to standardize the way values representing a percent are returned.

It is our intention to ensure those values are ready-to-consume by formulas without conversion.
This example would be used within a provider's `Data` model.

```python
@field_validator("change_percent", mode="before", check_fields=False)
@classmethod
def normalize_percent(cls, v):
    """Normalize the percent."""
    return v / 100 if v else None
```

### Dynamic Default Date

It might be desirable to have a default date parameter that is not static. To allow this, we must set the default parameter value as `None`, and use the `model_validator`. This example is for the `QueryParams`.

```python
@model_validator(mode="before")
@classmethod
def validate_dates(cls, values) -> dict:
    """Validate the query parameters."""
    if values.get("start_date") is None:
        values["start_date"] = (datetime.now() - timedelta(days=90)).date()
    if values.get("end_date") is None:
        values["end_date"] = datetime.now().date()
    return values
```

### Replace 0s With None

Sometimes values are returned as a `0` when they should really be a `null`.
This example looks at the entire `Data` model, but could easily be adapted to use on individual fields.

```python
@model_validator(mode="before")
@classmethod
def replace_zero(cls, values):
    """Check for zero values and replace with None."""
    return (
        {k: None if v == 0 else v for k, v in values.items()}
        if isinstance(values, dict)
        else values
    )
```


---

---
title: Create extension from scratch
sidebar_position: 1
description: This guide outlines the process for adding a new endpoint to an existing data provider, that does not yet have a standard model.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - new endpoint
  - fmp
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - data model
  - currency
  - snapshot
  - router
  - how to
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Add Command To An Existing Provider - How-To | OpenBB Platform Docs" />

This page will walk through adding a new router endpoint to an existing data provider, and how to go about creating a new standard model.

To demonstrate, we will be extending the `openbb-currency` router. The objective is to add a snapshot of currencies relative to a base currency.

The process will be very similar to adding a data provider to an existing endpoint - but here, we need to create a new standard model and add an extension.

It's about the same amount of work, but effort should be placed in consideration of others inheriting from this model in the future.

At a high level, the workflow is going to look something like:

1. With clear objectives, define the requirements for inputs and outputs of this function.
2. Create a standard model that will be suitable for any provider to inherit from.
3. Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher.
4. Create a new router endpoint in the `openbb-currency` module.
5. Rebuild the Python interface and static assets.
6. Create unit tests.
7. Create integration tests.
8. Submit a pull request.

## Getting started

Clone the GitHub repo and navigate into the project's folder.

If you have already done this, update your local branch:
    - `git fetch`
    - `git pull origin develop`

Install the OpenBB Platform in "editable" mode.
  - `cd openbb_platform`
  - `python dev_install.py -e`

Rebuild the Python interface and static assets.
  - `import openbb`
  - `openbb.build()`

Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with `feature/`.
  - `git checkout -b feature/currency-snapshots`

## Background information

Currencies, as an asset class, have different data properties than securities. For this exercise, we're really only concerned about the differences within the market data we are working with.
Things to keep in mind are:

- Market trading hours are relative to three major centers: Hong Kong, London, New York.
- Between the active global trading sessions, FX markets are 24/5.
- The data returned from a source could be time-indexed to any of the three market centers, localized as UTC, or make you guess.
- OHLC time series data will not always have volume.
- Not all sources will provide bid/ask, and/or, lot sizes.
- Perspective for the data is a relative relationship, there are always two "symbols".
  - Similar to index benchmarking, but with a layer of interest rate expectations.
- Gold and silver are typically included as, XAU and XAG, respectively.

## Build Standard Model

The essence of a standard model is to be a shared resource with common ground between all sources.

It should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence.

Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform.

### Requirements

Our objective in this exercise has similar endpoints in the Equity and Index modules, `obb.equity.market_snapshots()` and `obb.index.snapshots()`;
however, there are differences between currency data and stocks.

The normal parameter for most asset classes, "symbol", fits our requirement; but, it is not the correct description. Instead, we want to name it, "base".
We need data providers to have an option to "allow" querying multiple base symbols.

We want to view the universe relative to a base currency, but we also want the option for comparative analysis between multiple bases.

In the data model, we'll need to split the typical "symbol" field into two: "base" and "currency".

It's quite likely that a large portion of users will not desire the entire universe, but maybe 20-30 of them.
It would be a good idea to have a parameter that filters for a list of desired currencies.

For this purpose, we want to express the view as an "[indirect quote](https://www.investopedia.com/terms/i/indirectquote.asp)" from the perspective of the "base currency".
How many units of "currency" X are received by selling one unit of the "base".
Compared against the USD, EUR should be less than 1, AUD should be greater than 1, and gold is a large decimal.

We can easily apply an inverse that allows users to decide for themselves which perspective they want to view
the exchange rate from. This is something that will need to be applied at the provider level, and it should be a requirement.

We will add a parameter, "quote_type", with choices ["indirect", "direct"].

There is one major monkey wrench in all of this. Is it, EUR/USD or USD/EUR? Do all providers return the same conventions?
It's a known-unknown, and we can't assume blindly that all follow the norm - or are even consistent with themselves.
We'll need to check a variety of response data from each source to find out.

The output needs to be usable as a conversion table, and this will likely need to be manually enforced.

:::important

The rule must be clearly communicated and each provider's output should be verified for compliance, else coerced to be.

:::

### Create a new file

We're going to map this new endpoint in the interface to, `obb.currency.snapshots()`. We'll name the model accordingly, `CurrencySnapshots`, and create a file, `currency_snapshots.py`. The file should be created here:

```console
~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/
```

The first line of the file should be a docstring, the second line should be empty, and the import statements follow.

The code block below are the typical imports in a standard model file, modify to suit the specific requirements.

:::tip

Constrained types can be imported from the Pydantic library, i.e. `PositiveInt`, `NonNegativeFloat`, etc.

:::

```python
"""Currency Snapshots Standard Model."""

from typing import Literal, Optional

from pydantic import Field, field_validator

from openbb_core.provider.abstract.data import Data
from openbb_core.provider.abstract.query_params import QueryParams
from openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS
```

### QueryParams

Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.
The same applies to `Literal` types, set as a generic `str` or `int` type and redefine it within the provider model as a `Literal["choice1", "choice2"]`.
We don't want a standard model parameter to provide invalid choices for individual providers.

Our `CurrencySnapshotsQueryParams` model is going to be very similar to `MarketSnapshotsQueryParams`, with the only difference being the field name "base".

:::important

If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - `Union[str, List[str]]`.
Instead, define it for the single value, `str`, and then add the property below to the provider's QueryParams model.

```python
__json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

:::

The code block below is a continuation of the section above.

```python
class CurrencySnapshotsQueryParams(QueryParams):
    """Currency Snapshots Query Params."""

    base: str = Field(description="The base currency symbol.", default="usd")
    quote_type: Literal["direct", "indirect"] = Field(
        description="Whether the quote is direct or indirect."
        + " Selecting 'direct' will return the exchange rate"
        + " as the amount of domestic currency required to buy one unit"
        + " of the foreign currency."
        + " Selecting 'indirect' (default) will return the exchange rate"
        + " as the amount of foreign currency required to buy one unit"
        + " of the domestic currency.",
        default="indirect",
    )
    counter_currencies: Optional[Union[str, List[str]]] = Field(
        description="An optional list of counter currency symbols to filter for."
        + " None returns all.",
        default=None,
    )

    @field_validator("base", mode="before", check_fields=False)
    @classmethod
    def to_upper(cls, v):
        """Convert the base currency to uppercase."""
        return v.upper()

    @field_validator("counter_currencies", mode="before", check_fields=False)
    @classmethod
    def convert_string(cls, v):
        """Convert the counter currencies to an upper case string list."""
        if v is not None:
            return ",".join(v).upper() if isinstance(v, list) else v.upper()
        return None
```

It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.
This can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations.

### Data

Like `QueryParams`, we don't want to attempt to define every potential future field. We want a core foundation for others to build on.
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
data parsing requirements for this endpoint:

- Split the six-letter symbol as two symbols.
- If the provider only returns `{"symbol": "price"}`, it will need to coerced accordingly within the `transform_data` static method of the `Fetcher` class.

```python
class CurrencySnapshotsData(Data):
    """Currency Snapshots Data."""

    base_currency: str = Field(description="The base, or domestic, currency.")
    counter_currency: str = Field(description="The counter, or foreign, currency.")
    last_rate: float = Field(
        description="The exchange rate, relative to the base currency."
        + " By default, rates are expressed as the amount of foreign currency"
        + " received from selling one unit of the base currency,"
        + " or the quantity of foreign currency required to purchase"
        + " one unit of the domestic currency."
        + " To inverse the perspective, set the 'quote_type' parameter as 'direct'.
    )
    open: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("open", ""),
        default=None,
    )
    high: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("high", ""),
        default=None,
    )
    low: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("low", ""),
        default=None,
    )
    close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("close", ""),
        default=None,
    )
    volume: Optional[int] = Field(
        description=DATA_DESCRIPTIONS.get("volume", ""), default=None
    )
    prev_close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("prev_close", ""),
        default=None,
    )
```

Combine the three code blocks above to make a complete standard model file, and then we have completed the first two tasks.

- [x] With clear objectives, define the requirements for inputs and outputs of this function.
- [x] Create a standard model that will be suitable for any provider to inherit from.

## Build Provider Models

We're going to start with one provider, [FMP](https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote), and this section will look a lot like the process outlined [here](/platform/developer_guide/tutorials/add_new_provider_to_existing_extension).

### Create File For Provider

We need to create a new file in the FMP provider extension. This will have the same name as our standard model.

```console
~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py
```

The first line in the file will always be a docstring, with the import statements beginning below an empty line.

```python
"""FMP Currency Snapshots Model."""

# pylint: disable=unused-argument

from datetime import datetime
from typing import Any, Dict, List, Optional

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.currency_snapshots import (
    CurrencySnapshotsData,
    CurrencySnapshotsQueryParams,
)
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import amake_request
from pandas import DataFrame, concat
from pydantic import Field, field_validator
```

### Define QueryParams

Here, we won't need to define any new parameters. All that's added is a URL to the endpoint's documentation,
and then the `__json_schema_extra__` dictionary which will allow multiple base symbols to be accepted by this provider.

```python
class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):
    """
    FMP Currency Snapshots Query.

    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote
    """

    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

### Define Data

Sample output data from the source is pasted below, and we can see that there are some fields which don't have anything to do with currencies. Those will be dropped.

```json
[
  {
    "symbol": "AEDAUD",
    "name": "AED/AUD",
    "price": 0.40401,
    "changesPercentage": 0.3901,
    "change": 0.0016,
    "dayLow": 0.40211,
    "dayHigh": 0.40535,
    "yearHigh": 0.440948,
    "yearLow": 0.356628,
    "marketCap": null,
    "priceAvg50": 0.39494148,
    "priceAvg200": 0.40097216,
    "volume": 0,
    "avgVolume": 0,
    "exchange": "FOREX",
    "open": 0.40223,
    "previousClose": 0.40244,
    "eps": null,
    "pe": null,
    "earningsAnnouncement": null,
    "sharesOutstanding": null,
    "timestamp": 1677792573
  }
]
```

We'll then need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining.

```python
class FMPCurrencySnapshotsData(CurrencySnapshotsData):
    """FMP Currency Snapshots Data."""

    __alias_dict__ = {
        "last_rate": "price",
        "high": "dayHigh",
        "low": "dayLow",
        "ma50": "priceAvg50",
        "ma200": "priceAvg200",
        "year_high": "yearHigh",
        "year_low": "yearLow",
        "prev_close": "previousClose",
        "change_percent": "changesPercentage",
        "last_rate_timestamp": "timestamp",
    }

    change: Optional[float] = Field(
        description="The change in the price from the previous close.", default=None
    )
    change_percent: Optional[float] = Field(
        description="The change in the price from the previous close, as a normalized percent.",
        default=None,
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    ma50: Optional[float] = Field(
        description="The 50-day moving average.", default=None
    )
    ma200: Optional[float] = Field(
        description="The 200-day moving average.", default=None
    )
    year_high: Optional[float] = Field(description="The 52-week high.", default=None)
    year_low: Optional[float] = Field(description="The 52-week low.", default=None)
    last_rate_timestamp: Optional[datetime] = Field(
        description="The timestamp of the last rate.", default=None
    )

    @field_validator("change_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize the percent."""
        return v / 100 if v is not None else None
```

A validator is setup to convert the percentage to a normalized value (1% -> 0.01).

### Define Fetcher

The Fetcher class will always have the same general construction, in this instance we will use the `transform_data` stage to parse and filter the returned data before validating the model on output.

```python
class FMPCurrencySnapshotsFetcher(
    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]
):
    """FMP Currency Snapshots Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:
        """Transform the query parameters."""
        return FMPCurrencySnapshotsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: FMPCurrencySnapshotsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Extract the data from the FMP endpoint."""

        api_key = credentials.get("fmp_api_key") if credentials else ""

        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"

        return await amake_request(url, **kwargs)  # type: ignore

    @staticmethod
    def transform_data(
        query: FMPCurrencySnapshotsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[FMPCurrencySnapshotsData]:
        """Filter by the query parameters and validate the model."""

        if not data:
            raise EmptyDataError("No data was returned from the FMP endpoint.")

        # Drop all the zombie columns FMP returns.
        df = (
            DataFrame(data)
            .dropna(how="all", axis=1)
            .drop(columns=["exchange", "avgVolume"])
        )

        new_df = DataFrame()

        # Filter for the base currencies requested and the quote_type.
        for symbol in query.base.split(","):
            temp = (
                df.query("`symbol`.str.startswith(@symbol)")
                if query.quote_type == "indirect"
                else df.query("`symbol`.str.endswith(@symbol)")
            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})
            temp["base_currency"] = symbol
            temp["counter_currency"] = (
                [d.split("/")[1] for d in temp["counter_currency"]]
                if query.quote_type == "indirect"
                else [d.split("/")[0] for d in temp["counter_currency"]]
            )
            # Filter for the counter currencies, if requested.
            if query.counter_currencies is not None:
                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable
                    query.counter_currencies
                    if isinstance(query.counter_currencies, list)
                    else query.counter_currencies.split(",")
                )
                temp = (
                    temp.query("`counter_currency`.isin(@counter_currencies)")
                    .set_index("counter_currency")
                    # Sets the counter currencies in the order they were requested.
                    .filter(items=counter_currencies, axis=0)
                    .reset_index()
                )
            # If there are no records, don't concatenate.
            if len(temp) > 0:
                # Convert the Unix timestamp to a datetime.
                temp.timestamp = temp.timestamp.apply(
                    lambda x: datetime.fromtimestamp(x)
                )
                new_df = concat([new_df, temp])
            if len(new_df) == 0:
                raise EmptyDataError(
                    "No data was found using the applied filters. Check the parameters."
                )
            # Fill and replace any NaN values with NoneType.
            new_df = new_df.fillna("N/A").replace("N/A", None)
        return [
            FMPCurrencySnapshotsData.model_validate(d)
            for d in new_df.reset_index(drop=True).to_dict(orient="records")
        ]
```

The last four code blocks combined are the entire contents of the new provider model file.

Next, open `~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/__init__.py`, import the new model, and map it in the Provider class.

Step 3 is now done.

- [x] Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher.

## Add router endpoint to extension

To use our new function, we need to create a router command. The currency router is located here:

```python
~/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py
```

It's as simple as copying and pasting the function above and modifying details to suit.

The examples will be included in the docstring of the endpoint.

```python
@router.command(
    model="CurrencySnapshots",
    examples=[
        APIEx(parameters={}),
        APIEx(
            description="Get exchange rates from USD and XAU to EUR, JPY, and GBP using 'fmp' as provider.",
            parameters={
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            },
        ),
    ],
)
async def snapshots(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Snapshots of currency exchange rates from an indirect or direct perspective of a base currency."""
    return await OBBject.from_query(Query(**locals()))
```

Steps 4 is done:
- [x] Create a new router endpoint in the `openbb-currency` module.

### Smoke test

Save the file, start a new Python session in a Terminal window, rebuild the app, and test it.

```console
import openbb

openbb.build()

exit()
```

Then run:

```python
from openbb import obb

obb.currency.snapshots(base="xau,xag", counter_currencies=["usd", "gbp", "eur", "hkd"],quote_type="indirect").to_df()
```

| base_currency | counter_currency | last_rate |    open |    high |     low | volume | prev_close | change | change_percent |    ma50 |   ma200 | year_high | year_low | last_rate_timestamp |
| :------------ | :--------------- | --------: | ------: | ------: | ------: | -----: | ---------: | -----: | -------------: | ------: | ------: | --------: | -------: | :------------------ |
| XAU           | USD              |   2092.76 | 2083.17 |  2092.8 |  2079.4 |   2246 |       2083 |   9.76 |      0.0046855 | 2030.83 | 1976.63 |   2084.35 |  1813.82 | 2024-03-04 06:16:12 |
| XAU           | GBP              |   1645.45 |  1644.1 |  1645.6 |    1640 |    643 |       1644 |   1.45 |    0.000881995 | 1603.92 | 1573.46 |   1652.15 |   1482.2 | 2024-03-04 05:45:11 |
| XAU           | EUR              |      1924 |  1921.5 |    1924 | 1917.15 |   1517 |       1921 |      3 |      0.0015617 | 1874.69 |  1826.4 |    1921.6 |  1719.35 | 2024-03-04 05:51:11 |
| XAU           | HKD              |   16341.8 |   16310 | 16341.9 | 16276.4 |   1665 |      16307 |  34.75 |       0.002131 | 15891.1 | 15452.8 |   16306.3 |    14238 | 2024-03-04 05:57:11 |
| XAG           | USD              |    23.299 | 23.1091 | 23.3062 | 23.0172 |   2074 |         23 |  0.299 |          0.013 | 22.7862 | 23.4349 |    26.035 |   20.005 | 2024-03-04 05:56:41 |
| XAG           | GBP              |     18.26 |   18.21 |   18.26 |   18.14 |    413 |         18 |   0.26 |      0.0144444 | 17.9988 | 18.5021 |     20.67 |    16.81 | 2024-03-04 05:24:10 |
| XAG           | EUR              |     21.36 |   21.32 |   21.37 | 21.2087 |   1079 |         21 |   0.36 |      0.0171429 | 21.0393 | 21.4906 |     23.64 |    18.97 | 2024-03-04 05:30:10 |
| XAG           | HKD              |   181.237 | 180.881 | 181.399 | 180.124 |   1596 |        180 |  1.237 |      0.0068722 | 178.342 | 181.815 |   204.411 |  157.209 | 2024-03-04 05:30:10 |


Steps 5 is done:
- [x] Create a new router endpoint in the `openbb-currency` module.

## Tests

We'll need to create a unit test for the FMP provider, and then integration tests for the Python interface and Fast API. It's as simple as creating a new router function was, copying and pasting.

### Unit test for provider

This is located in the `openbb-fmp` extension:

```console
~/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py
```

- Import the new fetcher with the rest of the imports (keep them alphabetically sorted).
- Copy and paste the last test function in the file.

```python
@pytest.mark.record_http
def test_fmp_currency_snapshots_fetcher(credentials=test_credentials):
    params = {
        "base": "XAU",
        "quote_type": "indirect",
        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",
    }

    fetcher = FMPCurrencySnapshotsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None
```

- Navigate to the path above and enter: `pytest test_fmp_fetchers.py --record http --record-no-overwrite`

This will generate a new file:

```console
~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml
```

Check the file for any obvious errors, like a bad HTTP request status code.

Step 6 is done:
- [x] Add integration tests.

### Integration tests for router endpoint

The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider.

#### API

Open the file below, and go to the last test in the file.

```console
~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py
```

We can copy this one:

```python
@parametrize(
    "params",
    [({"provider": "ecb"})],
)
@pytest.mark.integration
def test_currency_reference_rates(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/currency/reference_rates?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

Converting it for our new endpoint:

```python
@parametrize(
    "params",
    [
        (
            {
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            }
        ),
    ],
)
@pytest.mark.integration
def test_currency_snapshots(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/currency/snapshots?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

#### Python

The `@parameterize` section can be copied directly to the Python integration test.

```console
~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py
```

```python
@parametrize(
    "params",
    [
        (
            {
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            }
        ),
    ],
)
@pytest.mark.integration
def test_currency_snapshots(params, obb):
    result = obb.currency.snapshots(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

Now run `pytest` for both of these files.

Step 7 is done:
- [x] Add integration tests.

## Submit A Pull Request

We're already on the correct branch, `feature/currency-snapshots`, but it may be out-of-sync with the `develop` branch. Let's update it just to be sure.

```console
git fetch
git pull origin develop
```

#### Linters

Before opening a pull request, run the linters over all files that were touched.

- black
- ruff
- mypy
- pylint

Fix all items, and valid fixes for `pylint` can be disabling on that line. It won't always know what is contextually correct.

Here are all the files we touched in this process:

- `/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/currency_snapshots.py`
- `/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py`
- `/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py`
- `/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml`
- `/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py`
- `/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py`
- `/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py`
- `/OpenBB/openbb_platform/openbb/assets/module_map.json`
- `/OpenBB/openbb_platform/openbb/package/currency.py`

#### Install Pre-Commit Hooks

The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, `OpenBB`.

```console
pre-commit install
```

#### Commit Changes

Add all the files then commit the results to the local branch.

```console
git commit -m "add obb.currency.snapshots() endpoint and create new standard model"
```

#### Push Changes

Assuming the commit is successful, push the changes to the remote branch.

```console
git push --set-upstream origin feature/currency-snapshots
```

#### Open a Pull Request

A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider.

1. **Why**?:

   - This PR is the result of creating a piece of contributor documentation (not included in this PR) for creating a new router endpoint and standard model.
   - Endpoint was requested by @minhhoang1023.

2. **What**?:

   - `obb.currency.snapshots()`

   - This endpoint provides a similar data set to `obb.equity.market_snapshots()` or `obb.index.snapshots()`, with minor twists:
     - Set one, or multiple, 'base' currencies.
     - Filter results for a list of supplied counter currencies.
     - A `quote_type` parameter for the perspective on the exchange rate, "direct" or "indirect".

3. **Impact**:

   - Not a breaking change.

   - Future providers to this endpoint will require parsing symbols and filtering as part of the `transform_data` stage, as well as ensure the `quote_type` is correctly applied.

4. **Testing Done**:

   - A variety of `base` and `counter_currencies`, checking both `quote_type` settings.

   - `obb.currency.snapshots(base="usd,xau,xag", counter_currencies="usd,eur,gbp,chf,aud,jpy,cny,cad", quote_type="indirect"`

5. **Any other information**:

![Screenshot 2024-03-04 at 10 05 00 AM](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/7943d2ef-05b9-4a25-9d17-32618e2c57cf)

With this final step, we have completed all the tasks outlined at the top of the page.

This guide was based on [this pull request](https://github.com/OpenBB-finance/OpenBBTerminal/pull/6162).


---

---
title: Add provider to existing extension
sidebar_position: 2
description: This guide outlines the process for adding an endpoint to an existing data provider and router endpoint.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - data
  - endpoint
  - existing
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - provider model
  - how to
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Add Provider To An Existing Command - How-To | OpenBB Platform Docs" />

This page will walk through adding a data provider to an existing endpoint, using a standard model. At a high level, the process will look something like:

1. Document the parameters and returned fields from the chosen data provider.
2. Find the existing standard model that is mapped to the router endpoint.
3. Identify any common parameters and fields to map.
4. Build the provider models and Fetcher class by inheriting from the standard models.
5. Map the new provider model to the router.
6. Rebuild the Python interface and static assets.
7. Add unit tests.
8. Add integration tests.
9. Submit a pull request.

## Getting started

Clone the GitHub repo and navigate into the project's folder.

If you have already done this, update your local branch:
    - `git fetch`
    - `git pull origin develop`

Install the OpenBB Platform in "editable" mode.
  - `cd openbb_platform`
  - `python dev_install.py -e`

Rebuild the Python interface and static assets.
  - `import openbb`
  - `openbb.build()`

Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with `feature/`.
  - `git checkout -b feature/av-historical-eps`

## Provider Endpoint

For this example, we will be adding a user-requested data set from AlphaVantage, historical EPS. There is an existing [GitHub issue](https://github.com/OpenBB-finance/OpenBBTerminal/issues/6104) that we will link to in the submitted pull request. By linking the issue, it will be closed automatically on merge.

Here's what we know about this AlphaVantage API endpoint:

:::info
This API returns the annual and quarterly earnings (EPS) for the company of interest.
Quarterly data also includes analyst estimates and surprise metrics.
:::

The documentation for this endpoint is, [https://www.alphavantage.co/documentation/#earnings](https://www.alphavantage.co/documentation/#earnings). This link will be added to the query parameters model docstring.

#### Base URL

The base URL structure will be different for each provider, AlphaVantage identifies a `function` for each request as the first parameter.

```python
BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"
```

#### Source Parameters

Ignoring `function` and `api_key`, there is only one parameter for this function.

```python
symbol: str = "IBM"
```

#### Source Response

They provide a sample JSON output, returning both annual and quarterly data in the same response.

```json
{
  "symbol": "IBM",
  "annualEarnings": [
    {
      "fiscalDateEnding": "2023-12-31",
      "reportedEPS": "9.61"
    },
    {
      "fiscalDateEnding": "2022-12-31",
      "reportedEPS": "9.12"
    }
  ],
  "quarterlyEarnings": [
    {
      "fiscalDateEnding": "2023-12-31",
      "reportedDate": "2024-01-24",
      "reportedEPS": "3.87",
      "estimatedEPS": "3.78",
      "surprise": "0.09",
      "surprisePercentage": "2.381"
    },
    {
      "fiscalDateEnding": "2023-09-30",
      "reportedDate": "2023-10-25",
      "reportedEPS": "2.2",
      "estimatedEPS": "2.13",
      "surprise": "0.07",
      "surprisePercentage": "3.2864"
    }
  ]
}
```

## OpenBB Endpoint

Here's what we know about the existing router endpoint.

The function we are adding AlphaVantage as a source to is:

```python
from openbb import obb

obb.equity.fundamental.historical_eps(symbol = "IBM", limit=5, provider="fmp")
```

| date       | symbol | eps_actual | eps_estimated | revenue_estimated | revenue_actual | reporting_time | updated_at | period_ending |
| :--------- | :----- | ---------: | ------------: | ----------------: | -------------: | :------------- | :--------- | :------------ |
| 2024-01-24 | IBM    |       3.87 |          3.78 |       17298500000 |    17381000000 | amc            | 2024-02-29 | 2023-12-31    |
| 2024-04-17 | IBM    |          - |          1.59 |       14572800000 |              - | bmo            | 2024-02-29 | 2024-03-30    |
| 2024-07-24 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-06-30    |
| 2024-10-23 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-09-30    |
| 2025-01-22 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-12-31    |

FMP is currently the only source for this endpoint. There are only two parameters, `symbol` and `limit`. The `limit` argument determines how many quarters to go back.

Tasks done:

- [x] Catalogue the parameters and returned fields from the chosen data provider.

## Look for Standard Model

The standard model is defined by, [HistoricalEps](https://docs.openbb.co/platform/data_models/HistoricalEps).

```python
from openbb_core.provider.standard_models.historical_eps import HistoricalEpsData, HistoricalEpsQueryParams
```

Each standard model consists of two classes, `QueryParams` and `Data`. The name of each model begins with a CamelCase representation of the endpoint, `HistoricalEps`, with some instances warranting abbreviations. Files are always named with lower snake_case.

`HistoricalEps` is what we will reference in the router when we get there.

### Standard QueryParams

The `HistoricalEpsQueryParams` model defines only one parameter, `symbol`. It includes a validation method for converting the symbol to upper case.

```python
class HistoricalEpsQueryParams(QueryParams):
    """Historical EPS Query."""

    symbol: str = Field(description=QUERY_DESCRIPTIONS.get("symbol", ""))

    @field_validator("symbol", mode="before", check_fields=False)
    @classmethod
    def upper_symbol(cls, v: str) -> str:
        """Convert symbol to uppercase."""
        return v.upper()
```

We will inherit from this class to create our QueryParams model, specific to AlphaVantage. The model will be named, `AlphaVantageHistoricalEpsQueryParams`. Don't worry about it being too long.

### Standard Data

The `HistoricalEpsData` model defines some fields, with two being mandatory: `date` and `symbol`. It includes a validation method for converting the date from an ISO string to a datetime object.

```python
class HistoricalEpsData(Data):
    """Historical EPS Data."""

    date: dateType = Field(default=None, description=DATA_DESCRIPTIONS.get("date", ""))
    symbol: str = Field(description=DATA_DESCRIPTIONS.get("symbol", ""))
    announce_time: Optional[str] = Field(
        default=None, description="Timing of the earnings announcement."
    )
    eps_actual: Optional[float] = Field(
        default=None, description="Actual EPS from the earnings date."
    )
    eps_estimated: Optional[float] = Field(
        default=None, description="Estimated EPS for the earnings date."
    )

    @field_validator("date", mode="before", check_fields=False)
    def date_validate(cls, v):  # pylint: disable=E0213
        """Return formatted datetime."""
        return parser.isoparse(str(v))
```

Now we know exactly what is going to be added, and how we should structure our query to fetch the data. This endpoint is not overly complex but harmonizing many input parameters, and the potentially endless data fields, across many providers is a challenge.

Tasks done:

- [x] Find the existing standard model that is mapped to the router endpoint.
- [x] Identify common parameters and fields to map.

## Build the Provider Model

We are going to build the provider-specific model.

### Create a new file

The first step is to create a new file in the provider extension folder:

```console
~/OpenBB/openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models
```

We will call this file: `historical_eps.py`

The first line of the file should be a docstring, followed by the import statements.

Every model will be different, but most items below will be typical of nearly every data provider model. Variations will come from design choices for [HTTP requests](/platform/developer_guide/misc/http_requests), or other requirements. We won't get into that here though.

```python
"""AlphaVantage Historical EPS Model."""

# pylint: disable=unused-argument

from datetime import date as dateType
from typing import Any, Dict, List, Literal, Optional
from warnings import warn

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.historical_eps import (
    HistoricalEpsData,
    HistoricalEpsQueryParams,
)
from openbb_core.provider.utils.descriptions import QUERY_DESCRIPTIONS
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import (
    ClientResponse,
    ClientSession,
    amake_requests
)
from pydantic import Field, field_validator
```

### Define QueryParams

Define a class that inherits from the standard model's `QueryParams` and put a link to the source documentation, if it exists, in the docstring.

We'll define a field to return either, `annualEarnings` or `quarterlyEarnings`. Other endpoints call this parameter `period`, so we will do the same here. Adding a `limit` parameter will provide more flexibility, even though we can't control that from the source.

If a parameter is common, like `date` or `period` are, they will have a standardized description. The `description` will display in the function's signature and Fast API Swagger docs.

To allow multiple items in a query parameters field - i.e, a list of tickers - we can add the `__json_schema_extra__` dictionary to the top of the model. If there are any fields to map on output, define them with the `__alias_dict__` dictionary.

```python
class AlphaVantageHistoricalEpsQueryParams(HistoricalEpsQueryParams):
    """
    AlphaVantage Historical EPS Query Params.

    Source: https://www.alphavantage.co/documentation/#earnings
    """

    __json_schema_extra__ = {"symbol": ["multiple_items_allowed"]}

    period: Literal["annual", "quarter"] = Field(
        default="quarter", description=QUERY_DESCRIPTIONS.get("period", "")
    )
    limit: Optional[int] = Field(
        default=None, description=QUERY_DESCRIPTIONS.get("limit", "")
    )
```

### Define Data

In the sample output data from AlphaVantage, we know that there are two date fields; however, only 'fiscalDateEnding' is returned in both time intervals. This makes it the right candidate to map to the `date` field in the standard model.

Mapping is done via `__alias_dict__`, a dictionary defined at the top of the class before any fields. Leave it out if there's nothing to map.

:::tip
If a field represents a percent, we want to always return it as a normalized decimal value - i.e, 1% is 0.01 - so that downstream processes can use values directly in formulas without needing to figure out if 1 means 1% or 100%.

If the data source returns the numbers (or null values) as a string (maybe with a % character), we will clean it using a `field_validator`.

We communicate this to the frontend, via `json_schema_extra`, in the field definition so the values can be correctly displayed.

By ensuring this small detail, we contribute to the overall standardization of data.
:::

```python
class AlphaVantageHistoricalEpsData(HistoricalEpsData):
    """AlphaVantage Historical EPS Data."""

    __alias_dict__ = {
        "date": "fiscalDateEnding",
        "eps_actual": "reportedEPS",
        "eps_estimated": "estimatedEPS",
        "surprise_percent": "surprisePercentage",
        "reported_date": "reportedDate",
    }

    surprise: Optional[float] = Field(
        default=None,
        description="Surprise in EPS (Actual - Estimated).",
    )
    surprise_percent: Optional[float] = Field(
        default=None,
        description="EPS surprise as a normalized percent.",
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    reported_date: Optional[dateType] = Field(
        default=None,
        description="Date of the earnings report.",
    )

    @field_validator(
        "eps_estimated",
        "eps_actual",
        "surprise",
        mode="before",
        check_fields=False,
    )
    @classmethod
    def validate_null(cls, v):
        """Clean None returned as a string."""
        return None if str(v).strip() == "None" or str(v) == "0" else v

    @field_validator("surprise_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize percent values."""
        if isinstance(v, str) and v == "None" or str(v) == "0":
            return None
        return float(v) / 100
```

### Define the Fetcher

Provider models have a total of three classes, `QueryParams`, `Data`, and `Fetcher`.

The `Fetcher` is what gets executed by the router and divides the request into three distinct processes that can be serviced individually. We define it as a Transform-Extract-Transform (TET) process because we:

- Transform the query from the user input into the specific format required for each provider.
- Extract the data from the provider endpoint.
- Transform the data into a standard format (the model or a list of models).

Each process is a static method, and breaking it down makes it easier to debug any points of failure.

```python
class AVHistoricalEpsFetcher(
    Fetcher[
        AlphaVantageHistoricalEpsQueryParams,
        List[AlphaVantageHistoricalEpsData]
    ]
):
    """AlphaVantage Historical EPS Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> AlphaVantageHistoricalEpsQueryParams:
        """Transform the query params."""
        # If no transformations are required, simply return the validated model.
        return AlphaVantageHistoricalEpsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: AlphaVantageHistoricalEpsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Return the raw data from the AlphaVantage endpoint."""

        api_key = credentials.get("alpha_vantage_api_key") if credentials else "DEMO"

        BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"

        # We are allowing multiple symbols to be passed in the query, so we need to handle that.
        symbols = query.symbol.split(",")

        urls = [
            f"{BASE_URL}symbol={symbol}&apikey={api_key}" for symbol in symbols
        ]

        results = []

        # We need to make a custom callback function for this async request.
        async def response_callback(response: ClientResponse, _: ClientSession):
            """Response callback function."""
            symbol = response.url.query.get("symbol", None)
            data = await response.json()
            target = "annualEarnings" if query.period == "annual" else "quarterlyEarnings"
            result = []
            # If data is returned, append it to the results list.
            if data:
                result = [
                    {
                        "symbol": symbol,
                        **d,
                    }
                    for d in data.get(target, [])  # type: ignore
                ]
                if query.limit is not None:
                    results.extend(result[:query.limit])
                else:
                    results.extend(result)

            # If no data is returned, raise a warning and move on to the next symbol.
            if not data:
                warn(f"Symbol Error: No data found for {symbol}")

        await amake_requests(urls, response_callback, **kwargs)  # type: ignore

        return results

    @staticmethod
    def transform_data(
        query: AlphaVantageHistoricalEpsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[AlphaVantageHistoricalEpsData]:
        """Transform the raw data into the standard model."""
        if not data:
            raise EmptyDataError("No data found.")
        return [AlphaVantageHistoricalEpsData.model_validate(d) for d in data]
```

Combining all of the code blocks above, beginning with the import statements section, makes a complete file and we have finished step 4.

- [x] Build the provider models and Fetcher class by inheriting from the standard models.

## Map To Router

Mapping to the router is done in the `__init__.py` file, one folder back from the `models` folder where we created the `historical_eps.py` file.

We import the `Fetcher` that was created, and then map it in the `fetcher_dict` property of the Provider class.

```python
"""Alpha Vantage Provider module."""

from openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher
from openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher
from openbb_core.provider.abstract.provider import Provider

alpha_vantage_provider = Provider(
    name="alpha_vantage",
    website="https://www.alphavantage.co/documentation/",
    description="""Alpha Vantage provides realtime and historical
    financial market data through a set of powerful and developer-friendly data APIs
    and spreadsheets. From traditional asset classes (e.g., stocks, ETFs, mutual funds)
    to economic indicators, from foreign exchange rates to commodities,
    from fundamental data to technical indicators, Alpha Vantage
    is your one-stop-shop for enterprise-grade global market data delivered through
    cloud-based APIs, Excel, and Google Sheets. """,
    credentials=["api_key"],
    fetcher_dict={
        "EquityHistorical": AVEquityHistoricalFetcher,
        "HistoricalEps": AVHistoricalEpsFetcher,
    },
)
```

Step 5 is complete.

- [x] Map the new provider model to the router.

## Rebuild Static Assets

When modifying router components or model definitions, the Python interface needs to be rebuilt before use. Open a terminal, with the `obb` environment active, start a new Python session, and enter:

```python
import openbb

openbb.build()

exit()
```

:::note

If changes are only made to the static methods within the Fetcher, rebuilding is not required. Restart the Python interpreter to apply the edits.

:::

Step 6 is done.

- [x] Rebuild the Python interface and static assets.

We can now run the function and test our work.

```python
from openbb import obb

obb.equity.fundamental.historical_eps(
    symbol=["IBM","GOOG","AAPL","MSFT"],
    period="quarter",
    provider="alpha_vantage",
    limit=1
).to_df()
```

| date       | symbol | eps_actual | eps_estimated | surprise | surprise_percent | reported_date |
| :--------- | :----- | ---------: | ------------: | -------: | ---------------: | :------------ |
| 2023-12-31 | GOOG   |       1.64 |          1.59 |     0.05 |         0.031447 | 2024-01-30    |
| 2023-12-31 | AAPL   |       2.18 |           2.1 |     0.08 |         0.038095 | 2024-02-01    |
| 2023-12-31 | MSFT   |       2.93 |          2.78 |     0.15 |         0.053957 | 2024-01-30    |
| 2023-12-31 | IBM    |       3.87 |          3.78 |     0.09 |          0.02381 | 2024-01-24    |

Checking the `annual` setting:

```python
obb.equity.fundamental.historical_eps(
    symbol="AAPL,
    period="annual",
    provider="alpha_vantage",
    limit=4
).to_df()
```

| date       | symbol | eps_actual |
| :--------- | :----- | ---------: |
| 2021-09-30 | AAPL   |       5.62 |
| 2022-09-30 | AAPL   |       6.11 |
| 2023-09-30 | AAPL   |       6.12 |
| 2023-12-31 | AAPL   |       2.18 |

We can see that the most recent `annual` data point only represent the first quarter of Apple's fiscal year, and this is something to keep in mind while working with the data.

To check that the warning is being transmitted, enter a bad symbol in the list.

```python
obb.equity.fundamental.historical_eps(symbol="AAPL,BAD_SYMBOL", provider="alpha_vantage").warnings
```

```console
[Warning_(category='UserWarning', message='Symbol Error: No data found for BAD_SYMBOL')]
```

With confidence that the endpoint is working as expected, let's move on to unit and integration tests.

## Create Tests

Adding tests doesn't take a lot of effort. In most cases, copying and pasting from an existing one will do the job.

### Unit Tests for Provider

Unit tests are located in the provider extension folder.

```console
~/OpenBB/openbb_platform/providers/alpha_vantage/tests
```

There will be one test file dedicated to testing each fetcher in the provider extension. Our file is:

```console
test_alpha_vantage_fetchers.py
```

The unit tests leverage the Fetcher class' built-in testing methods. It checks that the data is being returned, that types are conformed to their definitions, and that the model validates. It relies on `pytest` and captures a HTTP cassette. Here's what our test file will look like:

```python
from datetime import date

import pytest
from openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher
from openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher
from openbb_core.app.service.user_service import UserService

test_credentials = UserService().default_user_settings.credentials.model_dump(
    mode="json"
)


@pytest.fixture(scope="module")
def vcr_config():
    return {
        "filter_headers": [("User-Agent", None)],
        "filter_query_parameters": [
            ("apikey", "MOCK_API_KEY"),
        ],
    }


@pytest.mark.record_http
def test_av_equity_historical_fetcher(credentials=test_credentials):
    params = {
        "symbol": "AAPL",
        "start_date": date(2023, 1, 1),
        "end_date": date(2023, 1, 10),
        "interval": "15m",
    }

    fetcher = AVEquityHistoricalFetcher()
    result = fetcher.test(params, credentials)
    assert result is None


@pytest.mark.record_http
def test_av_historical_eps_fetcher(credentials=test_credentials):
    params = {
        "symbol": "AAPL,MSFT",
        "period": "quarter",
        "limit": 4
    }

    fetcher = AVHistoricalEpsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None
```

That's all there is to it, we can capture the cassette now. Open a terminal, navigate into the `tests` folder from above, with the `obb` environment active, and enter:

```console
pytest test_alpha_vantage_fetchers.py --record http --record-no-overwrite
```

A successful test will result in a file being created in the `record` subfolder. Check the file for any obvious errors.

Step 7 is done.

- [x] Add unit tests.

### Integration Tests for Extension

Integration tests are even easier to add here, we just need to add a set of parameters for the new provider to the existing test. These tests are located in the `extensions` folder, where the routers are, under `integration`.

```console
~/OpenBB/openbb_platform/extensions/equity/integration
```

There are two files here, one for the Python interface, and the other for the Fast API.

- `test_equity_python.py`
- `test_equity_api.py`

There will be at least one test for every router endpoint, which expects all providers and parameters to be supplied. The structure will be the same for all functions. Snippets below will include the import statements, setup, and our function - `historical_eps`.

#### Python Test

```python
"""Python interface integration tests for the equity extension."""

from datetime import time

import pytest
from extensions.tests.conftest import parametrize
from openbb_core.app.model.obbject import OBBject

# pylint: disable=too-many-lines,redefined-outer-name


# pylint: disable=import-outside-toplevel,inconsistent-return-statements
@pytest.fixture(scope="session")
def obb(pytestconfig):
    """Fixture to setup obb."""
    if pytestconfig.getoption("markexpr") != "not integration":
        import openbb

        return openbb.obb

@parametrize(
    "params",
    [
        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),
        (
            {
                "symbol": "AAPL",
                "period": "quarter",
                "limit": 5,
                "provider": "alpha_vantage"
            }
        ),
    ],
)
@pytest.mark.integration
def test_equity_fundamental_historical_eps(params, obb):
    params = {p: v for p, v in params.items() if v}

    result = obb.equity.fundamental.historical_eps(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

Run this test by navigating into the folder above and entering:

```console
pytest test_equity_python.py
```

:::note

If tests not related to the items being touched directly are failing, don't worry about them. That's out of scope.

:::

#### API Test

The API test is slightly different, but the `params` can be copied and pasted from the Python test. In addition to basic checks, it will fail when values returned are not JSON serializable.

```python
"""API integration tests for equity extension."""

import base64
from datetime import time

import pytest
import requests
from extensions.tests.conftest import parametrize
from openbb_core.env import Env
from openbb_core.provider.utils.helpers import get_querystring

# pylint: disable=too-many-lines,redefined-outer-name


@pytest.fixture(scope="session")
def headers():
    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"
    userpass_bytes = userpass.encode("ascii")
    base64_bytes = base64.b64encode(userpass_bytes)

    return {"Authorization": f"Basic {base64_bytes.decode('ascii')}"}


@parametrize(
    "params",
    [
        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),
        (
            {
                "symbol": "AAPL",
                "period": "quarter",
                "limit": 5,
                "provider": "alpha_vantage"
            }
        ),
    ],
)
@pytest.mark.integration
def test_equity_fundamental_historical_eps(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/equity/fundamental/historical_eps?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

To run this test, we will need to open a second terminal and start the server.

```console
uvicorn openbb_core.api.rest_api:app
```

Go back to the other terminal and run the test by entering:

```console
pytest test_equity_api.py
```

Step 8 is done.

- [x] Add integration tests.

All that's left now is to submit the work as a pull request for review.

## Submit A Pull Request

We're already on the correct branch, `feature/av-historical-eps`, but it may be out-of-sync with the `develop` branch. Let's update it just to be sure.

```console
git fetch
git pull origin develop
```

#### Linters

Before opening a pull request, run the linters over all files that were touched.

- black
- ruff
- mypy
- pylint

Fix all items, and valid fixes for `pylint` can be disabling on that line. It won't always know what is contextually correct.

#### Add Files To Commit

When preparing to commit changes to the local branch, only add the files directly touched. Here are all the files we touched in this process:

- `openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models/historical_eps.py`
- `openbb_platopenbb_platform/providers/alpha_vantage/openbb_alpha_vantage/__init__.py`
- `openbb_platform/providers/alpha_vantage/tests/test_alpha_vantage_fetchers.py`
- `openbb_platform/providers/alpha_vantage/tests/record/test_av_historical_eps_fetchers.yaml`
- `openbb_platform/extensions/equity/integration/test_equity_api.py`
- `openbb_platform/extensions/equity/integration/test_equity_python.py`

#### Install Pre-Commit Hooks

The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, `OpenBB`.

```console
pre-commit install
```

#### Commit Changes

```console
git commit -m "adds AlphaVantage to historical_eps"
```

#### Push Changes

Assuming the commit is successful, push the changes to the remote branch.

```console
git push --set-upstream origin feature/av-historical-eps
```

#### Open a Pull Request

A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider.

1. **Why**? (1-3 sentences or a bullet point list):

   - This PR is the result of a development documentation page created (not in this PR).

   - Closes #6104, a user feature request.

2. **What**? (1-3 sentences or a bullet point list):

   - Adds AlphaVantage as a provider to `obb.equity.fundamental.historical_eps()`

3. **Impact** (1-2 sentences or a bullet point list):

   - Is not a breaking change.

   - Does not introduce any changes other than adding the provider to this endpoint.

4. **Testing Done**:

   - Created unit test and integration tests.

   - Used a variety of symbols, single and lists, to check that the EmptyDataError and symbol warnings are catching correctly.

With this final step, we have completed all the tasks outlined at the top of the page.

This guide was based on [this pull request](https://github.com/OpenBB-finance/OpenBBTerminal/pull/6155).


---

---
title: Extend OBBject functionalities
sidebar_position: 4
description: This page provides information about how to write extensions for the OpenBB OBBject class.
keywords:
  - OBBject
  - Python
  - Development
  - OpenBB Platform
  - extensions
  - obbject extension
  - accessor
  - decorator
  - how-to
  - contributing
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New OBBject Extension - How-To | OpenBB Platform Docs" />

OpenBB provides some basic methods for interacting with common data structures that will be seen in the results attribute of the [`OBBject`](/platform/usage/syntax/output_data).
If you are working with custom data, or adding new endpoints, it is possible that you will want to have your own methods for interacting with the data, and the OpenBB Platform provides a way to extend the OBBject class.

The architecture for extensions was designed to be similar to extensions and accessors for Pandas, and relies on plugins through the Poetry dependency management package.

This page will go through the steps for developing a simple extension for the OBBject class.

### Folder structure

```shell
example
├── README.md
├── openbb_example
│   └── __init__.py
├── poetry.lock
└── pyproject.toml
```

### Writing the extension

In this example the extension code all lives inside `__init__.py`.

First we create an `Extension` class instance to tell `openbb-core` our extension name and any required credentials to be available at `obb.user.credentials`.

> Credentials are required only if authorization is required for data or services used by this extension.
> It could also be the connection to a database, or any other information that needs to be passed to the extension.

```python
from openbb_core.app.model.extension import Extension

ext = Extension(name="example", credentials=["some_api_key"])
```

Then we define the extension's functionality. The decorator, `@ext.obbject_accessor`, registers an accessor in each `OBBject` that is returned when a command is executed. This accessor is just a namespace that will contain the methods defined in the decorated class.

For this example, we just add a method to say hi:

```python
@ext.obbject_accessor
class Example:
    def __init__(self, obbject):
        self._obbject = obbject

    def hello(self):
        api_key = self._obbject._user_settings.credentials.some_api_key.get_secret_value()
        print(f"Hello, this is my credential: {api_key}!")
```

### Entry Point

The `pyproject.toml` file will specify the usual setup and dependency information. Additionally, we need to include the following block:

```toml
[tool.poetry.plugins."openbb_obbject_extension"]
example = "openbb_example:ext"
```

With this in the file, we can install the extension by running `poetry install` from the extension folder.

### Using the extension

Now that the extension is installed and built, we can use it! Because we are extending the `OBBject`, this will be available on any function:

```shell
>>> from openbb import obb
>>> obb.user.credentials.some_api_key = "test"
>>> obbject = obb.equity.price.historical("AAPL")
>>> obbject.example.hello()
Hello, this is my credential: test!
```

In this example, we have added obbject.example as the extension and can use the .hello() functionality right from our OBBject.


---

---
title: Create New Toolkit Extension
sidebar_position: 3
description: This guide outlines the process for adding a new toolkit extension and router path to the OpenBB Platform.
keywords:
  - OpenBB Platform
  - Open source
  - contribution
  - contributing
  - community
  - toolkit
  - code
  - provider
  - endpoint
  - router
  - openbb-provider
  - openbb-core
  - how to
  - new
  - template
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New Toolkit Extension - How-To | OpenBB Platform Docs" />

Before adding a new toolkit extension and router path to the OpenBB Platform using a supplied template, it is important to understand the difference between a toolkit and a provider extension. You can find more information on this [here](/platform/usage/extensions/overview).

## How To Create A Router Extension

Let's create an extension which defines a new router entry point at the base of the `obb` namespace.
It's going to be called, `openbb-dashboards`, and will serve as an empty router for various dashboard packages to populate **future** endpoints with.

By itself, it might not have any functions. Some other extension will name it as a dependency, using it as an entry point.

We'll use the [ZIP file](https://github.com/OpenBB-finance/OpenBBTerminal/files/14542427/dashboards.zip) template as a starting point, renaming everything as the first step.

### Create Folder

The folder does not have to be kept with the OpenBB code, and could be its own GitHub repo.
For demonstration purposes, we'll unpack the ZIP file template with the rest of the OpenBB extensions:

```console
~/OpenBB/openbb_platform/extensions/dashboards
```

### Add Dependencies

This extension will be agnostic as to the type of components that might populate this space in the future - Plotly Dash, Streamlit, etc.
The only addition to the dependencies will be `openbb-charting`.
This will provide a Plotly charting library and custom backend with PyWry for window creation.

```toml
[tool.poetry]
name = "openbb-dashboards"
version = "1.0.0"
description = "Dashboards Extension for OpenBB"
authors = ["OpenBB Team <hello@openbb.co>"]
readme = "README.md"
packages = [{ include = "openbb_dashboards" }]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
openbb = "^4.1.7"
openbb-charting = "^2.0.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."openbb_core_extension"]
dashboards = "openbb_dashboards.dashboards_router:router"
```

## Build and Install Package

Open a Terminal and navigate into the folder where the extension is, then enter:

```console
poetry lock

pip install -e .
```

## Add Router Commands

To demonstrate this extension, we'll make a simple function for creating and returning a line chart. This adds one endpoint to the new namespace, `obb.dashboards.line_chart()`.

:::tip
After creating a new function, remember to rebuild the Python interface and static assets.

```python
import openbb
openbb.build()
exit()
```

:::

```python
"""Dashboards Router."""

# pylint: disable = unused-argument

from typing import List, Optional, Union

from openbb_charting import charting_router
from openbb_charting.core.openbb_figure import OpenBBFigure
from openbb_core.app.model.charts.chart import Chart
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.router import Router
from openbb_core.app.utils import basemodel_to_df, df_to_basemodel
from openbb_core.provider.abstract.data import Data

router = Router(prefix="")


@router.command(
    methods=["POST"],
)
def line_chart(
    data: Union[Data, List[Data]],
    x: Optional[str] = None,
    y: Optional[Union[str, List[str]]] = None,
    layout_kwargs: Optional[dict] = None,
    scatter_kwargs: Optional[dict] = None,
) -> OBBject:
    """Create a line chart."""
    index = "date" if x is None else x
    df = basemodel_to_df(data, index=index)

    y = y.split(",") if isinstance(y, str) else y
    if y is None:
        y = df.columns.to_list()

    if scatter_kwargs is None:
        scatter_kwargs = {}

    fig = OpenBBFigure(create_backend=True)
    for col in y:
        fig = fig.add_scatter(
            x=df.index,
            y=df[col],
            name=col,
            hovertemplate=
            "<b>%{fullData.name}</b>: " +
            "%{y:.2f}" +
            "<extra></extra>",
            hoverlabel=dict(font_size=10),
            **scatter_kwargs,
        )

    if layout_kwargs is None:
        layout_kwargs = {}

    fig.update_layout(
        hovermode="x unified",
        **layout_kwargs,
    )

    results = OBBject(results=df_to_basemodel(df))

    results.chart = Chart(
        fig=fig,
        content=fig.show(external=True).to_plotly_json(),
        format=charting_router.CHART_FORMAT
    )

    return results
```

An example syntax for use is:

```python
data = obb.equity.price.historical("AAPL", provider="yfinance")
chart = obb.dashboards.line_chart(
    data.results, y=["high", "low"],
    scatter_kwargs = {"showlegend": False},
    layout_kwargs={"template":"plotly_white"}
)
chart.show()
```

This is demonstration is not meant to represent a finished product, only a path to explore while getting started.
We hope you enjoy the journey and look forward to seeing what you build!


---

---
title: Data and Data Providers
sidebar_position: 2
description: This page contains some frequently asked questions about OpenBB data and providers.
keywords:
  - provider
  - data
  - source
  - live
  - platform
  - api
  - FastAPI
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Data Providers FAQ - FAQs | OpenBB Platform Docs" />

<details>
<summary mdxType="summary">Does OpenBB have coverage for [insert type of data]?</summary>

Equity market coverage will vary by provider and subscription status with them. It is common for free tiers to be US-listings only.

You can find all data models [here](/platform/data_models), or the [Reference](/platform/reference) page of endpoints.

If the type of data you are looking for is not listed there, send us a [feature request](https://openbb.co/request-a-feature) telling us about your use case.

</details>

<details>
<summary mdxType="summary">The router appears to be missing functions.</summary>

The router populates itself from the installed extensions.

For example, if the Technical Analysis extension is not installed, the `obb.technical` router path will not be present.

The same applies to data extensions. If a provider module is not installed, it will not be displayed as a choice.

If you have just installed a new extension, the Python interface may need to be rebuilt. This can be triggered manually with:

```python
import openbb
openbb.build()
exit()
```

:::tip
Install all toolkits and data providers with:

```bash
pip install "openbb[all]"
```

or by cloning the GitHub repo, from the `/openbb_platform/` folder:

```bash
python dev_install.py -e
```

The nightly PyPI distribution is another way to install everything, and to be on the bleeding edge of development:

```bash
pip install openbb-nightly
```

:::

</details>

<details>
<summary mdxType="summary">Why is the returned data not matching the start/end date I requested?</summary>

The provider may not have data from the requested period, in which case the data will be what they return. For example, `provider='yfinance'` at one-minute intervals will not return beyond one week ago.

Another reason could be the data entitlements of your API key. Check the provider's website to know what data coverage to expect.

If there is technical problem with a provider or function, please check [GitHub](https://github.com/OpenBB-finance/OpenBBTerminal/issues/new/choose) and raise an issue if one does not already exist.

Or, send us an [email](mailto:support@openbb.co) with the details, your system configuration, the syntax used, and any error messages that are raised.

</details>

<details>
<summary mdxType="summary">How do I load a ticker symbol from India?</summary>

Ticker symbols listed on exchanges outside of the US will have a suffix attached, for example, Rico Auto Industries Limited:

```python
from openbb import obb
data = obb.equity.price.historical("ricoauto.ns", provider="fmp")
```

The precise naming convention will differ by source, it's best to reference each source's own documentation for conventions.

</details>

<details>
<summary mdxType="summary">How can I request a data provider or function?</summary>

Please [request a feature](https://openbb.co/request-a-feature), tell us about your use case.

</details>

<details>
<summary mdxType="summary">Can I contribute my own data provider extension?</summary>

Yes! Please take a look at our [Development](/platform/developer_guide/misc/contributing) pages for more information.

</details>

<details>
<summary mdxType="summary">Can my company become a data partner?</summary>

Yes! Please visit our website [here](https://openbb.co/use-cases/data-vendors) and fill out the form.

</details>


<details>
<summary mdxType="summary">Endpoints that are displayed in this documentation are not found when I try to use them.</summary>

The [Reference](/platform/reference) pages are created from the contents of our GitHub [repo](https://github.com/OpenBB-finance/OpenBB), and may not match your installation.

If a router/endpoint appears to be missing from your installation, it is quite likely that it is not installed. It may also be that the functions are served by provider extensions that require API keys. The function will not be added to the application unless a value has been supplied, or there is another provider which does not require authorization.

See the page [here](/platform/usage/extensions/overview) for a current list of data provider extensions.

</details>


---

---
title: Errors
sidebar_position: 3
description: This page contains some frequently asked questions about OpenBB Platform errors.
keywords:
  - provider
  - data
  - source
  - error
  - OpenBBError
  - unknown error
  - EmptyDataError
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Errors FAQ - FAQs | OpenBB Platform Docs" />

<details>
<summary mdxType="summary">[Arg] provider -> input: nasdaq -> Input should be 'fmp' or 'yfinance'</summary>

There could be a few reasons for this message.

1. The provider supplied is not installed, in which case install it and follow the next step.

2. The provider extension is installed, but the static assets have not been refreshed. Rebuild the static assets from the command line with:

```sh
python -c "import openbb;openbb.build()"
```

An environment variable to auto-build the static assets on import - if there are changes to the installed configuration - can be defined as:

```env
OPENBB_AUTO_BUILD="true"
```

The expected behaviour is for this to be "true" by default, however can be situations where the flag does not trigger a build.
Manually invoke the process from the command line if necessary.

3. Not every endpoint is supported by every provider. To see the coverage of commands and data providers within the current installation, use `reference` property in the app. The docstring for each function contains the same information as the code block below.

```python
from openbb import obb

path = "/index/available"

[d for d in obb.reference["paths"][path]["parameters"] if d != "standard"]
```

```sh
['cboe', 'fmp', 'tmx', 'yfinance']
```

Complete breakdowns of query and return fields by provider and endpoint are available under the [Reference](/platform/reference)

</details>

<details>
<summary mdxType="summary">Attribute Error: 'App' object has no attribute 'some attribute'</summary>

There could be a few reasons for this message that are similar to the issue above.

1. The extension is not installed.

- Install it and rebuild the static files (described in the item above.)

2. No installed provider extension services an endpoint within the router.

- Under these conditions, the router is excluded from the app factory.

3. The extension is installed, a provider does service the router, but the static assets have not been rebuilt.

- Rebuild the static files (described in the item above.)

</details>

<details>
<summary mdxType="summary">Unauthorized Error - HTTP Status Code 502</summary>

This error is raised when provider credentials are supplied but is invalid for the particular endpoint.

Verify your credentials, access level, and subscription status directly with the provider.

</details>

<details>
<summary mdxType="summary">Unprocessable Entity (OpenBBError) - HTTP Status Code 422</summary>

This error is raised for handled exceptions. An abbreviated traceback message will display, and the full message is enabled via debug mode.

A common reason for this error is because a required parameter was not supplied, or was an incorrect choice. It may also be raised during parsing and transformation, post-request.

</details>

<details>
<summary mdxType="summary">Empty Data Error - HTTP Status Code 204</summary>

Also a 204 status code from the API. It means that the data was returned empty but the operation was a success.

There might not be anything wrong, or it could be the result of parameter choices. In which case, widen the scope of the query to capture output.

Some sources will return bad requests with a 200 status code and no message.

If all parameter permutations are only capable of returning an empty response, please open a bug issue on [GitHub](https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&labels=type%3Abug&projects=&template=bug_report.md&title=%5BBug%5D) with the operating system and version, Python version, and the syntax responsible for the error.

</details>

<details>
<summary mdxType="summary">Unexpected Error - HTTP Status Code 500</summary>

An unhandled exception. Traceback messages are truncated unless the debug environment variable is set.

```python
import os

os.environ["OPENBB_DEBUG_MODE"] = "true"

from openbb import obb

# run the syntax that created the error and the full traceback will print to the console.
```

If the issue originates from OpenBB code, please open a bug issue on [GitHub](https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&labels=type%3Abug&projects=&template=bug_report.md&title=%5BBug%5D)

Be sure to include the contents of the traceback, the operating system and version, Python version, and the syntax responsible for the error.

</details>

<details>
<summary mdxType="summary">How do I start in debug mode?</summary>

Debug mode can be set as an environment variable, in `~/openbb_platform/.env`, as:

```env
OPENBB_DEBUG_MODE=true
```

It can be invoked for the current session only by adding this code before importing the OpenBB package.

```python
import os

os.environ["OPENBB_DEBUG_MODE"] = "true"

from openbb import obb
```

</details>


---

---
title: License
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Licensing FAQ | OpenBB Platform Docs" />

As we adopt the Affero General Public License (AGPL) for our OpenBB Platform, we understand you may have questions about how this change affects your use of the platform. Below are some frequently asked questions to help clarify the implications of our new licensing model.

## General Questions

<details>
<summary mdxType="summary">Q: What has changed with the OpenBB Platform license?</summary>

A: We have transitioned from the MIT license to the Affero General Public License (AGPL) with an option for a commercial license. This change aligns with our commitment to keeping OpenBB Platform open and free while also providing options for commercial use.

</details>

<details>
<summary mdxType="summary">Q: Why did OpenBB choose AGPL?</summary>

A: AGPL helps ensure that improvements to the OpenBB Platform remain freely available. This license is ideal for protecting the community's contributions while allowing the platform to evolve sustainably.

</details>

<details>
<summary mdxType="summary">Q: What does the change to AGPL mean for general users of OpenBB?</summary>

A: For most users, there will be no impact. You can continue to use OpenBB Platform for research, development, and in your applications under the same conditions as before, provided you comply with the AGPL if you distribute the software or run it on a network server.

</details>

## Specific Use Cases

<details>
<summary mdxType="summary">Q: I'm using OpenBB Platform for research at work. Do I need a commercial license now?</summary>

A: No, if you are using OpenBB Platform in its unmodified form for research or internal business purposes and do not redistribute it or use it to provide a network-based service, you do not need a commercial license.

</details>

<details>
<summary mdxType="summary">Q: I am selling educational content and use OpenBB Platform in my course notebooks. Do I need a commercial license? Do I need to make my course content public?</summary>

A: No, you do not need a commercial license simply for using OpenBB Platform in educational content, nor do you need to make your course content public. If you are using OpenBB Platform to fetch data or perform analysis in your teaching materials, this is considered normal use of the platform. Your educational content is a separate work and does not fall under the AGPL's requirements for derivative works.

</details>

<details>
<summary mdxType="summary">Q: I want to integrate a proprietary dataset for internal use through OpenBB Platform. What does this mean for me?</summary>

A: You can freely integrate proprietary datasets without violating the AGPL, provided that any such integration uses standard interfaces of OpenBB Platform and does not modify the core AGPL-licensed code.

</details>

<details>
<summary mdxType="summary">Q: I run a business that integrates proprietary datasets through OpenBB Platform for internal use. What does the license change mean for us?</summary>

A: If you are integrating proprietary datasets and creating extensions that do not modify the OpenBB Platform code, these extensions are considered separate works. You do not need to disclose these proprietary integrations under the AGPL, provided these do not form part of the OpenBB Platform distributed to others or used to provide a network-based service.

</details>

## Modifications and Contributions

<details>
<summary mdxType="summary">Q: If I modify the OpenBB Platform for personal or internal business use, do I need to disclose my modifications?</summary>

A: If you modify the OpenBB Platform and do not distribute your modified version or use it to provide a service over a network, you do not need to disclose your modifications. However, if you distribute the modified platform or run it as a service, you must share your modifications under the AGPL.

</details>

<details>
<summary mdxType="summary">Q: We want to contribute to the OpenBB project. How does the licensing affect our contributions?</summary>

A: This doesn’t change. Contributions to the OpenBB project are very welcome. Contributions to the [main GitHub repository](https://github.com/OpenBB-finance/OpenBBTerminal) are accepted under our existing [Contributor License Agreement (CLA)](https://cla-assistant.io/OpenBB-finance/OpenBBTerminal). This means any contributions that are accepted into the main repository will be re-licensed by us under the AGPL, ensuring they remain free and open.

</details>

## Commercial Licensing Options

<details>
<summary mdxType="summary">Q: What are the benefits of obtaining a commercial license?</summary>

A: A commercial license is suitable for companies that wish to use OpenBB Platform in a proprietary product or service, or who do not wish to disclose their modifications to the platform. It offers more flexibility for commercial use while protecting your proprietary developments.

</details>

<details>
<summary mdxType="summary">Q: How can I obtain a commercial license?</summary>

A: Please contact us directly at [licensing@openbb.co](mailto:licensing@openbb.co) to discuss commercial licensing options. We are here to help you find the best licensing solution for your specific needs.

</details>

## Conclusion

<details>
<summary mdxType="summary">Q: Where can I get more information or assistance regarding licensing?</summary>

A: For more detailed inquiries or specific scenarios not covered in this FAQ, please reach out to us at [licensing@openbb.co](mailto:licensing@openbb.co). We are here to help you navigate the licensing requirements to ensure you meet your needs.

</details>


---

---
title: Platform vs SDK
sidebar_position: 1
description: The OpenBB SDK has evolved to become the OpenBB Platform. This page describes some of the key differences between the legacy version and the new architecture.
keywords:
  - what's new
  - v3
  - legacy
  - sdk
  - platform
  - api
  - FastAPI
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="What's the Difference Between OpenBB Platform and SDK? - FAQs | OpenBB Platform Docs" />

If you're already an OpenBB user, you may be familiar with some of the legacy pain points. As [this](https://openbb.co/blog/celebrating-the-openbb-platform-v4-beta) blog post highlights, there were many challenges with maintaining the existing codebase.

We needed to refresh the architecture to make it modular, resilient, and scalable. The core components have been trimmed substantially to be lean and efficient - the number of dependencies has reduced from nearly four-hundred down to about twenty.

The result is a much smoother installation procedure, with the tradeoff being some breaking changes for those transitioning from V3 SDK to the V4 Platform. The major differences are described below.

### Platform CLI

The Platform CLI is not installed with the Platform. The Platform CLI will be re-imagined with the new extension framework, it won't get left behind for long!

### Extension Framework

The extension framework lets users install or uninstall individual data and toolkit extensions. No more bloated environments.

```bash
pip install openbb-yfinance

pip uninstall openbb-yfinance
```

### Import Statement

Initialize the OpenBB Platform with a shorter statement and reduced import time.

```python
from openbb import obb
```

### REST API Compliant

The OpenBB Platform is built for REST API deployments, out-of-the-box. Outputs are JSON serializable, and this is a major difference between the SDK and Platform.

Start the API on `localhost` with:

```bash
uvicorn openbb_core.api.rest_api:app
```

### Verbose Namespaces

After careful consideration, the decision was made to name functions with more verbosity. This adds clarity to the functions and lets the user better understand its purpose.

It also improves the performance of AI tooling built on top of the Platform.

```python
obb.equity.fundamental.employee_count("AAPL")
```

### Asset Class Names

Some asset classes have been renamed:

- stocks -> equity
- forex -> currency
- stocks.options -> derivatives.options
- futures -> derivatives.futures

### Source -> Provider

V3 SDK users should note that the `source` parameter is now, `provider`.

:::note
OpenBB Hub Preferences for default sources do not currently sync with V4 Platform, and some API keys not used in the Platform CLI are not able to be saved to the Hub.
:::

### API Key Management

API keys and user preferences are stored in a JSON file - `$HOME/.openbb_platform/user_settings.json` - instead of the `ENV` file in `$HOME/.openbb_sdk/.env`.

Credentials can be entered directly from the Python interface:

```python
from openbb import obb
obb.user.credentials.fmp_api_key="REPLACE_WITH_YOUR_KEY"
```

### OpenBB Hub Login

Login to your OpenBB Hub account with an email/password combo or a revokable Personal Access Token (recommended):

```python
from openbb import obb
obb.account.login()
```

### Function Outputs

The default output format can be selected by the user, and all outputs are Pydantic models.

If you are transitioning from V3 SDK and like working with Pandas DataFrames, set the preference to "dataframe" to get a V3-like response.

```python
from openbb import obb
obb.user.preferences.output_type="dataframe"
df = obb.equity.price.historical("AAPL", provider="yfinance")
```

When the `output_type` is set to, `OBBject`, DataFrames are created from the response object after it is returned.

```python
from openbb import obb
data = obb.equity.price.historical("AAPL", provider="yfinance")
df = data.to_df()
```

:::warning
DataFrames are not JSON serializable. Changing this preference will remove REST API compatibility.
:::

### Jupyter

Jupyter does not get installed with the OpenBB Platform. Install from `pip` in the environment containing the Platform.

```bash
pip install jupyter-lab
```

### Views

Most of the development has been on the core architecture and data providers.

Most views from the V3 SDK and Platform CLI have yet to be ported over to the V4 Platform, although some charts are already available with the `openbb-charting` toolkit extension - which includes PyWry for window creation.

Install the charting extension with:

```bash
pip install openbb-charting
```

The equivalent to `openbb.stocks.candle("AAPL")` is, `obb.equity.price.historical("AAPL", chart=True).show()`.

More views to come soon!

### Getting Started

See the [quickstart in python](/platform/usage/quickstart_python) [quickstart with workspace](/platform/usage/quickstart_python) pages for examples on getting started using the OpenBB Platform in Python or in OpenBB Workspace.


---

---
title: Introduction
sidebar_position: 0
description:
  Introduction to OpenBB Platform; a convenient and powerful tool that
  provides pre-built data connectors and libraries to design and build financial reports
  and applications. Learn more about contributing to the platform.
keywords:
  - OpenBB Platform
  - investment research infrastructure
  - data connectors
  - financial reports
  - OpenBB team
  - third-party data providers
  - CONTRIBUTING GUIDELINES
---

{/* markdownlint-disable MD012 MD031 MD033 MD037 */}

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";
import NewReferenceCard from "@site/src/components/General/NewReferenceCard";

<HeadTitle title="OpenBB Platform Docs" />

The OpenBB Platform has been created and is currently maintained by the OpenBB team together with the contributions from hundreds of community members.

With its ready-to-use data connectors and a wealth of extensions, it lets you concentrate on creating outstanding financial reports and applications quickly and easily.

## Documentation Structure

<ul className="grid grid-cols-1 gap-2 -ml-6">
  <NewReferenceCard
    title="Installation"
    description="Instructions for installation."
    url="platform/installation"
  />
  <NewReferenceCard
    title="Quickstart in Python"
    description="Short goal-oriented example to help users get going with OpenBB Platform in Python."
    url="platform/usage/quickstart_python"
  />
  <NewReferenceCard
    title="Integrate with Workspace"
    description="A short guide to help users integrate OpenBB Platform data with OpenBB Workspace."
    url="platform/usage/quickstart_workspace"
  />
  <NewReferenceCard
    title="Developer Guides"
    description="In-depth explanatory articles to help developing with the OpenBB Platform."
    url="platform/developer_guide/architecture_overview"
  />
  <NewReferenceCard
    title="Command Reference"
    description="Provides detailed information about the command structure, parameters, outputs, examples, and more for the OpenBB Platform endpoints."
    url="/platform/reference"
  />
  <NewReferenceCard
    title="Data Model Reference"
    description="Provides detailed information about the standard data models used in the OpenBB Platform."
    url="/platform/data_models"
  />
  <NewReferenceCard
    title="FAQs"
    description="Provides answers to frequently asked questions."
    url="/platform/faqs/errors"
  />
  <NewReferenceCard
    title="Licensing"
    description="Provides information about the licensing of the OpenBB Platform."
    url="/platform/faqs/license"
  />
</ul>


---

---
title: Installation
sidebar_position: 1
description:
  This page presents the general system requirements, supported environments,
  installation procedures, and setup for running the OpenBB Platform. It discusses
  the prerequisites including Python version, operating system requirements, Docker
  usage, and the process of building the platform from source.
keywords:
  - OpenBB Platform
  - Python
  - System requirements
  - Supported environments
  - Installation
  - Docker
  - Python virtual environment
  - Installation from source
  - Windows 10
  - Mac OS Big Sur
  - Linux
  - Package installation
  - VS Code
  - PyCharm
  - Jupyter
  - GitHub
  - Conda
  - venv
  - API
  - Repository
  - pip
  - Poetry
  - Toml
  - PyPI
  - Node.js
  - npm
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Installation | OpenBB Platform Docs" />

## General System Requirements

Most systems capable of running Python `3.9.21-3.12` will be compatible with the OpenBB Platform. A modern processor (five years or less), running an up-to-date operating system, with at least 4GB of RAM, is recommended. Maintaining the system with current patches ensures maximum compatibility. At a minimum, Windows and macOS should be:

- Windows 10
- Mac OS Big Sur

Linux users should run the command line update for the package manager, prior to installation.

:::warning
As of, `openbb` version 4.4.5, Python 3.9 will trigger a deprecation warning.

Support for versions below 3.10 will be discontinued in the fall of 2025.

Support for Python 3.13 will be introduced in the summer of 2025.
:::

## Installer Package

An installer package is available for Mac and Windows machines. Files are available [here](https://my.openbb.co/app/platform/downloads).

It will handle the installation of Python, environment setup, and OpenBB packages with the latest versions.

:::danger
Users with versions below v1.0.3 will need to follow the steps below to update, via the "Update" shortcut ,to the current version of OpenBB

1. In Finder/Explorer, open the folder where it was installed - probably in a folder, named "OpenBB", at the root of user home folder.
2. From the main installation folder, navigate into the subdirectory, "extensions/openbb_platform_installer".
3. Open, "pyproject.toml", in any text editor, and update two lines:

   - Line 18:
     - From: `python =">3.9,<3.13"`
     - To: `python = ">=3.9.21,<3.13"`
   - Line 21:
     - From: `openbb-core = "^1"`
     - To: `openbb-core = ">=1.4.4"`

4. Save the file, close it.

5. Delete the file, `poetry.lock`, and then run the "Update" shortcut.
   :::

OR:

Manually update the environment from the "Bash" ("CMD" in Windows) shortcut.

1. Open the system shell from the shortcut.
2. Activate the `obb` environment.
3. Run: `pip install -U "openbb[all]" openbb-cli --force-reinstall`
4. Rebuild the Python Interface by running: `openbb-build`

Alternatively, uninstall and reinstall; however, the solutions above are more time-efficient.

## Supported Environments

The OpenBB Platform is installed within a Python virtual environment. It is compatible with versions of Python between 3.9.21 and 3.12, inclusively. The method for creating the environment will be a matter of user preference, from the command line - [Conda](https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html), [venv](https://docs.python.org/3/library/venv.html), etc. - or in a code editor and IDE - [VS Code](https://code.visualstudio.com/docs/languages/python), [PyCharm](https://www.jetbrains.com/pycharm/), [Jupyter](https://jupyter.org/).

If you're interested in using the [Docker](/platform/installation#docker) container, skip ahead to the specific section [below](/platform/installation#docker).

For those new to Python, [this article](https://www.infoworld.com/article/3306656/python-virtualenv-and-venv-dos-and-donts.html) shares some tips on getting started and why environments are important.

See [this guide](https://code.visualstudio.com/docs/python/environments) for creating a Python environment in VS Code.

With the environment created, and activated, begin the installation process.

## Installation

Before installation, update the package manager so that `pip` is current, then create the environment with the desired version of Python.

:::note
Installing packages directly to the system Python or `base` environment is not recommended. Create a new environment first (can be any name, using openbb here for example).

```bash
conda create -n openbb python=3.12
conda activate openbb
```

:::

### PyPI

<details>
Install from PyPI with:

```console
pip install openbb
```

This will install the core OpenBB Platform, along with officially supported extensions and providers.

To install all extensions and providers (both officially supported and community maintained ones):

```console
pip install openbb[all]
```

:::tip
In a macOS `zsh` Terminal shell, add quotation marks around the library name.

`"openbb[all]"`
:::

From your python interpreter, import the OpenBB Platform:

```console
from openbb import obb
```

:::warning
This import statement is required due to the stateful nature of the obb package. There is currently no support for imports such as:

```console
from openbb.obb.equity import *
```

:::

When the package is imported, any installed extensions will be discovered, imported and available for use.

:::note
Currently if you wish to have the bare-bones openbb package with no extensions or providers, you can install with:

```console
pip install openbb-core && pip install openbb --no-deps
```

To install single extensions:

```console
pip install openbb-charting
```

```console
pip install openbb-technical
```

Or install a single provider:

```console
pip install openbb-yfinance
```

Providers are fully functional by themselves, but the interface routes are only added when the router extensions are installed.

```console
pip install openbb-equity openbb-index openbb-derivatives
```

:::

To update the package:

```console
pip install --upgrade openbb
```

To update all extensions and providers:

```console
pip install --upgrade openbb[all]
```

If you want to uninstall the package and all its dependencies:

```console
pip uninstall openbb[all]
```

</details>

### Docker

<details>
We provide a `platformAPI.Dockerfile` on [GitHub](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/refs/heads/develop/build/docker/platformAPI.Dockerfile).

Run the following command from the repo root to build the image:

```bash
docker build -f build/docker/platformAPI.Dockerfile -t openbb-platform:latest .
```

To run it:

```bash
docker run -it --rm -p 6900:6900 -v ~/.openbb_platform:/root/.openbb_platform openbb-platform:latest
```

This will mount the local `~/.openbb_platform` directory into the Docker container to use with the API keys and preferences from there, and it will expose the API on port `6900`.

</details>

### Source

To install from source, create a Python virtual environment and update `pip` and `setuptools`, within the newly created environment, **before** installing any packages.

<details>
To build the OpenBB Platform from the source code, first install `git`:

```console
pip install git
```

Next, clone the repository from GitHub:

```console
git clone git@github.com:OpenBB-finance/OpenBB.git
```

When it is done, checkout the branch where the code is living:

```console
git checkout develop
```

Then, `cd` into the directory:

```console
cd openbb_platform
```

Install required packages

```console
pip install poetry
```

Finally, run the developer installation script:

```console
python dev_install.py
```

:::note
To install all extensions and providers, run: `python dev_install.py -e`
:::

</details>

## Post-Installation

With a fresh installation, and upon installing or uninstalling extensions, the Python interface needs to be built. This is done automatically, but can be manually triggered if required. Start a Python session and import openbb:

```console
python
```

```python
from openbb import obb

exit()
```

To manually trigger the build:

```python
import openbb
openbb.build()
```

Restart the Python interpreter and then begin using the OpenBB Platform.

```python
from openbb import obb
```

Start the REST API with:

```console
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

See more information about using the REST API in the [usage section](/platform/usage/quickstart_workspace)

## Hub Synchronization

Once you have installed the OpenBB Platform with the desired providers and extensions, you can synchronize with the [OpenBB Hub](https://my.openbb.co/app/hub). The main benefit of this is that you can use your single login to access your saved credentials and preferences from any instance. To login, you can use the `login` method, either using your email and password:

```python
obb.account.login(email='my_email_here', password='my_password_here')
```

Or using your personal access token:

```python
obb.account.login(pat='my_pat_here')
```


---

---
title: Environment Variables
sidebar_position: 3
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="User Settings & Environment Variables | OpenBB Platform Docs" />

Environment variables are defined in a `.env` file. If this file does not exist, create it inside the same folder `user_settings.json` is located.

- `OPENBB_DEBUG_MODE`: enables verbosity while running the program
- `OPENBB_DEV_MODE`: applicable to the API; exposes, /system and /user, paths.
- `OPENBB_AUTO_BUILD`: enables automatic SDK package build on import
- `OPENBB_API_AUTH_EXTENSION`: specifies which API authentication extension to use
- `OPENBB_API_AUTH`: enables API authentication for command endpoints
- `OPENBB_API_USERNAME`: sets API username
- `OPENBB_API_PASSWORD`: sets API password

Variables can be defined for current session only.

```python
import os
os.environ["OPENBB_DEBUG_MODE"] = "True"
from openbb import obb
```

### Proxy Networks

:::info
See [System Settings](/platform/settings/system_settings#http) for information on configuring global settings and the session object.
:::

## API Keys

In addition to `user_settings.json`, API keys can be defined as environment variables (openbb-core V1.4.8).

For example, to define `fmp_api_key` as an environment variable, add the following to the `~/.openbb_platform/.env` file.
If it doesn't exist, create it.

```env
FMP_API_KEY = "replaceWITHyourK3Y"
```

Along with the installed providers' credentials, if an entry in the `.env` file ends with `_API_KEY`, it will be accessible as, `obb.user.credentials.some_key`


---

---
title: System Settings
sidebar_position: 2
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="User Settings & Environment Variables | OpenBB Platform Docs" />

An additional configuration file, `system_settings.json`, is located in the same folder as `user_settings.json`, and can be created manually if it does not exist. The items below can be configured via this file, as a JSON dictionary.

## Logging Service

OpenBB Platform has a logging service which can be enabled (default is off) in `system_settings.json`.

When active, it logs commands executed, with their parameters, and any errors to a file.
The files will be stored in the `OpenBBUserData\logs` folder, with each session assigned a UUID and logged in a separate file.

Add this entry to `system_settings.json`:

```json
{
    "logging_suppress": false,
}
```

With the configuration set, the logger can be retrieved by name in the code.

```python
logger = logging.getLogger("openbb.logging_service")
```

## API Settings

The, `"api_settings"`, key is a nested dictionary, and is passed to the instance of FastAPI. 

```json
{
    "api_settings": {
        "version": "1",
        "title": "OpenBB Platform API",
        "description": "This is the OpenBB Platform API.",
        "terms_of_service": "http://example.com/terms/",
        "contact_name": "OpenBB Team",
        "contact_url": "https://openbb.co",
        "contact_email": "hello@openbb.co",
        "license_name": "AGPLv3",
        "license_url": "https://github.com/OpenBB-finance/OpenBB/blob/develop/LICENSE",
        "servers": [
            {
                "url": "",
                "description": "Local OpenBB development server"
            }
        ],
        "cors": {
            "allow_origins": [
                "*"
            ],
            "allow_methods": [
                "*"
            ],
            "allow_headers": [
                "*"
            ]
        },
        "prefix": "/api/v1"
    }
}
```

## Python Settings

The `python_settings` key is a nested dictionary. It contains configurations for the docstring elements within the Python interface, as well as global HTTP and Uvicorn settings.

Additional keys and values can be supplied, however, unless they are specifically implemented by custom code, they will be ignored.

### Docstring Sections

This configuration allows the user to include specific elements of the docstrings. Useful for reducing the context length when incorporating LLMs and function calling. The settings below are for the complete docstring, and are the default state.

```json
{
    "python_settings": {
        "docstring_sections": ["description", "parameters", "returns", "examples"],
        "docstring_max_length": null
    }
}
```

### HTTP

:::important
This section refers to settings available beginning OpenBB v4.4.0
:::

Configurations within, `python_settings["http"]`, apply to both, the requests, and aiohttp, libraries.

The settings are passed into the `requests.Session` object and the `aiohttp.ClientSession` object by:
- `openbb_core.provider.utils.helpers.make_request` - Sync
- `openbb_core.provider.utils.helpers.amake_request` - Async
- `openbb_core.provider.utils.helpers.amake_requests` - Async (multiple requests)
- Inserted to use with YFinance & Finviz library implementations.

Return a session object with the settings applied by:
- `openbb_core.provider.utils.helpers.get_requests_session`
- `openbb_core.provider.utils.helpers.get_async_requests_session`

:::tip
Pass the session object, returned by `get_requests_session`, to use this configuration directly with the yFinance library.

```python
import yfinance as yf
from openbb_core.provider.utils.helpers import get_requests_session

session = get_requests_session()
ticker = yf.Ticker("AAPL", session=session)
```
:::

#### Available settings:

| Key | Type | Description |
|:----|:----:|------------:|
|cafile| str | Path to a CA certificate file.|
|certfile| str | Path to a client certificate file.|
|keyfile| str | Path to a client key file.|
|password| str | Password for the client key file (aiohttp only).|
|verify_ssl| bool | Verify SSL certificates.|
|fingerprint| str | SSL fingerprint (aiohttp only).|
|proxy| str | Proxy URL.|
|proxy_auth| str, list | Proxy basic authentication (aiohttp only).|
|proxy_headers| dict | Proxy headers (aiohttp only).|
|timeout| int | Request timeout.|
|auth| str, list | Basic authentication.|
|headers| dict | Request headers.|
|cookies| dict | Dictionary of session cookies.|

Any additional keys supplied will be ignored unless explicitly implemented via custom code.

### Uvicorn

The, `python_settings["uvicorn"]`, key covers the launch of FastAPI when using the following entry points:

- Running the FastAPI as a Python module script.
    - python -m openbb_core.api.rest_api
- Running the `openbb-api` command.
    - openbb-api

All settings are passed directly to `uvicorn.run`, and can be found in the Uvicorn [documentation](https://www.uvicorn.org/settings/)

:::important
Keyword arguments supplied to the command line will take priority over the settings in this configuration.
:::


---

---
title: Credentials
sidebar_position: 1
description: An overview for setting up the OpenBB Platform Python client and Fast API with data provider API keys.
keywords:
- tutorial
- OpenBB Platform
- Python client
- Fast API
- getting started
- authorization
- data providers
- OpenBB Hub
- local environment
- environment variables
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="API Keys & Credentials | OpenBB Platform Docs" />

By default, authorization is not required to initialize and use the core services. Most data providers, however, require an API key to access their data. Keys can be stored locally and they can also be securely saved to your OpenBB Hub [account](https://my.openbb.co/app/hub) for convenient remote access.

### OpenBB Hub

:::info
The OpenBB Hub is only accessible via the Python Interface. For REST API, store credentials and preferences in the `user_settings.json` file [local](api_keys#local-environment) to the deployment.
:::

Data provider credentials and user preferences can be securely stored on the OpenBB Hub and accessed in Python using a revokable Personal Access Token (PAT). Login to the [Hub](https://my.openbb.co/) to manage this method of remote authorization.

The OpenBB Hub is a convenient solution for accessing data in temporary Python environments, like Google Colab ([example notebook](https://github.com/OpenBB-finance/OpenBBTerminal/blob/develop/examples/googleColab.ipynb)). Login with:

```python
from openbb import obb

# Login with personal access token
obb.account.login(pat="my_pat", remember_me=True)

# Alternatively, login with email and password
obb.account.login(email="my_email", password="my_password", remember_me=True)

# Change a credential
obb.user.credentials.polygon_api_key = "my_api_key"

# Save account changes to the Hub
obb.account.save()

# Refresh account with latest changes
obb.account.refresh()

# Logout
obb.account.logout()
```

Set `remember_me` as `False` to discard all credentials at the end of the session.

:::tip
With `remember_me=True`, credentials will be permanently stored in the environment.
Wrapping this sequence before deploying an API server is one (insecure) way to authorize data providers for remote access.
:::

### Local Environment

Credentials and user preferences are stored locally, `~/.openbb_platform/`, as a JSON file, `user_settings.json`. It is read upon initializing the Python client, or when the Fast API is authorized. If the file does not exist, it will be created on the first run. The schema below can be copy/pasted as a template:

```json
{
  "credentials": {
    "fmp_api_key": "REPLACE",
    "polygon_api_key": "REPLACE",
    "benzinga_api_key": "REPLACE",
    "fred_api_key": "REPLACE",
    "nasdaq_api_key": "REPLACE",
    "intrinio_api_key": "REPLACE",
    "alpha_vantage_api_key": "REPLACE",
    "biztoc_api_key": "REPLACE",
    "tradier_api_key": "REPLACE",
    "tradier_account_type": "sandbox OR live",
    "tradingeconomics_api_key": "REPLACE",
    "tiingo_token": "REPLACE"
  }
}
```

To set keys from the Python client for the current session only, access the Credentials class:

```python
obb.user.credentials.intrinio_api_key = "my_api_key"
```

:::info
See [Environment Variables](/platform/settings/environment_variables) & [System Settings](/platform/settings/system_settings) for more information on configuring the installation via `user_settings.json`.

See [Extensions](/platform/usage/extensions/overview) for a current list of data provider extensions.
:::


---

---
title: Defaults
sidebar_position: 3
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Defaults | OpenBB Platform Docs" />

In the defaults section you can define provider defaults, and other parameters, for Python commands, if no argument is explicitly sent when the command runs. For 'provider', there are two formatting options:

1. **Single provider**: this provider will be selected by default for the given command.
2. **Priority list**: the first provider in the list with all required credentials setup will be used.

```json
{
    ...
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "yfinance"
            },
            "/equity/fundamental/balance": {
                "provider": [
                    "yfinance",
                    "fmp",
                    "polygon"
                ]
            },
        }
    }
}
```

:::note

- If no configuration is specified the command will use the default priority list. This is the list of available providers for the command sorted alphabetically.

:::

#### Query Parameters

Individual parameters can also be defined in `user_settings.json`, and the values supplied will applied at runtime.
The default will be ignored when the parameter is passed in the function call.

```json
{
    ...
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "yfinance",
                "chart": true,
                "chart_params": {
                    "heikin_ashi": true,
                    "indicators": {
                        "sma": {
                            "length": [
                                21,
                                50
                            ]
                        },
                        "ema": {
                            "length": 150
                        }
                    }
                }
            },
            "/economy/cpi": {
                "provider": "oecd"
            }
        }
    }
}
```

:::important

- Default parameters are somewhat limited in the FastAPI. Apart from 'provider', they are applicable only where parameters have been defined as Optional, with a default value of None.

- Command docstrings and descriptions will not change according to items defined here.

  :::


---

---
title: Preferences
sidebar_position: 2
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Preferences | OpenBB Platform Docs" />

User settings are stored locally, `~/.openbb_platform/`, as a JSON file, `user_settings.json`. It is read upon initializing the Python client, or when the Fast API is authorized. If the file does not exist, it will be created on the first run.

This file stores:

- [credentials](api_keys#local-environment)
- [preferences](#preferences)
- [defaults](defaults)

This is an example of how it might look after setup:

```json
{
    "credentials": {
        "fmp_api_key": "REPLACE",
        "polygon_api_key": "REPLACE",
    },
    "preferences": {
        "data_directory": "~/OpenBBUserData",
        "export_directory": "~/OpenBBUserData/exports",
        "metadata": true,
        "output_type": "OBBject"
    },
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "fmp"
            },
            "/equity/fundamental/balance": {
                "provider": [
                    "intrinio",
                    "fmp",
                    "polygon"
                ]
            },
        }
    }
}
```

### Preferences

| **Preference**        | **Default**                      | **Options**                                                         | **Description**                                                                                                                                                                                                                                                                                                          |
| --------------------- | -------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| data_directory        | /home/OpenBBUserData             | Any path.                                                           | When launching the application for the first time this directory will be created. It serves as the default location where the application stores usage artifacts such as logs and exports.                                                                                                                               |
| export_directory      | /home/OpenBBUserData/exports     | Any path.                                                           | The OpenBB Charting Extension provides the capability to export images in various formats. This is the directory where it attempts to save such exports.                                                                                                                                                                 |
| cache_directory       | /home/OpenBBUserData/cache       | Any path.                                                           | The directory where http requests and database caches are stored, for functions with caching.                                                                                                                                                                                                                            |
| user_styles_directory | /home/OpenBBUserData/styles/user | Any path.                                                           | The OpenBB Charting Extension supports custom stylization. This directory is the location where it looks for user-defined styles. If no user styles are found in this directory the application will proceed with the default styles.                                                                                    |
| charting_extension    | openbb_charting                  | ["openbb_charting"]                                                 | Name of the charting extension to be used with the application.                                                                                                                                                                                                                                                          |
| chart_style           | dark                             | ["dark", "light"]                                                   | The default color style to use with the OpenBB Charting Extension plots. Options include "dark", and "light".                                                                                                                                                                                                             |
| table_style           | dark                             | ["dark", "light"]                                                   | "The default color style to use with the OpenBB Charting Extension tables. Options are "dark", and "light""                                                                                                                                                                                                               |
| metadata              | true                             | [true, false]                                                       | Enables or disables the collection of metadata which provides information about operations including arguments duration route and timestamp. Disabling this feature may improve performance in cases where contextual information is not needed, or when the additional computation time and storage space are a concern. |
| output_type           | OBBject                          | ["OBBject", "dataframe", "numpy", "dict", "chart", "polars", "llm"] | Specifies the type of data the application will output when a command or endpoint is accessed. Note that choosing data formats only available in Python such as `dataframe`, `numpy`, or `polars` will render the application's API non-functional.                                                                       |
| show_warnings         | false                             | [true, false]                                                       | Enables or disables the display of warnings.                                                                                                                                                                                                                                                                             |

:::note

- If an `OpenBBUserData` folder is not in the home directory, the application will create one on first run. The user preferences with paths all default to this folder - exports, styles, or data - and can be changed at any time to suit.
- The `OpenBBUserData` will still be created even if preferences are not pointing to it, this is because the application needs a place to store logs and other artifacts.
- One way to export files or images from the OpenBB Platform is to leverage that functionality from the OpenBB Charting Extension. The `export_directory` preference is the location where the extension will attempt to save CSV and image files.

:::


---

---
title: Commitments of Traders
sidebar_position: 22
description: This page provides details on the accessing Commitments of Traders reports with the OpenBB Platform, published by the CFTC weekly. There are explanations of the query parameters and data response, as well as examples for use.
keywords:
- futures
- commodities
- index
- indices
- positioning
- dealer
- hedge
- open interest
- CFTC
- commitments of traders
- COT
- Treasury Note
- currency
- currencies
- equity
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Commitments of Traders - User Guides | OpenBB Platform Docs" />

Commitments of Traders (COT) reports are published on Fridays, by the [CFTC](https://www.cftc.gov/MarketReports/CommitmentsofTraders/index.htm). CFTC COT reports provide a breakdown of each Tuesday’s open interest for futures and options on futures markets in which 20 or more traders hold positions equal to or above the reporting levels established by the CFTC.

## Regulators Module

The `obb.regulators` module contains data published by industry regulators and agencies. The data will not be specific to any particular asset class, and the information is available to the general public. The COT reports have two end points:

- `obb.regulators.cftc.cot()`
- `obb.regulators.cfc.cot_search()`

The `openbb-cftc` extension (included with `pip install openbb`) provides programmatic access to the complete history of reports, dating as far back as 1995.

## `cot_search()`

<details>
<summary mdxType="summary">COT Search</summary>

The `obb.regulators.cftc.cot_search()` endpoint is a curated list of current reports. The list can be searched by partial match - i.e., "resources" - and they are classified under categories and subcategories. Get the whole list with an empty query.

Indices - S&P 500, Nasdaq 100, Dow Jones Industrial Average, Russell 1000 & 2000, VIX, Bloomberg Commodity Index, etc. - can be found with the keyword "index".

The example below shows all the S&P reports.

```python
reports = obb.regulators.cftc.cot_search("s&p").to_df()
```

| code   | name                           | commodity_name                | category              | subcategory   |
|:-------|:-------------------------------|:------------------------------|:----------------------|:--------------|
| 43874A | S&P 500 ANNUAL DIVIDEND INDEX  | DIVIDEND INDICES              | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 43874Q | S&P 500 QUARTERLY DIVIDEND IND | DIVIDEND INDICES              | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874I | E-MINI S&P TECHNOLOGY INDEX    | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 138748 | E-MINI S&P CONSU STAPLES INDEX | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874A | E-MINI S&P 500                 | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 138749 | E-MINI S&P ENERGY INDEX        | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874W | ADJUSTED INT RATE S&P 500 TOTL | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874+ | S&P 500 Consolidated           | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874C | E-MINI S&P FINANCIAL INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 33874A | E-MINI S&P 400 STOCK INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874U | MICRO E-MINI S&P 500 INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874J | E-MINI S&P UTILITIES INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874R | E-MINI S&P REAL ESTATE INDEX   | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |

</details>

## `cot()`

<details>
<summary mdxType="summary">Overview</summary>

The weekly reports are returned as a flat timeseries. The `id` parameter accepts a flexible input, using the "code" provides an exact match returning the complete history. See the Parameters section below for more information on entering symbols.

```python
sp = obb.regulators.cftc.cot("13874+")

# Display the change in open interest from the previous week, limiting to the last 5 reports.
sp.to_df().T.filter(like="change_in", axis=0).iloc[:,-5:]
```

|                             |   2024-10-15 |   2024-10-22 |   2024-10-29 |   2024-11-05 |   2024-11-12 |
|:----------------------------|-------------:|-------------:|-------------:|-------------:|-------------:|
| change_in_open_interest_all |        88416 |       -95881 |        35345 |       -28290 |       242306 |
| change_in_noncomm_long_all  |        22828 |        11329 |         7547 |        11680 |         -900 |
| change_in_noncomm_short_all |        -6723 |         3364 |       -43078 |       -44221 |        82742 |
| change_in_noncomm_spead_all |        29860 |       -46828 |        48684 |       -12005 |        83965 |
| change_in_comm_long_all     |        23939 |       -48592 |       -30357 |       -28563 |       140423 |
| change_in_comm_short_all    |        65620 |       -47838 |        38124 |        29856 |        76404 |
| change_in_tot_rept_long_all |        76627 |       -84092 |        25874 |       -28888 |       223488 |
| change_in_tot_rept_short    |        88757 |       -91302 |        43730 |       -26370 |       243111 |
| change_in_nonrept_long_all  |        11789 |       -11790 |         9471 |          598 |        18818 |
| change_in_nonrept_short_all |         -341 |        -4579 |        -8385 |        -1921 |         -805 |

</details>

<details>
<summary mdxType="summary">Parameters</summary>

The parameters here will alter the type of report returned. Use `start_date` and `end_date` to request specific historical windows.

<details>
<summary mdxType="summary">`id: str`</summary>

The `id` parameter will accept different inputs:

- A "code" - i.e, "13874A" - which can be mapped using `cot_search()`, and can be any valid CFTC market contract code. This should be an exact match.
- A commodity name, category, or subcategory - i.e, "precious metals" for palladium, platinum, silver, and gold.
- A partial name match - i.e, "russell", "nasdaq", "japanese yen"
- "all" - returns all reports associated with the `report_type`, for the most recent date.

</details>

<details>
<summary mdxType="summary">`futures_only: bool = False`</summary>

When `True`, returns the futures-only report. Default is False, for the combined (futures and options) report.

</details>

<details>
<summary mdxType="summary">`report_type: Literal["legacy", "disaggregated", "financial", "supplemental"] = "legacy"`</summary>

The Legacy report is broken down by exchange with reported open interest by three trader classifications:
- commercial
- non-commercial
- non-reportable

Disaggregated reports are broken down by Agriculture and Natural Resource contracts, groups reportable open interest positions into four classifications:
- Producer/Merchant
- Swap Dealers
- Managed Money
- Other Reportables

The Traders in Financial Futures (TFF) report includes financial contracts, and the reported open interest has five classifications:
- Dealer
- Asset Manager
- Leveraged Money
- Other Reportables
- Non-Reportables

<details>
<summary mdxType="summary">Supplemental Explanation</summary>

:::info
Excerpt below is from the explanatory notes on the CFTC's [website](https://www.cftc.gov/MarketReports/CommitmentsofTraders/ExplanatoryNotes/index.htm)
:::

Based on the information contained in the report of futures-and-options combined in the short format, the Supplemental report shows an additional category of “Index Traders” in selected agricultural markets. These traders are drawn from the noncommercial and commercial categories. The noncommercial category includes positions of managed funds, pension funds, and other investors that are generally seeking exposure to a broad index of commodity prices as an asset class in an unleveraged and passively-managed manner. The commercial category includes positions for entities whose trading predominantly reflects hedging of over-the-counter transactions involving commodity indices—for example, a swap dealer holding long futures positions to hedge a short commodity index exposure opposite institutional traders, such as pension funds.

All of these traders—whether coming from the noncommercial or commercial categories—are generally replicating a commodity index by establishing long futures positions in the component markets and then rolling those positions forward from future to future using a fixed methodology. Some traders assigned to the Index Traders category are engaged in other futures activity that could not be disaggregated. As a result, the Index Traders category, which is typically made up of traders with long-only futures positions replicating an index, will include some long and short positions where traders have multi-dimensional trading activities, the preponderance of which is index trading. Likewise, the Index Traders category will not include some traders who are engaged in index trading, but for whom it does not represent a substantial part of their overall trading activity.

</details>

</details>

</details>

<details>
<summary mdxType="summary">Data Response</summary>

:::info
The number of fields returned will vary greatly (up to nearly 200) depending on the type of report and CFTC market contract. Numbers are generally categorized as below, in brackets is a key for isolating each group.

- Positions ('positions')
- Percent of open interest ('pct')
- Change in open interest ('change')
- Number of traders ('traders')
- Concentration Ratios ('conc')

See the CFTC's [website](https://www.cftc.gov/MarketReports/CommitmentsofTraders/ExplanatoryNotes/index.htm) for a detailed explanation of each.
:::

<details>
<summary mdxType="summary">Legacy Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "noncomm_positions_long_all",
    "noncomm_positions_short_all",
    "noncomm_postions_spread_all",
    "comm_positions_long_all",
    "comm_positions_short_all",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "open_interest_old",
    "noncomm_positions_long_old",
    "noncomm_positions_short_old",
    "noncomm_positions_spread",
    "comm_positions_long_old",
    "comm_positions_short_old",
    "tot_rept_positions_long_old",
    "tot_rept_positions_short_1",
    "nonrept_positions_long_old",
    "nonrept_positions_short_old",
    "open_interest_other",
    "noncomm_positions_long_other",
    "noncomm_positions_short_other",
    "noncomm_positions_spread_1",
    "comm_positions_long_other",
    "comm_positions_short_other",
    "tot_rept_positions_long_other",
    "tot_rept_positions_short_2",
    "nonrept_positions_long_other",
    "nonrept_positions_short_other",
    "change_in_open_interest_all",
    "change_in_noncomm_long_all",
    "change_in_noncomm_short_all",
    "change_in_noncomm_spead_all",
    "change_in_comm_long_all",
    "change_in_comm_short_all",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_noncomm_long_all",
    "pct_of_oi_noncomm_short_all",
    "pct_of_oi_noncomm_spread",
    "pct_of_oi_comm_long_all",
    "pct_of_oi_comm_short_all",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "pct_of_open_interest_old",
    "pct_of_oi_noncomm_long_old",
    "pct_of_oi_noncomm_short_old",
    "pct_of_oi_noncomm_spread_1",
    "pct_of_oi_comm_long_old",
    "pct_of_oi_comm_short_old",
    "pct_of_oi_tot_rept_long_old",
    "pct_of_oi_tot_rept_short_1",
    "pct_of_oi_nonrept_long_old",
    "pct_of_oi_nonrept_short_old",
    "pct_of_open_interest_other",
    "pct_of_oi_noncomm_long_other",
    "pct_of_oi_noncomm_short_other",
    "pct_of_oi_noncomm_spread_2",
    "pct_of_oi_comm_long_other",
    "pct_of_oi_comm_short_other",
    "pct_of_oi_tot_rept_long_other",
    "pct_of_oi_tot_rept_short_2",
    "pct_of_oi_nonrept_long_other",
    "pct_of_oi_nonrept_short_other",
    "traders_tot_all",
    "traders_noncomm_long_all",
    "traders_noncomm_short_all",
    "traders_noncomm_spread_all",
    "traders_comm_long_all",
    "traders_comm_short_all",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "traders_tot_old",
    "traders_noncomm_long_old",
    "traders_noncomm_short_old",
    "traders_noncomm_spead_old",
    "traders_comm_long_old",
    "traders_comm_short_old",
    "traders_tot_rept_long_old",
    "traders_tot_rept_short_old",
    "traders_tot_other",
    "traders_noncomm_long_other",
    "traders_noncomm_short_other",
    "traders_noncomm_spread_other",
    "traders_comm_long_other",
    "traders_comm_short_other",
    "traders_tot_rept_long_other",
    "traders_tot_rept_short_other",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "conc_gross_le_4_tdr_long_1",
    "conc_gross_le_4_tdr_short_1",
    "conc_gross_le_8_tdr_long_1",
    "conc_gross_le_8_tdr_short_1",
    "conc_net_le_4_tdr_long_old",
    "conc_net_le_4_tdr_short_old",
    "conc_net_le_8_tdr_long_old",
    "conc_net_le_8_tdr_short_old",
    "conc_gross_le_4_tdr_long_2",
    "conc_gross_le_4_tdr_short_2",
    "conc_gross_le_8_tdr_long_2",
    "conc_gross_le_8_tdr_short_2",
    "conc_net_le_4_tdr_long_other",
    "conc_net_le_4_tdr_short_other",
    "conc_net_le_8_tdr_long_other",
    "conc_net_le_8_tdr_short_other",
]
```
</details>

<details>
<summary mdxType="summary">Disaggregated Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "cftc_subgroup_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "prod_merc_positions_long",
    "prod_merc_positions_short",
    "swap_positions_long_all",
    "swap_positions_short_all",
    "swap_positions_spread_all",
    "m_money_positions_long_all",
    "m_money_positions_short_all",
    "m_money_positions_spread",
    "other_rept_positions_long",
    "other_rept_positions_short",
    "other_rept_positions_spread",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "open_interest_old",
    "prod_merc_positions_long_1",
    "prod_merc_positions_short_1",
    "swap_positions_long_old",
    "swap_positions_short_old",
    "swap_positions_spread_old",
    "m_money_positions_long_old",
    "m_money_positions_short_old",
    "m_money_positions_spread_1",
    "other_rept_positions_long_1",
    "other_rept_positions_short_1",
    "other_rept_positions_spread_1",
    "tot_rept_positions_long_old",
    "tot_rept_positions_short_1",
    "nonrept_positions_long_old",
    "nonrept_positions_short_old",
    "open_interest_other",
    "prod_merc_positions_long_2",
    "prod_merc_positions_short_2",
    "swap_positions_long_other",
    "swap_positions_short_other",
    "swap_positions_spread_other",
    "m_money_positions_long_other",
    "m_money_positions_short_other",
    "m_money_positions_spread_2",
    "other_rept_positions_long_2",
    "other_rept_positions_short_2",
    "other_rept_positions_spread_2",
    "tot_rept_positions_long_other",
    "tot_rept_positions_short_2",
    "nonrept_positions_long_other",
    "nonrept_positions_short_other",
    "change_in_open_interest_all",
    "change_in_prod_merc_long",
    "change_in_prod_merc_short",
    "change_in_swap_long_all",
    "change_in_swap_short_all",
    "change_in_swap_spread_all",
    "change_in_m_money_long_all",
    "change_in_m_money_short_all",
    "change_in_m_money_spread",
    "change_in_other_rept_long",
    "change_in_other_rept_short",
    "change_in_other_rept_spread",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_prod_merc_long",
    "pct_of_oi_prod_merc_short",
    "pct_of_oi_swap_long_all",
    "pct_of_oi_swap_short_all",
    "pct_of_oi_swap_spread_all",
    "pct_of_oi_m_money_long_all",
    "pct_of_oi_m_money_short_all",
    "pct_of_oi_m_money_spread",
    "pct_of_oi_other_rept_long",
    "pct_of_oi_other_rept_short",
    "pct_of_oi_other_rept_spread",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "pct_of_open_interest_old",
    "pct_of_oi_prod_merc_long_1",
    "pct_of_oi_prod_merc_short_1",
    "pct_of_oi_swap_long_old",
    "pct_of_oi_swap_short_old",
    "pct_of_oi_swap_spread_old",
    "pct_of_oi_m_money_long_old",
    "pct_of_oi_m_money_short_old",
    "pct_of_oi_m_money_spread_1",
    "pct_of_oi_other_rept_long_1",
    "pct_of_oi_other_rept_short_1",
    "pct_of_oi_other_rept_spread_1",
    "pct_of_oi_tot_rept_long_old",
    "pct_of_oi_tot_rept_short_1",
    "pct_of_oi_nonrept_long_old",
    "pct_of_oi_nonrept_short_old",
    "pct_of_open_interest_other",
    "pct_of_oi_prod_merc_long_2",
    "pct_of_oi_prod_merc_short_2",
    "pct_of_oi_swap_long_other",
    "pct_of_oi_swap_short_other",
    "pct_of_oi_swap_spread_other",
    "pct_of_oi_m_money_long_other",
    "pct_of_oi_m_money_short_other",
    "pct_of_oi_m_money_spread_2",
    "pct_of_oi_other_rept_long_2",
    "pct_of_oi_other_rept_short_2",
    "pct_of_oi_other_rept_spread_2",
    "pct_of_oi_tot_rept_long_other",
    "pct_of_oi_tot_rept_short_2",
    "pct_of_oi_nonrept_long_other",
    "pct_of_oi_nonrept_short_other",
    "traders_tot_all",
    "traders_prod_merc_long_all",
    "traders_prod_merc_short_all",
    "traders_swap_short_all",
    "traders_m_money_short_all",
    "traders_m_money_spread_all",
    "traders_other_rept_long_all",
    "traders_other_rept_spread",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "traders_tot_old",
    "traders_prod_merc_long_old",
    "traders_prod_merc_short_old",
    "traders_swap_short_old",
    "traders_m_money_short_old",
    "traders_m_money_spread_old",
    "traders_other_rept_long_old",
    "traders_other_rept_spread_1",
    "traders_tot_rept_long_old",
    "traders_tot_rept_short_old",
    "traders_tot_other",
    "traders_prod_merc_long_other",
    "traders_prod_merc_short_other",
    "traders_swap_long_other",
    "traders_swap_short_other",
    "traders_swap_spread_other",
    "traders_m_money_long_other",
    "traders_m_money_short_other",
    "traders_m_money_spread_other",
    "traders_other_rept_long_other",
    "traders_other_rept_short_2",
    "traders_other_rept_spread_2",
    "traders_tot_rept_long_other",
    "traders_tot_rept_short_other",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "conc_gross_le_4_tdr_long_1",
    "conc_gross_le_4_tdr_short_1",
    "conc_gross_le_8_tdr_long_1",
    "conc_gross_le_8_tdr_short_1",
    "conc_net_le_4_tdr_long_old",
    "conc_net_le_4_tdr_short_old",
    "conc_net_le_8_tdr_long_old",
    "conc_net_le_8_tdr_short_old",
    "conc_gross_le_4_tdr_long_2",
    "conc_gross_le_4_tdr_short_2",
    "conc_gross_le_8_tdr_long_2",
    "conc_gross_le_8_tdr_short_2",
    "conc_net_le_4_tdr_long_other",
    "conc_net_le_4_tdr_short_other",
    "conc_net_le_8_tdr_long_other",
    "conc_net_le_8_tdr_short_other",
    "traders_swap_long_all",
    "traders_swap_spread_all",
    "traders_m_money_long_all",
    "traders_other_rept_short",
    "traders_swap_long_old",
    "traders_swap_spread_old",
    "traders_m_money_long_old",
    "traders_other_rept_short_1",
]
```
</details>

<details>
<summary mdxType="summary">Financial Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "cftc_subgroup_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "dealer_positions_long_all",
    "dealer_positions_short_all",
    "dealer_positions_spread_all",
    "asset_mgr_positions_long",
    "asset_mgr_positions_short",
    "asset_mgr_positions_spread",
    "lev_money_positions_long",
    "lev_money_positions_short",
    "lev_money_positions_spread",
    "other_rept_positions_long",
    "other_rept_positions_short",
    "other_rept_positions_spread",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "change_in_open_interest_all",
    "change_in_dealer_long_all",
    "change_in_dealer_short_all",
    "change_in_dealer_spread_all",
    "change_in_asset_mgr_long",
    "change_in_asset_mgr_short",
    "change_in_asset_mgr_spread",
    "change_in_lev_money_long",
    "change_in_lev_money_short",
    "change_in_lev_money_spread",
    "change_in_other_rept_long",
    "change_in_other_rept_short",
    "change_in_other_rept_spread",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_dealer_long_all",
    "pct_of_oi_dealer_short_all",
    "pct_of_oi_dealer_spread_all",
    "pct_of_oi_asset_mgr_long",
    "pct_of_oi_asset_mgr_short",
    "pct_of_oi_asset_mgr_spread",
    "pct_of_oi_lev_money_long",
    "pct_of_oi_lev_money_short",
    "pct_of_oi_lev_money_spread",
    "pct_of_oi_other_rept_long",
    "pct_of_oi_other_rept_short",
    "pct_of_oi_other_rept_spread",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "traders_tot_all",
    "traders_dealer_short_all",
    "traders_dealer_spread_all",
    "traders_asset_mgr_long_all",
    "traders_lev_money_long_all",
    "traders_lev_money_short_all",
    "traders_lev_money_spread",
    "traders_other_rept_long_all",
    "traders_other_rept_short",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "traders_dealer_long_all",
    "traders_asset_mgr_short_all",
    "traders_asset_mgr_spread",
    "traders_other_rept_spread",
]
```
</details>

<details>
<summary mdxType="summary">Supplemental Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "ncomm_postions_long_all_nocit",
    "ncomm_postions_short_all_nocit",
    "ncomm_postions_spread_all_nocit",
    "comm_positions_long_all_nocit",
    "comm_positions_short_all_nocit",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "cit_positions_long_all",
    "cit_positions_short_all",
    "change_open_interest_all",
    "change_noncomm_long_all_nocit",
    "change_noncomm_short_all_nocit",
    "change_noncomm_spead_all_nocit",
    "change_comm_long_all_nocit",
    "change_comm_short_all_nocit",
    "change_tot_rept_long_all",
    "change_tot_rept_short_all",
    "change_nonrept_long_all",
    "change_nonrept_short_all",
    "change_cit_long_all",
    "change_cit_short_all",
    "pct_open_interest_all",
    "pct_oi_noncomm_long_all_nocit",
    "pct_oi_noncomm_short_all_nocit",
    "pct_oi_noncomm_spread_all_nocit",
    "pct_oi_comm_long_all_nocit",
    "pct_oi_comm_short_all_nocit",
    "pct_oi_tot_rept_long_all_nocit",
    "pct_oi_tot_rept_short_all_nocit",
    "pct_oi_nonrept_long_all_nocit",
    "pct_oi_nonrept_short_all_nocit",
    "pct_oi_cit_long_all",
    "pct_oi_cit_short_all",
    "traders_tot_all",
    "traders_noncomm_long_all_nocit",
    "traders_noncomm_short_all_nocit",
    "traders_noncomm_spread_all_nocit",
    "traders_comm_long_all_nocit",
    "traders_comm_short_all_nocit",
    "traders_tot_rept_long_all_nocit",
    "traders_tot_rept_short_all_nocit",
    "traders_cit_long_all",
    "traders_cit_short_all",
]
```
</details>

</details>

## Example

```python
import pandas as pd
from openbb import obb

pd.set_option("plotting.backend", "plotly")

cot = obb.regulators.cftc.cot("S&P 500 Consolidated", start_date="2014-01-01").to_df()
oi_change = cot[["open_interest_all"]]
sp_price = obb.equity.price.historical("SPY", start_date="2014-01-01", interval="1d", provider="yfinance")
sp_df = sp_price.to_df()[["close"]]

df = oi_change.join(sp_df).pct_change().multiply(100).round(4).dropna()
df.iloc[0, :] = 0
df.columns = ["Change in Open Interest", "Change in Price"]

fig = df.plot()

fig.show(config={"scrollZoom": True})
```

!["S&P Price Change vs. CFTC Open Interest"](https://github.com/user-attachments/assets/cddb9c0a-19ad-482d-82a3-515cd82ec1a1)



---

---
title: Economic Indicators
sidebar_position: 7
description: This page provides a tutorial for getting started using the `obb.economy.indicators` endpoint,
  with the `openbb-econdb` provider extension. The command provides access to over 100 standardized indicator
  symbols, covering countries around the world.
keywords:
- tutorial
- provider
- econdb
- economy
- usage
- indicators
- economic
- CPI
- CORE
- GDP
- transform
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Economic Indicators - User Guides | OpenBB Platform Docs" />

This page provides a tutorial for getting started using the `obb.economy.indicators` endpoint, with the `openbb-econdb` and `openbb-imf` provider extensions.


## IMF

There are currently two IMF databases accessible by this command, and a third (Direction of Trade) is available via `obb.economy.direction_of_trade`.

- International Reserves & Foreign Currency Liquidity
- Financial Soundness Indicators

<details>
<summary mdxType="summary">IMF Indicators</summary>

The `obb.economy.indicators` endpoint provides direct access to over 2600 IMF time series, allowing selection of both multiple series and countries.

### Available Symbols

The complete list of individual series is returned by the `available_indicators` endpoint.

It allows a text query, where ";" is an AND operator and "|" is an OR operator.

```python
obb.economy.available_indicators(provider="imf", query="gold")
```

<details>
<summary mdxType="summary">Results</summary>

| symbol        | symbol_root   | description                                                                                                                                          | dataset   | table                              |   level |   order | children                                                  | unit   |
|:--------------|:--------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:-----------------------------------|--------:|--------:|:----------------------------------------------------------|:-------|
| RAFA_USD      | RAF_USD       | Official Reserve Assets, US Dollars                                                                                                                  | IRFCL     | reserve_assets_and_other_fx_assets |       2 |       2 | RAFAFX_USD,RAFAIMF_USD,RAFASDR_USD,RAFAGOLD_USD,RAFAO_USD | usd    |
| RAFAGOLD_USD  | RAFA_USD      | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped) , US Dollars                                               | IRFCL     | reserve_assets_and_other_fx_assets |       3 |      14 | RAFAGOLDV_OZT                                             | usd    |
| RAFAGOLDV_OZT | RAFAGOLD_USD  | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped), Volume in Millions of Fine Troy Ounces , Fine Troy Ounces | IRFCL     | reserve_assets_and_other_fx_assets |       4 |      15 | -                                                       | ozt    |
| RAOFAG_USD    | RAOFA_USD     | Other Foreign Currency Assets (Specify), Gold Not Included in Official Reserve Assets, US Dollars                                                    | IRFCL     | reserve_assets_and_other_fx_assets |       3 |      25 | -                                                       | usd    |

</details>

```python
obb.economy.available_indicators(provider="imf", query="gold|gdp;usd")
```

<details>
<summary mdxType="summary">Results</summary>

| symbol                      | symbol_root   | description                                                                                                                                                                                                                                                                         | dataset   | table                              |   level | order   | children                                                  | unit   |
|:----------------------------|:--------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:-----------------------------------|--------:|:--------|:----------------------------------------------------------|:-------|
| RAFA_USD                    | RAF_USD       | Official Reserve Assets, US Dollars                                                                                                                                                                                                                                                 | IRFCL     | reserve_assets_and_other_fx_assets |       2 | 2.0     | RAFAFX_USD,RAFAIMF_USD,RAFASDR_USD,RAFAGOLD_USD,RAFAO_USD | usd    |
| RAFAGOLD_USD                | RAFA_USD      | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped) , US Dollars                                                                                                                                                                              | IRFCL     | reserve_assets_and_other_fx_assets |       3 | 14.0    | RAFAGOLDV_OZT                                             | usd    |
| RAFAGOLDV_OZT               | RAFAGOLD_USD  | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped), Volume in Millions of Fine Troy Ounces , Fine Troy Ounces                                                                                                                                | IRFCL     | reserve_assets_and_other_fx_assets |       4 | 15.0    | -                                                         | ozt    |
| RAOFAG_USD                  | RAOFA_USD     | Other Foreign Currency Assets (Specify), Gold Not Included in Official Reserve Assets, US Dollars                                                                                                                                                                                   | IRFCL     | reserve_assets_and_other_fx_assets |       3 | 25.0    | -                                                         | usd    |
| FSDHG_USD                   | -             | Financial, Financial Soundness Indicators, Encouraged Set, Households, Household Debt to GDP, Gross Domestic Product (GDP), US Dollars                                                                                                                                              | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FSNFAG_USD                  | -             | Financial, Financial Soundness Indicators, Encouraged Set, Other Financial Corporations, Assets to Gross Domestic Product (GDP), Assets, US Dollars                                                                                                                                 | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FSDFAG_USD                  | -             | Financial, Financial Soundness Indicators, Encouraged Set, Other Financial Corporations, Assets to Gross Domestic Product (GDP), Gross Domestic Product (GDP), US Dollars                                                                                                           | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_NFC_LD_FSTDGDP_USD       | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Non-financial corporations, Balance Sheet, Liabilities, Debt, Total debt to GDP, US Dollars                                                                                  | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_IPF_IC_A_FSGDPIC_USD | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Insurance corporations, OFCs assets to gross domestic product: Insurance Corporations, US Dollars | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_MMF_A_FSGDPMMF_USD   | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Money market funds, OFCs assets to gross domestic product:  Money Market funds, US Dollars        | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_IPF_PF_A_FSGDPPF_USD | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Pension funds, OFCs assets to gross domestic product: Pension Funds, US Dollars                   | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| NGDP_USD                    | -             | National Accounts, Expenditure, Gross Domestic Product, US Dollars                                                                                                                                                                                                                  | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |

</details>


### Presets

Presets are a collection of symbols, typically complete tables from sections of each database.

- 'IRFCL': All the data from the set of indicators. Not compatible with multiple countries.
- 'irfcl_top_lines': The default, top line items from the IRFCL data. Compatible with multiple countries.
- 'reserve_assets_and_other_fx_assets': Table I of the IRFCL data. Not compatible with multiple countries.
- 'predetermined_drains_on_fx_assets': Table II of the IRFCL data. Not compatible with multiple countries.
- 'contingent_drains_fx_assets': Table III of the IRFCL data. Not compatible with multiple countries.
- 'memorandum_items': The memorandum items table of the IRFCL data. Not compatible with multiple countries.
- 'gold_reserves': Gold reserves as value in USD and Fine Troy Ounces. Compatible with multiple countries.
- 'derivative_assets': Net derivative assets as value in USD. Compatible with multipile countries.
- 'fsi_core': The core Financial Soundness Indicators. Compatible with multiple countries.
- 'fsi_core_underlying': The core FSIs underlying series data. Not compatible with country='all'.
- 'fsi_encouraged_set': The encouraged set of Financial Soundness Indicators. Not compatible with country='all'.
- 'fsi_other': The other Financial Soundness Indicators. Not compatible with country='all'.
- 'fsi_balance_sheets': Data categorized as Balance Sheets and Income Statements. Not compatible with country='all'.
- 'fsi_all': All the Financial Soundness Indicators. Not compatible with multiple countries.

### Entering Countries

Countries can be entered as a list, or a comma-separated string. A country can be either, the full name in lower_snake_case, or the two-letter ISO country code.

```python
obb.economy.indicators(provider="imf", symbol="irfcl_top_lines", country="us,italy,france,DE")
```

When the number of symbols being requested is low, setting the parameter to, "all", will return all countries available for each symbol.

</details>



## EconDB

:::note
**OpenBB is not affiliated with EconDB. All service is provided "AS IS" and without warranty.**
:::

The `obb.economy.indicators` function provides access to over 100 standardized indicator symbols, covering countries around the world.


## Authorization

This command requires an API key. You can create an account [here](https://econdb.com), and enter the key assigned.

Leaving the key as None will attempt to retrieve a temporary token that is assigned when downloading the data as a CSV file from a browser.
This is a workaround and can be blocked by Cloudflare. In this instance, the temporary token can be viewed by opening any indicator in your browser,
then selecting 'Python' from the 'Export' drop-down.

![Temporary Token](https://github.com/OpenBB-finance/OpenBB/assets/85772166/d2d4c6a7-e8b1-4345-b28f-0693ddb8dcf1)

The best method is to support the service by registering an account.

```python
from openbb import obb
obb.user.credentials.econdb_api_key = REPLACE_WITH_KEY
```

See the [API keys](/platform/settings/user_settings/api_keys) page for more information on credentials.

## Important Considerations

**Carefully inspect data before conducting analysis and arriving at conclusions.**

EconDB sources data directly from national agencies, or other reputable sources such as the IMF, but the data itself may not be directly comparable between collections of countries. For example, some countries will have GDP data as 'annualized' (North America) while others report the values for the period.

These factors can be considered as "known-unknowns", the metadata will not contain this information.

:::important
- This function will not attempt to normalize the values for cross-country comparison. Some values should be manually adjusted, post-request, to accommodate.

- Transforming levels as USD, or % of GDP, may have unexpected results where values are not appropriate for this conversion. Do not attempt to apply these transformations universally.

- Values that are scaled to, or transformed as, a percent are returned as a normalized value - i.e, 1% = 0.01. It will have a multiplier value of 1, which is not indicative of display values.

- Contextual information is contained within metadata, returned under the "extra" attribute of the function response.
:::

## Available Indicators

EconDB has a list of "main" indicators, which are standardized base symbols across the available countries for each.

```python
from openbb import obb

indicators = obb.economy.available_indicators(provider="econdb").to_df()

indicators.iloc[0]
```

| symbol_root           | POLIR                      |
|:----------------------|:---------------------------|
| symbol                | POLIREA                    |
| country               | Euro area                  |
| iso                   | EA                         |
| description           | Policy rate - short term   |
| frequency             | D                          |
| currency              | PERCENT                    |
| scale                 | Units                      |
| multiplier            | 1                          |
| transformation        | Period level               |
| source                | European Central Bank      |
| first_date            | 1999-01-01                 |
| last_date             | 2024-04-08                 |
| last_insert_timestamp | 2024-04-08 12:27:05.089860 |

:::tip
Metadata is returned in the command response to the 'extra' attribute.
:::


```python
data = obb.economy.indicators("POLIR", country="EA")
data.extra["results_metadata"]
```

```python
{'POLIREA': {'title': 'Euro area - Policy rate - short term',
  'country': 'Euro area',
  'frequency': 'D',
  'dataset': 'ECBFM',
  'transformation': None,
  'units': 'PERCENT',
  'scale': 'Units',
  'multiplier': 1,
  'additional_info': {'FREQ:Frequency': 'D:Daily',
   'REF_AREA:Reference area': 'U2:Euro area (Member States and Institutions of the Euro Area) changing composition',
   'CURRENCY:Currency': 'EUR:Euro',
   'PROVIDER_FM:Financial market provider': '4F:ECB',
   'INSTRUMENT_FM:Financial market instrument': 'KR:Key interest rate',
   'PROVIDER_FM_ID:Financial market provider identifier': 'MRR_FR:ECB Main refinancing operations - fixed rate tenders (fixed rate) (date of changes)',
   'DATA_TYPE_FM:Financial market data type': 'LEV:Level'}}}
```

<details>
<summary mdxType="summary">Basic Descriptions</summary>


Basic descriptions of the base symbols can be imported from within the extension module helpers.

```python
from openbb_econdb.utils.helpers import INDICATORS_DESCRIPTIONS
```

:::important
This list should not be considered as the absolute source of truth. The metadata for the indicator will be returned in the command response, under the `extras` attribute.
:::

| ACPOP     | Active population                                  |
|:----------|:---------------------------------------------------|
| CA        | Current account balance                            |
| CAR       | Passenger car sales                                |
| CBAL      | Commercial balance (goods + services)              |
| CI        | Change in inventories                              |
| CKA       | Net foreign investment                             |
| CLAIMS    | Weekly unemployment insurance claims               |
| CLI       | OECD CLI                                           |
| CON       | Total consumption                                  |
| CONF      | Consumer confidence index                          |
| CORE      | Core consumer price index                          |
| CP        | Construction production                            |
| CPI       | Consumer price index                               |
| CRED      | Domestic credit                                    |
| CREDEA    | Domestic credit                                    |
| DWPE      | Dwelling permits                                   |
| ELE       | Production electricity                             |
| EMP       | Total employment                                   |
| EMRATIO   | Employment to working age population               |
| EQYCAP    | Market capitalization                              |
| EXP       | Exports of goods and services                      |
| EXPMON    | Monthly exports                                    |
| GASDEM    | Gas demand                                         |
| GASODEM   | Gasoline demand                                    |
| GASOPROD  | Gasoline production                                |
| GASPROD   | Gas production                                     |
| GBAL      | Government balance                                 |
| GCF       | Gross capital formation                            |
| GDEBT     | Government debt                                    |
| GDEBTN    | Government net debt                                |
| GDP       | Gross domestic product                             |
| GDPDEF    | GDP deflator                                       |
| GDPPC     | GDP per capita                                     |
| GFCF      | Gross fixed capital formation                      |
| GREV      | General government total revenue                   |
| GSPE      | General government total expenditure               |
| HHDIR     | Household debt to income ratio                     |
| HHS       | Household saving                                   |
| HOU       | House price                                        |
| IBD1      | Interbank lending overnight rate                   |
| IIPA      | International investment position: Assets          |
| IIPL      | International investment position: Liabilities     |
| IMP       | Imports of goods and services                      |
| IMPMON    | Monthly imports                                    |
| INVER     | Investment rate                                    |
| IP        | Industrial production                              |
| JHR       | Job hires rate                                     |
| JLR       | Job layoffs rate                                   |
| JQR       | Job quits rate                                     |
| JVR       | Job vacancy rate                                   |
| KA        | Capital account                                    |
| LE00      | Life expectancy at birth                           |
| LMICS     | Low and Middle Income Commodity Index (World Bank) |
| M3        | Money supply                                       |
| M3YD      | 3 month yield                                      |
| MB        | Monetary base                                      |
| NCT       | Net current transfers (Secondary Income)           |
| NFCI      | Non-financial corporations investment rate         |
| NFCLOAN   | Lending to non-financial corporations              |
| NIIP      | Net international investment position              |
| NPL       | Non performing loans                               |
| NY        | Net income from abroad (Primary Income)            |
| OILDEM    | Oil demand                                         |
| OILPROD   | Oil production                                     |
| PALUM     | Aluminum                                           |
| PAPPLE    | Non-Citrus Fruit, Apple                            |
| PART      | Participation rate                                 |
| PBANSOP   | Bananas                                            |
| PBARL     | Barley                                             |
| PBEEF     | Beef                                               |
| PCE       | Personal consumption expenditure price index       |
| PCHANA    | Legumes, Chickpea                                  |
| PCHROM    | Chromium                                           |
| PCOALAU   | Coal, Australia                                    |
| PCOALSA   | Coal, South Africa                                 |
| PCOBA     | Cobalt                                             |
| PCOCO     | Cocoa                                              |
| PCOFFOTM  | Coffee, Other Mild Arabica                         |
| PCOFFROB  | Coffee, Robustas                                   |
| PCOIL     | Coconut Oil                                        |
| PCOPP     | Copper                                             |
| PCOTTIND  | Cotton                                             |
| PDAP      | Diammonium phosphate                               |
| PFSHMEAL  | Fish Meal                                          |
| PGASO     | Gasoline                                           |
| PGNUTS    | Groundnuts                                         |
| PGOLD     | Gold                                               |
| PHEATOIL  | Heating Oil                                        |
| PHIDE     | Hides                                              |
| PIORECR   | Iron                                               |
| PLAMB     | Lamb                                               |
| PLEAD     | Lead                                               |
| PLITH     | Lithium                                            |
| PLMMODY   | Molybdenum                                         |
| PLOGORE   | Soft Logs                                          |
| PLOGSK    | Hard Logs, Import Price Japan                      |
| PMAIZMT   | Corn                                               |
| PMANGELE  | Manganese                                          |
| PMILK     | Dairy Products, Milk                               |
| PNGASEU   | Natural gas, EU                                    |
| PNGASJP   | LNG, Asia                                          |
| PNGASUS   | Natural Gas, US Henry Hub Gas                      |
| PNICK     | Nickel                                             |
| POATS     | Oats                                               |
| POILAPSP  | APSP crude oil($/bbl)                              |
| POILBRE   | Brent Crude                                        |
| POILDUB   | Dubai Crude                                        |
| POILWTI   | WTI Crude                                          |
| POLIR     | Policy rate - short term                           |
| POLVOIL   | Olive Oil                                          |
| POP       | Population                                         |
| PORANG    | Orange                                             |
| PPALLA    | Palladium                                          |
| PPI       | Producer price index                               |
| PPLAT     | Platinum                                           |
| PPOIL     | Palm Oil                                           |
| PPORK     | Swine                                              |
| PPOTASH   | Potassium Fertilizer                               |
| PPOULT    | Poultry                                            |
| PPROPANE  | Propane                                            |
| PRC       | Private consumption                                |
| PREODOM   | Rare Earth Elements                                |
| PRICENPQ  | Rice, Thailand                                     |
| PRIDEBT   | Private debt                                       |
| PROIL     | Rapeseed Oil                                       |
| PRUBB     | Rubber                                             |
| PSALM     | Fish                                               |
| PSAWMAL   | Hard Sawnwood, Dark Red Meranti                    |
| PSAWORE   | Soft Sawnwood, Average of Softwoods,               |
| PSHRI     | Shrimp                                             |
| PSILLUMP  | Silicon                                            |
| PSILVER   | Silver                                             |
| PSMEA     | Soybean Meal                                       |
| PSOIL     | Soybeans Oil                                       |
| PSORG     | Sorghum                                            |
| PSOYB     | Soybeans                                           |
| PSUGAISA  | Sugar, No. 11, World                               |
| PSUGAUSA  | Sugar, No. 16, US                                  |
| PSUNO     | Sunflower Oil                                      |
| PTEA      | Tea, Kenyan                                        |
| PTEAINDIA | Tea, Kolkata                                       |
| PTEAMOM   | Tea, Mombasa                                       |
| PTEASL    | Tea, Colombo                                       |
| PTIN      | Tin                                                |
| PTOMATO   | Vegetables, Tomato                                 |
| PUC       | Public consumption                                 |
| PURAN     | Uranium                                            |
| PUREA     | Urea                                               |
| PVANPENT  | Vanadium                                           |
| PWHEAMT   | Wheat                                              |
| PWOOLC    | Wool, Coarse                                       |
| PWOOLF    | Wool, Fine                                         |
| PZINC     | Zinc                                               |
| RCI       | Real change in inventories                         |
| RCON      | Real total consumption                             |
| REER      | Real effective exchange rate                       |
| REEREA    | Real effective exchange rate                       |
| RETA      | Retail trade                                       |
| REXP      | Real exports of goods and services                 |
| RGCF      | Real gross capital formation                       |
| RGDP      | Real gross domestic product                        |
| RGDPPC    | Real GDP per capita                                |
| RGFCF     | Real gross fixed capital formation                 |
| RIMP      | Real imports of goods and services                 |
| RPRC      | Real private consumption                           |
| RPUC      | Real public consumption                            |
| SEI       | Stock exchange index                               |
| SENT      | Sentiment index                                    |
| TB        | Trade balance                                      |
| URATE     | Unemployment                                       |
| UTIL      | Utilization rate                                   |
| WAGE      | Wages/Earnings                                     |
| WAGEMAN   | Hourly wage manufacturing                          |
| Y10YD     | Long term yield                                    |

</details>

## Countries


<details>

The `country` parameter will accept the ISO country code, or the country name. Regional groups listed below are also valid:

- all
- africa
- central_asia
- east_asia
- europe
- g7
- g20
- latin_america
- middle_east
- north_america
- oceania
- south_asia
- southeast_asia

:::note
Some symbols do not have a country - e.g., commodity items - and they will ignore any supplied values to the parameter.
Not every indicator has data for every country. Items with no results will be communicated via the `warnings` attribute of the response object.

```python
obb.economy.indicators("POLIR", country="southeast_asia")
```
```console
OBBject

id: 0661ac07-ab9c-7ebf-8000-849fef1202bc
results: [{'date': datetime.date(2013, 4, 29), 'symbol': 'POLIRSG', 'country': 'Sin...
provider: econdb
warnings: [{'category': 'UserWarning', 'message': "Invalid country code for...
chart: None
extra: {'results_metadata': {'POLIRID': {'title': 'Indonesia - Policy rate - short ...
```

:::

### Countries By Indicator

In addition to filtering the `available_indicators` data locally, countries by indicator can be imported as a utility function from the `openbb_econdb.utils.helpers` module.

```python
from openbb_econdb.utils.helpers import get_indicator_countries

get_indicator_countries("GDPPC")  # returns a list of two-letter ISO country codes
```
</details>


## How To Enter Symbols

<details>

The three parameters - symbol, country, transform - all work together.

- Symbol (base symbol)
  - CPI, GDP, CORE, etc
  - Multiple items allowed
- Country
  - ISO country code, or name
  - Multiple items allowed
- Transform
  - `tpop`: Percent change from previous period
  - `toya`: Percent change from year ago
  - `tusd`: Values as US dollars
  - `tpgp`: Values as a percent of GDP

The `transform` will apply to all combinations of `symbol` and `country`.

:::warning
If you attempt to pass a base symbol (excluding commodity and world indicators) with no country, it will raise an error.
:::

<details>
<summary mdxType="summary">Example - One Indicator & Country</summary>

M3 Money Supply

```python
data = obb.economy.indicators("M3", country="us")

data.to_df().tail(12)
```

| date       | symbol_root   | symbol   | country       |   value |
|:-----------|:--------------|:---------|:--------------|--------:|
| 2023-03-01 | M3            | M3US     | United States |   21027 |
| 2023-04-01 | M3            | M3US     | United States |   20843 |
| 2023-05-01 | M3            | M3US     | United States |   20711 |
| 2023-06-01 | M3            | M3US     | United States |   20749 |
| 2023-07-01 | M3            | M3US     | United States |   20724 |
| 2023-08-01 | M3            | M3US     | United States |   20695 |
| 2023-09-01 | M3            | M3US     | United States |   20669 |
| 2023-10-01 | M3            | M3US     | United States |   20636 |
| 2023-11-01 | M3            | M3US     | United States |   20723 |
| 2023-12-01 | M3            | M3US     | United States |   20890 |
| 2024-01-01 | M3            | M3US     | United States |   20862 |
| 2024-02-01 | M3            | M3US     | United States |   20788 |

```python
data.extra.get("results_metadata")
```
```python
{'M3US': {'title': 'United States - Money supply',
  'country': 'United States',
  'frequency': 'M',
  'dataset': 'FRB_H6_M2',
  'transform': None,
  'units': 'DOMESTIC',
  'scale': 'Billions',
  'multiplier': 1000000000,
  'additional_info': {'ADJUSTED:Seasonal Adjustment': 'NSA:Not seasonally adjusted',
   'CURRENCY:Currency': 'USD:United States / United States Dollar',
   'FREQ:Frequency': '129:Monthly',
   'SERIES_NAME:Series name (FRB)': 'M2_N.M:M2_N.M',
   'UNIT:Units': 'CURRENCY:Currency'}}}
```
</details>

<details>
<summary mdxType="summary">Example - One Indicator & Country With Transform</summary>

US PPI - Change from one year ago.

```python
data = obb.economy.indicators("PPI", country="us", transform="toya")

data.to_df().tail(12)
```

| date       | symbol_root   | symbol     | country       |    value |
|:-----------|:--------------|:-----------|:--------------|---------:|
| 2023-04-01 | PPI           | PPIUS~TOYA | United States | 0.022995 |
| 2023-05-01 | PPI           | PPIUS~TOYA | United States | 0.011822 |
| 2023-06-01 | PPI           | PPIUS~TOYA | United States | 0.001912 |
| 2023-07-01 | PPI           | PPIUS~TOYA | United States | 0.008722 |
| 2023-08-01 | PPI           | PPIUS~TOYA | United States | 0.016003 |
| 2023-09-01 | PPI           | PPIUS~TOYA | United States | 0.021542 |
| 2023-10-01 | PPI           | PPIUS~TOYA | United States | 0.013481 |
| 2023-11-01 | PPI           | PPIUS~TOYA | United States | 0.008465 |
| 2023-12-01 | PPI           | PPIUS~TOYA | United States | 0.00948  |
| 2024-01-01 | PPI           | PPIUS~TOYA | United States | 0.008222 |
| 2024-02-01 | PPI           | PPIUS~TOYA | United States | 0.015153 |
| 2024-03-01 | PPI           | PPIUS~TOYA | United States | 0.020896 |

```python
data.extra.get("results_metadata")
```
```
{'PPIUS~TOYA': {'title': 'United States - Producer price index',
  'country': 'United States',
  'frequency': 'M',
  'dataset': 'BLS_PPI00',
  'transform': 'Change from one year ago',
  'units': 'INDEX',
  'scale': 'PERCENT',
  'multiplier': 1,
  'additional_info': {'DATA_DOMAIN:Data Domain': 'PPI:Producer price indices',
   'REF_AREA:Reference country or area': 'US:United States',
   'INDICATOR:Economic Indicator': 'PPPI_SA_IX:Prices, Producer Price Index, All Commodities, Seasonally adjusted, Index',
   'COUNTERPART_AREA:Counterpart country or area': '_Z:Not applicable',
   'FREQ:Frequency': 'M:Monthly',
   'UNIT_MULT:Unit multiplier': '0:Units'}}}
```
</details>

<details>
<summary mdxType="summary">Example - Commodity Indicator</summary>

Values are always in USD.

```python
lead = obb.economy.indicators("plead")

lead.to_df().tail(4)
```

| date       | symbol_root   | symbol   | country   |   value |
|:-----------|:--------------|:---------|:----------|--------:|
| 2023-10-01 | PLEAD         | PLEAD    | World     |  2131.4 |
| 2023-11-01 | PLEAD         | PLEAD    | World     |  2188.5 |
| 2023-12-01 | PLEAD         | PLEAD    | World     |  2027.2 |
| 2024-01-01 | PLEAD         | PLEAD    | World     |  2087.4 |

```python
lead.extra["results_metadata"]
```
```python
{'PLEAD': {'title': 'World - Lead',
  'country': 'World',
  'frequency': 'M',
  'dataset': 'IMF_PCPS',
  'transform': None,
  'units': 'USD',
  'scale': 'Units',
  'multiplier': 1,
  'additional_info': {'FREQ:Frequency': 'M:Monthly',
   'REF_AREA:Reference Area': 'W00:All Countries, excluding the IO',
   'COMMODITY:Commodity': 'PLEAD:Primary Commodity Prices, Lead',
   'UNIT_MEASURE:Unit of Measure': 'USD:US Dollars',
   'UNIT_MULT:Scale': '0:Units'}}}
```
</details>

<details>
<summary mdxType="summary">Example - Multiple Indicators & Countries With Transform</summary>

```python
params = {"symbol": "core,cpi", "country": "us,de,jp", "transform": "toya"}
data = obb.economy.indicators(**params)
df = data.to_df().filter(like="2024", axis=0)

df
```

| date       | symbol_root   | symbol      | country       |    value |
|:-----------|:--------------|:------------|:--------------|---------:|
| 2024-01-01 | CORE          | COREDE~TOYA | Germany       | 0.03394  |
| 2024-01-01 | CORE          | COREJP~TOYA | Japan         | 0.03523  |
| 2024-01-01 | CORE          | COREUS~TOYA | United States | 0.03875  |
| 2024-01-01 | CPI           | CPIDE~TOYA  | Germany       | 0.02887  |
| 2024-01-01 | CPI           | CPIJP~TOYA  | Japan         | 0.021012 |
| 2024-01-01 | CPI           | CPIUS~TOYA  | United States | 0.03106  |
| 2024-02-01 | CORE          | COREDE~TOYA | Germany       | 0.03454  |
| 2024-02-01 | CORE          | COREJP~TOYA | Japan         | 0.03216  |
| 2024-02-01 | CORE          | COREUS~TOYA | United States | 0.03762  |
| 2024-02-01 | CPI           | CPIDE~TOYA  | Germany       | 0.02517  |
| 2024-02-01 | CPI           | CPIJP~TOYA  | Japan         | 0.02788  |
| 2024-02-01 | CPI           | CPIUS~TOYA  | United States | 0.03166  |
| 2024-03-01 | CORE          | COREUS~TOYA | United States | 0.03797  |
| 2024-03-01 | CPI           | CPIDE~TOYA  | Germany       | 0.021533 |
| 2024-03-01 | CPI           | CPIUS~TOYA  | United States | 0.03475  |
</details>

<details>
<summary mdxType="summary">Example - All Countries</summary>

Setting the country to "all" will retrieve data for all available countries.

```python
data = obb.economy.indicators("ny", country="all", transform="tusd")

data.to_df().filter(like="2024", axis=0)
```
| date       | symbol_root   | symbol    | country    |    value |
|:-----------|:--------------|:----------|:-----------|---------:|
| 2024-01-01 | NY            | NYBE~TUSD | Belgium    |  1132.6  |
| 2024-01-01 | NY            | NYBG~TUSD | Bulgaria   |   -78.79 |
| 2024-01-01 | NY            | NYHR~TUSD | Croatia    |    31.99 |
| 2024-01-01 | NY            | NYCZ~TUSD | Czechia    |  -676.3  |
| 2024-01-01 | NY            | NYDK~TUSD | Denmark    |  1323.6  |
| 2024-01-01 | NY            | NYEE~TUSD | Estonia    |  -131.74 |
| 2024-01-01 | NY            | NYFI~TUSD | Finland    |   626.4  |
| 2024-01-01 | NY            | NYFR~TUSD | France     |  8570    |
| 2024-01-01 | NY            | NYDE~TUSD | Germany    | 13656    |
| 2024-01-01 | NY            | NYGR~TUSD | Greece     |   451.5  |
| 2024-01-01 | NY            | NYHU~TUSD | Hungary    |  -528.7  |
| 2024-01-01 | NY            | NYIT~TUSD | Italy      |  -509.5  |
| 2024-01-01 | NY            | NYLV~TUSD | Latvia     |    53.57 |
| 2024-01-01 | NY            | NYLT~TUSD | Lithuania  |  -111.62 |
| 2024-01-01 | NY            | NYLU~TUSD | Luxembourg | -3791    |
| 2024-01-01 | NY            | NYMT~TUSD | Malta      |  -218.54 |
| 2024-01-01 | NY            | NYPL~TUSD | Poland     | -3029    |
| 2024-01-01 | NY            | NYPT~TUSD | Portugal   |    28.42 |
| 2024-01-01 | NY            | NYRO~TUSD | Romania    |  -410.1  |
| 2024-01-01 | NY            | NYSK~TUSD | Slovakia   |  -342.7  |
| 2024-01-01 | NY            | NYSI~TUSD | Slovenia   |   -82.76 |
| 2024-01-01 | NY            | NYSE~TUSD | Sweden     |  2334.1  |


```python
data.extra.get("results_metadata")["NYSE~TUSD"]
```
```
{'title': 'Sweden - Net income from abroad (Primary Income)',
 'country': 'Sweden',
 'frequency': 'M',
 'dataset': 'BOP_C6_M',
 'transform': 'Values as US dollars',
 'units': 'USD',
 'scale': 'Units',
 'multiplier': 1000000,
 'additional_info': {'GEO:Geopolitical entity (reporting)': 'SE:Sweden',
  'PARTNER:Geopolitical entity (partner)': 'WRL_REST:Rest of the world',
  'SECTPART:Sector (ESA 2010)': 'S1:Total economy',
  'SECTOR10:Sector (ESA 2010)': 'S1:Total economy',
  'FREQ:Frequency': 'M:Monthly',
  'STK_FLOW:Stock or flow': 'BAL:Balance',
  'CURRENCY:Currency': 'MIO_NAC:Million units of national currency',
  'BOP_ITEM:BOP_item': 'IN1:Primary income'}}
```
</details>

</details>

## Advanced Symbols

<details>

The grouping behaviour can be overridden. This will allow multiple transformations, or for a specific symbol to ignore the supplied `country` and `transform` parameters.

<details>
<summary mdxType="summary">Example - Bypass Group Parameters</summary>

The "~" character is used to separate the base symbol + 2-letter ISO country code, and the transformation.
It works as a flag to exclude from the other parameters.

```python
obb.economy.indicators("CPIUS~").to_df().tail(2)
```

| date       | symbol_root   | symbol   | country       |   value |
|:-----------|:--------------|:---------|:--------------|--------:|
| 2024-02-01 | CPI           | CPIUS    | United States |   311.1 |
| 2024-03-01 | CPI           | CPIUS    | United States |   312.2 |

Without "~", symbols are assumed to be a base symbol, and require a country parameter. An error (or warning where at least one symbol supplied was valid) is raised if the condition is not met.

```python
obb.economy.indicators("CPIUS")
```

```console
OpenBBError: No valid combination of indicator symbols and countries were supplied.
Valid countries for 'CPIUS' are: None
If the symbol - CPIUS - is missing a country code. Please add the two-letter country code or use the country parameter.
If already included, add '~' to the end of the symbol.
```

This example bypasses the transformation for US data, applying it only to France.

```python
obb.economy.indicators(symbol=["CPIUS~","CPI"], country="fr", transform="toya").to_df().tail(2)
```

| date       | symbol_root   | symbol     | country       |      value |
|:-----------|:--------------|:-----------|:--------------|-----------:|
| 2024-03-01 | CPI           | CPIFR~TOYA | France        |   0.022947 |
| 2024-03-01 | CPI           | CPIUS      | United States | 312.2      |

</details>

<details>
<summary mdxType="summary">Example - Non-Standard Symbols</summary>

The `symbol` parameter can also be used to access non-standard series. These are specific to reporting entities, like the Ministry of Finance, Japan.
These symbols are not searchable, but the structure will be familiar if you have worked with the particular source before.
For this purpose, enter each symbol ending with, "~".

:::important
Non-standard symbols will not have transformations, standardized metadata, or normalized percent values.
:::

Japan Yield Curve

```python
symbols = [
  "MFJP_IR.1Y.D.JP~",
  "MFJP_IR.2Y.D.JP~",
  "MFJP_IR.3Y.D.JP~",
  "MFJP_IR.4Y.D.JP~",
  "MFJP_IR.5Y.D.JP~",
  "MFJP_IR.6Y.D.JP~",
  "MFJP_IR.7Y.D.JP~",
  "MFJP_IR.8Y.D.JP~",
  "MFJP_IR.9Y.D.JP~",
  "MFJP_IR.10Y.D.JP~",
  "MFJP_IR.15Y.D.JP~",
  "MFJP_IR.20Y.D.JP~",
  "MFJP_IR.25Y.D.JP~",
  "MFJP_IR.30Y.D.JP~",
  "MFJP_IR.40Y.D.JP~",
]
data = obb.economy.indicators(symbol=symbols)

curve = data.to_df().filter(like="2024-04-11", axis=0)

curve
```

| date       | symbol_root   | symbol           | country   |   value |
|:-----------|:--------------|:-----------------|:----------|--------:|
| 2024-04-11 |               | MFJP_IR.1Y.D.JP  | Japan     |   0.068 |
| 2024-04-11 |               | MFJP_IR.2Y.D.JP  | Japan     |   0.27  |
| 2024-04-11 |               | MFJP_IR.3Y.D.JP  | Japan     |   0.28  |
| 2024-04-11 |               | MFJP_IR.4Y.D.JP  | Japan     |   0.37  |
| 2024-04-11 |               | MFJP_IR.5Y.D.JP  | Japan     |   0.485 |
| 2024-04-11 |               | MFJP_IR.6Y.D.JP  | Japan     |   0.508 |
| 2024-04-11 |               | MFJP_IR.7Y.D.JP  | Japan     |   0.592 |
| 2024-04-11 |               | MFJP_IR.8Y.D.JP  | Japan     |   0.68  |
| 2024-04-11 |               | MFJP_IR.9Y.D.JP  | Japan     |   0.757 |
| 2024-04-11 |               | MFJP_IR.10Y.D.JP | Japan     |   0.854 |
| 2024-04-11 |               | MFJP_IR.15Y.D.JP | Japan     |   1.289 |
| 2024-04-11 |               | MFJP_IR.20Y.D.JP | Japan     |   1.625 |
| 2024-04-11 |               | MFJP_IR.25Y.D.JP | Japan     |   1.78  |
| 2024-04-11 |               | MFJP_IR.30Y.D.JP | Japan     |   1.907 |
| 2024-04-11 |               | MFJP_IR.40Y.D.JP | Japan     |   2.065 |

```python
data.extra["results_metadata"].get("MFJP_IR.5Y.D.JP")
```

```python
{'title': 'Japan - Japanese Government Bonds - 5Y yield',
 'country': 'Japan',
 'frequency': 'D',
 'dataset': 'MFJP_IR',
 'transform': None,
 'units': None,
 'scale': None,
 'multiplier': 1,
 'additional_info': {'3:Indicator': '8:Japanese Government Bonds - 5Y yield',
  'GEO:None': '107:None'}}
```
</details>
</details>


---

---
title: Introduction to Financial Statements
sidebar_position: 5
description: This page provides an introduction to financial statement data available in the OpenBB Platform. This includes quarterly and annual reports, along with metrics and ratios by company. This guide provides examples for using the variety of sources.
keywords:
- stocks
- companies
- earnings
- dividends
- expectations
- dividend yield
- analyst consensus
- EPS
- assets
- total assets
- financial statements
- cash flow statement
- income statement
- balance sheet
- ratios
- quick ratio
- dividends
- market cap
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Financial Statements - Usage | OpenBB Platform Docs" />

OpenBB Platform data extensions provide access to financial statements as quarterly or annual.

There are also endpoints for ratios and other common non-GAAP metrics.

Most data providers require a subscription to access all data, refer to the website of a specific provider for details on entitlements and coverage.

Financial statement functions are grouped under the `obb.equity.fundamental` module.

:::info
To begin, import the OpenBB Platform into a Python session:

```python
from openbb import obb
```

:::

## Financial Statements

The typical financial statements consist of three endpoints:

- Balance Sheet: `obb.equity.fundamental.balance()`
- Income Statement: `obb.equity.fundamental.income()`
- Cash Flow Statement: `obb.equity.fundamental.cash()`

The main parameters are:

- `symbol`: The company's ticker symbol.
- `period`: 'annual' or 'quarter'. Default is 'annual'.
- `limit`: Limit the number of results returned, from the latest. Default is 5. For perspective, 150 will go back to 1985. The amount of historical records varies by provider.

<details>
<summary mdxType="summary">Field Names</summary>

:::info

- Every data provider has their own way of parsing and organizing the three financial statements.
- Items within each statement will vary by source and by the type of company reporting.
- Names of line items will vary by source.
- "Date" values may differ because they are from the period starting/ending or date of reporting.

:::

This example highlights how different providers will have different labels for company facts.

```python
import pandas as pd

df = pd.DataFrame()

df["yfinance"] = (
  obb.equity.fundamental.balance("TGT", provider="yfinance", limit=3)
  .to_df().get("total_assets")
)

df["fmp"] = (
  obb.equity.fundamental.balance("TGT", provider="fmp", limit=3)
  .to_df().get("total_assets")
)

df["intrinio"] = (
  obb.equity.fundamental.balance("TGT", provider="intrinio", limit=3)
  .to_df().get("total_assets")
)

df["polygon"] = (
  obb.equity.fundamental.balance("TGT", provider="polygon", limit=3)
  .to_df().get("total_assets")
)

df
```

|    |    yfinance |         fmp |    intrinio |     polygon |
|---:|------------:|------------:|------------:|------------:|
|  0 | 42779000000 | 42779000000 | 42779000000 | 42779000000 |
|  1 | 51248000000 | 51248000000 | 51248000000 | 51248000000 |
|  2 | 53811000000 | 53811000000 | 53811000000 | 53811000000 |
|  3 | 53335000000 | 53335000000 | 53335000000 | 53335000000 |

</details>

<details>
<summary mdxType="summary">Weighted Average Shares Outstanding</summary>

This key metric will be found under the income statement. It might also be called, 'basic', and the numbers do not include authorized but unissued shares.

A declining count over time is a sign that the company is returning capital to shareholders in the form of buy backs. Under ideal circumstances, it is more capital-efficient, for both company and shareholders, because distributions are double-taxed.

The company pays income tax on dividends paid, and the beneficiary pays income tax again on receipt.

A company will disclose how many shares are outstanding at the end of the period  as a weighted average over the reporting period - three months.

Let's take a look at Target. To make the numbers easier to read, we'll divide the entire column by one million.

```python
data = (
  obb.equity.fundamental.income("TGT", provider='fmp', limit=150, period="quarter")
  .to_df()
)

shares = data["weighted_average_basic_shares_outstanding"]/1000000
```

Where this data starts,

```python
shares.head(1)
```

| date       |   weighted_average_basic_shares_outstanding |
|:--------------------|--------------------------------------:|
| 1986-07-31 |                           1168.82 |

versus currently,

```python
shares.tail(1)
```

| date       |   weighted_average_basic_shares_outstanding |
|:--------------------|--------------------------------------:|
| 2023-10-31 |                           461.6 |

Thirty-seven years later, the share count is approaching a two-thirds reduction. That is 12.2% over the past five years.

```python
shares.pct_change(20).iloc[-1]
```

```console
-0.12
```

In four reporting periods, 1.3 million shares have been taken out of the float.

```python
shares.iloc[-4] - shares.iloc[-1]
```

```console
-1.3
```

With an average closing price of $144.27, that represents approximately $190M in buy backs.

```python
price = (
  obb.equity.price.historical("TGT", start_date="2022-10-01", provider="fmp")
  .to_df()
)

round((price["close"].mean()*1300000)/1000000, 2)
```

```console
187.55
```
</details>

<details>
<summary mdxType="summary">Dividends Paid</summary>

Dividends paid is in the cash flow statement. We can calculate the amount-per-share with the reported data.

```python
dividends = (
  obb.equity.fundamental.cash("TGT", provider='fmp', limit=150, period="quarter")
  .to_df()[["payment_of_dividends"]]
)

dividends["shares"] = data[["weighted_average_basic_shares_outstanding"]]
dividends["div_per_share"] = abs(dividends["payment_of_dividends"]/dividends["shares"])

dividends["div_per_share"].tail(4)
```

| date          |   div_per_share |
|:--------------|----------------:|
| 2023-01-28  |        -1.07973 |
| 2023-04-29  |        -1.07833 |
| 2023-07-29  |        -1.08102 |
| 2023-10-31  |        -1.09835 |

This can be compared against the real amounts paid to common share holders, as announced.

:::note
The dates immediately above represent the report date, dividends paid are attributed to the quarter they were paid in. The value from "2023-01-28" equates to the fourth quarter of 2022.
:::

```python
data = (
  obb.equity.fundamental.dividends("TGT", provider="fmp")
  .to_df()
  [["ex_dividend_date", "amount"]]
)
data.ex_dividend_date = data.ex_dividend_date.astype(str)
data.set_index("ex_dividend_date").loc["2023-08-15": "2022-11-15"]
```

| ex_dividend_date |   dividend |
|:--------------|-----------:|
| 2022-11-15  |       1.08 |
| 2023-02-14  |       1.08 |
| 2023-05-16  |       1.08 |
| 2023-08-15  |       1.1  |

The numbers check out, and the $2B paid to investors over four quarters is more than ten times the $190M returned through share buy backs.
</details>

<details>
<summary mdxType="summary">Financial Attributes</summary>

The `openbb-intrinio` data extension has an endpoint for extracting a single fact from financial statements.

There is a helper function for looking up the correct `tag`.

#### Search Financial Attributes

Search attributes by keyword.

```python
obb.equity.fundamental.search_attributes("marketcap").to_df().head(1)
```

|    | id         | name                  | tag       | statement_code   | statement_type   | parent_name   |   sequence | factor   | transaction   | type      | unit   |
|---:|:-----------|:----------------------|:----------|:-----------------|:-----------------|:--------------|-----------:|:---------|:--------------|:----------|:-------|
|  0 | tag_BgkbWy | Market Capitalization | marketcap | calculations     | industrial       |               |        nan |          |               | valuation | usd    |

The `tag` is what we need, in this case it is what we searched for.

```python
marketcap = (
  obb.equity.fundamental.historical_attributes(symbol="TGT", tag = "marketcap", frequency="quarterly")
  .to_df()
)

marketcap.tail(5)
```

| date          |       value |
|:--------------|------------:|
| 2022-12-31  | 66929627287 |
| 2023-03-31  | 75023699391 |
| 2023-06-30  | 59916953938 |
| 2023-09-30  | 50614370690 |
| 2023-11-22  |  60495000000 |

Doing some quick math, and ignoring the most recent value, we can see that the market cap of Target was down nearly a quarter over the last four reporting periods.

```python
marketcap.index = marketcap.index.astype(str)
(
    (marketcap.loc["2023-09-30"].value - marketcap.loc["2022-12-31"].value)/marketcap.loc["2022-12-31"].value
)
```

```console
-0.24
```
</details>

## Ratios and Other Metrics

<details>
Other valuation functions are derivatives of the financial statements, but the data provider does the math.

Values are typically ratios between line items, on a per-share basis, or as a percent growth.

This data set is where you can find EPS, FCF, P/B, EBIT, quick ratio, etc.

<details>
<summary mdxType="summary">Quick Ratio</summary>

Target's quick ratio could be one reason why its share price is losing traction against the market. Its ability to pay current obligations is not optimistically reflected in a 0.27 score, approximately 50% below the historical median.

```python
ratios = (
  obb.equity.fundamental.ratios("TGT", limit=50, provider="fmp")
  .to_df()
)

display(f"Current Quick Ratio: {ratios['quick_ratio'].iloc[-1]}")
display(f"Median Quick Ratio: {ratios['quick_ratio'].median()}")
```

```console
Current Quick Ratio: 0.27
Median Quick Ratio: 0.58
```
</details>

<details>
<summary mdxType="summary">Free Cash Flow Yield</summary>

The `metrics` endpoint, with the `openbb-fmp` data extension, has a field for free cash flow yield. It is calculated by taking the free cash flow per share divided by the current share price. We could arrive at this answer by writing some code, but these types of endpoints do the work so we don't have to. This is part of the value-add that API data distributors provide, they allow you to get straight to work with data.

We'll use this endpoint to extract the data, and compare with some of Target's competition over the last ten years.

```python
# List of other retail chains
tickers = ["COST", "BJ", "DLTR", "DG", "WMT", "BIG", "M", "KSS", "TJX"]
# Create a dictionary of tickers and company names.
names = {
    ticker: obb.equity.profile(ticker, provider="fmp").results[0].name
    for ticker in tickers
}
# Create a column for each.
fcf_yield = pd.DataFrame()
for ticker in tickers:
    fcf_yield[names[ticker]] = (
        obb.equity.fundamental.metrics(ticker, provider="fmp", period="annual", limit=10)
        .to_df()
        .reset_index()
        .set_index("calendar_year")
        .sort_index(ascending=False)
        ["free_cash_flow_yield"]
    )
fcf_yield.transpose()
```

|                                    |        2023 |        2022 |      2021 |      2020 |      2019 |       2018 |      2017 |       2016 |      2015 |        2014 |
|:-----------------------------------|------------:|------------:|----------:|----------:|----------:|-----------:|----------:|-----------:|----------:|------------:|
| Costco Wholesale Corporation       |   0.0279218 |  0.0148596  | 0.0265818 | 0.0393512 | 0.0259061 |  0.0274379 | 0.0608836 | 0.00894059 | 0.0307414 |   0.0374833 |
| BJ's Wholesale Club Holdings, Inc. | nan         |  0.0447092  | 0.0672128 | 0.113551  | 0.0566305 |  0.0911069 | 0.0261863 | 0.0658713  | 0.0169474 | nan         |
| Dollar Tree, Inc.                  | nan         |  0.010756   | 0.013957  | 0.075627  | 0.040338  |  0.0412519 | 0.0340694 | 0.0634655  | 0.0166025 |   0.0410471 |
| Dollar General Corporation         | nan         |  0.00825589 | 0.0375074 | 0.0589731 | 0.0369217 |  0.0461971 | 0.0426088 | 0.0507761  | 0.0395241 |   0.0460518 |
| Walmart Inc.                       |   0.0312425 |  0.028372   | 0.0654622 | 0.0445913 | 0.062023  |  0.0572749 | 0.101038  | 0.0735059  | 0.0597117 |   0.0415436 |
| Big Lots, Inc.                     | nan         | -0.550469   | 0.0252616 | 0.115757  | 0.0694642 | -0.111853  | 0.037219  | 0.100721   | 0.110443  |   0.089253  |
| Macy's, Inc.                       | nan         |  0.0504726  | 0.27098   | 0.0391114 | 0.0913008 |  0.101426  | 0.155761  | 0.098993   | 0.0656336 |   0.072322  |
| Kohl's Corporation                 | nan         | -0.143961   | 0.189677  | 0.147968  | 0.119492  |  0.139799  | 0.0961367 | 0.19879    | 0.0816518 |   0.110697  |
| The TJX Companies, Inc.            |   0.0271588 |  0.0234975  | 0.0517687 | 0.0401668 | 0.0488266 |  0.0399352 | 0.0536965 | 0.0433279  | 0.0464416 |   0.0406432 |

Explore the rest of the `fundamental` module under the [Reference](/platform/reference/equity/fundamental) section.
</details>

</details>


---

---
title: Finding Ticker Symbols
sidebar_position: 3
description: This page provides comprehensive information about finding stocks in the with the OpenBB Platform. Search companies from different sources, and filter results. This guide is intended to introduce some methods for searching, screening, and discovery.
keywords:
- stocks
- companies
- how to find
- stocks from India
- countries
- regions
- screen
- search
- ticker
- sector
- industry
- market caps
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Finding Symbols - Usage | OpenBB Platform Docs" />

Finding the ticker symbol, security identifier, the sector, and other metadata is easy if you know where to look. This guide is intended to introduce some methods for searching, screening, and discovery.

:::note
For maximum coverage and functionality, install OpenBB with `[all]` packages.

The examples on this page will assume that the OpenBB Platform has been installed, the environment is active, and it has been imported into a Python session.

```python
from openbb import obb
```

If the installation is fresh, or an extension was just installed, the Python interface will need to be rebuilt. It will only take a few moments to complete.
:::

The simplest way to find tickers is with a basic text query.

## Search Nasdaq

<details>

```python
obb.equity.search("JPMorgan", provider="nasdaq").to_df().head(3)
```

|    | symbol   | name                                                             | nasdaq_traded   | exchange   | market_category   | etf   |   round_lot_size | test_issue   | financial_status   | cqs_symbol   | nasdaq_symbol   | next_shares   |
|---:|:---------|:-----------------------------------------------------------------|:----------------|:-----------|:------------------|:------|-----------------:|:-------------|:-------------------|:-------------|:----------------|:--------------|
|  0 | AMJB     | JPMorgan Chase & Co. Alerian MLP Index ETNs due January 28, 2044 | Y               | P          |                   | Y     |              100 | N            |                    | AMJB         | AMJB            | N             |
|  1 | BBAG     | JPMorgan BetaBuilders U.S. Aggregate Bond ETF                    | Y               | P          |                   | Y     |              100 | N            |                    | BBAG         | BBAG            | N             |
|  2 | BBAX     | JPMorgan BetaBuilders Developed Asia Pacific-ex Japan ETF        | Y               | Z          |                   | Y     |              100 | N            |                    | BBAX         | BBAX            | N             |

</details>

## Search Cboe

<details>

```python
obb.index.search("SPX", provider="cboe").to_df().tail(5)
```

|    | symbol   | name                                  | description                                                                                                                                              |   data_delay | currency   | time_zone       | open_time   | close_time   | tick_days   | tick_frequency   | tick_period   |
|---:|:---------|:--------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------|-------------:|:-----------|:----------------|:------------|:-------------|:------------|:-----------------|:--------------|
| 32 | SPXVIV   | PROSHARES S&P 500 EX-HEALTH CARE ETF  | PROSHARES S&P 500 EX-HEALTH CARE ETF                                                                                                                     |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 33 | VIX1D    | Cboe 1-Day Volatility Index®          | Estimates expected volatility by aggregating the weighted prices of P.M.-settled S&P 500 Index (SPX℠) puts and calls over a wide range of strike prices. |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 34 | VIX3M    | Cboe S&P 500 3 Month Volatility Index | The Cboe 3-Month Volatility Index (VIX3M) is designed to be a constant measure of 3-month implied volatility of the S&P 500? (SPX) Index options.        |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 35 | WPUT     | Cboe S&P 500 One-Week PutWrite Index  | Tracks the value of a portfolio that overlays a short weekly SPX put  on one-month Treasury bills                                                        |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 36 | XSPAM    | Mini SPX Index (AM Settlement)        | Mini SPX Index (AM Settlement)                                                                                                                           |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |

</details>

## Search ETFs


<details>

```python
obb.etf.search("gold", provider="tmx").to_df().iloc[-5:]
```

|                       | VALT.B                         | VALT.U                         | XGD                                    | ZGD                                     | ZJG                        |
|:----------------------|:---------------------------|:---------------------------|:--------------------------------------|:---------------------------------------|:--------------------------|
| name                  | CI Gold Bullion Fund       | CI Gold Bullion Fund       | iShares S&P/TSX Global Gold Index ETF | BMO Equal Weight Global Gold Index ETF | BMO Junior Gold Index ETF |
| short_name            | VALT.B:CA                  | CI Gold Bullion            | iShares S&P/TSX                       | BMO Equal Weight                       | BMO Junior Gold           |
| inception_date        | 2021-03-17                 | 2021-01-06                 | 2001-03-23                            | 2012-11-14                             | 2010-01-19                |
| issuer                | CI Global Asset Management | CI Global Asset Management | RBC iShares                           | BMO ETF                                | BMO ETF                   |
| investment_style      | Gold                       | Gold                       | Mid Cap Growth                        | Mid Cap Blend                          | Small Cap Blend           |
| esg                   | False                      | False                      | False                                 | False                                  | True                      |
| currency              | CAD                        | USD                        | CAD                                   | CAD                                    | CAD                       |
| unit_price            | 27.23                      | 20.25                      | 15.15                                 | 65.3                                   | 57.9                      |
| close                 | 27.31                      | 20.22                      | 15.15                                 | 63.9                                   | 58.1                      |
| prev_close            | 27.35                      | 20.26                      | 15.44                                 | 65.3                                   | 59.16                     |
| return_1m             | 0.0008210000000000001      | -0.012248000000000002      | -0.080416                             | -0.077245                              | -0.052842                 |
| return_3m             | -0.010862                  | 0.027784                   | -0.023677                             | -0.009352000000000001                  | 0.000172                  |
| return_6m             | 0.056706000000000006       | 0.041046                   | -0.082551                             | -0.07498                               | -0.048376                 |
| return_ytd            | -0.003618                  | -0.007048                  | -0.074745                             | -0.067335                              | -0.04167099999999999      |
| return_1y             | 0.06689300000000001        | 0.06554299999999999        | -0.129462                             | -0.0836                                | -0.08241899999999999      |
| beta_1y               | 0.57958                    | 0.725625                   | 0.372225                              | 0.469185                               | 0.433886                  |
| return_3y             | nan                        | 0.030979999999999997       | -0.033076                             | -0.021792                              | -0.028114                 |
| beta_3y               | 0.681245                   | 0.699766                   | 0.515024                              | 0.671806                               | 0.654367                  |
| return_5y             | nan                        | nan                        | 0.076559                              | 0.08920299999999999                    | 0.068623                  |
| beta_5y               | -0.008613                  | 0.233721                   | 0.738329                              | 0.997267                               | 1.103204                  |
| return_10y            | nan                        | nan                        | 0.044696999999999994                  | 0.05585                                | 0.041349                  |
| beta_10y              | 0.633314                   | 0.633314                   | 0.38428                               | 0.445404                               | 0.452332                  |
| beta_15y              | nan                        | nan                        | 0.395464                              | nan                                    | nan                       |
| return_from_inception | 0.08311199999999999        | nan                        | 0.069155                              | -0.006563                              | -0.022995                 |
| avg_volume            | 430                        | 690                        | 456399                                | 436                                    | 511                       |
| avg_volume_30d        | 1428                       | 4747                       | 1194453                               | 3417                                   | 1491                      |
| aum                   | 14976500.0                 | 28147500.0                 | 986265000.0                           | 41396935.0                             | 52271541.0                |
| pe_ratio              | nan                        | nan                        | 26.4436                               | 17.2285                                | 26.8283                   |
| pb_ratio              | nan                        | nan                        | 1.909                                 | 1.3891                                 | 1.531                     |
| management_fee        | 0.00155                    | 0.00155                    | 0.0060999999999999995                 | 0.0055000000000000005                  | 0.0055000000000000005     |
| mer                   | nan                        | nan                        | 0.0060999999999999995                 | 0.0062                                 | 0.0060999999999999995     |
| distribution_yield    | 0.015347                   | 0.016145                   | 0.016212999999999998                  | 0.008305                               | 0.009537                  |
| dividend_frequency    | Annually                   | Annually                   | Semi-Annually                         | Annually                               | Annually                  |
| beta_20y              | nan                        | nan                        | 0.560996                              | nan                                    | nan                       |


</details>

## Search the SEC


<details>

Use an empty string, `""`, to return the complete list - over 10,000.

```python
all_companies = obb.equity.search("", provider="sec")

len(all_companies.results)
```

```bash
Out: 10840
```

The SEC sorts this list by market cap.  Applying the `to_df()` method to `all_companies` will show Apple on top

```python
all_companies.to_df().head(10)
```

| symbol   | name                   |     cik |
|:---------|:-----------------------|--------:|
| AAPL     | Apple Inc.             |  320193 |
| MSFT     | MICROSOFT CORP         |  789019 |
| GOOGL    | Alphabet Inc.          | 1652044 |
| AMZN     | AMAZON COM INC         | 1018724 |
| NVDA     | NVIDIA CORP            | 1045810 |
| META     | Meta Platforms, Inc.   | 1326801 |
| BRK-B    | BERKSHIRE HATHAWAY INC | 1067983 |
| TSLA     | Tesla, Inc.            | 1318605 |
| LLY      | ELI LILLY & Co         |   59478 |
| V        | VISA INC.              | 1403161 |

:::tip
This endpoint can be used to map a ticker symbol to a CIK number.
:::

### Find an Institution

Some reporting companies, like investment trusts and insurance companies, do not have a ticker symbol directly associated with them. Filers in the US will have a CIK number, used to retrieve documents from the SEC.

```python
obb.regulators.sec.institutions_search("Berkshire Hathaway").to_df()
```

| name                                             |        cik |
|:-------------------------------------------------|-----------:|
| BERKSHIRE HATHAWAY ENERGY CO                     | 0001081316 |
| BERKSHIRE HATHAWAY FINANCE CORP                  | 0001274791 |
| BERKSHIRE HATHAWAY HOME STATE INSURANCE CO.       | 0000829771 |
| BERKSHIRE HATHAWAY INC /DE/                      | 0000109694 |
| BERKSHIRE HATHAWAY INC/DE                        | 0000109694 |
| BERKSHIRE HATHAWAY INC                           | 0001067983 |
| BERKSHIRE HATHAWAY LIFE INSURANCE CO OF NEBRASKA | 0001015867 |
| LMZ & BERKSHIRE HATHAWAY CO                      | 0001652795 |

### Find a Filing

Search for filings by CIK or ticker symbol.

```python
homestate_filings = obb.equity.fundamental.filings(cik="0000829771", provider="sec")

homestate_filings.to_df().iloc[-1]
```

|                         | 2023-11-14                                                                                  |
|:------------------------|:-----------------------------------------------------------------------------------------------------|
| type                    | 13F-NT                                                                                               |
| link                    | https://www.sec.gov/Archives/edgar/data/0000829771/000095012323010929/xslForm13F_X02/primary_doc.xml |
| report_date             | 2023-09-30                                                                                           |
| accepted_date           | 2023-11-14 16:15:06+00:00                                                                            |
| act                     | 34                                                                                                   |
| primary_doc_description |                                                                                                      |
| primary_doc             | xslForm13F_X02/primary_doc.xml                                                                       |
| accession_number        | 0000950123-23-010929                                                                                 |
| file_number             | 028-02226                                                                                            |
| film_number             | 231406391                                                                                            |
| is_inline_xbrl          | 0                                                                                                    |
| is_xbrl                 | 0                                                                                                    |
| size                    | 2960                                                                                                 |
| complete_submission_url | https://www.sec.gov/Archives/edgar/data/0000829771/0000950123-23-010929.txt                          |
| filing_detail_url       | https://www.sec.gov/Archives/edgar/data/0000829771/0000950123-23-010929-index.htm                    |

Or, search by form type.

```python
obb.equity.fundamental.filings("AAPL", type="4", provider="sec").to_df().iloc[-1]
```

|                         | 2023-11-14                                                                                    |
|:------------------------|:---------------------------------------------------------------------------------------------------------|
| type                    | 4                                                                                                        |
| link                    | https://www.sec.gov/Archives/edgar/data/0000320193/000032019323000109/xslF345X05/wk-form4_1700004649.xml |
| report_date             | 2023-11-10                                                                                               |
| accepted_date           | 2023-11-14 18:31:09+00:00                                                                                |
| primary_doc_description | FORM 4                                                                                                   |
| primary_doc             | xslF345X05/wk-form4_1700004649.xml                                                                       |
| accession_number        | 0000320193-23-000109                                                                                     |
| is_inline_xbrl          | 0                                                                                                        |
| is_xbrl                 | 0                                                                                                        |
| size                    | 5066                                                                                                     |
| complete_submission_url | https://www.sec.gov/Archives/edgar/data/0000320193/0000320193-23-000109.txt                              |
| filing_detail_url       | https://www.sec.gov/Archives/edgar/data/0000320193/0000320193-23-000109-index.htm                        |

</details>

## Screen Markets


<details>

Screeners provide a targeted search, a tool for comparison and discovery. Find stocks from around the world with the screener endpoint, and the `openbb-fmp` provider.

### Find Stocks From India

```python
results = obb.equity.screener(country="IN", provider="fmp").to_df()
len(results)
```

```bash
Out: 1821
```

### Search by Sector

```python
results = obb.equity.screener(country="IN", sector="Financial Services", provider="fmp").to_df()
len(results)
```

```bash
Out: 190
```

```python
results.iloc[0]
```

| symbol               | HDFCBANK.NS                      |
|:---------------------|:---------------------------------|
| name                 | HDFC Bank Limited                |
| market_cap           | 11344796293939                   |
| sector               | Financial Services               |
| industry             | Banks—Regional                   |
| beta                 | 0.714285                         |
| price                | 1505.1                           |
| last_annual_dividend | 19.0                             |
| volume               | 11850413                         |
| exchange             | NSE                              |
| exchange_name        | National Stock Exchange of India |
| country              | IN                               |
| is_etf               | False                            |
| actively_trading     | True                             |

### Search by Industry

```python
results = obb.equity.screener(country="IN", industry="manufacturing").to_df()
len(results)
```

```bash
Out: 119
```

```python
results.iloc[0]
```

| symbol               | PAGEIND.NS                       |
|:---------------------|:---------------------------------|
| name                 | Page Industries Limited          |
| market_cap           | 418222172840                     |
| sector               | Consumer Cyclical                |
| industry             | Apparel Manufacturing            |
| beta                 | 0.462                            |
| price                | 37495.6                          |
| last_annual_dividend | 300.0                            |
| volume               | 12166                            |
| exchange             | NSE                              |
| exchange_name        | National Stock Exchange of India |
| country              | IN                               |
| is_etf               | False                            |
| actively_trading     | True                             |

### Search by Exchange

Some countries, like America, have multiple exchanges. Narrow the search by combining two or more parameters. The example below finds the companies listed on the American Stock Exchange (AMEX) that are domiciled in China.

```python
obb.equity.screener(exchange="amex", country="CN").to_df()
```

| symbol   | name                              |   market_cap | sector             | industry                               |   beta |   price |   volume | exchange   | exchange_name           | country   | is_etf   | actively_trading   |
|:---------|:----------------------------------|-------------:|:-------------------|:---------------------------------------|-------:|--------:|---------:|:-----------|:------------------------|:----------|:---------|:-------------------|
| AMBO     | Ambow Education Holding Ltd.      |      4041842 | Consumer Defensive | Education & Training Services          |  0.448 |  0.1425 |   203994 | AMEX       | American Stock Exchange | CN        | False    | True               |
| ITP      | IT Tech Packaging, Inc.           |      2945282 | Basic Materials    | Paper & Paper Products                 | -0.1   |  0.2926 |    14954 | AMEX       | American Stock Exchange | CN        | False    | True               |
| DXF      | Dunxin Financial Holdings Limited |      1291625 | Financial Services | Credit Services                        |  1.632 |  0.325  |  2829238 | AMEX       | American Stock Exchange | CN        | False    | True               |
| CPHI     | China Pharma Holdings, Inc.       |      1024379 | Healthcare         | Drug Manufacturers—Specialty & Generic |  0.875 |  0.0896 |   539863 | AMEX       | American Stock Exchange | CN        | False    | True               |

### Filter by Metric

Applying some filters refines and targets the search. The example below finds listing on the NYSE domiciled in the USA, with a market cap between $100-300 billion, and exhibiting a beta value of less than 0.5

```python
obb.equity.screener(
  exchange="nyse",
  mktcap_min=100000000000,
  mktcap_max=300000000000,
  country="us",
  beta_max=0.5,
  provider="fmp",
).to_df()
```

| symbol   | name                        |   market_cap | sector                 | industry                   |   beta |   price |   last_annual_dividend |   volume | exchange   | exchange_name           | country   | is_etf   | actively_trading   |
|:---------|:----------------------------|-------------:|:-----------------------|:---------------------------|-------:|--------:|-----------------------:|---------:|:-----------|:------------------------|:----------|:---------|:-------------------|
| MRK      | Merck & Co., Inc.           | 258192673024 | Healthcare             | Drug Manufacturers—General |  0.375 |  101.75 |                   2.92 |  6760568 | NYSE       | New York Stock Exchange | US        | False    | True               |
| VZ       | Verizon Communications Inc. | 152314546478 | Communication Services | Telecom Services           |  0.391 |   36.23 |                   2.66 | 14960968 | NYSE       | New York Stock Exchange | US        | False    | True               |

</details>

## Get Available Indices

<details>

List all indices from a source with:

```python
indices = obb.index.available(provider="yfinance").to_df()

len(indices)
```

```bash
Out: 274
```

Filter the list down by querying the DataFrame.

```python
indices[indices["name"].str.contains("ASX 200")]
```

| name                                                  | code              | symbol   |
|:------------------------------------------------------|:------------------|:---------|
| S&P/ASX 200 Index (AUD)                               | au_asx200         | ^AXJO    |
| S&P/ASX 200 Energy Sector Index (AUD)                 | au_energy         | ^AXEJ    |
| S&P/ASX 200 Resources Sector Index (AUD)              | au_resources      | ^AXJR    |
| S&P/ASX 200 Materials Sector Index (AUD)              | au_materials      | ^AXMJ    |
| S&P/ASX 200 Industrials Sector Index (AUD)            | au_industrials    | ^AXNJ    |
| S&P/ASX 200 Consumer Discretionary Sector Index (AUD) | au_discretionary  | ^AXDJ    |
| S&P/ASX 200 Consumer Staples Sector Index (AUD)       | au_staples        | ^AXSJ    |
| S&P/ASX 200 Health Care Sector Index (AUD)            | au_health         | ^AXHJ    |
| S&P/ASX 200 Financials Sector Index (AUD)             | au_financials     | ^AXFJ    |
| S&P/ASX 200 A-REIT Industry Index (AUD)               | au_reit           | ^AXPJ    |
| S&P/ASX 200 Info Tech Sector Index (AUD)              | au_tech           | ^AXIJ    |
| S&P/ASX 200 Communications Sector Index (AUD)         | au_communications | ^AXTJ    |
| S&P/ASX 200 Utilities Sector Index (AUD)              | au_utilities      | ^AXUJ    |

:::tip
With the `openbb-yfinance` extension, index time series can be loaded using the ticker symbol or short code.  Non-American indices have a code beginning with the two-letter country code.

```python
(
    obb.index.price.historical("au_utilities", provider="yfinance").to_df().tail(1)
    == obb.index.price.historical("^AXUJ", provider="yfinance").to_df().tail(1)
)
```

| date                |   open |   high |   low |   close |   volume |
|:--------------------|-------:|-------:|------:|--------:|---------:|
| 2023-11-17 |  True |  True |  True |  True |  True |

:::

The examples above show demonstrate the most basic ways to find ticker symbols with the OpenBB Platform. Create your own custom scripts for discovery by combining these with other methods.

</details>


---

---
title: Loading Historical Price Data
sidebar_position: 4
description: This page provides an introduction to historical prices, including how to access and use them in the OpenBB Platform.
keywords:
- stocks
- companies
- prices
- historical
- ohlc
- intraday
- intervals
- market data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Historical Prices - Usage | OpenBB Platform Docs" />

Historical market prices typically come in the form of OHLC+V - open, high, low, close, volume. There may be additional fields returned by a provider, but those are the expected columns.

Granularity and amount of historical data will vary by provider and subscription status. Visit their websites to understand what your entitlements are.

:::info
These examples will assume that the OpenBB Platform is initialized in a Python session.

```python
from openbb import obb
import pandas as pd
```

:::

## Historical OHLC


<details>

The `historical` function is located under a submodule for each asset type. In the `openbb-equity` module.

```python
help(obb.equity.price.historical)
```

- This endpoint has the most number of providers out of any function. At the time of writing, choices are:

['alpha_vantage', 'cboe', 'fmp', 'intrinio', 'polygon', 'tiingo', 'tmx', 'tradier', 'yfinance']

- Common parameters have been standardized across all sources, `start_date`, `end_date`, `interval`.

- The default interval will be `1d`.

- The depth of historical data and choices for granularity will vary by provider and subscription status. Refer to the website and documentation of each source understand your specific entitlements.

- Despite being in the `equity` module, it's might be possible to get other asset types, like currencies or crypto, from the same endpoint.

- For demonstration purposes, we will use the `openbb-yfinance` data extension.

```python
df_daily = obb.equity.price.historical(symbol = "spy", provider="yfinance")
df_daily.to_df().head(1)
```

| date          |   open |   high |    low |   close |     volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|-------:|--------:|-----------:|------------:|---------------:|----------------:|
| 2022-11-22  | 396.63 | 400.07 | 395.15 |   399.9 | 60429000 |           0 |              0 |               0 |

To load the entire history available from a source, pick a starting date well beyond what it might be. For example, `1900-01-01`

```python
df_daily =(
  obb.equity.price.historical(symbol = "spy", start_date = "1990-01-01", provider="yfinance")
  .to_df()
)
df_daily.head(1)
```

| date          |   open |   high |   low |   close |     volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|------:|--------:|-----------:|------------:|---------------:|----------------:|
| 1993-01-29  |  43.97 |  43.97 | 43.75 |   43.94 | 1003200 |           0 |              0 |               0 |


<details>
<summary mdxType="summary">Intervals</summary>


The intervals are entered according to this pattern:

- `1m` = One Minute
- `1h` = One Hour
- `1d` = One Day
- `1W` = One Week
- `1M` = One Month

The date for monthly value is the first or last, depending on the provider. This can be easily resampled from daily data.

```python
df_monthly = (
  obb.equity.price.historical("spy", start_date="1990-01-01", interval="1M", provider="yfinance")
  .to_df()
)
df_monthly.tail(2)
```

| date          |   open |   high |    low |   close |      volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|-------:|--------:|------------:|------------:|---------------:|----------------:|
| 2023-10-01  | 426.62 | 438.14 | 409.21 |  418.2  | 1999149700 |           0 |              0 |               0 |
| 2023-11-01  | 419.2  | 456.38 | 418.65 |  455.02 | 1161239576 |           0 |              0 |               0 |


</details>


<details>
<summary mdxType="summary">Resample a Time Series</summary>

`yfinance` returns the monthly data for the first day of each month. Let's resample it to take from the last, using the daily information captured in the previous cells.

```python
(
    df_daily[["open", "high", "low", "close", "volume"]]
    .resample("M")
    .agg(
        {"open": "first", "high": "max", "low": "min", "close": "last", "volume": "sum"}
    ).tail(2)
)
```

| date          |   open |   high |    low |   close |      volume |
|:--------------|-------:|-------:|-------:|--------:|------------:|
| 2023-10-31  | 426.62 | 438.14 | 409.21 |  418.2  | 1999149700 |
| 2023-11-30  | 419.2  | 456.38 | 418.65 |  455.02 | 1210484176 |

We can see that the current month's total volume is higher when we resample the daily time series. It is difficult to know where the discrepancy lays, and it may just be a temporary glitch. However, we can verify that the total volume, according to YahooFinance, is the number we just sampled.

:::note
If you are following along, the results will not match exactly what is displayed here.
:::

```python
df_daily.loc["2023-11-01":].sum()["volume"]
```

```console
1210484176
```

</details>



<details>
<summary mdxType="summary">Differences Between Sources</summary>


To demonstrate the difference between sources, let's compare values for daily volume from several sources.

```python
# Collect the data

yahoo = obb.equity.price.historical("spy", provider="yfinance").to_df()
alphavantage = obb.equity.price.historical("spy", provider = "alpha_vantage").to_df()
intrinio = obb.equity.price.historical("spy", provider="intrinio").to_df()
fmp = obb.equity.price.historical("spy", provider="fmp").to_df()

# Make a new DataFrame with just the volume columns
compare = pd.DataFrame()
compare["AV Volume"] = alphavantage["volume"].tail(10)
compare["FMP Volume"] = fmp["volume"].tail(10)
compare["Intrinio Volume"] = intrinio["volume"].tail(10)
compare["Yahoo Volume"] = yahoo["volume"].tail(10)

compare
```

| date          |   AV Volume |   FMP Volume |   Intrinio Volume |   Yahoo Volume |
|:--------------|------------:|-------------:|------------------:|---------------:|
| 2023-11-09  | 83174417 |     83071417 |       83174417 |       83174400 |
| 2023-11-10  | 89558054 |     89558054 |       89558054 |       89462200 |
| 2023-11-13  | 52236068 |     52192568 |       52236068 |       52236100 |
| 2023-11-14  | 97176935 |     97130503 |      97176935 |       97176900 |
| 2023-11-15  | 77327573 |     77327573 |      77327573 |       77327600 |
| 2023-11-16  | 66665797 |     66654468 |       66665797 |       66665800 |
| 2023-11-17  | 83193902 |     83193902 |       83193902 |       83133200 |
| 2023-11-20  | 70055633 |     69614633 |       70055633 |       69936200 |
| 2023-11-21  | 49244639 |     49244639 |       49244639 |       49244600 |
| 2023-11-22  | 59446573 |     59313820 |       58205780 |       59394900 |

</details>

</details>

## Other Types of Symbols


<details>

Other types of assets and ticker symbols can be loaded from `obb.equity.price.historical()`, below are some examples but not an exhaustive list.

<details>
<summary mdxType="summary">Share Classes</summary>


Some sources use `-` as the distinction between a share class, e.g., `BRK-A` and `BRK-B`. Other formats include:

- A period: `BRK.A`
- A slash: `BRK/A`
- No separator, the share class becomes the fourth or fifth letter.

```python
obb.equity.price.historical("brk.b", provider="polygon")
```

```python
obb.equity.price.historical("brk-b", provider="fmp")
```

While some providers handle the different formats on their end, others do not.

This is something to consider when no results are returned from one source.

Some may even use a combination, or accept multiple variations. Sometimes there is no real logic behind the additional characters, `GOOGL` vs. `GOOG`.

These are known unknown variables of ticker symbology, what's good for one source may return errors from another.

</details>


<details>
<summary mdxType="summary">Regional Identifiers</summary>


With providers supporting market data from multiple jurisdictions, the most common method for requesting data outside of US-listings is to append a suffix to the ticker symbol (e.g., `RELIANCE.NS`).

Formats may be unique to a provider, so it is best to review the source's documentation for an overview of their specific conventions.

[This page](https://help.yahoo.com/kb/SLN2310.html) on Yahoo describes how they format symbols, which many others follow to some degree.

`openbb-tmx` follows the composite convention, "SPY:US". When the symbol is for its domestic Canadian market, "CNQ", no identifier is required.

</details>

<details>
<summary mdxType="summary">Indices</summary>

Sources will have their own treatment of these symbols, some examples are:

- YahooFinance/FMP/CBOE: ^RUT
- Polygon: I:NDX

```python
obb.equity.price.historical("^RUT", provider="cboe").to_df().tail(1)
```

| date          |    open |    high |     low |   close |   volume |
|:--------------|--------:|--------:|--------:|--------:|---------:|
| 2023-11-22  | 1796.37 | 1804.96 | 1785.93 | 1792.92 |        0 |

```python
obb.equity.price.historical("^RUT", provider="fmp").to_df().tail(1)
```

| date          |    open |    high |     low |   close |   volume |    vwap | label           |   adj_close |   unadjusted_volume |   change |   change_percent |   change_over_time |
|:--------------|--------:|--------:|--------:|--------:|---------:|--------:|:----------------|------------:|--------------------:|---------:|-----------------:|-------------------:|
| 2023-11-22  | 1792.51 | 1803.12 | 1789.88 | 1795.54 |        0 | 1796.18 | November 22, 23 |     1795.54 |                   0 |  3.02893 |          0.16898 |          0.0016898 |

:::info
**For an endpoint geared more specifically towards indices, try `obb.index.price.historical()`**
:::

</details>

<details>
<summary mdxType="summary">Currencies</summary>

FX symbols face the same dilemma as share classes, there are several variations of the same symbol.

- YahooFinance: `EURUSD=X`
- Polygon: `C:EURUSD`
- AlphaVantage/FMP: `EURUSD`

:::info
**The symbol prefixes are handled internally when `obb.currency.price.historical()` is used, enter as a pair with no extra characters.**
:::

```python
obb.equity.price.historical("EURUSD=X", provider="yfinance").to_df().tail(1)
```

| date          |   open |   high |    low |   close |   volume |   dividends |   stock splits |
|:--------------|-------:|-------:|-------:|--------:|---------:|------------:|---------------:|
| 2023-11-22  | 1.0918 | 1.0923 | 1.0855 |  1.0918 |        0 |           0 |              0 |

```python
obb.equity.price.historical("C:EURUSD", provider="polygon").to_df().tail(1)
```

| date          |    open |   high |    low |   close |   volume |   vwap |   transactions |
|:--------------|--------:|-------:|-------:|--------:|---------:|-------:|---------------:|
| 2023-11-21  | 1.09168 | 1.0923 | 1.0851 |  1.0888 |   155827 | 1.0893 |         155827 |

</details>


<details>
<summary mdxType="summary">Crypto</summary>


Similar, but different to FX tickers.

- YahooFinance: `BTC-USD`
- Polygon: `X:BTCUSD`
- AlphaVantage/FMP: `BTCUSD`

:::info
**The symbol prefixes are handled internally when `obb.crypto.price.historical()` is used, enter as a pair with no extra characters and placing the fiat currency second.**
:::

```python
obb.equity.price.historical("X:BTCUSD", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-21  |  35756 |  37900 | 35633 | 37433.8 |  30411.4 | 36841.5 |         464907 |

As noted above, `X:` or other prefixes are not required when using the `crypto` version of this same endpoint.

```python
obb.crypto.price.historical("BTCUSD", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-21  |  35756 |  37900 | 35633 | 37433.8 |  30411.4 | 36841.5 |         464907 |

</details>

<details>
<summary mdxType="summary">Futures</summary>


Historical prices for the continuation chart, can be fetched by the `fmp` or `yfinance` data extensions.  Individual active contracts are returned by `yfinance`.

- Continuous front-month: `CL=F`
- December 2023 contract: `CLZ24.NYM`
- March 2024 contract: `CLH24.NYM`

Individual contracts will require knowing which of the CME venues the future is listed on. `["NYM", "NYB", "CME", "CBT"]`.

```python
obb.equity.price.historical("CL=F", provider="fmp").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |   vwap | label           |   adj_close |   unadjusted_volume |   change |   change_percent |   change_over_time |
|:--------------|-------:|-------:|------:|--------:|---------:|-------:|:----------------|------------:|--------------------:|---------:|-----------------:|-------------------:|
| 2023-11-22 |  77.77 |  77.97 | 73.79 |   76.78 |   368686 |  76.18 | November 22, 23 |       76.78 |              368686 |    -0.99 |            -1.27 |            -0.0127 |

```python
obb.equity.price.historical("CLZ24.NYM", provider="yfinance").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |   dividends |   stock splits |
|:--------------|-------:|-------:|------:|--------:|---------:|------------:|---------------:|
| 2023-11-22  |  74.07 |  74.07 | 73.41 |   73.46 |      610 |           0 |              0 |

</details>

<details>
<summary mdxType="summary">Options</summary>

Individual options contracts are also loadable from `openbb.equity.price.historical()`.

- YahooFinance: `SPY241220P00400000`
- Polygon: `O:SPY241220P00400000`

```python
obb.equity.price.historical("SPY241220P00400000", provider="yfinance").to_df().tail(1)
```

| date                |   open |   high |   low |   close |   volume |   dividends |   stock splits |
|:--------------------|-------:|-------:|------:|--------:|---------:|------------:|---------------:|
| 2023-11-22 00:00:00 |   10.5 |  10.82 | 10.25 |   10.61 |       77 |           0 |              0 |

```python
obb.equity.price.historical("O:SPY241220P00400000", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-20  |   10.9 |  10.95 | 10.75 |   10.75 |       17 | 10.8376 |             10 |

</details>

</details>


---

---
title: Market Calendars
sidebar_position: 6
description: This page provides details on the market calendars available in the OpenBB Platform. Equity and economic calendars keep investors abreast of market activity and events. This guide provides examples for using the variety of calendars, and differences between sources.
keywords:
- stocks
- companies
- calendars
- earnings
- splits
- dividends
- ipo
- events
- economic calendar
- CPI report
- inflation
- expectations
- global
- central banks
- timezone
- tz-aware
- tz-unaware
- convert time
- ISM Manufacturing New Orders
- dividend yield
- analyst consensus
- EPS
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Market Calendars - Usage | OpenBB Platform Docs" />

Market calendars are an essential part of any analyst's daily rituals. Economic events and corporate actions provide near-term trading opportunities (or reasons to get out of the way) as expectations meet reality. The OpenBB Platform has a variety of calendars.

- Economic
- Earnings
- Dividends
- Splits
- IPO/SPOs

Let's take a look at some use-cases.

:::note
Examples on this page will assume that the OpenBB Platform is installed, the Python environment is active, and the Python interface has been imported into the active session.

```python
from openbb import obb
import pandas as pd
```

:::

## Economic Calendar

<details>


The economic calendar aggregates global central bank and macroeconomic releases, it is located within the `obb.economy` module.

:::tip
Do not rely on the economic calendar for real-time updates. Times posted are scheduled by publishers and are estimates which do not reflect the actual time data is released to the public.
:::

### Timezone Considerations

There are subtle differences between providers, the main consideration will be the timestamp. FMP and TradingEconomics both return the calendar as UTC-0, while Nasdaq posts events in US/Eastern time. Of the three, only TradingEconomics provides a TZ-aware timestamp. The differences can be reconciled with a few lines of code.

To identify the issue, let's look at one event. First, from FMP:

```python
fmp_df = obb.economy.calendar(provider="fmp", start_date="2023-11-19", end_date="2023-11-20").to_df()
fmp_df[fmp_df["event"].str.contains("20-Year Bond Auction")]
```

 date                | country   | event                |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------|:----------|:---------------------|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-11-20 18:00:00 | US        | 20-Year Bond Auction |      5.245 |         nan | Low          | USD        |      nan |                0 |

Then Nasdaq:

```python
nasdaq_df = obb.economy.calendar(provider="nasdaq", start_date="2023-11-19", end_date="2023-11-20").to_df()
nasdaq_df[nasdaq_df["event"].str.contains("20-Year Bond Auction")]
```

| date                | country       | event                | actual   | previous   | consensus   |  description   |
|:--------------------|:--------------|:---------------------|:---------|:-----------|:------------|:----------------|
| 2023-11-20 13:00:00 | United States | 20-Year Bond Auction | -        | 5.245%     | -       | The figures displayed in the calendar represent the yield on the Treasury Bond auctioned. |

Now let's convert the FMP timestamp to US/Eastern time.

```python
from datetime import time

fmp_df.index = fmp_df.index.map(
    lambda dt: dt.tz_localize("UTC")
    .tz_convert("America/New_York")
    if dt.time() != time(0, 0, 0)
    else dt.tz_localize("America/New_York")
)
fmp_df[fmp_df["event"].str.contains("20-Year Bond Auction")]
```

| date                      | country   | event                |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------------|:----------|:---------------------|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-11-20 13:00:00-05:00 | US        | 20-Year Bond Auction |      5.245 |         nan | Low          | USD        |      nan |                0 |

Timestamps can be a factor with start/end dates because the calendar day will roll over at midnight, moving the date. Converting the timestamp will overcome this, but be aware of when the time is `00:00:00`, signifying an all-day event like a holiday.

An exception was added in the code above to maintain the time where applicable, instead of rolling it back five hours.

For these reasons, among others, it is important for users to know and understand their data intimately.

### Filtering by Event

The providers do not have a pre-request filter for a specific event. TradingEconomics does have categories, like 'government', but that does not focus it on any particular release. To find something like PMI reports, search for it post-request.

FMP allows queries to this endpoint to be a maximum width of three months. To get the year-to-date events, requests will need to loop. The code below will do that, filter the results for ISM Manufacturing New Orders, and display the table of hits.

### ISM New Orders

```python

start_dates = ["2023-01-04", "2023-04-01", "2023-07-01", "2023-10-01"]
end_dates = ["2023-03-31", "2023-06-30", "2023-09-30", "2023-12-30"]
results = []

for i in range(0, len(start_dates)):
    _data = (
        obb.economy.calendar(provider="fmp", start_date=start_dates[i], end_date=end_dates[i])
        .model_dump()["results"]
    )
    results.extend(_data)
events = pd.DataFrame.from_records(results).set_index("date").sort_index()

events[events["event"].str.contains("ISM Manufacturing New Orders")]
```

| date                | country   | event                              |   actual |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------|:----------|:-----------------------------------|---------:|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-01-04 15:00:00 | US        | ISM Manufacturing New Orders (Dec) |     45.2 |       47.2 |         nan | Low          | USD        |     -2   |           -4.237 |
| 2023-02-01 15:00:00 | US        | ISM Manufacturing New Orders (Jan) |     42.5 |       45.1 |         nan | Low          | USD        |     -2.6 |           -5.765 |
| 2023-03-01 20:00:00 | US        | ISM Manufacturing New Orders (Feb) |     47   |       42.5 |         nan | Low          | USD        |      4.5 |           10.588 |
| 2023-04-03 18:00:00 | US        | ISM Manufacturing New Orders (Mar) |     44.3 |       47   |         nan | Low          | USD        |     -2.7 |           -5.745 |
| 2023-05-01 18:00:00 | US        | ISM Manufacturing New Orders (Apr) |     45.7 |       44.3 |         nan | Low          | USD        |      1.4 |            3.16  |
| 2023-06-01 14:00:00 | US        | ISM Manufacturing New Orders (May) |     42.6 |       45.7 |         nan | Low          | USD        |     -3.1 |           -6.783 |
| 2023-07-03 18:00:00 | US        | ISM Manufacturing New Orders (Jun) |     45.6 |       42.6 |         nan | Low          | USD        |      3   |            7.042 |
| 2023-08-01 18:00:00 | US        | ISM Manufacturing New Orders (Jul) |     47.3 |       45.6 |          44 | Low          | USD        |      1.7 |            3.728 |
| 2023-09-01 14:00:00 | US        | ISM Manufacturing New Orders (Aug) |     46.8 |       47.3 |         nan | Low          | USD        |     -0.5 |           -1.057 |
| 2023-10-02 14:00:00 | US        | ISM Manufacturing New Orders (Sep) |     49.2 |       46.8 |         nan | Low          | USD        |      2.4 |            5.128 |
| 2023-11-01 14:00:00 | US        | ISM Manufacturing New Orders (Oct) |     45.5 |       49.2 |         nan | Low          | USD        |     -3.7 |           -7.52  |
| 2023-12-01 15:00:00 | US        | ISM Manufacturing New Orders (Nov) |    nan   |       45.5 |         nan | Low          | USD        |    nan   |            0     |

</details>

## Earnings Calendar

<details>

The earnings calendar works in a similar way. For companies outside of the US, try the `openbb-fmp` provider.

```python
calendar = (
    obb.equity.calendar.earnings(
        provider="fmp",
        start_date="2023-11-20",
        end_date="2023-11-24"
    ).to_df()
)
```

This returned 1,234 results, but let's filter it down to those companies with analysts estimates, and display the top ten by EPS consensus.

```python
(
    calendar[calendar["eps_consensus"].notnull()
    & calendar["revenue_consensus"].notnull()]
    .sort_values(by="eps_consensus", ascending=False)
    .head(10)
)
```

| report_date   | symbol   |   eps_consensus |   actual_eps |   actual_revenue |   revenue_consensus | period_ending   | reporting_time   | updated_date   |
|:--------------|:---------|----------------:|-------------:|-----------------:|--------------------:|:----------------|:-----------------|:---------------|
| 2023-11-22    | CAP.SN   |          279.3  |          nan |              nan |         690955000000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-20    | ABDP.L   |           56.4  |          nan |              nan |         106000000    | 2023-09-29      | bmo              | 2023-11-19     |
| 2023-11-23    | 4206.T   |           56.3  |          nan |              nan |         62200000    | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-22    | DE       |            7.58 |          nan |              nan |         12909600000 | 2023-10-29      | bmo              | 2023-11-19     |
| 2023-11-21    | NVDA     |            3.34 |          nan |              nan |         15194600000 | 2023-10-29      | amc              | 2023-11-19     |
| 2023-11-21    | LOW      |            3.1  |          nan |              nan |         21059700000 | 2023-11-03      | bmo              | 2023-11-19     |
| 2023-11-20    | MOH.AT   |            2.48 |          nan |              nan |         3030480000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-20    | SJM      |            2.47 |          nan |              nan |        1947800000  | 2023-10-30      | bmo              | 2023-11-19     |
| 2023-11-21    | BIDU     |            2.45 |          nan |              nan |         4735580000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-21    | DKS      |            2.42 |          nan |              nan |        2948570000 | 2023-10-28      | bmo              | 2023-11-19     |

:::tip
EPS values are reported in the currency of the exchange listing price, direct comparisons are not viable across domiciles without a conversion factor.
:::

</details>

## Dividend Calendar

<details>

The dividend calendar uses start/end dates that reflect the ex-dividend date - the date when it begins trading without dividend rights.

Aside from the notable dates, the information returned tells you only the amount paid. Calculating the yield requires more data.

:::note

- Nasdaq provides a field for 'annualized_amount', which makes it easier to calculate a dividend yield.

- The `openbb-nasdaq` provider has US-only data for this endpoint.

- The same markets covered by FMP's earnings calendar are included in their dividend calendar.

:::

### Calculate Dividend Yield

The ten highest-payments going ex-div between November 20-24 are shown below.

With T+2 settlement, a purchase needs to occur two days prior to the record date for payment eligibility. The dividend yield is the current payment annualized as a percent of the asset's price.

```python
dividends = (
    obb.equity.calendar.dividend(
        provider="nasdaq",
         start_date="2023-11-20",
         end_date="2023-11-24",
    ).to_df()
    .drop_duplicates(subset="symbol")
    .sort_values("amount", ascending=False)
    .reset_index()
    .set_index("symbol")
    .head(10)
)

symbols = dividends.index.tolist()
prices = (
    obb.equity.price.quote(symbols, provider="fmp").to_df()
    .reset_index()
    .set_index("symbol")["price"]
)
dividends["price"] = prices

dividends["yield"] = (
    round((dividends["annualized_amount"]/dividends["price"])*100, 4)
)

(
    dividends[["record_date", "payment_date", "amount", "annualized_amount", "price", "yield"]]
    .sort_values("yield", ascending=False)
)
```

| symbol   | record_date   | payment_date   |   amount |   annualized_amount |   price |   yield |
|:---------|:--------------|:---------------|---------:|--------------------:|--------:|--------:|
| USOI     | 2023-11-21    | 2023-11-27     |   1.8588 |             16.134  |   75.73 | 21.3046 |
| ATCD     | 2023-11-21    | 2023-12-26     |  60.14   |             60.14   | 1235    |  4.8696 |
| GLDI     | 2023-11-21    | 2023-11-27     |   1.5153 |              4.8216 |  141.8  |  3.4003 |
| CHTM     | 2023-11-21    | 2023-12-26     |  59.62   |             59.62   | 1856.95 |  3.2106 |
| CMI      | 2023-11-24    | 2023-12-07     |   1.68   |              6.72   |  225.5  |  2.98   |
| KLIB     | 2023-11-24    | 2023-12-15     |   2.1    |              4.2    |  144    |  2.9167 |
| SNA      | 2023-11-21    | 2023-12-11     |   1.86   |              7.44   |  277.76 |  2.6786 |
| NOC      | 2023-11-27    | 2023-12-13     |   1.87   |              7.48   |  464.17 |  1.6115 |
| CBCYB    | 2023-11-24    | 2023-12-01     |   3.75   |              8      |  647    |  1.2365 |
| CBCY     | 2023-11-24    | 2023-12-01     |   3.75   |              8      |  660    |  1.2121 |


</details>

## IPO Calendar

<details>

The IPO calendar shows events based on their status - `["upcoming", "priced", "withdrawn"]` - and Intrinio provides a filter for the min/max dollar amount offered.

:::note
The data from both Intrinio and Nasdaq is US-only, both relying on the SEC for filing information.
:::

Use the `status` parameter to find announcements in different stages of the cycle.

### Upcoming

The initial public offerings that are confirmed to be coming to market are categorized as 'upcoming'. The number of companies going public at any given time will depend on market cycles.

```python
obb.equity.calendar.ipo(provider="nasdaq", status="upcoming").to_df()
```

| symbol   | name         |   offer_amount |   share_count | expected_price_date   | id            | exchange       | share_price   |
|:---------|:-------------|---------------:|--------------:|:----------------------|:--------------|:---------------|:--------------|
| DOCO     | Docola, Inc. |      8235004 |       1060870 | 2023-11-21            | 995278-107909 | NASDAQ Capital | 5.75-6.75     |

### Withdrawn

A `withdrawn` status might be the result of a SPAC unwinding after failing to merge with a company.

```python
obb.equity.calendar.ipo(provider="nasdaq", status="withdrawn").to_df().tail(3)
```

| withdraw_date   | name                      |   offer_amount |   share_count | filed_date   | id             |
|:----------------|:--------------------------|---------------:|--------------:|:-------------|:---------------|
| 2023-11-09      | Arago Acquisition Corp.   |      86250000.0 |       7500000 | 2022-05-06   | 1214792-102968 |
| 2023-11-13      | CW Petroleum Corp         |      17249995.5  |       3157894 | 2022-06-02   | 1055531-103241 |
| 2023-11-13      | Tiga Acquisition Corp. II |     230000000.0   |      20000000 | 2021-02-26   | 1148285-96307  |

### SPO

SPOs, secondary public offerings, are shares being sold by investors after an IPO. The money does not go to the company, but directly to the investor selling shares into the market. The `openbb-nasdaq` provider has an additional boolean parameter, `is_spo`. By default, year-to-date data is returned.

```python
obb.equity.calendar.ipo(provider="nasdaq", is_spo=True).to_df().tail(1)
```

| symbol   | ipo_date   | name                                    |   offer_amount |   share_count | deal_status   | id            | exchange             |   share_price |
|:---------|:-----------|:----------------------------------------|---------------:|--------------:|:--------------|:--------------|:---------------------|--------------:|
| SKWD     | 2023-11-16 | Skyward Specialty Insurance Group, Inc. |      152500000.0 |       5000000 | Priced        | 854131-108262 | NASDAQ Global Select |          30.5 |


</details>


---

---
title: Data Extensions
sidebar_position: 2
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';


Data extensions will expand the breadth and coverage of the data available in the OpenBB Platform. Each source (provider) is its own independent extension, even if there is only one endpoint accessible. This allows every data source to be inserted or removed, at any time, without disturbing the operation of the Core components.

Functions will appear in the Python Interface and Fast API only if a supported provider, for that specific endpoint, is installed. Additional Python libraries will be installed, where required, by the extension.

## Provider Coverage

The total installed coverage can be determined through the Python interface, as a dictionary.

```python
from openbb import obb
obb.coverage.providers
```

## Installation

All data extensions are installed with similar syntax. Published data extensions will have names beginning with `openbb`. For example, yFinance.

```console
pip install openbb-yfinance
```

Additions and removals update the router automatically to reflect the changes when the Python interpreter is refreshed. Below is a list of data provider extensions.

Uninstall any extension with `pip uninstall`.

```console
pip uninstall openbb-yfinance
```

## Available Data Extensions

Many data providers require an API key for access, use the name under the "API Key Name" column in the tables below when configuring the user settings.

### Core Providers

These packages are what will be installed when `pip install openbb` is run

| Extension Name | Description | Installation Command | Minimum Subscription Type Required | API Key Name |
|----------------|-------------|----------------------|------------------------------------|-------------:|
| openbb-benzinga | [Benzinga](https://www.benzinga.com/apis/en-ca/) data connector | pip install openbb-benzinga | Paid | | benzinga_api_key |
| openbb-bls | [Bureau of Labor Statistics](https://www.bls.gov/developers/home.htm) data connector | pip install openbb-bls | Free | bls_api_key | 
| openbb-cftc | [Commodity Futures Trading Commission](https://publicreporting.cftc.gov/stories/s/r4w3-av2u) data connector | pip install openbb-cftc | Free | cftc_app_token|
| openbb-econdb | [EconDB](https://econdb.com) data connector | pip install openbb-econdb | None | econdb_api_key | 
| openbb-imf | [IMF](https://data.imf.org) data connector | pip install openbb-imf | None | - |
| openbb-fmp | [FMP](https://site.financialmodelingprep.com/developer/) data connector | pip install openbb-fmp | Free | fmp_api_key |
| openbb-fred | [FRED](https://fred.stlouisfed.org/) data connector | pip install openbb-fred | Free | fred_api_key | 
| openbb-intrinio | [Intrinio](https://intrinio.com/pricing) data connector | pip install openbb-intrinio | Paid | intrinio_api_key |
| openbb-oecd | [OECD](https://data.oecd.org/) data connector | pip install openbb-oecd | Free | - | 
| openbb-polygon | [Polygon](https://polygon.io/) data connector | pip install openbb-polygon | Free | polygon_api_key |
| openbb-sec | [SEC](https://www.sec.gov/edgar/sec-api-documentation) data connector | pip install openbb-sec | None | - |
| openbb-tiingo | [Tiingo](https://www.tiingo.com/about/pricing) data connector | pip install openbb-tiingo | Free | tiingo_token |
| openbb-tradingeconomics | [TradingEconomics](https://tradingeconomics.com/api) data connector | pip install openbb-tradingeconomics | Paid | tradingeconomics_api_key |
| openbb-us-eia | U.S. Energy Information Administration - [EIA](https://www.eia.gov/opendata/register.php) - data connector | pip install openbb-us-eia | Free | eia_api_key |
| openbb-yfinance | [Yahoo Finance](https://finance.yahoo.com/) data connector | pip install openbb-yfinance | None | - |

### Community Providers

These packages are not installed when `pip install openbb` is run.  They are available for installation separately or by running `pip install openbb[all]`

| Extension Name | Description | Installation Command | Minimum Subscription Type Required | API Key Name |
|----------------|-------------|----------------------|------------------------------------|-------------:|
| openbb-alpha-vantage | [Alpha Vantage](https://www.alphavantage.co/) data connector | pip install openbb-alpha-vantage | Free | alpha_vantage_api_key |
| openbb-biztoc | [Biztoc](https://api.biztoc.com/#biztoc-default) News data connector | pip install openbb-biztoc | Free | biztoc_api_key |
| openbb-cboe | [Cboe](https://www.cboe.com/delayed_quotes/) data connector | pip install openbb-cboe | None | - |
| openbb-deribit | [Deribit](https://docs.deribit.com/) data connector | pip install openbb-deribit | None | - |
| openbb-ecb | [ECB](https://data.ecb.europa.eu/) data connector | pip install openbb-ecb | None | - |
| openbb-famafrench | [Ken French Data Library](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html) connector | pip install openbb-famafrench | None | - |
| openbb-federal-reserve | [Federal Reserve](https://www.federalreserve.gov/) data connector | pip install openbb-federal-reserve | None | - |
| openbb-finra | [FINRA](https://www.finra.org/finra-data) data connector | pip install openbb-finra | None / Free | - |
| openbb-finviz | [Finviz](https://finviz.com) data connector | pip install openbb-finviz | None | - |
| openbb-government-us | [US Government](https://data.gov) data connector | pip install openbb-us-government | None | - |
| openbb-nasdaq | [Nasdaq Data Link](https://data.nasdaq.com/) connector | pip install openbb-nasdaq | None / Free | nasdaq_api_key |
| openbb-seeking-alpha | [Seeking Alpha](https://seekingalpha.com/) data connector | pip install openbb-seeking-alpha | None | - |
| openbb-stockgrid | [Stockgrid](https://stockgrid.io) data connector | pip install openbb-stockgrid | None | - |
| openbb-tmx | [TMX](https://money.tmx.com) data connector | pip install openbb-tmx | None | - |
| openbb-tradier | [Tradier](https://tradier.com) data connector | pip install openbb-tradier | None | tradier_api_key; tradier_account_type ('sandbox' or 'live')
| openbb-wsj | [Wall Street Journal](https://www.wsj.com/) data connector | pip install openbb-wsj | None | - |


Have you published a data provider extension and want it featured on this list? Tell us about it! Open a pull request on [GitHub](https://github.com/OpenBB-finance/OpenBBTerminal/) to submit an extension for inclusion. Code contributions, for new and existing, data providers are always welcome.

Search [PyPI](https://pypi.org/search/?q=openbb-) to find more extensions.


---

---
title: Overview
sidebar_position: 1
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

The extension framework allows individual pieces to be installed and removed seamlessly within the environment, using only the desired data and toolkit extensions.

There are two primary types of extensions for the OpenBB Platform:

- Data
- Toolkits

The OpenBB Core installation does not include any toolkit extensions. Install the OpenBB Platform with all data and toolkit extensions from PyPI with:

```python
pip install openbb[all]
```

When installing from source, navigate into the `openbb_platform` folder from the root of the project and enter:

```console
python dev_install.py -e
```

This installs all extensions in editable mode, and the Python interface is compiled in, `/openbb_platform/openbb/package`, instead of the environment's `site-packages` folder. The tables in the next pages lists extensions as either, Core or Community. The Core extensions are installed by default.

A couple of notable differences between data and toolkit extension are:

- In the OpenBB GitHub repo, extensions are all located under:

    ```console
    ~/OpenBB/openbb_platform/extensions
    ```

- An additional folder housing integration tests, with the `tests` folder staying empty.
- There is a `router` file, and there can be sub-folders with additional routers.
- Utility functions don't need their own sub-folder.
- `__init__.py` files are all empty.

:::important When an extension is installed or uninstalled, the Python interface will need to rebuild the static assets for the app to fully reflect the changes.

To invoke the build process, enter the line below from the command line:

```sh
openbb-build
```

Or

```sh
python -c "import openbb;openbb.build()"
```

This is not necessary when using the API, changes will be reflected on the next run.
:::

## Coverage

The installed commands and data providers are found under, `obb.coverage`.

```python
obb.coverage
```

```console
/coverage

    providers
    commands
    command_model
    command_schemas
```

`obb.coverage.providers` is a dictionary of the installed provider extensions, each with its own list of available commands.

`obb.coverage.commands` is a dictionary of commands, each with its own list of available providers for the data.

`obb.coverage.command_model` is a dictionary where the keys are the command paths and the values is a nested dictionary of QueryParams and Data models associated with that function.


---

---
title: Toolkit Extensions
sidebar_position: 3
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';


OpenBB Toolkit Extensions expand the Platform with functions for manipulating data and preparing it for display. The Core Platform installation does not install any toolkit extensions. The table below is the current list of toolkit extensions.

| Extension Name | Description | Installation Command | Core/Community | Router Path |
|:-----------------|:-----------:|:-------------------:|:------------------:|-------------:|
| openbb-charting | Rest API charting service and Plotly library. | pip install openbb-charting | Community | N/A |
| openbb-devtools | Aggregates dependencies that facilitate a nice development experience for OpenBB. | pip install openbb-devtools | N/A |
| openbb-econometrics | Econometrics models for the Python interface only. | pip install openbb-econometrics | Community | obb.econometrics |
| openbb-mcp-server | Run the OpenBB API as a MCP server. | pip install openbb-mcp-server | Community | N/A | 
| openbb-quantitative | Functions for performing quantitative analysis. | pip install openbb-quantitative | Community | obb.quantitative |
| openbb-technical | Functions for performing technical analysis. | pip install openbb-technical | Community | obb.technical |

The sections below outline any specific installation considerations for the extension.

## Charting

```console
pip install openbb-charting
```

The OpenBB Charting Extension supplies charting infrastructure and services to the OpenBB Platform. Figure objects are served via REST API or Python Client.  It utilizes [PyWry](https://github.com/OpenBB-finance/pywry) for handling the display of interactive charts and tables in a separate window, with a Plotly library.

Functions with dedicated views return figures to the `chart` attribute of the `OBBject` response object. They are displayed with the class method, `show()`.

:::tip
The `openbb-charting` is an [`OBBject` extension](/platform/developer_guide/tutorials/add_obbject_extension), which means the general functionality is exposed in every command result.
:::

The following packages are dependencies of the `openbb-charting` extension:

- scipy
- plotly
- statsmodels
- reportlab
- pywry
- svglib
- nbformat
- pandas-ta

For more information check the documentation of the openbb-charting extension.

## Devtools

```console
pip install openbb-devtools
```

Please refer to the following PyPI distributed [package](https://pypi.org/project/openbb-devtools/).

This Python package, `openbb-devtools`, is designed for OpenBB Platform Developers and contains a range of dependencies essential for robust and efficient software development.

These dependencies cater to various aspects like code formatting, security analysis, type checking, testing, and kernel management.

The inclusion of these packages ensures that the development process is streamlined, the code quality is maintained, and the software is secure and reliable.

Included dependencies:

- `ruff`: A fast Python linter focused on performance and simplicity.
- `pylint`: A tool that checks for errors in Python code, enforces a coding standard, and looks for code smells.
- `mypy`: A static type checker for Python, helping catch type errors during development.
- `pydocstyle`: A linter for Python docstrings to ensure they meet certain style requirements.
- `black`: An uncompromising Python code formatter, ensuring consistent code style.
- `bandit`: A tool designed to find common security issues in Python code.
- `pre-commit`: Manages and maintains pre-commit hooks that run checks before each commit, ensuring code quality.
- `nox`: A generic virtualenv management and test command line tool for running tests in isolated environments.
- `pytest`: A mature full-featured Python testing tool that helps in writing better programs.
- `pytest-cov`: A plugin for pytest that measures code coverage during testing.
- `ipykernel`: A package that provides the IPython kernel for Jupyter.
- `types-python-dateutil`: Type stubs for python-dateutil, aiding in static type checking.
- `types-toml`: Type stubs for TOML, useful for static type checking in TOML parsing.
- `poetry`: A tool for dependency management and packaging in Python.

Each dependency plays a critical role in ensuring the code is clean, efficient, and functional, ultimately leading to the development of high-quality software.

While developing code for the OpenBB Platform, one should always install the DevTools packages so that the above development tooling is available out-of-the-box.


:::info
When setting up the environment using the `openbb_platform/dev_install.py` script, the DevTools will also be installed.
:::

## Econometrics

```console
pip install openbb-econometrics
```

The `openbb-econometrics` extension installs a new router path (`obb.econometrics`) and additional Python libraries:

- scipy
- statsmodels
- arch
- linearmodels

:::note

Statsmodels requires a C compiler be present on the system. Follow the instructions [here](https://cython.readthedocs.io/en/latest/src/quickstart/install.html) for system-specific methods.

This extension is not accessible via REST API because `statsmodels` is not serializable.
:::


To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/econometrics`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.

## MCP Server

This extension implements the [FastMCP library](https://github.com/jlowin/fastmcp). It wraps all GET requests as tools that can be used by AI models supporting MCP servers.

```console
pip install openbb-mcp-server
```

Start the server by opening a terminal, activating the environment, and running:

```console
openbb-mcp
```

This will start the server on localhost, using port 8001, with streamable-http as the trasport.

Use the `--transport` flag and set:

- sse
- stdio
- http (Default)

See the extension's [README](https://pypi.org/project/openbb-mcp-server/) for details and instructions.

## Quantitative

```console
pip install openbb-quantitative
```

The `openbb-quantitative` extension installs a new router path (`obb.quantitative`) and a few additional Python libraries:

- pandas-ta
- scipy
- statsmodels

To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/quantitative`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.

## Technical

```console
pip install openbb-technical
```

The `openbb-technical` extension is for performing technical analysis on time series data. It installs a new router path (`obb.technical`) and some additional Python libraries:

- pandas-ta
- scikit-learn
- scipy
- statsmodels

To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/technical`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.


---

---
title: Quickstart
sidebar_position: 1
description: Get started with the OpenBB Platform by following this quickstart guide for the Python interface.
keywords:
- OpenBB Platform
- investment research infrastructure
- data connectors
- financial reports
- OpenBB team
- quickstart
- getting started
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Quickstart | OpenBB Platform Docs" />

To get started with the OpenBB Platform, all you need to do is to import `obb` and start querying away.

```python
from openbb import obb

# Get the price of a stock
quote_data = obb.equity.price.quote(symbol="AAPL", provider="yfinance")
quote_data
```

The output will look like this:

```console
OBBject

id: 06649f4e-896c-7b31-8000-52242b1605f2
results: [{'symbol': 'AAPL', 'asset_type': 'EQUITY', 'name': 'Apple Inc.', 'exchang...
provider: yfinance
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'yfinance'}, 's...
```

To view the output as a dataframe, you can use the `to_df()` method.

```python
quote_data.to_df()
```

Let's try another example. This time, we'll get the historical price of a stock.

```python
obb.equity.price.historical(symbol="AAPL", provider="yfinance").to_df()
```

To view all the available commands, routers and extensions, you can do:

```python
obb
```

You can also keep exploring by accessing each route like this:

```python
obb.equity
```

If you see a command you're interested in, to get help on how to use it, you can do:

```python
help(obb.equity.price.historical)
```

Visit our [reference](/platform/reference) documentation to see all the available commands and their parameters.

And that's it! You're now ready to start using the OpenBB Platform.

---

---
title: Workspace integration
sidebar_position: 2
description: Get started using the OpenBB Platform as a custom Workspace backend.
keywords:
- OpenBB Platform
- investment research infrastructure
- data connectors
- financial reports
- OpenBB team
- quickstart
- getting started
- Workspace
- custom backend
- backend
- FastAPI
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Quickstart - Workspace Custom Backend | OpenBB Platform Docs" />

The OpenBB Platform can be used as a [Workspace custom backend](/workspace/getting-started/data-integration), both as a fully-loaded data source, or as the bare shell and launcher of a FastAPI application.

The sections below will outline a few scenarios.

## Launch Platform App

To include all installed OpenBB extensions as widgets in the custom backend connector:

:::info
Open a terminal, activate the environment where `openbb` was installed, then enter:

```sh
openbb-api
```
:::

- Next, open your browswer and login to [pro.openbb.co](https://pro.openbb.co).

- From the sidebar, click "Data Connectors".

- Then, click the "Add Data" button.

![Add Data](https://github.com/user-attachments/assets/770e6d6c-6cd7-4073-a874-af0850f404cc)

- Enter a name for the connection, and use the server address displayed in the console.

- Then, click the "Test" button.

:::tip
If a connection error displays after pressing the "Test" button, your browser might be blocking access because of "mixed content". Browsers such as Safari, and Brave, do not permit HTTP connections.

Try using Chrome, specifically, or start the server over HTTPS.

See the page [here](/workspace/faqs) for the steps to do it.
:::

- Finally, click the "Add" button.

All data endpoints are now configured to use and are available to the Search.

## Launch Custom Platform App

Let's say, you want to create a custom backend that presents data differently, and you don't want any of the built-in widgets to populate. You want complete control over the generated view.

In this scenario, use the `--exclude` argument to ignore the entire `/api/*` path.

Widgets will now only populate from endpoints added to the imported `app` instance.

```python
from openbb_platform_api.main import app

from openbb import obb


@app.get("/company_description")
async def company_description(symbol: str = "AAPL") -> str:
    """Reference data for the given company using yFinance."""
    response = obb.equity.profile(symbol, provider="yfinance")

    description = response.results[0].long_description

    md = f"""

# **{response.results[0].name}**
## **{response.results[0].sector}**
### **{response.results[0].industry_category}**

<details>
<summary mdxType="summary">Company Description</summary>
{description}
</details>

{response.results[0].company_url}
"""
    return md
```

Launch the backend by including the path to the Python file as the `--app` argument.

```sh
openbb-api --app /Users/path/to/some/folder/some_file.py --exclude '"/api/v1/*"' --reload
```

<img width="514" alt="Screenshot 2025-02-06 at 1 40 43 PM" src="https://github.com/user-attachments/assets/150b214e-468e-45bf-b28e-6fb1e1a7a5c2" />

## Launch Any FastAPI App

For this, the only requirements are:

- Python version between 3.9 and 3.12, inclusively.
- `openbb-platform-api` package, installable from PyPI.

Add the path to the Python file with the FastAPI instance to launch.

```sh
openbb-api --app /Users/path/to/some/folder/some_file.py
```

:::important
At this time, only "GET" methods are supported by custom backends.
:::


```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
async def hello() -> str:
    """Widget Description Generated By Docstring"""
    return "Hello, from OpenBB!"
```

Function arguments will populate as widget parameters.

### Parameters With Dropdown

Literal types of function parameters will automatically be recognized as choices in a dropdown menu.

```python
from typing import Literal, Optional

app = FastAPI()

@app.get("/hello")
async def hello(param1: Optional[str] = None, param2: Literal["Choice 1", "Choice 2"] = None, param3: bool = False) -> str:
    """Widget Description Generated By Docstring"""
    if not param1 and not param2 and not param3:
        return "Enter a parameter or make a choice!"
    if param3:
        return f"Param3 enabled!"
    if param2:
        return f"You selected: {param2}"
    if param1:
        return f"You entered: {param1}"

    return "Nothing to return!"
```

### Table Widget

Create a table widget by returning data shaped as a list of dictionaries (records)

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
async def hello() -> list:
    """Widget Description Generated By Docstring"""
    return [{"Column 1": "Hello", "Column 2": "from OpenBB!"}]
```

### Annotated Functions

Annotated parameters and responses will create column definitions and hover descriptions.

For data responses, return a list of Pydantic models to get the most bang-for-the-buck.


```python
from typing import Annotated
from fastapi import FastAPI, Query
from openbb_core.provider.abstract.data import Data  # Inherit this instead of pydantic.BaseModel to represent 1 row of data.
from pydantic import Field

app = FastAPI()

class MyData(Data):
    """MyData Response Model."""
    column_1: str = Field(title="Some Text", description="Hover text for Column 1")
    column_2: int = Field(title="Some Number", description="Hover text for Column 2")
    column_3: float = Field(
        title="Some Percent",
        description="Hover text for Column 3",
        json_schema_extra={"x-unit_measurement": "percent"},
    )
    column_4: float = Field(
        title="Some Normalized Percent",
        description="Hover text for Column 4",
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )


@app.get("/table")
async def table(
    param1: Annotated[str, Query(description="Hover text for param1")] = None,
    param2: Annotated[int, Query(description="Some Number")] = None,
    date: Annotated[str, Query(description="Date selector")] = None,
) -> list[MyData]:
    """Widget Description Generated By Docstring"""
    return [
        MyData.model_validate(
            {
                "column_1": "Hello",
                "column_2": 10,
                "column_3": 33.345,
                "column_4": -0.33345,
            }
        ),
    ]
```

<img width="836" alt="Screenshot 2025-02-06 at 8 00 30 PM" src="https://github.com/user-attachments/assets/78ab6191-50c6-4b76-a6ca-ea23575c6619" />

#### `openbb-api`

`openbb-api` is a command line executable, similar to `uvicorn`, for starting a FastAPI app instance, generating and serving the configuration files OpenBB Workspace requires.

It can be installed as standalone with:

```sh
pip install openbb-platform-api
```

See the package [readme](https://github.com/OpenBB-finance/OpenBB/blob/6b0ae943d9096e0683265ffc1233c71b4a9dad3b/openbb_platform/extensions/platform_api/README.md) for a detailed description of parameters and example snippets for creating various types of widgets.


---

---
title: Input Query Parameters
sidebar_position: 1
description: This page provides comprehensive information about standardized command syntax for an open-source platform. Topics discussed include the structure of command syntax, use of standardized parameters, usage of provider and symbol parameters, handling of date and limit parameters, and more. Also explored, are the methods for selecting data sources, handling different list and ticker symbol formats, and dealing with command responses and warnings.
keywords:
  - tutorial
  - command syntax
  - standardized parameters
  - date format
  - provider parameter
  - data source selection
  - symbol parameter
  - list formats
  - ticker symbols
  - date parameter
  - time series
  - limit parameter
  - keyword arguments
  - endpoint parameters
  - command response
  - data models
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Basic Syntax - Usage | OpenBB Platform Docs" />

The structure of command syntax is standardized across common fields. This ensures that a `date` is always a `date` and the format remains consistent throughout.

Standardized parameters include, but are not limited to: provider, symbol, start_date, end_date, date, limit.

When looking at a function's docstring, the standard parameters (shared across multiple providers) are positioned first. Provider-specific parameters positionally follow the `provider` argument.

The example below is from, `obb.equity.price.quote`:

```console
Parameters
----------
symbol : str
    Symbol to get data for. In this case, the comma separated list of symbols.
provider : Optional[Literal['fmp', 'intrinio']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
source : Literal['iex', 'bats', 'bats_delayed', 'utp_delayed', 'cta_a_delayed', 'cta_b_delayed', 'intrinio_mx', 'intrinio_mx_plus', 'delayed_sip']
    Source of the data. (provider: intrinio)
```

:::note
Examples below assume that the Python interface has been imported in the current session, and/or the Fast API has been started.

```python
from openbb import obb
```

or

```python
uvicorn openbb_core.api.rest_api:app
```

:::

## Provider

The `provider` parameter is the way to select the specific source of the data from the endpoint. If a [preference for the default provider](/platform/settings/environment_variables) has not been defined, the default will be the first, alphabetically, installed provider.

Provider values are entered in lower-case, with an underscore for multiple words - for example:

```python
historical_prices = obb.equity.price.historical("aapl", provider="alpha_vantage")
```

Provider coverage can be ascertained with the command below:

```python
obb.coverage.providers
```

Refer to, [Data Extensions](/platform/usage/extensions/overview), for instructions on installing data provider extensions.

## Symbol

Symbols are not case-sensitive, and where the function allows, can be entered as a `string`, `List[str]`, or a comma-separated `string`.

The exact format of the symbol may vary between providers - for example, share classes, exchange suffixes, and global composites. An example of this difference is shown below:

```python
obb.equity.price.historical("brk.b", provider="polygon")
```

```python
obb.equity.price.historical("brk-b", provider="fmp")
```

While some providers handle the different formats on their end, others do not. This is something to consider when no results are returned from one source.

With providers supporting market data from multiple jurisdictions, the most common method for requesting data outside of US-listings is to append a suffix to the ticker symbol (e.g., `RELIANCE.NS`). Formats may be unique to a provider, so it is best to review the source's documentation for an overview of their specific conventions. For example, [this page](https://help.yahoo.com/kb/SLN2310.html) on Yahoo describes how they format symbols, which many others follow to some degree.

Single symbol:

```python
quote = obb.equity.price.quote(symbol="td", provider="fmp")
```

### Multiple Symbols

The OpenBB Provider module enforces REST-compliant lists that can be entered in either format through the Python interface.

#### Comma-Separated String

This is the format required by the Fast API, when creating new data endpoints, it is important that the Python interface is able to accept both formats.

```python
quotes = obb.equity.price.quote("td,schw,jpm,ms", provider="fmp")
```

```python
import requests
r = requests.get("http://127.0.0.1:8000/api/v1/equity/price/quote?provider=fmp&symbol=td,schw,ms,jpm")
r.json()
```

#### Python List

Entering a list will provide the same outcome as above.

```python
quotes = obb.equity.price.quote(["td","schw","jpm","ms"], provider="fmp")
```

Lists of symbols can be generated from the results of other functions, and then passed to the input.

```python
symbol="spgi"
symbols = obb.equity.compare.peers(symbol).results.peers_list+[symbol]
quotes = obb.equity.price.quote(symbols)
```

:::note
To accomplish this same task through the Fast API, convert the list to a comma-separated string.
:::

```python
import requests
symbol="spgi"
r = requests.get(f"http://127.0.0.1:8000/api/v1/equity/compare/peers?provider=fmp&symbol={symbol}")
symbols_list = r.json()["results"]["peers_list"]+[symbol]
symbols = ",".join(symbols_list)
response = requests.get(f"http://127.0.0.1:8000/api/v1/equity/price/quote?provider=fmp&symbol={symbols}")
response.json()
```

## Dates

Dates are entered everywhere as a string, formatted as, "YYYY-MM-DD". If the function has only the `date` parameter, the data will be a snapshot instead of a time series.

```python
historical_prices = obb.equity.price.historical(symbol="qqq", start_date="2023-01-10", end_date="2023-01-31", provider="fmp")
```

For flexibility and programmatic purposes, a `datetime` object is also accepted.

```python
from datetime import datetime
symbol="qqq"
start = datetime.strptime("100123", "%d%m%y")
end = datetime.strptime("2023-01-31","%Y-%m-%d")
historical_prices = obb.equity.price.historical(symbol, start_date=start, end_date=end, provider="fmp")
```

```python
import requests
response = requests.get(f"http://127.0.0.1:8000/api/v1/equity/price/historical?provider=fmp&symbol={symbol}&start_date={start}&end_date={end}")
response.json()
```

## Limit

Where, optional, `limit` parameters are supplied, they are likely to have sensible default states that return N results starting from the most recent entry or the `start_date`. Enter these values as an integer.

```python
income = obb.equity.fa.income("AAPL", period="quarter", provider="fmp", limit=4)
```

## \*\*kwargs

All endpoints accept additional keyword arguments, but non-existent parameters will be ignored. Invalid parameters are communicated via the `warnings` field in the command response.

Parameters can be stored as a dictionary and fed to the command as `**kwargs`. If a provider, or function, has an undocumented parameter it can still be accessed by supplying the additional kwargs.

```python
kwargs = {"symbol":"msft","start_date":"2023-01-01","provider":"polygon"}
historical_prices = obb.equity.price.historical(**kwargs)
```

```python
data = obb.equity.price.quote("brk-b", provider="fmp", source="bats")
data.warnings
```

```console
[Warning_(category='OpenBBWarning', message="Parameter 'source' is not supported by fmp. Available for: intrinio.")]
```

## References

All functions, parameters, and responses are detailed under the [Reference pages](/platform/reference). The data models for each provider source are described within the [Data Models](/platform/data_models) pages.

These pages are a quick way to cross-reference differences between providers. The same information is provided in a function's signature and docstring.


---

---
title: Output Data
sidebar_position: 2
description: This page details the basic response and output that can be expected to be received from the the OpenBB Platform.
keywords:
  - tutorial
  - standardized output
  - OBBject
  - basic response
  - provider
  - results
  - warnings
  - chart
  - extra
  - command coverage
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Basic Response - Usage | OpenBB Platform Docs" />

## Python Interface

### OBBject

The output of every command is an object which contains the results of the request, along with additional information. It is a custom class, `OBBject`, and always returns with the fields listed below:

```console
id: ...                 # UUID Tag
results: ...            # Serializable results.
provider: ...           # Provider name.
warnings: ...           # List of warnings.
chart: ...              # Chart object.
extra: ...              # Extra info.
```

```python
from openbb import obb

data = obb.equity.price.historical("SPY", provider="polygon")

data
```

```console
OBBject

id: 06520558-d54a-7e53-8000-7aafc8a42694
results: [{'date': datetime.datetime(2022, 10, 5, 0, 0), 'open': 375.62, 'high': 37...
provider: polygon
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'polygon'}, 'st...
```

Additional class methods are helpers for converting the results to a variety of formats.

- `to_dict()`: converts to a dictionary, accepting all standard "orientation" parameters, i.e., "records"
- `to_df()` / `to_dataframe()`: converts to a Pandas DataFrame.
- `to_numpy()`: converts to a Numpy array.
- `to_polars()`: converts to a Polars table.

:::info
The preferred output type can be set with a user preference.

```python
obb.user.preferences.output_type="dataframe"
```

:::

### Metadata

The OpenBB Platform returns metadata related to the command execution, as well as any returned from a Provider endpoint.
Both are stored in the `extra` attribute of the [OBBject](/platform/developer_guide/architecture_overview#obbject-class) response object.

It will always contain these elements:

- `arguments`: Any parameters supplied, and the selected provider source, to the function.
- `duration`: The number of nanoseconds the function took to complete.
- `route`: The command path.
- `timestamp`: Timestamp for when the command was run.

#### Execution Metadata

Metadata for the command execution is captured under the `metadata` key.

```python
from openbb import obb

data = obb.economy.calendar(provider="nasdaq")

data.extra
```

```console
{'metadata': Metadata

 arguments: {'provider_choices': {'provider': 'nasdaq'}, 'standard_params': {'start_date': None, 'end_date': None}, 'extra_params': {}}
 duration: 565256375
 route: /economy/calendar
 timestamp: 2024-05-22 11:28:57.149548}
```

#### Disabling

This content can be disabled as a setting in the [`user_settings.json`](/platform/settings/environment_variables) file.

```json
{
  "preferences": {
    "metadata": false
  }
}
```

:::note
Metadata included as part of the command results will not be disabled by this setting.
:::

#### Results Metadata

Where commands return metadata related to the requested data, it is keyable from the `extra` attribute with, `results_metadata`.

This dictionary contains contextual information and data for the `results` that is not included in the tables.
Results metadata will vary by command and provider, so it is worth exploring when it is included, below is a selection of samples.

<details>
<summary mdxType="summary">FRED</summary>

```python
data = obb.economy.fred_series("T10Y2Y")

data.extra["results_metadata"]
```

```console
{'T10Y2Y': {'title': '10-Year Treasury Constant Maturity Minus 2-Year Treasury Constant Maturity',
  'units': 'Percent',
  'frequency': 'Daily',
  'seasonal_adjustment': 'Not Seasonally Adjusted',
  'notes': 'Starting with the update on June 21, 2019, the Treasury bond data used in calculating interest rate spreads is obtained directly from the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).\r\nSeries is calculated as the spread between 10-Year Treasury Constant Maturity (BC_10YEAR) and 2-Year Treasury Constant Maturity (BC_2YEAR). Both underlying series are published at the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).'}}
```

The information stored here is used by the `openbb-charting` extension for display.

![FRED Chart](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00)

</details>

<details>
<summary mdxType="summary">EconDB</summary>

```python
data = obb.economy.indicators("PCOPP", provider="econdb")

data.extra
```

```console
{'results_metadata': {'PCOPP': {'title': 'World - Copper',
   'country': 'World',
   'frequency': 'M',
   'dataset': 'IMF_PCPS',
   'transform': None,
   'units': 'USD',
   'scale': 'Units',
   'multiplier': 1,
   'additional_info': {'FREQ:Frequency': 'M:Monthly',
    'REF_AREA:Reference Area': 'W00:All Countries, excluding the IO',
    'COMMODITY:Commodity': 'PCOPP:Primary Commodity Prices, Copper',
    'UNIT_MEASURE:Unit of Measure': 'USD:US Dollars',
    'UNIT_MULT:Scale': '0:Units'}}},
}
```

</details>

<details>
<summary mdxType="summary">Cboe</summary>

```python
data = obb.derivatives.options.chains("SPX", provider="cboe")

data.extra
```

```console
{'results_metadata': {'symbol': '^SPX',
  'security_type': 'index',
  'bid': 5293.0298,
  'bid_size': 1,
  'ask': 5295.2002,
  'ask_size': 1,
  'open': 5319.2798,
  'high': 5323.1802,
  'low': 5286.0098,
  'close': 5294.0898,
  'volume': 0,
  'current_price': 5294.0898,
  'prev_close': 5321.4102,
  'change': -27.3202,
  'change_percent': None,
  'iv30': 10.291,
  'iv30_change': 0.546,
  'iv30_change_percent': 0.056029,
  'last_tick': 'down',
  'last_trade_timestamp': '2024-05-22 14:50:36'},
}
```

</details>

<details>
<summary mdxType="summary">SEC</summary>

```python
data = obb.etf.holdings("BIL", provider="sec")

data.extra
```

```console
{'results_metadata': {'fund_name': 'SPDR(R) Bloomberg 1-3 Month T-Bill ETF',
  'series_id': 'S000017326',
  'lei': '549300GQCVCME1YJ6B50',
  'period_ending': '2023-12-31',
  'fiscal_year_end': '2024-06-30',
  'total_assets': 35015168619.91,
  'total_liabilities': 1638123692.3,
  'net_assets': 33377044927.61,
  'cash_and_equivalents': '0.00000000',
  'returns': {'2023-10-31': 0.0044,
   '2023-11-30': 0.0044,
   '2023-12-31': 0.0046},
  'flow': {'2023-10-31': {'creation': 6591274706.7,
    'redemption': 604472521.85},
   '2023-11-30': {'creation': 3244045301.3, 'redemption': 4478684406.9},
   '2023-12-31': {'creation': 639802303.2, 'redemption': 3018629744.0}},
  'gains': {'2023-10-31': {'realized': -65924.99, 'unrealized': -3793500.04},
   '2023-11-30': {'realized': 360345.39, 'unrealized': 292210.09},
   '2023-12-31': {'realized': 319796.93, 'unrealized': 3862704.46}},
  'borrowers': [{'name': 'BofA Securities, Inc.',
    'lei': '549300HN4UKV1E2R3U73',
    'value': 211562959.29},
   {'name': 'J.P. Morgan Securities LLC',
    'lei': 'ZBUT11V806EZRVTWT807',
    'value': 957576952.9},
   {'name': 'ING Financial Markets LLC',
    'lei': 'KBVRJ5K57JZ3E2AVWX40',
    'value': 247944722.5},
   {'name': 'Barclays Capital Inc.',
    'lei': 'AC28XWWI3WIBK2824319',
    'value': 248250000.0},
   {'name': 'Goldman Sachs & Co. LLC',
    'lei': 'FOR8UP27PHTHYVLBNG30',
    'value': 110741598.05},
   {'name': 'Bank of Montreal',
    'lei': 'NQQ6HPCNCCU6TUTQYE16',
    'value': 87276542.32},
   {'name': 'Nomura Securities International, Inc.',
    'lei': 'OXTKY6Q8X53C9ILVV871',
    'value': 469556172.09},
   {'name': 'Daiwa Capital Markets America Inc.',
    'lei': 'M67H5PRC0NQKM73ZAS82',
    'value': 198566750.0}]}
}
```

</details>

### LLM friendly mode

The OpenBB Platform provides a way to enable the Large Language Model (LLM) mode, which allows you to use LLM frameworks such as [Magentic](https://github.com/jackmpcollins/magentic), [Langchain](https://github.com/langchain-ai/langchain), [Haystack](https://github.com/deepset-ai/haystack), and more.

This guide outlines the steps to enable LLM mode in the OpenBB Platform.

We first start by importing the OpenBB Platform:

```python
from openbb import obb
```

The LLM mode is made possible by setting the system and user preferences to an LLM-compatible mode.

First, we set the user preference:

```python
obb.user.preferences.output_type="llm"
```

This line of code converts the `OBBject` response data results into a format that works good with LLM models. This is based on our own experience with building LLM agents for financial data. You can try other output types such as `dict`, or similar. You can also build your custom output type.

Next, we set the system preferences:

```python
obb.system.python_settings.docstring_sections=['description', 'examples']
```

This system preference trims the docstrings of the commands so that they can fit into the LLM model's context size and also avoid redundant information. The redundant information comes from the information inside the signature of the command that is also written in the docstring.

As our docstrings are modular we can easily choose which section of the docstrings to include. Available docstring sections are the following:

- description
- parameters
- returns
- examples

The next step is to limit the size of the docstrings:

```python
obb.system.python_settings.docstring_max_length=1024
```

We do this to ensure that the docstrings are not too long for the LLM model to process. The LLM model has a limit on the number of tokens it can process at once, and this setting ensures that the docstrings are within that limit.

Finally, we can import `openbb` and rebuild the Python static assets to apply these system changes:

```python
import openbb
openbb.build()
```

Now you have successfully enabled LLM mode in the OpenBB Platform. You can now use LLM frameworks to interact with the OpenBB Platform and build financial agents that can understand and respond to financial data.

For example:

```python
from magentic import prompt_chain, FunctionCall, OpenaiChatModel

@prompt_chain(
    "You are a helpful financial agent that can use function calling to retrieve data.\nUser Query: {query}",
    functions=[obb.equity.price.quote],
    model=OpenaiChatModel(model="gpt-4-turbo-preview")
)
def llm(query: str) -> FunctionCall | str: ...

r = llm(query="What is the current stock price of AAPL?")
r
```

## REST API

The OpenBB Platform comes with a FastAPI application that serves platform commands as REST API endpoints.

Activate the Python environment and then start the server from a Terminal command line with:

```console
uvicorn openbb_core.api.rest_api:app
```

:::info
See [System Settings](/platform/settings/system_settings) for details on configuring settings in `system_settings.json`
:::

You can add arguments that are supported by `uvicorn` to customize how the API is launched.
For example this command will be useful if you are developing. It will launch the API in a way it's reachable on your local network and reload every time the code changes:

```console
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

To learn more about how you can run the API in different scenarios refer to [uvicorn's documentation](https://www.uvicorn.org/#command-line-options)

### API Documentation

The Fast API app comes with a swagger documentation page. When running the API locally, navigate to [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs).

The API Docs provide interactive descriptions of all available endpoints that you can call right from the documentation web page.

### Data API Keys

The API keys to your data providers are loaded from the `~/.openbb_platform/user_settings.json` file.

You can find more information about the structure of the file and environment variables in the [Local Environment](/platform/settings/user_settings/api_keys) section.

### API Authorization

By default, no authorization is required. Basic authorization can be enabled with environment variables. In the `~/.openbb_platform` folder, next to the `user_settings.json`, create a new file, `.env`, if it does not yet exist. Set your Basic Auth credentials.

```.env
OPENBB_API_AUTH="True"
OPENBB_API_USERNAME="my_email"
OPENBB_API_PASSWORD="my_password"
```

The application will expect a header that contains username and password in the form of `Basic <username:password>`, where "username:password" is encoded in Base64. Pass this in every request to the API inside the headers "Authorization" field.

Here is an example of calling the API that has Basic Authorization enabled from python.

```python
import base64
import requests

msg = "some_user:some_pass"
msg_bytes = msg.encode('ascii')
base64_bytes = base64.b64encode(msg_bytes)
base64_msg = base64_bytes.decode('ascii')


symbol="SPY"
url = f"http://127.0.0.1:8000/api/v1/equity/price/quote?provider=intrinio&symbol={symbol}&source=intrinio_mx"
headers = {"accept": "application/json", "Authorization": f"Basic {base64_msg}"}

response = requests.get(url=url, headers=headers)

response.json()
```

### Advanced API Settings

:::info
See [System Settings](/platform/settings/system_settings) for details on configuring settings in `system_settings.json`
:::

When deploying the API to the public internet, it's crucial to configure it in a way you ensure the application functions correctly and securely. Two critical aspects to consider are Cross-Origin Resource Sharing (CORS) and the configuration of the "servers" list.

The configuration for these settings is managed through the `system_settings.json` file, which should be located in the same directory as your `user_settings.json`. This JSON file allows you to specify various settings that affect the behavior of the API. Here's an example structure of the `system_settings.json` file:

```json
{
  "api_settings": {
    "version": "1",
    "title": "OpenBB Platform API",
    "description": "This is the OpenBB Platform API.",
    "terms_of_service": "http://example.com/terms/",
    "contact_name": "OpenBB Team",
    "contact_url": "https://openbb.co",
    "contact_email": "hello@openbb.co",
    "license_name": "AGPLv3",
    "license_url": "https://github.com/OpenBB-finance/OpenBB/blob/develop/LICENSE",
    "servers": [
      {
        "url": "",
        "description": "Local OpenBB development server"
      }
    ],
    "cors": {
      "allow_origins": ["*"],
      "allow_methods": ["*"],
      "allow_headers": ["*"]
    },
    "prefix": "/api/v1"
  }
}
```

### CORS Configuration

The cors section within the api_settings is particularly important for web applications. It defines the rules for which external domains are allowed to access your API.

In the example above, the settings are permissive ("\*" for origins, methods, and headers), which means any external domain can request resources from your API. This setting might be suitable for development, but when deploying to public internet, you should specify the exact domains, methods, and headers to tighten security.

### Servers List

The servers array is used to specify the different environments where your API can be accessed.

In the example, there is only one server defined, which is the local development server. For deployment to public internet, you would add an entry for the public server URL and any other environments where your API is accessible.
