"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83634],{7535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"workspace/developers/agents-integration","title":"Agents Integration","description":"How to integrate your own AI agent service with OpenBB Workspace","source":"@site/content/workspace/developers/agents-integration.md","sourceDirName":"workspace/developers","slug":"/workspace/developers/agents-integration","permalink":"/workspace/developers/agents-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/agents-integration.md","tags":[],"version":"current","lastUpdatedBy":"minhhoang1023","lastUpdatedAt":1761019357000,"sidebarPosition":6,"frontMatter":{"title":"Agents Integration","sidebar_position":6,"description":"How to integrate your own AI agent service with OpenBB Workspace","keywords":["AI","Agents","Integration","SSE","agents.json","QueryRequest"]},"sidebar":"tutorialSidebar","previous":{"title":"Apps","permalink":"/workspace/developers/apps/"},"next":{"title":"OpenBB AI SDK","permalink":"/workspace/developers/openbb-ai-sdk"}}');var a=t(74848),r=t(28453),o=t(39068);const i={title:"Agents Integration",sidebar_position:6,description:"How to integrate your own AI agent service with OpenBB Workspace",keywords:["AI","Agents","Integration","SSE","agents.json","QueryRequest"]},c=void 0,p={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Adding an Agent in Workspace",id:"adding-an-agent-in-workspace",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.A,{title:"Agents Integration | OpenBB Workspace Docs"}),"\n",(0,a.jsx)(n.p,{children:"Integrate your own AI agent service with OpenBB Workspace using a simple HTTP contract. Your service accepts POST requests, streams responses back to Workspace and can access dashboard data when enabled."}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"/agents.json"}),": the metadata endpoint. Returns agent metadata and capabilities (name, description, image, URL of the query endpoint, features that the agent implements)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"/query"}),": the query endpoint. Receives a ",(0,a.jsx)(n.code,{children:"QueryRequest"})," and streams responses via Server\u2011Sent Events (SSE)."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Recommended stack: FastAPI with ",(0,a.jsx)(n.code,{children:"EventSourceResponse"})," from ",(0,a.jsx)(n.code,{children:"sse_starlette"})," and OpenBB AI SDK (",(0,a.jsx)(n.code,{children:"openbb-ai"}),"), although any framework that supports streaming SSEs in response to a POST request should work."]}),"\n",(0,a.jsxs)(n.p,{children:["See this repository to ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb",children:"get started"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"adding-an-agent-in-workspace",children:"Adding an Agent in Workspace"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Deploy your service (locally or remote)."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"In Workspace, click on the copilot and on the plus or pencil icon."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"400",alt:"No tab no param primary",src:"https://openbb-cms.directus.app/assets/412540b0-ef86-4285-8303-b9faf83bdc66.png"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Enter your base URL; Workspace fetches ",(0,a.jsx)(n.code,{children:"/agents.json"})," and uses ",(0,a.jsx)(n.code,{children:"/query"})," for conversations."]}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"No tab no param primary",src:"https://openbb-cms.directus.app/assets/ce3bebd7-98cf-4598-9d6c-68a2ecc1ba1c.png"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Ensure CORS settings are correct and SSE are configured on your service."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Simplistic example that allows users to communicate with an agent that can optimize the user prompt. The code is open source ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/20-financial-prompt-optimizer",children:"and available here"}),"."]}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"No tab no param primary",src:"https://openbb-cms.directus.app/assets/d2eaa645-eb6e-4411-b9d1-74b70409483a.png"}),"\n",(0,a.jsx)(n.p,{children:"This agent does nothing else - it doesn't parse data added to context, doesn't pass data in the dashboard, doesn't share step-by-step reasoning or citations, doesn't create artifacts, etc. We will dive on each of these features in the AI features tab."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import AsyncGenerator\nimport openai\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\nfrom sse_starlette.sse import EventSourceResponse\n\nfrom openbb_ai.models import MessageChunkSSE, QueryRequest\nfrom openbb_ai import message_chunk\n\nfrom openai.types.chat import (\n    ChatCompletionMessageParam,\n    ChatCompletionUserMessageParam,\n    ChatCompletionAssistantMessageParam,\n    ChatCompletionSystemMessageParam,\n)\n\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n\n@app.get("/agents.json")\ndef get_copilot_description():\n    """Agent descriptor for the OpenBB Workspace."""\n    return JSONResponse(\n        content={\n            "financial_prompt_optimizer": {\n                "name": "Financial Prompt Optimizer",\n                "description": "Optimizes a user\'s prompt for finance: clearer, more specific, and actionable.",\n                "image": "https://github.com/OpenBB-finance/copilot-for-terminal-pro/assets/14093308/7da2a512-93b9-478d-90bc-b8c3dd0cabcf",\n                "endpoints": {"query": "http://localhost:7777/v1/query"},\n                "features": {\n                    "streaming": True,\n                    "widget-dashboard-select": False,\n                    "widget-dashboard-search": False,\n                },\n            }\n        }\n    )\n\n\n@app.post("/v1/query")\nasync def query(request: QueryRequest) -> EventSourceResponse:\n    """Stream a concise optimized prompt and rationale."""\n\n    openai_messages: list[ChatCompletionMessageParam] = [\n        ChatCompletionSystemMessageParam(\n            role="system",\n            content=(\n                "You are a concise Financial Prompt Optimizer.\\n"\n                "Rewrite the user\'s prompt to be clearer, more specific, and immediately actionable for financial analysis.\\n"\n                "Always return exactly the improved prompt:\\n"\n                "Optimized Prompt: <detailed improved prompt with step-by-step>\\n"\n            ),\n        )\n    ]\n\n    for message in request.messages:\n        if message.role == "human":\n            openai_messages.append(\n                ChatCompletionUserMessageParam(role="user", content=message.content)\n            )\n        elif message.role == "ai" and isinstance(message.content, str):\n            openai_messages.append(\n                ChatCompletionAssistantMessageParam(\n                    role="assistant", content=message.content\n                )\n            )\n\n    async def execution_loop() -> AsyncGenerator[MessageChunkSSE, None]:\n        client = openai.AsyncOpenAI()\n        async for event in await client.chat.completions.create(\n            model="gpt-4o",\n            messages=openai_messages,\n            stream=True,\n        ):\n            if chunk := event.choices[0].delta.content:\n                yield message_chunk(chunk)\n\n    return EventSourceResponse(\n        content=(\n            event.model_dump(exclude_none=True) async for event in execution_loop()\n        ),\n        media_type="text/event-stream",\n    )\n\n\nif __name__ == "__main__":\n    import uvicorn\n\n    uvicorn.run("main:app", host="0.0.0.0", port=7777, reload=True)\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var s=t(27143),a=t(74848);function r(e){let{title:n}=e;return(0,a.jsx)(s.A,{children:(0,a.jsx)("title",{children:n})})}}}]);