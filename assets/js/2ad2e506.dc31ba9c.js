"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91234],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(96540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},36550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"python/developer/standardization","title":"Standardization","description":"Learn about standardization techniques for consistent inputs and outputs across the OpenBB Python Package.","source":"@site/content/python/developer/standardization.mdx","sourceDirName":"python/developer","slug":"/python/developer/standardization","permalink":"/python/developer/standardization","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/standardization.mdx","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1761197956000,"sidebarPosition":2,"frontMatter":{"title":"Standardization","sidebar_position":2,"description":"Learn about standardization techniques for consistent inputs and outputs across the OpenBB Python Package.","keywords":["ODP","OpenBB Platform","Python","REST API","Data","Standardization","ETL","Extension","openbb-core","Provider","Architecture"]},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/python/developer/architecture_overview"},"next":{"title":"Introduction","permalink":"/python/developer/extension_types/"}}');var a=t(74848),o=t(28453),i=t(39068);const s={title:"Standardization",sidebar_position:2,description:"Learn about standardization techniques for consistent inputs and outputs across the OpenBB Python Package.",keywords:["ODP","OpenBB Platform","Python","REST API","Data","Standardization","ETL","Extension","openbb-core","Provider","Architecture"]},d=void 0,c={},l=[];function h(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.A,{title:"Standardization - Developer | OpenBB Docs"}),"\n",(0,a.jsx)(n.p,{children:"The Standardization Framework is a set of tools and guidelines that enable the user to query and obtain data in a consistent way across multiple providers."}),"\n",(0,a.jsxs)(n.p,{children:["Provider models can inherit from an already defined ",(0,a.jsx)(n.a,{href:"/python/data_models",children:"standard"})," model.\nThe standard models are also the metamodel names defined in the Router's ",(0,a.jsx)(n.a,{href:"/python/developer/extension_types/router",children:"function definition"}),",\nand the Provider's ",(0,a.jsx)(n.a,{href:"/python/developer/extension_types/provider",children:(0,a.jsx)(n.code,{children:"fetcher_dict"})})]}),"\n",(0,a.jsx)(n.p,{children:"Standardizing provider query parameters and response data enhances the user experience by overcoming things like:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Transparently defined schemas for the data and query parameters."}),"\n",(0,a.jsx)(n.li,{children:"Outputs from multiple sources are comparable with each other and easily interchanged."}),"\n",(0,a.jsxs)(n.li,{children:["Consistent query parameters across all data sources for a function, or type of function.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"symbol"})," instead of ",(0,a.jsx)(n.code,{children:"ticker"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Output data that has conformed types, is validated, and will be JSON serializable.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"NaN"}),", ",(0,a.jsx)(n.code,{children:"NaT"}),", ",(0,a.jsx)(n.code,{children:'"None"'}),", empty strings, should be ",(0,a.jsx)(n.code,{children:"NoneType"})," (null)."]}),"\n",(0,a.jsx)(n.li,{children:"Percent values should be represented as decimal points."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Parameter and fields are always ",(0,a.jsx)(n.code,{children:"lower_snake_case"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The standard models ",(0,a.jsx)(n.a,{href:"/python/data_models",children:"here"})," are the contents of the repository code - ",(0,a.jsx)(n.code,{children:"/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/"})," ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/OpenBB/tree/main/openbb_platform/core/openbb_core/provider/standard_models",children:"directory"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Every standard model consists of two classes, with each being a Pydantic model."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/query_params.py",children:(0,a.jsx)(n.code,{children:"QueryParams"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/data.py",children:(0,a.jsx)(n.code,{children:"Data"})})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Any parameter or field can be assigned a custom ",(0,a.jsx)(n.code,{children:"field_validator"}),", or the entire model can be passed through a ",(0,a.jsx)(n.code,{children:"model_validator"})," on creation.\nSee the page on ",(0,a.jsx)(n.a,{href:"/python/developer/how-to/validators",children:"validators"})," for examples."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Function signatures prioritize the standard models, provider-specific implementations become ",(0,a.jsx)(n.code,{children:"extra_params"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Field aliases should be implemented at the model level - i.e., use ",(0,a.jsx)(n.code,{children:'__alias_dict__ = {"field": "mapped_field"}'})]}),"\n",(0,a.jsxs)(n.li,{children:["Similarly, ",(0,a.jsx)(n.code,{children:"json_schema_extra"}),", should be applied at the model level, ",(0,a.jsx)(n.code,{children:"__json_schema_extra__"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"CamelCase to snake_case is handled automatically."}),"\n"]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},39068:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(27143),a=t(74848);function o(e){let{title:n}=e;return(0,a.jsx)(r.A,{children:(0,a.jsx)("title",{children:n})})}}}]);