"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12884],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var o=t(27143),s=t(74848);function i(e){let{title:n}=e;return(0,s.jsx)(o.A,{children:(0,s.jsx)("title",{children:n})})}},73236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"python/developer/extension_types/obbject","title":"OBBject Extensions","description":"This page provides information about how to write extensions for the OBBject class and Python interface response object.","source":"@site/content/python/developer/extension_types/obbject.md","sourceDirName":"python/developer/extension_types","slug":"/python/developer/extension_types/obbject","permalink":"/python/developer/extension_types/obbject","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/extension_types/obbject.md","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1761133924000,"sidebarPosition":4,"frontMatter":{"title":"OBBject Extensions","sidebar_position":4,"description":"This page provides information about how to write extensions for the OBBject class and Python interface response object.","keywords":["OBBject","Python","Development","OpenBB Platform","extensions","obbject extension","accessor","decorator","how-to"]},"sidebar":"tutorialSidebar","previous":{"title":"Router Extensions","permalink":"/python/developer/extension_types/router"},"next":{"title":"How-To","permalink":"/python/developer/how-to/"}}');var s=t(74848),i=t(28453),r=t(39068);const l={title:"OBBject Extensions",sidebar_position:4,description:"This page provides information about how to write extensions for the OBBject class and Python interface response object.",keywords:["OBBject","Python","Development","OpenBB Platform","extensions","obbject extension","accessor","decorator","how-to"]},c=void 0,a={},p=[{value:"Folder structure",id:"folder-structure",level:2},{value:"TOML File",id:"toml-file",level:3},{value:"Writing the Extension",id:"writing-the-extension",level:3},{value:"Install Extension",id:"install-extension",level:2},{value:"Use Extension",id:"use-extension",level:2},{value:"Callable Accessor",id:"callable-accessor",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.A,{title:"Build OBBject Extensions - Developer | OpenBB Docs"}),"\n",(0,s.jsxs)(n.p,{children:["OpenBB provides some basic methods for interacting with common data structures that will be seen in the results attribute of the ",(0,s.jsx)(n.a,{href:"/python/basic_usage/response_model",children:(0,s.jsx)(n.code,{children:"OBBject"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If you are working with custom data, you may also want specific methods for interacting with the data, post-request."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"openbb-core"})," package makes the ",(0,s.jsx)(n.code,{children:"OBBject"})," class extendable, similar to extensions and accessors for Pandas.\nIt relies on plugins through the Poetry dependency management package."]}),"\n",(0,s.jsx)(n.p,{children:"This page will go through the steps for developing a simple response object extension."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This type of extension is intended for use with the Python Interface."})}),"\n",(0,s.jsx)(n.h2,{id:"folder-structure",children:"Folder structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"obbject_example\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 openbb_empty_obbject\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 poetry.lock\n\u2514\u2500\u2500 pyproject.toml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"README.md"})," file can be completely empty, it just needs to exist."]}),"\n",(0,s.jsxs)(n.p,{children:["Extension code will go directly in the ",(0,s.jsx)(n.code,{children:"__init__.py"})," file."]}),"\n",(0,s.jsx)(n.h3,{id:"toml-file",children:"TOML File"}),"\n",(0,s.jsx)(n.p,{children:"The entry point for the extension is specified as a Poetry plugin, near the bottom of the file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."openbb_obbject_extension"]\nexample = "openbb_empty_obbject:ext"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A complete ",(0,s.jsx)(n.code,{children:"pyproject.toml"})," looks something like:"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{mdxType:"summary",children:[(0,s.jsx)(n.code,{children:"pyproject.toml"})," "]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[tool.poetry]\nname = "openbb-empty-obbject"\nversion = "0.0.0"\ndescription = "An empty OBBject extension"\nauthors = ["Hello <hello@world.com>"]\nreadme = "README.md"\npackages = [{ include = "openbb_empty_obbject" }]\n\n[tool.poetry.dependencies]\npython = "^3.10,<3.14"\nopenbb-core = "*"\n\n[build-system]\nrequires = ["poetry-core"]\nbuild-backend = "poetry.core.masonry.api"\n\n[tool.poetry.plugins."openbb_obbject_extension"]\nempty = "openbb_empty_obbject:ext"\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"writing-the-extension",children:"Writing the Extension"}),"\n",(0,s.jsxs)(n.p,{children:["In this example the extension code all lives inside ",(0,s.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'When installed, every response object from the Python Interface will have the attribute defined by "name".'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'"""Empty OBBject extension."""\n\nfrom openbb_core.app.model.extension import Extension\n\next = Extension(name="empty")\n\n@ext.obbject_accessor\nclass Empty:\n    """An Empty OBBject extension."""\n    # `obbject` is the response object that will be passed into the extension.\n    # Note: this is not a typo.\n    def __init__(self, obbject):\n        """Creates an instance of the Empty OBBject extension."""\n        self._obbject = obbject\n\n    def hello(self):\n        """Print a greeting message."""\n        print(f"Hello from the Empty OBBject extension!\\n\\nOBBject Results: {self._obbject.results}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"install-extension",children:"Install Extension"}),"\n",(0,s.jsx)(n.p,{children:"With the code structure in place, install the extension into the desired environment."}),"\n",(0,s.jsxs)(n.p,{children:["Navigate into the folder where the ",(0,s.jsx)(n.code,{children:"pyproject.toml"})," file is, open a terminal, and enter:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"pip install -e .\nopenbb-build\n"})}),"\n",(0,s.jsx)(n.p,{children:"If there are no provider or router extensions installed, the console will still display the error message."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"Failed to import extensions. Are any installed?\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This means there are no endpoints to run - i.e, ",(0,s.jsx)(n.code,{children:"obb.equity.price.historical()"}),". The extension is applied only the output of the endpoints. You can try this example code in conjunction with the ",(0,s.jsx)(n.a,{href:"/python/developer/extension_types/router",children:"router"})," extension example."]}),"\n",(0,s.jsx)(n.h2,{id:"use-extension",children:"Use Extension"}),"\n",(0,s.jsxs)(n.p,{children:["The router example contains an endpoint, ",(0,s.jsx)(n.code,{children:"obb.empty.hello()"}),", which returns an ",(0,s.jsx)(n.code,{children:"OBBject"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This response will have the ",(0,s.jsx)(n.code,{children:"empty"})," accessor, with the function defined above, in ",(0,s.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:">>> from openbb import obb\n>>> output = obb.empty.hello()\n>>> output\n\nOBBject\n\nid: 068ee9a9-7853-7176-8000-567f982f83ad\nresults: Hello from the Empty Router extension!\nprovider: None\nwarnings: None\nchart: None\nextra: {'metadata': {'arguments': {'provider_choices': {}, 'standard_params': {}, '...\n\n>>> output.empty.hello()\n\nHello from the Empty OBBject extension!\n\nOBBject Results: Hello from the Empty Router extension!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"callable-accessor",children:"Callable Accessor"}),"\n",(0,s.jsxs)(n.p,{children:["The namespace represents any callable, not just a class. Include ",(0,s.jsx)(n.code,{children:"obbject"})," as the first positional argument for the function being decorated."]}),"\n",(0,s.jsxs)(n.p,{children:["Replace the ",(0,s.jsx)(n.code,{children:"__init__.py"})," code with the snippet below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'"""Empty OBBject extension."""\n\nfrom openbb_core.app.model.extension import Extension\n\next = Extension(name="empty")\n\n\n@ext.obbject_accessor\ndef hello(obbject):\n    """Say hello."""\n    return f"Hello from empty OBBject extension! You have {len(obbject.results)} items."\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"hello"})," function now runs directly from ",(0,s.jsx)(n.code,{children:"output.empty"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:">>> from openbb import obb\n>>> output = obb.empty.hello()\n>>> output.empty\n'Hello from empty OBBject extension! You have 38 items.'\n>>> len(output.results)\n38\n>>> output.results\n'Hello from the Empty Router extension!'\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);