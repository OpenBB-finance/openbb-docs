"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5311],{22738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"platform/developer_guide/standardization","title":"Standardization","description":"Learn about the OpenBB Platform, an open-source solution built by the community. Understand its use via Python interface and REST API, and acquaint yourself with how to build a custom extension or contribute directly to the platform","source":"@site/content/platform/developer_guide/standardization.mdx","sourceDirName":"platform/developer_guide","slug":"/platform/developer_guide/standardization","permalink":"/platform/developer_guide/standardization","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/platform/developer_guide/standardization.mdx","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1746153989000,"sidebarPosition":2,"frontMatter":{"title":"Standardization","sidebar_position":2,"description":"Learn about the OpenBB Platform, an open-source solution built by the community. Understand its use via Python interface and REST API, and acquaint yourself with how to build a custom extension or contribute directly to the platform","keywords":["OpenBB Platform","Open source","Python interface","REST API","Data integration","Data standardization","OpenBB extensions","openbb-core","Python package","High-Level Architecture","Custom extension","Contribution"]},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/platform/developer_guide/architecture_overview"},"next":{"title":"Disabling Output Validation","permalink":"/platform/developer_guide/disabling_output_validation"}}');var r=n(74848),o=n(28453),i=n(39068);const d={title:"Standardization",sidebar_position:2,description:"Learn about the OpenBB Platform, an open-source solution built by the community. Understand its use via Python interface and REST API, and acquaint yourself with how to build a custom extension or contribute directly to the platform",keywords:["OpenBB Platform","Open source","Python interface","REST API","Data integration","Data standardization","OpenBB extensions","openbb-core","Python package","High-Level Architecture","Custom extension","Contribution"]},s=void 0,l={},c=[{value:"What Is The Standardization Framework?",id:"what-is-the-standardization-framework",level:2},{value:"What Is A Standard Model?",id:"what-is-a-standard-model",level:3},{value:"Caveats",id:"caveats",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.A,{title:"Standardization - Development | OpenBB Platform Docs"}),"\n",(0,r.jsx)(t.h2,{id:"what-is-the-standardization-framework",children:"What Is The Standardization Framework?"}),"\n",(0,r.jsx)(t.p,{children:"The Standardization Framework is a set of tools and guidelines that enable the user to query and obtain data in a consistent way across multiple providers."}),"\n",(0,r.jsxs)(t.p,{children:["Each provider data model should inherit from an already defined ",(0,r.jsx)(t.a,{href:"https://docs.openbb.co/platform/data_models",children:"standard"})," model. All standard models are created and maintained by the OpenBB team."]}),"\n",(0,r.jsx)(t.p,{children:"If a standard model needs to be created, please open a pull request and detail its use."}),"\n",(0,r.jsx)(t.p,{children:"Standardizing provider query parameters and response data enhances the user experience by overcoming things like:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Consistent query parameters across all data sources for a function, or type of function."}),"\n",(0,r.jsxs)(t.li,{children:["Output data that has conformed types, is validated, and will be JSON serializable.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"NaN"}),", ",(0,r.jsx)(t.code,{children:"NaT"}),", ",(0,r.jsx)(t.code,{children:'"None"'}),", empty strings, are always returned as ",(0,r.jsx)(t.code,{children:"NoneType"})," (null)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"Transparently defined schemas for the data and query parameters."}),"\n",(0,r.jsx)(t.li,{children:"Outputs from multiple sources are comparable with each other and easily interchanged."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The standard models are all defined in the ",(0,r.jsx)(t.code,{children:"/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/"})," ",(0,r.jsx)(t.a,{href:"https://github.com/OpenBB-finance/OpenBB/tree/main/openbb_platform/core/openbb_core/provider/standard_models",children:"directory"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"what-is-a-standard-model",children:"What Is A Standard Model?"}),"\n",(0,r.jsx)(t.p,{children:"Every standard model consists of two classes, with each being a Pydantic model."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/query_params.py",children:(0,r.jsx)(t.code,{children:"QueryParams"})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/data.py",children:(0,r.jsx)(t.code,{children:"Data"})})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Any parameter or field can be assigned a custom ",(0,r.jsx)(t.code,{children:"field_validator"}),", or the entire model can be passed through a ",(0,r.jsx)(t.code,{children:"model_validator"})," on creation."]}),"\n",(0,r.jsx)(t.h3,{id:"caveats",children:"Caveats"}),"\n",(0,r.jsx)(t.p,{children:"The standardization framework is a very powerful tool, but it has some caveats that you should be aware of:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["We standardize fields and parameters that are shared between multiple providers.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"In some cases, it can be undesirable to define common items in the standard model. In this event, we still want consistent names and descriptions."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["When mapping the column names from a provider-specific model to the standard model, the CamelCase to snake_case conversion is done automatically. If the column names are not the same, you'll need to manually map them.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["e.g., ",(0,r.jsx)(t.code,{children:'__alias_dict__ = {"o": "open"}'})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"The standard models are created and maintained by the OpenBB team. If you want to add or modify a field within a standard model, you'll need to open a PR to the OpenBB Platform."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(96540);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}},39068:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var a=n(27143),r=n(74848);function o(e){let{title:t}=e;return(0,r.jsx)(a.A,{children:(0,r.jsx)("title",{children:t})})}}}]);