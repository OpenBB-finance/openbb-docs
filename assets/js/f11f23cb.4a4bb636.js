"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82927],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},d=i.createContext(a);function s(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(d.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>d});t(96540);var i=t(27143),a=t(74848);function d(e){let{title:n}=e;return(0,a.jsx)(i.A,{children:(0,a.jsx)("title",{children:n})})}},67927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"workspace/data-widgets/widget-types","title":"Widget Types","description":"Comprehensive guide to different widget types available in OpenBB Workspace including Markdown, Metric, Table, PDF, and Multi-PDF viewers","source":"@site/content/workspace/data-widgets/widget-types.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/widget-types","permalink":"/workspace/data-widgets/widget-types","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/widget-types.md","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1746153989000,"sidebarPosition":12,"frontMatter":{"title":"Widget Types","sidebar_position":12,"description":"Comprehensive guide to different widget types available in OpenBB Workspace including Markdown, Metric, Table, PDF, and Multi-PDF viewers","keywords":["widgets","markdown","metrics","tables","pdf","data visualization","workspace","grid system","base64","file viewers"]},"sidebar":"tutorialSidebar","previous":{"title":"Data Widgets","permalink":"/workspace/data-widgets/"},"next":{"title":"AgGrid Table Charts","permalink":"/workspace/data-widgets/aggrid-table-charts"}}');var a=t(74848),d=t(28453),s=t(39068);const r={title:"Widget Types",sidebar_position:12,description:"Comprehensive guide to different widget types available in OpenBB Workspace including Markdown, Metric, Table, PDF, and Multi-PDF viewers",keywords:["widgets","markdown","metrics","tables","pdf","data visualization","workspace","grid system","base64","file viewers"]},o=void 0,l={},p=[{value:"Markdown Widget",id:"markdown-widget",level:2},{value:"Metric Widget",id:"metric-widget",level:2},{value:"Table Widget",id:"table-widget",level:2},{value:"Table Widget from API",id:"table-widget-from-api",level:2},{value:"Markdown Widget with Local Image",id:"markdown-widget-with-local-image",level:2},{value:"Markdown Widget with Image from URL",id:"markdown-widget-with-image-from-url",level:2},{value:"PDF Widget with Base64",id:"pdf-widget-with-base64",level:2},{value:"PDF Widget with URL",id:"pdf-widget-with-url",level:2},{value:"Multi PDF Viewer with Base64",id:"multi-pdf-viewer-with-base64",level:2},{value:"Multi PDF Viewer with URL",id:"multi-pdf-viewer-with-url",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.A,{title:"Widget Types | OpenBB Workspace Docs"}),"\n",(0,a.jsx)(n.h2,{id:"markdown-widget",children:"Markdown Widget"}),"\n",(0,a.jsx)(n.p,{children:"A simple widget that displays markdown content. The gridData parameter specifies the widget's size in the OpenBB Workspace grid system."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Markdown Widget Example",src:"https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Markdown Widget",\n    "description": "A markdown widget",\n    "type": "markdown",\n    "endpoint": "markdown_widget",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/markdown_widget")\ndef markdown_widget():\n    """Returns a markdown widget"""\n    return "# Markdown Widget"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"metric-widget",children:"Metric Widget"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays key metrics with labels, values, and delta changes. Useful for showing important statistics and their trends."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Metric Widget Example",src:"https://openbb-cms.directus.app/assets/ba37bbbb-371a-40e8-a7e1-e48edcc6c0c8.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Metric Widget",\n    "description": "A metric widget",\n    "endpoint": "metric_widget",\n    "gridData": {\n      "w": 5,\n      "h": 5\n    },\n    "type": "metric"\n})\n@app.get("/metric_widget")\ndef metric_widget():\n    data = [\n        {\n            "label": "Total Users",\n            "value": "1,234,567",\n            "delta": "12.5"\n        },\n        {\n            "label": "Active Sessions",\n            "value": "45,678",\n            "delta": "-2.3"\n        },\n        {\n            "label": "Revenue (USD)",\n            "value": "$89,432",\n            "delta": "8.9"\n        },\n        {\n            "label": "Conversion Rate",\n            "value": "3.2%",\n            "delta": "0.0"\n        },\n        {\n            "label": "Avg. Session Duration",\n            "value": "4m 32s",\n            "delta": "0.5"\n        }\n    ]\n\n    return JSONResponse(content=data)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"table-widget",children:"Table Widget"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays data in a tabular format. This example shows how to create a table with cryptocurrency data including TVL and price changes."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget Example",src:"https://openbb-cms.directus.app/assets/96f31526-87c1-40f3-8ecb-6cc869d2e910.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget",\n    "description": "A table widget",\n    "type": "table",\n    "endpoint": "table_widget",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/table_widget")\ndef table_widget():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": "Ethereum",\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": "Bitcoin",\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": "Solana",\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,a.jsx)(n.h2,{id:"table-widget-from-api",children:"Table Widget from API"}),"\n",(0,a.jsx)(n.p,{children:"A widget that fetches and displays data from an external API. This example demonstrates integration with the DeFi Llama API to show chain TVL data."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget from API Example",src:"https://openbb-cms.directus.app/assets/ab850520-843d-4fe2-b95c-c8346b41ac93.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget from API Endpoint",\n    "description": "A table widget from an API endpoint",\n    "type": "table",\n    "endpoint": "table_widget_from_api_endpoint",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/table_widget_from_api_endpoint")\ndef table_widget_from_api_endpoint():\n    """Get current TVL of all chains using Defi LLama"""\n    response = requests.get("https://api.llama.fi/v2/chains")\n\n    if response.status_code == 200:\n        return response.json()\n\n    print(f"Request error {response.status_code}: {response.text}")\n    raise HTTPException(\n        status_code=response.status_code,\n        detail=response.text\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"markdown-widget-with-local-image",children:"Markdown Widget with Local Image"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays markdown content with an embedded local image. The image is converted to base64 for display."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Markdown Widget with Local Image Example",src:"https://openbb-cms.directus.app/assets/f2847732-a01e-4146-8095-5dc389c98c7a.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Markdown Widget with Local Image",\n    "description": "A markdown widget with a local image",\n    "type": "markdown",\n    "endpoint": "markdown_widget_with_local_image",\n    "gridData": {"w": 20, "h": 20},\n})\n@app.get("/markdown_widget_with_local_image")\ndef markdown_widget_with_local_image():\n    """Returns a markdown widget with a local image"""\n    try:\n        with open("img.png", "rb") as image_file:\n            image_base64 = base64.b64encode(image_file.read()).decode(\'utf-8\')\n            return f"![Local Image](data:image/png;base64,{image_base64})"\n    except FileNotFoundError:\n        raise HTTPException(\n            status_code=500,\n            detail="Image file not found"\n        ) from e\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f"Error reading image: {str(e)}"\n        ) from e\n'})}),"\n",(0,a.jsx)(n.h2,{id:"markdown-widget-with-image-from-url",children:"Markdown Widget with Image from URL"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays markdown content with an image fetched from a URL. The image is converted to base64 for secure display."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Markdown Widget with Image from URL Example",src:"https://openbb-cms.directus.app/assets/bf26f507-ec62-45d8-bec2-531fe75624e4.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Markdown Widget with Image from URL",\n    "description": "A markdown widget with an image from a URL",\n    "type": "markdown",\n    "endpoint": "markdown_widget_with_image_from_url",\n    "gridData": {"w": 20, "h": 20},\n})\n@app.get("/markdown_widget_with_image_from_url")\ndef markdown_widget_with_image_from_url():\n    """Returns a markdown widget with an image from a URL"""\n    image_url = "https://api.star-history.com/svg?repos=openbb-finance/OpenBB&type=Date&theme=dark"\n    \n    try:\n        response = requests.get(image_url, timeout=10)\n        response.raise_for_status()\n        \n        content_type = response.headers.get(\'content-type\', \'\')\n        if not content_type.startswith(\'image/\'):\n            raise HTTPException(\n                status_code=500,\n                detail=f"URL did not return an image. Content-Type: {content_type}"\n            )\n\n        image_base64 = base64.b64encode(response.content).decode(\'utf-8\')\n        return f"![OpenBB Logo](data:{content_type};base64,{image_base64})"\n        \n    except requests.RequestException as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f"Failed to fetch image: {str(e)}"\n        ) from e\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f"Error processing image: {str(e)}"\n        ) from e\n'})}),"\n",(0,a.jsx)(n.h2,{id:"pdf-widget-with-base64",children:"PDF Widget with Base64"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays a PDF file using base64 encoding. This method is useful for displaying PDFs directly in the workspace."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with Base64 Example",src:"https://openbb-cms.directus.app/assets/9e202a65-eb71-4e43-b111-5f5c79dfa6dc.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with Base64",\n    "description": "Display a PDF file with base64 encoding",\n    "endpoint": "pdf_widget_base64",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n    "type": "pdf",\n})\n@app.get("/pdf_widget_base64")\ndef get_pdf_widget_base64():\n    """Serve a file through base64 encoding."""\n    try:\n        name = "sample.pdf"\n        with open(ROOT_PATH / name, "rb") as file:\n            file_data = file.read()\n            encoded_data = base64.b64encode(file_data)\n            content = encoded_data.decode("utf-8")\n    \n    except FileNotFoundError as exc:\n        raise HTTPException(\n            status_code=404,\n            detail="File not found"\n        ) from exc\n    \n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": name,\n            },\n            "content": content,\n        },\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"pdf-widget-with-url",children:"PDF Widget with URL"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays a PDF file using a direct URL. This method is more efficient for larger PDFs as it doesn't require base64 encoding."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with URL Example",src:"https://openbb-cms.directus.app/assets/7d4fc0e6-f458-49a1-9be9-161d2bec1886.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with URL",\n    "description": "Display a PDF file",\n    "type": "pdf", \n    "endpoint": "pdf_widget_url",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n})\n@app.get("/pdf_widget_url")\ndef get_pdf_widget_url():\n    """Serve a file through URL."""\n    file_reference = "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf"\n    if not file_reference:\n        raise HTTPException(status_code=404, detail="File not found")\n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": "Sample.pdf",\n            },\n            "url": file_reference,\n        },\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"multi-pdf-viewer-with-base64",children:"Multi PDF Viewer with Base64"}),"\n",(0,a.jsx)(n.p,{children:"A widget that allows viewing multiple PDF files using base64 encoding. Includes a file selector parameter for choosing which PDFs to display."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Multi PDF Viewer with Base64 Example",src:"https://openbb-cms.directus.app/assets/610ec2bc-2768-4d48-9f0b-0ad08a69b41e.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Multi PDF Viewer - Base64",\n    "description": "View multiple PDF files using base64 encoding",\n    "type": "multi_file_viewer",\n    "endpoint": "multi_pdf_base64",\n    "gridData": {\n        "w": 20,\n        "h": 10\n    },\n    "params": [\n        {\n            "paramName": "pdf_name",\n            "description": "PDF file to display",\n            "type": "endpoint",\n            "label": "PDF File",\n            "optionsEndpoint": "/get_pdf_options",\n            "show": False,\n            "value": ["Bitcoin Whitepaper"],\n            "multiSelect": True,\n            "roles": ["fileSelector"]\n        }\n    ]\n})\n@app.get("/multi_pdf_base64")\nasync def get_multi_pdf_base64(pdf_name: str):\n    """Get PDF content in base64 format"""\n    pdf = next((p for p in SAMPLE_PDFS if p["name"] == pdf_name), None)\n    if not pdf:\n        raise HTTPException(status_code=404, detail="PDF not found")\n\n    file_path = ROOT_PATH / pdf["location"]\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail="PDF file not found")\n\n    with open(file_path, "rb") as file:\n        base64_content = base64.b64encode(file.read()).decode("utf-8")\n\n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": f"{pdf[\'name\']}.pdf"\n            },\n            "content": base64_content,\n        },\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"multi-pdf-viewer-with-url",children:"Multi PDF Viewer with URL"}),"\n",(0,a.jsx)(n.p,{children:"A widget that allows viewing multiple PDF files using direct URLs. More efficient for larger PDFs as it doesn't require base64 encoding."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Multi PDF Viewer with URL Example",src:"https://openbb-cms.directus.app/assets/8a269267-acd3-4c4f-93cb-0b64c4a87eda.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Multi PDF Viewer - URL",\n    "description": "View multiple PDF files using URLs",\n    "type": "multi_file_viewer", \n    "endpoint": "multi_pdf_url",\n    "gridData": {\n        "w": 20,\n        "h": 10\n    },\n    "params": [\n        {\n            "paramName": "pdf_name",\n            "description": "PDF file to display",\n            "type": "endpoint",\n            "label": "PDF File",\n            "optionsEndpoint": "/get_pdf_options",\n            "value": ["Sample"],\n            "show": False,\n            "multiSelect": True,\n            "roles": ["fileSelector"]\n        }\n    ]\n})\n@app.get("/multi_pdf_url")\nasync def get_multi_pdf_url(pdf_name: str):\n    """Get PDF URL"""\n    pdf = next((p for p in SAMPLE_PDFS if p["name"] == pdf_name), None)\n    if not pdf:\n        raise HTTPException(status_code=404, detail="PDF not found")\n\n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {"data_type": "pdf", "filename": f"{pdf[\'name\']}.pdf"},\n            "url": pdf["url"],\n        },\n    )\n'})})]})}function g(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);