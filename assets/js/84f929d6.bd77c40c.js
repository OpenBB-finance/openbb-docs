"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13865],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},39068:(e,n,i)=>{i.d(n,{A:()=>s});i(96540);var r=i(27143),t=i(74848);function s(e){let{title:n}=e;return(0,t.jsx)(r.A,{children:(0,t.jsx)("title",{children:n})})}},50765:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"workspace/data-widgets/tradingview-charts","title":"TradingView Charts","description":"How to implement TradingView charts in OpenBB using UDF (Universal Data Feed)","source":"@site/content/workspace/data-widgets/tradingview-charts.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/tradingview-charts","permalink":"/workspace/data-widgets/tradingview-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/tradingview-charts.md","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1747833381000,"sidebarPosition":15,"frontMatter":{"title":"TradingView Charts","sidebar_position":15,"description":"How to implement TradingView charts in OpenBB using UDF (Universal Data Feed)","keywords":["tradingview","charts","visualization","UDF","data feed"]},"sidebar":"tutorialSidebar","previous":{"title":"Plotly Charts","permalink":"/workspace/data-widgets/plotly-charts"},"next":{"title":"Live Grid","permalink":"/workspace/data-widgets/live-grid"}}');var t=i(74848),s=i(28453),o=i(39068);const a={title:"TradingView Charts",sidebar_position:15,description:"How to implement TradingView charts in OpenBB using UDF (Universal Data Feed)",keywords:["tradingview","charts","visualization","UDF","data feed"]},d=void 0,l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required UDF Endpoints",id:"required-udf-endpoints",level:2},{value:"1. Configuration Endpoint (<code>/udf/config</code>)",id:"1-configuration-endpoint-udfconfig",level:3},{value:"2. Symbol Search Endpoint (<code>/udf/search</code>)",id:"2-symbol-search-endpoint-udfsearch",level:3},{value:"3. Symbol Info Endpoint (<code>/udf/symbols</code>)",id:"3-symbol-info-endpoint-udfsymbols",level:3},{value:"4. Historical Data Endpoint (<code>/udf/history</code>)",id:"4-historical-data-endpoint-udfhistory",level:3},{value:"5. Server Time Endpoint (<code>/udf/time</code>)",id:"5-server-time-endpoint-udftime",level:3},{value:"Widget Registration",id:"widget-registration",level:2},{value:"Data Format Requirements",id:"data-format-requirements",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example Implementation",id:"example-implementation",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.A,{title:"TradingView Charts | OpenBB Workspace Docs"}),"\n",(0,t.jsx)(n.p,{children:"This guide explains how to implement TradingView charts in OpenBB using TradingView's Universal Data Feed (UDF) protocol. The UDF protocol allows you to create custom data feeds for TradingView charts."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"FastAPI or similar web framework for implementing the UDF endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Data source for market data (OHLCV)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"required-udf-endpoints",children:"Required UDF Endpoints"}),"\n",(0,t.jsx)(n.p,{children:"To implement TradingView charts, you need to create the following UDF endpoints:"}),"\n",(0,t.jsxs)(n.h3,{id:"1-configuration-endpoint-udfconfig",children:["1. Configuration Endpoint (",(0,t.jsx)(n.code,{children:"/udf/config"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get("/udf/config")\nasync def get_config():\n    """UDF configuration endpoint"""\n    return {\n        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],\n        "supports_group_request": False,\n        "supports_marks": False,\n        "supports_search": True,\n        "supports_timescale_marks": False,\n        "supports_time": True,\n        "exchanges": [\n            {"value": "", "name": "All Exchanges", "desc": ""},\n            {"value": "NASDAQ", "name": "NASDAQ", "desc": "NASDAQ Stock Exchange"}\n        ],\n        "symbols_types": [\n            {"name": "All types", "value": ""},\n            {"name": "Stocks", "value": "stock"}\n        ]\n    }\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"2-symbol-search-endpoint-udfsearch",children:["2. Symbol Search Endpoint (",(0,t.jsx)(n.code,{children:"/udf/search"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get("/udf/search")\nasync def search_symbols(\n    query: str = Query("", description="Search query"),\n    limit: int = Query(30, description="Limit of results")\n):\n    """UDF symbol search endpoint"""\n    results = []\n    # Implement your symbol search logic here\n    return results\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"3-symbol-info-endpoint-udfsymbols",children:["3. Symbol Info Endpoint (",(0,t.jsx)(n.code,{children:"/udf/symbols"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get("/udf/symbols")\nasync def get_symbol_info(symbol: str = Query(..., description="Symbol to get info for")):\n    """UDF symbol info endpoint"""\n    return {\n        "name": symbol,\n        "description": "Symbol Description",\n        "type": "stock",\n        "exchange": "NASDAQ",\n        "pricescale": 100,\n        "minmov": 1,\n        "volume_precision": 0,\n        "has_volume": True,\n        "has_intraday": True,\n        "has_daily": True,\n        "has_weekly_and_monthly": True,\n        "supported_resolutions": ["1", "5", "15", "30", "60", "D", "W", "M"],\n        "session-regular": "0930-1600",\n        "timezone": "America/New_York"\n    }\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"4-historical-data-endpoint-udfhistory",children:["4. Historical Data Endpoint (",(0,t.jsx)(n.code,{children:"/udf/history"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get("/udf/history")\nasync def get_history(\n    symbol: str = Query(..., description="Symbol"),\n    resolution: str = Query(..., description="Resolution"),\n    from_time: int = Query(..., alias="from", description="From timestamp"),\n    to_time: int = Query(..., alias="to", description="To timestamp")\n):\n    """UDF historical data endpoint"""\n    # Implement your data fetching logic here\n    return {\n        "s": "ok",\n        "t": [timestamp1, timestamp2, ...],  # Time array\n        "o": [open1, open2, ...],  # Open prices array\n        "h": [high1, high2, ...],  # High prices array\n        "l": [low1, low2, ...],  # Low prices array\n        "c": [close1, close2, ...],  # Close prices array\n        "v": [volume1, volume2, ...]  # Volume array\n    }\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"5-server-time-endpoint-udftime",children:["5. Server Time Endpoint (",(0,t.jsx)(n.code,{children:"/udf/time"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get("/udf/time")\nasync def get_server_time():\n    """UDF server time endpoint"""\n    return int(datetime.now().timestamp())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"widget-registration",children:"Widget Registration"}),"\n",(0,t.jsx)(n.p,{children:"To register the TradingView chart widget in OpenBB:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "TradingView Chart",\n    "description": "Advanced charting with TradingView",\n    "category": "Finance",\n    "type": "advanced_charting",\n    "endpoint": "/udf",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n    "data": {\n        "defaultSymbol": "AAPL",\n        "updateFrequency": 60000,\n        "chartConfig": {\n            "upColor": "#26a69a",\n            "downColor": "#ef5350",\n            "borderUpColor": "#26a69a",\n            "borderDownColor": "#ef5350",\n            "wickUpColor": "#26a69a",\n            "wickDownColor": "#ef5350",\n            "volumeUpColor": "#26a69a",\n            "volumeDownColor": "#ef5350",\n            "showVolume": True\n        }\n    }\n})\ndef tradingview_chart():\n    """Dummy function for TradingView chart widget registration"""\n    pass\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-format-requirements",children:"Data Format Requirements"}),"\n",(0,t.jsx)(n.p,{children:"The historical data endpoint must return data in the following format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n    "s": "ok",  # Status: ok\n    "t": [timestamp1, timestamp2, ...],  # Time array (Unix timestamps)\n    "o": [open1, open2, ...],  # Open prices array\n    "h": [high1, high2, ...],  # High prices array\n    "l": [low1, low2, ...],  # Low prices array\n    "c": [close1, close2, ...],  # Close prices array\n    "v": [volume1, volume2, ...]  # Volume array\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling for all endpoints"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Validation"}),": Validate all input parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Implement caching for frequently accessed data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rate Limiting"}),": Add rate limiting to prevent abuse"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": Implement proper authentication and authorization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Optimize data fetching and processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Document all endpoints and their parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example of implementing the historical data endpoint with mock data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def generate_mock_price_data(symbol: str, from_time: int, to_time: int, resolution: str) -> dict:\n    """Generate mock OHLCV data for a symbol"""\n    resolution_minutes = {\n        "1": 1, "5": 5, "15": 15, "30": 30, "60": 60,\n        "D": 1440, "W": 10080, "M": 43200\n    }.get(resolution, 60)\n\n    current_time = from_time\n    timestamps = []\n    while current_time <= to_time:\n        timestamps.append(current_time)\n        current_time += resolution_minutes * 60\n\n    base_price = 100.0\n    prices = []\n    current_price = base_price\n\n    for _ in timestamps:\n        change = random.uniform(-2, 2)\n        current_price += change\n        current_price = max(current_price, 1.0)\n        prices.append(current_price)\n\n    opens = []\n    highs = []\n    lows = []\n    closes = []\n    volumes = []\n\n    for price in prices:\n        is_bullish = random.random() > 0.5\n        if is_bullish:\n            open_price = price * 0.99\n            close_price = price * 1.01\n        else:\n            open_price = price * 1.01\n            close_price = price * 0.99\n\n        high_price = max(open_price, close_price) * 1.02\n        low_price = min(open_price, close_price) * 0.98\n\n        opens.append(open_price)\n        highs.append(high_price)\n        lows.append(low_price)\n        closes.append(close_price)\n\n        volume = int(1000000 * (1 + random.uniform(-0.2, 0.2)))\n        volumes.append(volume)\n\n    return {\n        "s": "ok",\n        "t": timestamps,\n        "o": opens,\n        "h": highs,\n        "l": lows,\n        "c": closes,\n        "v": volumes\n    }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.tradingview.com/charting-library-docs/",children:"TradingView Charting Library Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.tradingview.com/charting-library-docs/latest/connecting_data/UDF",children:"UDF Protocol Documentation"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);