"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93053],{12696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"platform/developer_guide/data_provider","title":"Data Provider","description":"This guide outlines the process for adding a new data provider extension to the OpenBB Platform.","source":"@site/content/platform/developer_guide/data_provider.mdx","sourceDirName":"platform/developer_guide","slug":"/platform/developer_guide/data_provider","permalink":"/platform/developer_guide/data_provider","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/platform/developer_guide/data_provider.mdx","tags":[],"version":"current","lastUpdatedBy":"Theodore Aptekarev","lastUpdatedAt":1751380688000,"sidebarPosition":7,"frontMatter":{"title":"Data Provider","sidebar_position":7,"description":"This guide outlines the process for adding a new data provider extension to the OpenBB Platform.","keywords":["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","data","endpoint","existing","OpenBB extensions","OpenBB provider","standard model","provider model","how to","new","template"]},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/platform/developer_guide/architecture_overview"},"next":{"title":"Extensions","permalink":"/platform/developer_guide/extensions"}}');var i=t(74848),s=t(28453),o=t(39068);const a={title:"Data Provider",sidebar_position:7,description:"This guide outlines the process for adding a new data provider extension to the OpenBB Platform.",keywords:["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","data","endpoint","existing","OpenBB extensions","OpenBB provider","standard model","provider model","how to","new","template"]},d=void 0,l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Cookiecutter",id:"cookiecutter",level:3},{value:"Provider module",id:"provider-module",level:2},{value:"Rebuild python interface and assets",id:"rebuild-python-interface-and-assets",level:3},{value:"Dependencies",id:"dependencies",level:2},{value:"Standard Model",id:"standard-model",level:2},{value:"File Structure",id:"file-structure",level:3},{value:"Standard QueryParams",id:"standard-queryparams",level:3},{value:"Standard Data",id:"standard-data",level:3},{value:"Provider Model",id:"provider-model",level:2},{value:"File structure",id:"file-structure-1",level:3},{value:"Provider QueryParams",id:"provider-queryparams",level:3},{value:"Iheritance",id:"iheritance",level:4},{value:"One off",id:"one-off",level:4},{value:"Provider Data",id:"provider-data",level:3},{value:"Provider Fetcher",id:"provider-fetcher",level:3},{value:"Tests",id:"tests",level:2},{value:"Testing the Fetcher",id:"testing-the-fetcher",level:3},{value:"Records",id:"records",level:3}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{title:"Build New Provider Extension - How-To | OpenBB Platform Docs"}),"\n",(0,i.jsx)(n.p,{children:"This page will walk through adding a new data provider extension to the OpenBB Platform."}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"},children:(0,i.jsx)("img",{src:"https://openbb-cms.directus.app/assets/cc978d76-269b-4793-a0bf-fe892b757e89.png",alt:"Provider",width:"60%"})}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.p,{children:["An easy way to get started is to copy and paste something existing. In the OpenBB GitHub repository, provider extensions are located ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/OpenBB/tree/develop/openbb_platform/providers",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For convenience's sake, download this template ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip",children:"zip file"}),". It contains the basic folder structure and everything required to get started creating new data models."]}),"\n",(0,i.jsx)(n.p,{children:"For demonstration purposes, we'll assume this is from the perspective of somebody who will open a pull request and contribute the code to the OpenBB repository. The process, however, also applies to publishing directly via PyPI. Anyone can make an OpenBB extension."}),"\n",(0,i.jsx)(n.p,{children:"The structure of the folder will look something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",children:"template/\n\u251c\u2500\u2500 openbb_template/\n\u2502 \u251c\u2500\u2500 models/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 some_model.py\n\u2502 \u251c\u2500\u2500 utils/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 helpers.py\n\u2502 \u251c\u2500\u2500 tests/\n\u2502 \u2502 \u251c\u2500\u2500 record/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 test_template_fetchers.py\n\u2502 \u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"__init__.py"})," file where models are mapped to the router is under, ",(0,i.jsx)(n.code,{children:"/openbb_template"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"To get started:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Unpack the downloaded ",(0,i.jsx)(n.a,{href:"ttps://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip",children:"zip"})," file."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If working with a cloned GitHub repo, the folder is:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/providers\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Rename everything, "template", to suit. File names, models, import statements, docstrings.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add any provider-specific package requirements in the ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," file."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Update the Provider information in the ",(0,i.jsx)(n.code,{children:"__init__.py"})," file."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If credentials are required, add a line to the Provider class initialization."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'From a terminal command line, navigate into the folder where the extension is, then install the empty blank package in "editable" mode.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"poetry lock\npip install -e .\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Start creating data models using the steps outlined ",(0,i.jsx)(n.a,{href:"/platform/developer_guide/tutorials/add_new_provider_to_existing_extension",children:"here"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cookiecutter",children:"Cookiecutter"}),"\n",(0,i.jsxs)(n.p,{children:["In order to speed up the process of building an extension, we have created a ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/openbb-cookiecutter",children:(0,i.jsx)(n.strong,{children:"Cookiecutter"})})," template."]}),"\n",(0,i.jsxs)(n.p,{children:["It serves as a jumpstart for your extension development, and can be used instead of the template ZIP referenced earlier. Instructions are located on the ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/openbb-cookiecutter",children:"GitHub page"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The cookiecutter tool will get you most of the way there, but it still requires some tweaks to the file names and initializations."})}),"\n",(0,i.jsx)(n.p,{children:"ver are typically included as, XAU and XAG, respectively."}),"\n",(0,i.jsx)(n.h2,{id:"provider-module",children:"Provider module"}),"\n",(0,i.jsxs)(n.p,{children:["Below is the contents from the template's ",(0,i.jsx)(n.code,{children:"__init__.py"})," file, modified to create a provider extension for ",(0,i.jsx)(n.a,{href:"https://documentation.tradier.com/brokerage-api/overview/endpoints",children:"Tradier"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""Tradier Provider Module."""\n\nfrom openbb_core.provider.abstract.provider import Provider\nfrom openbb_tradier.models.options_chains import TradierOptionsChainsFetcher\n\ntradier_provider = Provider(\n    name="tradier",\n    website="https://tradier.com",\n    description= "Tradier provides a full range of services in a scalable, secure,"\n        + " and easy-to-use REST-based API for businesses and individual developers."\n        + " Fast, secure, simple. Start in minutes."\n        + " Get access to trading, account management, and market-data for"\n        + " Tradier Brokerage accounts through our APIs.",\n    credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"\n    fetcher_dict={\n        "OptionsChains": TradierOptionsChainsFetcher,\n    },\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note: Access to most data sources is authorized with an API key, issued by the source. Sometimes there are multiple authorization fields, and other times there may be a need to change the base URL depending on the type of account."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"If no authorization is required, leave out the 'credentials' parameter."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rebuild-python-interface-and-assets",children:"Rebuild python interface and assets"}),"\n",(0,i.jsxs)(n.p,{children:["The application will need to rebuild the static files in order to recognize any changes to the ",(0,i.jsx)(n.code,{children:"fetcher_dict"})," in the ",(0,i.jsx)(n.code,{children:"__init__.py"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"This is also required to reflect any changes to parameters, docstrings and function signatures."}),"\n",(0,i.jsx)(n.p,{children:"Open a terminal, start a new Python session, then enter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import openbb\n\nopenbb.build()\n\nexit()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The updated endpoint's function signature will now display the additional provider."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Signature:\nobb.derivatives.options.chains(\n    symbol: typing.Annotated[str, OpenBBField(description='Symbol to get data for.')],\n    provider: Optional[Literal['cboe', 'intrinio', 'tmx', 'tradier']] = None,\n    **kwargs,\n) -> openbb_core.app.model.obbject.OBBject\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," file defines the package itself."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Before adding any dependency, ensure it aligns with the Platform's existing dependencies."}),"\n",(0,i.jsx)(n.li,{children:"If possible, use loose versioning."}),"\n"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[tool.poetry]\nname = "openbb-template"\nversion = "1.0.0"\ndescription = "Template Provider Extension for the OpenBB Platform"\nauthors = ["Name <my@emailaddress.com>"]\nreadme = "README.md"\npackages = [{ include = "openbb_template" }]\n\n[tool.poetry.dependencies]\npython = ">=3.8,<3.12"\nopenbb = "^4.1.7"\n\n[build-system]\nrequires = ["poetry-core"]\nbuild-backend = "poetry.core.masonry.api"\n\n[tool.poetry.plugins."openbb_provider_extension"]\ntemplate = "openbb_template:template_provider"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The last line (poetry.plugins) maps to the provider defined in the ",(0,i.jsx)(n.code,{children:"__init__.py"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, for local extensions, you can add this line in the ",(0,i.jsx)(n.code,{children:"LOCAL_DEPS"})," variable in the ",(0,i.jsx)(n.code,{children:"dev_install.py"})," file, located in ",(0,i.jsx)(n.code,{children:"~/OpenBB/openbb_platform/"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# If this is a community dependency, add this under "Community dependencies",\n# with additional argument optional = true\nopenbb-extension = { path = "<relative-path-to-the-extension>", develop = true }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now you can use the ",(0,i.jsx)(n.code,{children:"python dev_install.py [-e]"})," command to install the local extension."]}),"\n",(0,i.jsx)(n.h2,{id:"standard-model",children:"Standard Model"}),"\n",(0,i.jsx)(n.p,{children:"The essence of a standard model is to be a shared resource with common ground between all sources.\nIt should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence."}),"\n",(0,i.jsx)(n.p,{children:"Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform. If in doubbt, contact the OpenBB team."}),"\n",(0,i.jsx)(n.h3,{id:"file-structure",children:"File Structure"}),"\n",(0,i.jsxs)(n.p,{children:["We're going to map this new endpoint in the interface to, ",(0,i.jsx)(n.code,{children:"obb.currency.snapshots()"}),". We'll name the model accordingly, ",(0,i.jsx)(n.code,{children:"CurrencySnapshots"}),", and create a file, ",(0,i.jsx)(n.code,{children:"currency_snapshots.py"}),". The file should be created here:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/\n"})}),"\n",(0,i.jsx)(n.p,{children:"The first line of the file should be a docstring, the second line should be empty, and the import statements follow."}),"\n",(0,i.jsx)(n.p,{children:"The code block below are the typical imports in a standard model file, modify to suit the specific requirements."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Constrained types can be imported from the Pydantic library, i.e. ",(0,i.jsx)(n.code,{children:"PositiveInt"}),", ",(0,i.jsx)(n.code,{children:"NonNegativeFloat"}),", etc."]})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"File imports"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""Currency Snapshots Standard Model."""\n\nfrom typing import Literal, Optional\n\nfrom pydantic import Field, field_validator\n\nfrom openbb_core.provider.abstract.data import Data\nfrom openbb_core.provider.abstract.query_params import QueryParams\nfrom openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"standard-queryparams",children:"Standard QueryParams"}),"\n",(0,i.jsxs)(n.p,{children:["Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.\nThe same applies to ",(0,i.jsx)(n.code,{children:"Literal"})," types, set as a generic ",(0,i.jsx)(n.code,{children:"str"})," or ",(0,i.jsx)(n.code,{children:"int"})," type and redefine it within the provider model as a ",(0,i.jsx)(n.code,{children:'Literal["choice1", "choice2"]'}),".\nWe don't want a standard model parameter to provide invalid choices for individual providers."]}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.code,{children:"CurrencySnapshotsQueryParams"})," model is going to be very similar to ",(0,i.jsx)(n.code,{children:"MarketSnapshotsQueryParams"}),', with the only difference being the field name "base".']}),"\n",(0,i.jsxs)(n.admonition,{type:"important",children:[(0,i.jsxs)(n.p,{children:["If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - ",(0,i.jsx)(n.code,{children:"Union[str, List[str]]"}),".\nInstead, define it for the single value, ",(0,i.jsx)(n.code,{children:"str"}),", and then add the property below to the provider's QueryParams model."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'__json_schema_extra__ = {"base": ["multiple_items_allowed"]}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Code example"}),(0,i.jsx)(n.p,{children:"The code block below is a continuation of the section above."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CurrencySnapshotsQueryParams(QueryParams):\n    """Currency Snapshots Query Params."""\n\n    base: str = Field(description="The base currency symbol.", default="usd")\n    quote_type: Literal["direct", "indirect"] = Field(\n        description="Whether the quote is direct or indirect."\n        + " Selecting \'direct\' will return the exchange rate"\n        + " as the amount of domestic currency required to buy one unit"\n        + " of the foreign currency."\n        + " Selecting \'indirect\' (default) will return the exchange rate"\n        + " as the amount of foreign currency required to buy one unit"\n        + " of the domestic currency.",\n        default="indirect",\n    )\n    counter_currencies: Optional[Union[str, List[str]]] = Field(\n        description="An optional list of counter currency symbols to filter for."\n        + " None returns all.",\n        default=None,\n    )\n\n    @field_validator("base", mode="before", check_fields=False)\n    @classmethod\n    def to_upper(cls, v):\n        """Convert the base currency to uppercase."""\n        return v.upper()\n\n    @field_validator("counter_currencies", mode="before", check_fields=False)\n    @classmethod\n    def convert_string(cls, v):\n        """Convert the counter currencies to an upper case string list."""\n        if v is not None:\n            return ",".join(v).upper() if isinstance(v, list) else v.upper()\n        return None\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.\nThis can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations."}),"\n",(0,i.jsx)(n.h3,{id:"standard-data",children:"Standard Data"}),"\n",(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"QueryParams"}),', we don\'t want to attempt to define every potential future field. We want a core foundation for others to build on.\nWe will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our\nWe will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our\ndata parsing requirements for this endpoint:']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Split the six-letter symbol as two symbols."}),"\n",(0,i.jsxs)(n.li,{children:["If the provider only returns ",(0,i.jsx)(n.code,{children:'{"symbol": "price"}'}),", it will need to coerced accordingly within the ",(0,i.jsx)(n.code,{children:"transform_data"})," static method of the ",(0,i.jsx)(n.code,{children:"Fetcher"})," class."]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Code example"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CurrencySnapshotsData(Data):\n    """Currency Snapshots Data."""\n\n    base_currency: str = Field(description="The base, or domestic, currency.")\n    counter_currency: str = Field(description="The counter, or foreign, currency.")\n    last_rate: float = Field(\n        description="The exchange rate, relative to the base currency."\n        + " By default, rates are expressed as the amount of foreign currency"\n        + " received from selling one unit of the base currency,"\n        + " or the quantity of foreign currency required to purchase"\n        + " one unit of the domestic currency."\n        + " To inverse the perspective, set the \'quote_type\' parameter as \'direct\'.\n    )\n    open: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("open", ""),\n        default=None,\n    )\n    high: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("high", ""),\n        default=None,\n    )\n    low: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("low", ""),\n        default=None,\n    )\n    close: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("close", ""),\n        default=None,\n    )\n    volume: Optional[int] = Field(\n        description=DATA_DESCRIPTIONS.get("volume", ""), default=None\n    )\n    prev_close: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("prev_close", ""),\n        default=None,\n    )\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"provider-model",children:"Provider Model"}),"\n",(0,i.jsx)(n.h3,{id:"file-structure-1",children:"File structure"}),"\n",(0,i.jsx)(n.p,{children:"We need to create a new file for our data provider."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"If we created a standard model previously, the name will be the same."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"The first line in the file will always be a docstring, with the import statements beginning below an empty line."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""FMP Currency Snapshots Model."""\n\n# pylint: disable=unused-argument\n\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional\n\nfrom openbb_core.provider.abstract.fetcher import Fetcher\nfrom openbb_core.provider.standard_models.currency_snapshots import (\n    CurrencySnapshotsData,\n    CurrencySnapshotsQueryParams,\n)\nfrom openbb_core.provider.utils.errors import EmptyDataError\nfrom openbb_core.provider.utils.helpers import amake_request\nfrom pandas import DataFrame, concat\nfrom pydantic import Field, field_validator\n'})}),"\n",(0,i.jsx)(n.h3,{id:"provider-queryparams",children:"Provider QueryParams"}),"\n",(0,i.jsx)(n.p,{children:"If we have defined a Standard Model for this provider, then our life is simplified as that base model already exists that we will inherit."}),"\n",(0,i.jsx)(n.h4,{id:"iheritance",children:"Iheritance"}),"\n",(0,i.jsxs)(n.p,{children:["All that's added is a URL to the endpoint's documentation, and then the ",(0,i.jsx)(n.code,{children:"__json_schema_extra__"})," dictionary which will allow multiple base symbols to be accepted by this provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):\n    """\n    FMP Currency Snapshots Query.\n\n    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote\n    """\n\n    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"one-off",children:"One off"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from openbb_core.provider.abstract.query_params import QueryParams\n\n\nclass CongressBillsQueryParams(QueryParams):\n    """Congress Bills Query Parameters."""\n\n    __json_schema_extra__ = {\n        "format": {\n            "x-widget_config": {\n                "exclude": True,\n            },\n        },\n        "offset": {\n            "x-widget_config": {\n                "exclude": True,\n            },\n        },\n    }\n\n    format: Literal["json", "xml"] = Field(\n        default="json", description="The data format. Value can be xml or json."\n    )\n    limit: int = Field(\n        default=100,\n        description="The number of records returned. The maximum limit is 250.",\n    )\n    offset: Optional[int] = Field(\n        default=None, description="The starting record returned. 0 is the first record."\n    )\n    ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"provider-data",children:"Provider Data"}),"\n",(0,i.jsx)(n.p,{children:"If we have defined a Standard Model we'll need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining. If there isn't a standard model, then we just need to define all the fields here."}),"\n",(0,i.jsx)(n.p,{children:"For instance, if the sample output data from the source looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "symbol": "AEDAUD",\n    "name": "AED/AUD",\n    "price": 0.40401,\n    "changesPercentage": 0.3901,\n    "change": 0.0016,\n    "dayLow": 0.40211,\n    "dayHigh": 0.40535,\n    "yearHigh": 0.440948,\n    "yearLow": 0.356628,\n    "marketCap": null,\n    "priceAvg50": 0.39494148,\n    "priceAvg200": 0.40097216,\n    "volume": 0,\n    "avgVolume": 0,\n    "exchange": "FOREX",\n    "open": 0.40223,\n    "previousClose": 0.40244,\n    "eps": null,\n    "pe": null,\n    "earningsAnnouncement": null,\n    "sharesOutstanding": null,\n    "timestamp": 1677792573\n  }\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can see that there are some fields which don't have anything to do with currencies. Those will be added here so the user still has access to them, since they aren't inherited from the standard model."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsData(CurrencySnapshotsData):\n    """FMP Currency Snapshots Data."""\n\n    __alias_dict__ = {\n        "last_rate": "price",\n        "high": "dayHigh",\n        "low": "dayLow",\n        "ma50": "priceAvg50",\n        "ma200": "priceAvg200",\n        "year_high": "yearHigh",\n        "year_low": "yearLow",\n        "prev_close": "previousClose",\n        "change_percent": "changesPercentage",\n        "last_rate_timestamp": "timestamp",\n    }\n\n    change: Optional[float] = Field(\n        description="The change in the price from the previous close.", default=None\n    )\n    change_percent: Optional[float] = Field(\n        description="The change in the price from the previous close, as a normalized percent.",\n        default=None,\n        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},\n    )\n    ma50: Optional[float] = Field(\n        description="The 50-day moving average.", default=None\n    )\n    ma200: Optional[float] = Field(\n        description="The 200-day moving average.", default=None\n    )\n    year_high: Optional[float] = Field(description="The 52-week high.", default=None)\n    year_low: Optional[float] = Field(description="The 52-week low.", default=None)\n    last_rate_timestamp: Optional[datetime] = Field(\n        description="The timestamp of the last rate.", default=None\n    )\n\n    @field_validator("change_percent", mode="before", check_fields=False)\n    @classmethod\n    def normalize_percent(cls, v):\n        """Normalize the percent."""\n        return v / 100 if v is not None else None\n'})}),"\n",(0,i.jsx)(n.p,{children:"A validator is setup to convert the percentage to a normalized value (1% -> 0.01)."}),"\n",(0,i.jsx)(n.h3,{id:"provider-fetcher",children:"Provider Fetcher"}),"\n",(0,i.jsxs)(n.p,{children:["The Fetcher class will always have the same general construction, in this instance we will use the ",(0,i.jsx)(n.code,{children:"transform_data"})," stage to parse and filter the returned data before validating the model on output."]}),"\n",(0,i.jsx)(n.p,{children:"This is where the TET (transform-extract-transform) pattern is applied."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsFetcher(\n    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]\n):\n    """FMP Currency Snapshots Fetcher."""\n\n    @staticmethod\n    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:\n        """Transform the query parameters."""\n        return FMPCurrencySnapshotsQueryParams(**params)\n\n    @staticmethod\n    async def aextract_data(\n        query: FMPCurrencySnapshotsQueryParams,\n        credentials: Optional[Dict[str, str]],\n        **kwargs: Any,\n    ) -> List[Dict]:\n        """Extract the data from the FMP endpoint."""\n\n        api_key = credentials.get("fmp_api_key") if credentials else ""\n\n        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"\n\n        return await amake_request(url, **kwargs)  # type: ignore\n\n    @staticmethod\n    def transform_data(\n        query: FMPCurrencySnapshotsQueryParams,\n        data: List[Dict],\n        **kwargs: Any,\n    ) -> List[FMPCurrencySnapshotsData]:\n        """Filter by the query parameters and validate the model."""\n\n        if not data:\n            raise EmptyDataError("No data was returned from the FMP endpoint.")\n\n        # Drop all the zombie columns FMP returns.\n        df = (\n            DataFrame(data)\n            .dropna(how="all", axis=1)\n            .drop(columns=["exchange", "avgVolume"])\n        )\n\n        new_df = DataFrame()\n\n        # Filter for the base currencies requested and the quote_type.\n        for symbol in query.base.split(","):\n            temp = (\n                df.query("`symbol`.str.startswith(@symbol)")\n                if query.quote_type == "indirect"\n                else df.query("`symbol`.str.endswith(@symbol)")\n            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})\n            temp["base_currency"] = symbol\n            temp["counter_currency"] = (\n                [d.split("/")[1] for d in temp["counter_currency"]]\n                if query.quote_type == "indirect"\n                else [d.split("/")[0] for d in temp["counter_currency"]]\n            )\n            # Filter for the counter currencies, if requested.\n            if query.counter_currencies is not None:\n                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable\n                    query.counter_currencies\n                    if isinstance(query.counter_currencies, list)\n                    else query.counter_currencies.split(",")\n                )\n                temp = (\n                    temp.query("`counter_currency`.isin(@counter_currencies)")\n                    .set_index("counter_currency")\n                    # Sets the counter currencies in the order they were requested.\n                    .filter(items=counter_currencies, axis=0)\n                    .reset_index()\n                )\n            # If there are no records, don\'t concatenate.\n            if len(temp) > 0:\n                # Convert the Unix timestamp to a datetime.\n                temp.timestamp = temp.timestamp.apply(\n                    lambda x: datetime.fromtimestamp(x)\n                )\n                new_df = concat([new_df, temp])\n            if len(new_df) == 0:\n                raise EmptyDataError(\n                    "No data was found using the applied filters. Check the parameters."\n                )\n            # Fill and replace any NaN values with NoneType.\n            new_df = new_df.fillna("N/A").replace("N/A", None)\n        return [\n            FMPCurrencySnapshotsData.model_validate(d)\n            for d in new_df.reset_index(drop=True).to_dict(orient="records")\n        ]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If there are functions or constants that are required for the fetcher - these are typically added in a ",(0,i.jsx)(n.code,{children:"/utils"})," folder with naming ",(0,i.jsx)(n.code,{children:"helpers.py"})," and ",(0,i.jsx)(n.code,{children:"constants.py"})," accordingly."]}),"\n",(0,i.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(n.h3,{id:"testing-the-fetcher",children:"Testing the Fetcher"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""Unit tests for FMP provider modules."""\n\nfrom openbb_fmp.models.currency_snapshots import FMPCurrencySnapshotsFetcher\n\nimport pytest\n\ntest_credentials = UserService().default_user_settings.credentials.model_dump(\n    mode="json"\n)\n\n\ndef response_filter(response):\n    """Filter the response."""\n    if "Location" in response["headers"]:\n        response["headers"]["Location"] = [\n            re.sub(r"apikey=[^&]+", "apikey=MOCK_API_KEY", x)\n            for x in response["headers"]["Location"]\n        ]\n    return response\n\n\n@pytest.fixture(scope="module")\ndef vcr_config():\n    """VCR configuration."""\n    return {\n        "filter_headers": [("User-Agent", None)],\n        "filter_query_parameters": [\n            ("apikey", "MOCK_API_KEY"),\n        ],\n        "before_record_response": response_filter,\n    }\n\n\n@pytest.mark.record_http\ndef test_fmp_currency_snapshots_fetcher(credentials=test_credentials):\n    """Test FMP currency snapshots fetcher."""\n    params = {\n        "base": "XAU",\n        "quote_type": "indirect",\n        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",\n    }\n\n    fetcher = FMPCurrencySnapshotsFetcher()\n    result = fetcher.test(params, credentials)\n    assert result is None\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"The filters might need to be updated for the specific provider, to ensure that API key or any authorization is sent correctly, and not logged. Particularly in the cassetes that are used for the CI."}),"\n",(0,i.jsx)(n.h3,{id:"records",children:"Records"}),"\n",(0,i.jsxs)(n.p,{children:["The folder ",(0,i.jsx)(n.code,{children:"/records"})," will contain the recordings of the data seen when running the test."]}),"\n",(0,i.jsx)(n.p,{children:"In order to get that you will need to run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"pytest test_fmp_fetchers.py --record http --record-no-overwrite\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will generate a file such as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml\n"})}),"\n",(0,i.jsx)(n.p,{children:"Make sure that it doesn't contain any of your API keys or credentials."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(27143),i=t(74848);function s(e){let{title:n}=e;return(0,i.jsx)(r.A,{children:(0,i.jsx)("title",{children:n})})}}}]);