"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64439],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},35003:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"python/developer/extension_types/provider","title":"Provider Extensions","description":"This page provides information about how to write provider extensions for the OpenBB Python Package using the ETL pattern, and how to add them to Routers as endpoints.","source":"@site/content/python/developer/extension_types/provider.md","sourceDirName":"python/developer/extension_types","slug":"/python/developer/extension_types/provider","permalink":"/python/developer/extension_types/provider","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/extension_types/provider.md","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1761197956000,"sidebarPosition":1,"frontMatter":{"title":"Provider Extensions","sidebar_position":1,"description":"This page provides information about how to write provider extensions for the OpenBB Python Package using the ETL pattern, and how to add them to Routers as endpoints.","keywords":["ODP","Provider","Data","Standardization","ETL","Router","API","OBBject","Python","Development","OpenBB Platform","extensions","endpoints","how-to"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/python/developer/extension_types/"},"next":{"title":"Router Extensions","permalink":"/python/developer/extension_types/router"}}');var i=t(74848),o=t(28453),s=t(39068);const a={title:"Provider Extensions",sidebar_position:1,description:"This page provides information about how to write provider extensions for the OpenBB Python Package using the ETL pattern, and how to add them to Routers as endpoints.",keywords:["ODP","Provider","Data","Standardization","ETL","Router","API","OBBject","Python","Development","OpenBB Platform","extensions","endpoints","how-to"]},d=void 0,l={},p=[{value:"Folder structure",id:"folder-structure",level:2},{value:"TOML File",id:"toml-file",level:2},{value:"Provider Definition",id:"provider-definition",level:2},{value:"Provider Model",id:"provider-model",level:2},{value:"Standard Models",id:"standard-models",level:3},{value:"Fetcher",id:"fetcher",level:3},{value:"Add Endpoint",id:"add-endpoint",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.A,{title:"Build Provider Extensions - Developer | OpenBB Docs"}),"\n",(0,i.jsx)(n.p,{children:'A provider extension refers to a specific source of data.\nEach endpoint can be serviced by multiple providers,\nand shared parameters or data fields are considered as "standard" items.'}),"\n",(0,i.jsxs)(n.admonition,{type:"important",children:[(0,i.jsx)(n.p,{children:"By themselves, provider extensions do not map to any specific endpoint or API route."}),(0,i.jsx)(n.p,{children:"Instead, they map to metamodels and the router function references a model through a specific pattern."})]}),"\n",(0,i.jsx)(n.h2,{id:"folder-structure",children:"Folder structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"provider_example\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 openbb_empty_provider\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 models\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 empty_model.py\n\u2502   \u2514\u2500\u2500 utils\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 helpers.py\n\u251c\u2500\u2500 poetry.lock\n\u2514\u2500\u2500 pyproject.toml\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The main ",(0,i.jsx)(n.code,{children:"__init__.py"})," file will initialize a ",(0,i.jsx)(n.code,{children:"Provider"})," class and map all of the models to the metamodels referenced in router endpoints."]}),"\n",(0,i.jsx)(n.h2,{id:"toml-file",children:"TOML File"}),"\n",(0,i.jsx)(n.p,{children:"The entry point for the extension is specified as a Poetry plugin, near the bottom of the file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."openbb_provider_extension"]\nempty = "openbb_empty_provider:empty_provider"\n'})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)("summary",{mdxType:"summary",children:[(0,i.jsx)(n.code,{children:"pyproject.toml"})," "]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[tool.poetry]\nname = "openbb-empty-provider"\nversion = "0.0.0"\ndescription = "Empty provider extension for OpenBB"\nauthors = ["Hello <hello@world.co>"]\nreadme = "README.md"\npackages = [{ include = "openbb_empty_provider" }]\n\n[tool.poetry.dependencies]\npython = "^3.10,<3.14"\nopenbb-core = "*"\n\n[build-system]\nrequires = ["poetry-core"]\nbuild-backend = "poetry.core.masonry.api"\n\n[tool.poetry.plugins."openbb_provider_extension"]\nempty = "openbb_empty_provider:empty_provider"\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"provider-definition",children:"Provider Definition"}),"\n",(0,i.jsxs)(n.p,{children:["Open or create the main ",(0,i.jsx)(n.code,{children:"__init__.py"})," file with a code editor."]}),"\n",(0,i.jsxs)(n.p,{children:["Initialize an instance of the ",(0,i.jsx)(n.code,{children:"Provider"})," class by naming the local variable as ",(0,i.jsx)(n.code,{children:"{name}_provider"}),".\nThis should be the same as what was defined in ",(0,i.jsx)(n.code,{children:"pyproject.toml"})]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"__init__.py"})," requires imports which may not have been built yet."]}),(0,i.jsxs)(n.p,{children:["Install the extension with an empty ",(0,i.jsx)(n.code,{children:"fetcher_dict"})," field - ",(0,i.jsx)(n.code,{children:"fetcher_dict={}"})," - then add them when ready."]}),(0,i.jsxs)(n.p,{children:["When installing the extension, adding or changing items in the ",(0,i.jsx)(n.code,{children:"fetcher_dict"}),", you must run ",(0,i.jsx)(n.code,{children:"openbb-build"})," from the command line before using the Python Interface."]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from openbb_core.provider.abstract.provider import Provider\nfrom openbb_empty_provider.models.empty_model import EmptyFetcher\n\n\nempty_provider = Provider(\n    name="empty",\n    website="http://empty.io",\n    description="""The empty provider is a supplier of promises.""",\n    # credentials=["api_key"],  # Credentials added here are mapped to `user_settings.json` in the `credentials` key.\n    # Don\'t do "empty_api_key" here, the `name` will prefix whatever items are listed in the credentials field.\n    fetcher_dict={\n        "EmptyModel": EmptyFetcher  # The key is mapped to in @router.command(model="EmptyModel", methods=["GET"])\n    },\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"provider-model",children:"Provider Model"}),"\n",(0,i.jsxs)(n.p,{children:["Provider data pipelines use the ",(0,i.jsx)(n.a,{href:"/python/developer/architecture_overview#fetcher-class",children:(0,i.jsx)(n.code,{children:"Fetcher"})})," class to transform and validate user input, extract raw data from the source, and transform the data into serializable content."]}),"\n",(0,i.jsx)(n.p,{children:"Transformed data will be ready to load into a database or use by downstream processes."}),"\n",(0,i.jsx)(n.p,{children:"The entire file consists of three classes, and it can be executed asynchronously without initialization."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"QueryParams"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Data"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Fetcher"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"standard-models",children:"Standard Models"}),"\n",(0,i.jsx)(n.p,{children:"If an endpoint is shared between multiple providers, they are likely to have some common ground."}),"\n",(0,i.jsx)(n.p,{children:"In this case, the metamodel will represent the standard, and the providers shall inherit from the standard."}),"\n",(0,i.jsxs)(n.p,{children:["A standard model will have only ",(0,i.jsx)(n.code,{children:"QueryParams"})," and ",(0,i.jsx)(n.code,{children:"Data"}),", both are a subclass of ",(0,i.jsx)(n.code,{children:"pydantic.BaseModel"}),"."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Example Standard Model"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""Some Time Series Standard Model"""\n\nfrom datetime import date as dateType\n\nfrom openbb_core.provider.abstract.data import Data\nfrom openbb_core.provider.abstract.query_params import QueryParams\nfrom pydantic import Field\n\nclass SomeTimeSeriesQueryParams(QueryParams):\n    """Some Time Series Query Params"""\n    symbol: str = Field(\n        description="Ticker symbol for the time series."\n    )\n    start_date: dateType | None = Field(\n        default=None,\n        description="Start date of the data.",\n    )\n    end_date: dateType | None = Field(\n        default=None,\n        description="End date of the data.",\n    )\n\nclass SomeTimeSeriesData(Data):\n    """Some Time Series Data"""\n\n    date: dateType = Field(\n        description="Date of the data.",\n    )\n    symbol: str = Field(\n        description="Symbol for the data.",\n    )\n    value: float = Field(\n        description="End of day value of the symbol."\n    )\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"The provider should then inherit from this model, prefixing the name with itself."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class EmptySomeTimeSeriesQueryParams(SomeTimeSeriesQueryParams):\n    """Empty Some Time Series Query Params"""\n    # No `pass` required if no additional parameters are added.\n\n\n# Add additional fields, or modify the standard model definition to suit.\n\nclass EmptySomeTimeSeriesData(SomeTimeSeriesData):\n    """Empty Some Time Series Data"""\n\n    unit: str | None = Field(\n        default=None,\n        description="Unit of measurement represented by the value."\n    )\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The resulting function signature will display these parameters as ",(0,i.jsx)(n.code,{children:"**kwargs"}),", but their definitions will display in the docstring and ",(0,i.jsx)(n.code,{children:"reference"})," metadata. Required provider parameters may appear as ",(0,i.jsx)(n.code,{children:"Optional"})," in docstrings, but their inputs will be validated using the model at execution."]})}),"\n",(0,i.jsx)(n.h3,{id:"fetcher",children:"Fetcher"}),"\n",(0,i.jsxs)(n.p,{children:["Next, build the ",(0,i.jsx)(n.code,{children:"Fetcher"})," class. Use the code block below as a template, the structure and signatures will always be similar.\nMost of the business logic happens in one of, ",(0,i.jsx)(n.code,{children:"extract_data"})," or ",(0,i.jsx)(n.code,{children:"aextract_data"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"A Fetcher divides the process into three distinct sections:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Transform Query","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validates the user input against the QueryParams model."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Extract Data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gets the raw data (or as close to raw as possible) from the source."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Transform Data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validate the data against the Data model and return the results."}),"\n",(0,i.jsxs)(n.li,{children:["Output is returned to the user under ",(0,i.jsx)(n.code,{children:"OBBject.results"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Example Fetcher Code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class EmptySomeTimeSeriesFetcher(\n    Fetcher[\n        EmptySomeTimeSeriesQueryParams,\n        list[\n            EmptySomeTimeSeriesData\n        ],  # Remove list if returning a single record or dictionary\n    ]\n):\n    """Some Time Series Fetcher."""\n\n    # Use this to disable the requirement of credentials for this endpoint\n    # and provider, if applicable.\n\n    # require_credentials = False\n\n    @staticmethod\n    def transform_query(params: dict) -> EmptySomeTimeSeriesQueryParams:\n        """Transform query params."""\n        transformed_params = params.copy()\n        # if transformed_params.get("some_param"):\n        #     do something with it here.\n        # and use field_validator in the model to set defaults.\n        return EmptySomeTimeSeriesQueryParams(**transformed_params)\n\n    @staticmethod\n    async def aextract_data(\n        query: EmptySomeTimeSeriesQueryParams,\n        credentials: dict | None,\n        **kwargs,\n    ) -> list:  # Typing here should match the \'data\' input of \'transform_data\'.\n        """Extract data."""\n        # pylint: disable=import-outside-toplevel\n        # from openbb_core.provider.utils.helpers import (\n        #    make_request,\n        #    amake_request,\n        #    amake_requests,\n        #    get_querystring,\n        #    get_requests_session,\n        #    get_async_requests_session,\n        # )\n        # Use these to make HTTP requests.\n        # Always lazy-load imports inside functions to avoid circular imports\n        # and to speed up initial load time of the application.\n\n        # Example of making a request\n        # url = "https://example.com/api"\n        # querystring = get_querystring(\n        #     {\n        #         "symbol": query.symbol,\n        #         "start_date": query.start_date,\n        #         "end_date": query.end_date,\n        #         # Add other parameters here\n        #     }\n        # )\n        #\n        # headers = {\n        #     "Authorization": f"Bearer {credentials[\'empty_api_key\']}"\n        # } if credentials else ""\n        #\n        # response = await amake_request(url, headers=headers, params=querystring)\n        #\n        # data = response.json()\n        #\n        # Process the data into a list of EmptySomeTimeSeriesData\n        data = [\n            {\n                "date": dateType(2023, 1, 1),\n                "symbol": query.symbol,\n                "value": 100.0,\n                "unit": "USD",\n            },\n            {\n                "date": dateType(2023, 1, 2),\n                "symbol": query.symbol,\n                "value": 101.5,\n                "unit": "USD",\n            },\n            # Add more records as needed\n        ]\n\n        return data\n\n    @staticmethod\n    def transform_data(\n        query: EmptySomeTimeSeriesQueryParams, data: list, **kwargs: Any\n    ) -> list[EmptySomeTimeSeriesData]:\n        """Transform data."""\n        # Here you can clean and validate the data as needed.\n        # The model should do most of the heavy lifting.\n        return [EmptySomeTimeSeriesData.model_validate(item) for item in data]\n\n# This is the complete model, it can be executed with:\n# result = await EmptySomeTimeSeriesFetcher.fetch_data({}, {})\n# Where the first dict is the query parameters, and the second is the credentials.\n# If no credentials are required, use an empty dict.\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"add-endpoint",children:"Add Endpoint"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},39068:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(27143),i=t(74848);function o(e){let{title:n}=e;return(0,i.jsx)(r.A,{children:(0,i.jsx)("title",{children:n})})}}}]);