"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41226],{28453:(t,n,e)=>{e.d(n,{R:()=>i,x:()=>s});var a=e(96540);const r={},o=a.createContext(r);function i(t){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),a.createElement(o.Provider,{value:n},t.children)}},39068:(t,n,e)=>{e.d(n,{A:()=>o});e(96540);var a=e(27143),r=e(74848);function o(t){let{title:n}=t;return(0,r.jsx)(a.A,{children:(0,r.jsx)("title",{children:n})})}},99352:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"workspace/data-widgets/plotly-charts","title":"Plotly Charts","description":"Plotly Charts","source":"@site/content/workspace/data-widgets/plotly-charts.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/plotly-charts","permalink":"/workspace/data-widgets/plotly-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/plotly-charts.md","tags":[],"version":"current","lastUpdatedBy":"montezdesousa","lastUpdatedAt":1749732099000,"sidebarPosition":14,"frontMatter":{"title":"Plotly Charts","sidebar_position":14,"description":"Plotly Charts","keywords":["plotly","charts","visualization"]},"sidebar":"tutorialSidebar","previous":{"title":"AgGrid Table Charts","permalink":"/workspace/data-widgets/aggrid-table-charts"},"next":{"title":"TradingView Charts","permalink":"/workspace/data-widgets/tradingview-charts"}}');var r=e(74848),o=e(28453),i=e(39068);const s={title:"Plotly Charts",sidebar_position:14,description:"Plotly Charts",keywords:["plotly","charts","visualization"]},l=void 0,c={},d=[{value:"Basic Plotly Chart",id:"basic-plotly-chart",level:2},{value:"Plotly Chart with Theme",id:"plotly-chart-with-theme",level:2},{value:"Plotly Chart with Theme and Toolbar",id:"plotly-chart-with-theme-and-toolbar",level:2},{value:"Plotly Chart with Theme and Config File",id:"plotly-chart-with-theme-and-config-file",level:2},{value:"Plotly Heatmap",id:"plotly-heatmap",level:2}];function h(t){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.A,{title:"Plotly Charts | OpenBB Workspace Docs"}),"\n",(0,r.jsx)(n.h2,{id:"basic-plotly-chart",children:"Basic Plotly Chart"}),"\n",(0,r.jsx)(n.p,{children:"A widget that demonstrates how to use the Plotly library to create a chart. This gives you the ability to create any interactive type of charts with unlimited flexibility."}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Basic Plotly Chart Example",src:"https://openbb-cms.directus.app/assets/5c35a4a2-750c-4284-899a-066ea923e5c8.png"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Plotly Chart",\n    "description": "Plotly chart",\n    "type": "chart",\n    "endpoint": "plotly_chart",\n    "gridData": {"w": 40, "h": 15}\n})\n\n@app.get("/plotly_chart")\ndef get_plotly_chart():\n    # Generate mock time series data\n    mock_data = [\n        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},\n        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},\n        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},\n        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},\n        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},\n        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},\n        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},\n        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},\n        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},\n        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}\n    ]\n    \n    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]\n    returns = [d["return"] for d in mock_data]\n    transactions = [d["transactions"] for d in mock_data]\n    \n    # Create the figure with secondary y-axis\n    fig = go.Figure()\n    \n    # Add the line trace for returns\n    fig.add_trace(go.Scatter(\n        x=dates,\n        y=returns,\n        mode=\'lines\',\n        name=\'Returns\',\n        line=dict(width=2)\n    ))\n    \n    # Add the bar trace for transactions\n    fig.add_trace(go.Bar(\n        x=dates,\n        y=transactions,\n        name=\'Transactions\',\n        opacity=0.5\n    ))\n    \n    # Update layout with axis titles and secondary y-axis\n    fig.update_layout(\n        xaxis_title=\'Date\',\n        yaxis_title=\'Returns (%)\',\n        yaxis2=dict(\n            title="Transactions",\n            overlaying="y",\n            side="right"\n        ),\n        legend=dict(\n            orientation="h",\n            yanchor="bottom",\n            y=1.02,\n            xanchor="right",\n            x=1\n        )\n    )\n    \n    # Update the bar trace to use secondary y-axis\n    fig.data[1].update(yaxis="y2")\n    \n    return json.loads(fig.to_json())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"plotly-chart-with-theme",children:"Plotly Chart with Theme"}),"\n",(0,r.jsx)(n.p,{children:"This endpoint extends the basic Plotly chart by adding theme support. The theme parameter is automatically provided by OpenBB Workspace based on the user's current display mode (dark/light). This enables dynamic chart styling that matches the workspace theme. The theme parameter is optional - if unused, OpenBB will still pass it but the endpoint will ignore it."}),"\n",(0,r.jsx)(n.p,{children:"Note: OpenBB widget UI dark mode is #151518 and light mode is #FFFFFF, using these background colors make the chart look consistent with the widgets in the OpenBB Workspace."}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Plotly Chart with Theme Example",src:"https://openbb-cms.directus.app/assets/f5037dbb-a644-4560-91f6-eaef987e5739.png"}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Plotly Chart with Theme and Toolbar Example",src:"https://openbb-cms.directus.app/assets/70d07f0b-6ed9-4f9f-80fe-e1e4e268ecb5.png"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Plotly Chart with Theme",\n    "description": "Plotly chart with theme",\n    "type": "chart",\n    "endpoint": "plotly_chart_with_theme",\n    "gridData": {"w": 40, "h": 15}\n})\n\n@app.get("/plotly_chart_with_theme")\ndef get_plotly_chart_with_theme(theme: str = "dark"):\n    # Generate mock time series data\n    mock_data = [\n        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},\n        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},\n        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},\n        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},\n        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},\n        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},\n        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},\n        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},\n        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},\n        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}\n    ]\n    \n    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]\n    returns = [d["return"] for d in mock_data]\n    transactions = [d["transactions"] for d in mock_data]\n    \n    # Create the figure with secondary y-axis\n    fig = go.Figure()\n    \n    if theme == "dark":\n        # Dark theme colors and styling\n        line_color = "#FF8000"  # Orange\n        bar_color = "#2D9BF0"   # Blue\n        text_color = "#FFFFFF"  # White\n        grid_color = "rgba(51, 51, 51, 0.3)"\n        bg_color = "#151518"    # Dark background\n    else:\n        # Light theme colors and styling\n        line_color = "#2E5090"  # Navy blue\n        bar_color = "#00AA44"   # Forest green\n        text_color = "#333333"  # Dark gray\n        grid_color = "rgba(221, 221, 221, 0.3)"\n        bg_color = "#FFFFFF"    # White background\n    \n    # Add the line trace for returns with theme-specific color\n    fig.add_trace(go.Scatter(\n        x=dates,\n        y=returns,\n        mode=\'lines\',\n        name=\'Returns\',\n        line=dict(width=2, color=line_color)\n    ))\n    \n    # Add the bar trace for transactions with theme-specific color\n    fig.add_trace(go.Bar(\n        x=dates,\n        y=transactions,\n        name=\'Transactions\',\n        opacity=0.5,\n        marker_color=bar_color\n    ))\n    \n    # Update layout with theme-specific styling\n    fig.update_layout(\n        xaxis_title=\'Date\',\n        yaxis_title=\'Returns (%)\',\n        yaxis2=dict(\n            title="Transactions",\n            overlaying="y",\n            side="right",\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        ),\n        legend=dict(\n            orientation="h",\n            yanchor="bottom",\n            y=1.02,\n            xanchor="right",\n            x=1,\n            font=dict(color=text_color)\n        ),\n        paper_bgcolor=bg_color,\n        plot_bgcolor=bg_color,\n        font=dict(color=text_color),\n        xaxis=dict(\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        ),\n        yaxis=dict(\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        )\n    )\n    \n    # Update the bar trace to use secondary y-axis\n    fig.data[1].update(yaxis="y2")\n    \n    return json.loads(fig.to_json())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"plotly-chart-with-theme-and-toolbar",children:"Plotly Chart with Theme and Toolbar"}),"\n",(0,r.jsx)(n.p,{children:"This endpoint extends the basic Plotly chart by adding a toolbar to the chart. The toolbar is a set of buttons that allows the user to interact with the chart."}),"\n",(0,r.jsx)(n.p,{children:"Note: As you can see, all the settings and styling utilized by plotly can be too much boilerplate code, so it is recommended to create a plotly_config.py file and use the functions defined in that file to create the chart."}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Plotly Chart with Theme and Toolbar Example",src:"https://openbb-cms.directus.app/assets/cc9ed36b-fdb5-47ca-ba9b-c91dd4b772cd.png"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Plotly Chart with Theme and Toolbar",\n    "description": "Plotly chart with Theme and toolbar",\n    "type": "chart",\n    "endpoint": "plotly_chart_with_theme_and_toolbar",\n    "gridData": {"w": 40, "h": 15}\n})\n\n@app.get("/plotly_chart_with_theme_and_toolbar")\ndef get_plotly_chart_with_theme_and_toolbar(theme: str = "dark"):\n    # Generate mock time series data\n    mock_data = [\n        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},\n        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},\n        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},\n        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},\n        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},\n        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},\n        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},\n        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},\n        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},\n        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}\n    ]\n    \n    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]\n    returns = [d["return"] for d in mock_data]\n    transactions = [d["transactions"] for d in mock_data]\n    \n    # Create the figure with secondary y-axis\n    fig = go.Figure()\n    \n    if theme == "dark":\n        # Dark theme colors and styling\n        line_color = "#FF8000"  # Orange\n        bar_color = "#2D9BF0"   # Blue\n        text_color = "#FFFFFF"  # White\n        grid_color = "rgba(51, 51, 51, 0.3)"\n        bg_color = "#151518"    # Dark background\n    else:\n        # Light theme colors and styling\n        line_color = "#2E5090"  # Navy blue\n        bar_color = "#00AA44"   # Forest green\n        text_color = "#333333"  # Dark gray\n        grid_color = "rgba(221, 221, 221, 0.3)"\n        bg_color = "#FFFFFF"    # White background\n    \n    # Add the line trace for returns with theme-specific color\n    fig.add_trace(go.Scatter(\n        x=dates,\n        y=returns,\n        mode=\'lines\',\n        name=\'Returns\',\n        line=dict(width=2, color=line_color)\n    ))\n    \n    # Add the bar trace for transactions with theme-specific color\n    fig.add_trace(go.Bar(\n        x=dates,\n        y=transactions,\n        name=\'Transactions\',\n        opacity=0.5,\n        marker_color=bar_color\n    ))\n    \n    # Update layout with theme-specific styling\n    fig.update_layout(\n        xaxis_title=\'Date\',\n        yaxis_title=\'Returns (%)\',\n        yaxis2=dict(\n            title="Transactions",\n            overlaying="y",\n            side="right",\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        ),\n        legend=dict(\n            orientation="h",\n            yanchor="bottom",\n            y=1.02,\n            xanchor="right",\n            x=1,\n            font=dict(color=text_color)\n        ),\n        paper_bgcolor=bg_color,\n        plot_bgcolor=bg_color,\n        font=dict(color=text_color),\n        xaxis=dict(\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        ),\n        yaxis=dict(\n            gridcolor=grid_color,\n            tickfont=dict(color=text_color)\n        )\n    )\n    \n    # Update the bar trace to use secondary y-axis\n    fig.data[1].update(yaxis="y2")\n    \n    # Configure the toolbar and other display settings\n    toolbar_config = {\n        \'displayModeBar\': True,\n        \'responsive\': True,\n        \'scrollZoom\': True,\n        \'modeBarButtonsToRemove\': [\n            \'lasso2d\',\n            \'select2d\',\n            \'autoScale2d\',\n            \'toggleSpikelines\',\n            \'hoverClosestCartesian\',\n            \'hoverCompareCartesian\'\n        ],\n        \'modeBarButtonsToAdd\': [\n            \'drawline\',\n            \'drawcircle\',\n            \'drawrect\',\n            \'eraseshape\'\n        ],\n        \'doubleClick\': \'reset+autosize\',\n        \'showTips\': True,\n        \'watermark\': False,\n        \'staticPlot\': False,\n        \'locale\': \'en\',\n        \'showAxisDragHandles\': True,\n        \'showAxisRangeEntryBoxes\': True,\n        \'displaylogo\': False,\n        \'modeBar\': {\n            \'bgcolor\': \'rgba(0, 0, 0, 0.1)\' if theme == \'light\' else \'rgba(255, 255, 255, 0.1)\',\n            \'color\': text_color,\n            \'activecolor\': line_color,\n            \'orientation\': \'v\',\n            \'yanchor\': \'top\',\n            \'xanchor\': \'right\',\n            \'x\': 1.05,  # Increased spacing from chart\n            \'y\': 1,\n            \'opacity\': 0,  # Start hidden\n            \'hovermode\': True,  # Show on hover\n            \'hoverdelay\': 0,  # No delay on hover\n            \'hoverduration\': 0  # No delay on hover out\n        }\n    }\n    \n    # Convert figure to JSON and add config\n    figure_json = json.loads(fig.to_json())\n    figure_json[\'config\'] = toolbar_config\n    \n    return figure_json\n'})}),"\n",(0,r.jsx)(n.h2,{id:"plotly-chart-with-theme-and-config-file",children:"Plotly Chart with Theme and Config File"}),"\n",(0,r.jsx)(n.p,{children:"This widget demonstrates how to create a chart using the Plotly library and use the config file to minimize the amount of code needed to create the chart."}),"\n",(0,r.jsxs)(n.p,{children:["For reference, here's where this particular ",(0,r.jsx)(n.code,{children:"plotly_config.py"})," was used: ",(0,r.jsx)("a",{href:"https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py",target:"_blank",children:(0,r.jsx)(n.a,{href:"https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py",children:"https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/blob/main/getting-started/reference-backend/plotly_config.py"})})]}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Plotly Chart with Theme and Config File Example",src:"https://openbb-cms.directus.app/assets/ab77c29f-a554-4c13-a949-7b964f86b555.png"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Plotly Chart with Theme and Toolbar using Config File",\n    "description": "Plotly chart with theme and toolbar using config file",\n    "type": "chart",\n    "endpoint": "plotly_chart_with_theme_and_toolbar_using_config_file",\n    "gridData": {"w": 40, "h": 15}\n})\n\n@app.get("/plotly_chart_with_theme_and_toolbar_using_config_file")\ndef get_plotly_chart_with_theme_and_toolbar_using_config_file(theme: str = "dark"):\n    # Generate mock time series data\n    mock_data = [\n        {"date": "2023-01-01", "return": 2.5, "transactions": 1250},\n        {"date": "2023-01-02", "return": -1.2, "transactions": 1580},\n        {"date": "2023-01-03", "return": 3.1, "transactions": 1820},\n        {"date": "2023-01-04", "return": 0.8, "transactions": 1450},\n        {"date": "2023-01-05", "return": -2.3, "transactions": 1650},\n        {"date": "2023-01-06", "return": 1.5, "transactions": 1550},\n        {"date": "2023-01-07", "return": 2.8, "transactions": 1780},\n        {"date": "2023-01-08", "return": -0.9, "transactions": 1620},\n        {"date": "2023-01-09", "return": 1.2, "transactions": 1480},\n        {"date": "2023-01-10", "return": 3.5, "transactions": 1920}\n    ]\n    \n    dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in mock_data]\n    returns = [d["return"] for d in mock_data]\n    transactions = [d["transactions"] for d in mock_data]\n    \n    # Get theme colors\n    colors = get_theme_colors(theme)\n    \n    # Create the figure\n    fig = go.Figure()\n    \n    # Add the line trace for returns\n    fig.add_trace(go.Scatter(\n        x=dates,\n        y=returns,\n        mode=\'lines\',\n        name=\'Returns\',\n        line=dict(width=2, color=colors["main_line"])\n    ))\n    \n    # Add the bar trace for transactions\n    fig.add_trace(go.Bar(\n        x=dates,\n        y=transactions,\n        name=\'Transactions\',\n        opacity=0.5,\n        marker_color=colors["neutral"]\n    ))\n    \n    fig.update_layout(**base_layout(theme=theme))\n    \n    # Add secondary y-axis for transactions\n    fig.update_layout(\n        yaxis2=dict(\n            title="Transactions",\n            overlaying="y",\n            side="right",\n            gridcolor=colors["grid"],\n            tickfont=dict(color=colors["text"])\n        )\n    )\n    \n    # Update the bar trace to use secondary y-axis\n    fig.data[1].update(yaxis="y2")\n\n    figure_json = json.loads(fig.to_json())\n    figure_json[\'config\'] = get_toolbar_config()\n    \n    return figure_json\n'})}),"\n",(0,r.jsx)(n.h2,{id:"plotly-heatmap",children:"Plotly Heatmap"}),"\n",(0,r.jsx)(n.p,{children:"This widget demonstrates that with Plotly you can create any type of chart including heatmaps, scatter plots, line charts, 3d charts, etc. and also demonstrates how parameters can influence a plotly chart."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Note that the theme parameter always comes at the end of the function."})}),"\n",(0,r.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Plotly Heatmap Example",src:"https://openbb-cms.directus.app/assets/8bf50c78-d00c-4ecb-aeb0-be1cd23cc778.png"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Plotly Heatmap",\n    "description": "Plotly heatmap",\n    "type": "chart",\n    "endpoint": "plotly_heatmap",\n    "gridData": {"w": 40, "h": 15},\n    "params": [\n        {\n            "paramName": "color_scale",\n            "description": "Select the color scale for the heatmap",\n            "value": "RdBu_r",\n            "label": "Color Scale",\n            "type": "text",\n            "show": True,\n            "options": [\n                {"label": "Red-Blue (RdBu_r)", "value": "RdBu_r"},\n                {"label": "Viridis", "value": "Viridis"},\n                {"label": "Plasma", "value": "Plasma"},\n                {"label": "Inferno", "value": "Inferno"},\n                {"label": "Magma", "value": "Magma"},\n                {"label": "Greens", "value": "Greens"},\n                {"label": "Blues", "value": "Blues"},\n                {"label": "Reds", "value": "Reds"}\n            ]\n        }\n    ]\n})\n@app.get("/plotly_heatmap")\ndef get_plotly_heatmap(color_scale: str = "RdBu_r", theme: str = "dark"):\n    # Create mock stock symbols\n    symbols = [\'AAPL\', \'MSFT\', \'GOOGL\', \'AMZN\', \'TSLA\']\n\n    # Create mock correlation matrix directly\n    corr_matrix = [\n        [1.00, 0.65, 0.45, 0.30, 0.20],  # AAPL correlations\n        [0.65, 1.00, 0.55, 0.40, 0.25],  # MSFT correlations\n        [0.45, 0.55, 1.00, 0.35, 0.15],  # GOOGL correlations\n        [0.30, 0.40, 0.35, 1.00, 0.10],  # AMZN correlations\n        [0.20, 0.25, 0.15, 0.10, 1.00]   # TSLA correlations\n    ]\n\n    # Get theme colors\n    colors = get_theme_colors(theme)\n\n    # Create the figure\n    fig = go.Figure()\n    # Apply base layout configuration\n    layout_config = base_layout(theme=theme)\n\n    # This allows users to modify the layout configuration further\n    # in case they want to steer from the default settings.\n    layout_config[\'title\'] = {\n        \'text\': "Correlation Matrix",\n        \'x\': 0.5,\n        \'y\': 0.95,\n        \'xanchor\': \'center\',\n        \'yanchor\': \'top\',\n        \'font\': {\'size\': 20}\n    }\n    layout_config[\'margin\'] = {\'t\': 50, \'b\': 50, \'l\': 50, \'r\': 50}\n    \n    # Update figure with complete layout\n    fig.update_layout(layout_config)\n\n    # Add the heatmap trace\n    fig.add_trace(go.Heatmap(\n        z=corr_matrix,\n        x=symbols,\n        y=symbols,\n        colorscale=color_scale,\n        zmid=colors["heatmap"]["zmid"],\n        text=[[f\'{val:.2f}\' for val in row] for row in corr_matrix],\n        texttemplate=\'%{text}\',\n        textfont={"color": colors["heatmap"]["text_color"]},\n        hoverongaps=False,\n        hovertemplate=\'%{x} - %{y}<br>Correlation: %{z:.2f}<extra></extra>\'\n    ))\n    \n    # Convert figure to JSON and apply config\n    figure_json = json.loads(fig.to_json())\n    figure_json[\'config\'] = {\n        **get_toolbar_config(),\n        \'scrollZoom\': False  # Disable scroll zoom\n    }\n\n    return figure_json\n'})})]})}function p(t={}){const{wrapper:n}={...(0,o.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(h,{...t})}):h(t)}}}]);