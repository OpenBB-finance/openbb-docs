"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42675],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(27143),a=s(74848);function r(e){let{title:n}=e;return(0,a.jsx)(t.A,{children:(0,a.jsx)("title",{children:n})})}},68485:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"workspace/developers/ai-features/custom-agent-features","title":"Custom agent features","description":"Configure and manage custom agent features based on workspace options","source":"@site/content/workspace/developers/ai-features/custom-agent-features.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/custom-agent-features","permalink":"/workspace/developers/ai-features/custom-agent-features","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/custom-agent-features.md","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1761133924000,"sidebarPosition":7,"frontMatter":{"title":"Custom agent features","sidebar_position":7,"description":"Configure and manage custom agent features based on workspace options","keywords":["features","configuration","workspace options","custom agents","SSE"]},"sidebar":"tutorialSidebar","previous":{"title":"Create charts","permalink":"/workspace/developers/ai-features/create-charts"},"next":{"title":"Interact with dashboard","permalink":"/workspace/developers/ai-features/interact-with-dashboard"}}');var a=s(74848),r=s(28453),o=s(39068);const i={title:"Custom agent features",sidebar_position:7,description:"Configure and manage custom agent features based on workspace options",keywords:["features","configuration","workspace options","custom agents","SSE"]},c=void 0,l={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Feature configuration",id:"feature-configuration",level:3},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2},{value:"Feature types",id:"feature-types",level:2},{value:"Boolean features",id:"boolean-features",level:3},{value:"Complex features",id:"complex-features",level:3},{value:"Conditional behavior",id:"conditional-behavior",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.A,{title:"AI Features \u2014 Custom agent features | OpenBB Workspace Docs"}),"\n",(0,a.jsxs)(n.p,{children:["Create agents that can dynamically enable or disable features based on workspace configuration. Agents can access user preferences through ",(0,a.jsx)(n.code,{children:"workspace_options"})," and respond accordingly."]}),"\n",(0,a.jsxs)(n.p,{children:["Reference implementation in ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/37-vanilla-agent-custom-features",children:"this GitHub repository"}),"."]}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"500",alt:"Custom agent features - on and off",src:"https://openbb-cms.directus.app/assets/f304643a-654b-4156-a4c4-dea934d18012.png"}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"500",alt:"Custom agent features - on and on",src:"https://openbb-cms.directus.app/assets/aa51354c-b611-4c99-829c-cf6e35eb884b.png"}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(n.p,{children:"Configure custom features in your agent's descriptor and access them through the query request payload. Features can have default states, descriptions, and labels."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"agents.json"})," configuration with custom features:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'return JSONResponse(content={\n    "vanilla_agent_custom_features": {\n        "name": "Vanilla Agent Custom Features",\n        "description": "A simple agent that reports its feature status.",\n        "endpoints": {"query": "/v1/query"},\n        "features": {\n            "streaming": True,\n            "widget-dashboard-select": False,\n            "widget-dashboard-search": False,\n            "deep-research": {\n                "label": "Deep Research",\n                "default": False,\n                "description": "Allows the copilot to do deep research",\n            },\n            "web-search": {\n                "label": "Web Search", \n                "default": True,\n                "description": "Allows the copilot to search the web.",\n            },\n        },\n    }\n})\n'})}),"\n",(0,a.jsx)(n.h3,{id:"feature-configuration",children:"Feature configuration"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Simple features"}),": Boolean values for basic on/off features"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex features"}),": Objects with ",(0,a.jsx)(n.code,{children:"label"}),", ",(0,a.jsx)(n.code,{children:"default"}),", and ",(0,a.jsx)(n.code,{children:"description"})," properties"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Built-in features"}),": Standard features like ",(0,a.jsx)(n.code,{children:"streaming"}),", ",(0,a.jsx)(n.code,{children:"widget-dashboard-select"}),", ",(0,a.jsx)(n.code,{children:"widget-dashboard-search"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom features"}),": User-defined features with custom behavior"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"User enables/disables features in workspace settings"}),"\n",(0,a.jsxs)(n.li,{children:["Features are passed to agent via ",(0,a.jsx)(n.code,{children:"workspace_options"})," in request payload"]}),"\n",(0,a.jsx)(n.li,{children:"Agent checks enabled features and adjusts behavior accordingly"}),"\n",(0,a.jsx)(n.li,{children:"Agent can report feature status back to user"}),"\n",(0,a.jsx)(n.li,{children:"Response content varies based on active features"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"QueryRequest.workspace_options"}),": List of enabled feature names"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"message_chunk(text)"}),": Streams response content with feature-aware messaging"]}),"\n",(0,a.jsxs)(n.li,{children:["Feature checking via simple list membership: ",(0,a.jsx)(n.code,{children:'"feature-name" in workspace_options'})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import AsyncGenerator\nfrom openbb_ai import message_chunk\nfrom openbb_ai.models import MessageChunkSSE, QueryRequest\nfrom fastapi.responses import JSONResponse\nfrom sse_starlette.sse import EventSourceResponse\n\n@app.post("/v1/query")\nasync def query(request: QueryRequest) -> EventSourceResponse:\n    # Access workspace options from request payload\n    workspace_options = getattr(request, "workspace_options", [])\n\n    # Check which features are enabled\n    deep_research_enabled = "deep-research" in workspace_options\n    web_search_enabled = "web-search" in workspace_options\n\n    # Build feature status message\n    features_msg = (\n        f"- Deep Research: {\'\u2705 Enabled\' if deep_research_enabled else \'\u274c Disabled\'}\\n"\n        f"- Web Search: {\'\u2705 Enabled\' if web_search_enabled else \'\u274c Disabled\'}"\n    )\n\n    # Include feature status in system prompt\n    openai_messages = [\n        {\n            "role": "system",\n            "content": (\n                "You are a simple greeting agent.\\n"\n                "Greet the user and let them know their current feature settings:\\n"\n                f"{features_msg}\\n"\n                "Keep your response brief and friendly."\n            ),\n        }\n    ]\n\n    # Add conversation history\n    for message in request.messages:\n        if message.role == "human":\n            openai_messages.append({"role": "user", "content": message.content})\n        elif message.role == "ai" and isinstance(message.content, str):\n            openai_messages.append({"role": "assistant", "content": message.content})\n\n    async def execution_loop() -> AsyncGenerator[MessageChunkSSE, None]:\n        client = openai.AsyncOpenAI()\n        async for event in await client.chat.completions.create(\n            model="gpt-4o",\n            messages=openai_messages,\n            stream=True,\n        ):\n            if chunk := event.choices[0].delta.content:\n                yield message_chunk(chunk)\n\n    return EventSourceResponse(\n        content=(\n            event.model_dump(exclude_none=True) async for event in execution_loop()\n        ),\n        media_type="text/event-stream",\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"feature-types",children:"Feature types"}),"\n",(0,a.jsx)(n.h3,{id:"boolean-features",children:"Boolean features"}),"\n",(0,a.jsx)(n.p,{children:"Simple on/off switches in the agent descriptor:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'"features": {\n    "streaming": True,\n    "some-feature": False\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"complex-features",children:"Complex features"}),"\n",(0,a.jsx)(n.p,{children:"Rich feature objects with metadata:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'"features": {\n    "research-mode": {\n        "label": "Research Mode",\n        "default": True,\n        "description": "Enables comprehensive research capabilities"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-behavior",children:"Conditional behavior"}),"\n",(0,a.jsx)(n.p,{children:"Adjust agent behavior based on enabled features:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'workspace_options = getattr(request, "workspace_options", [])\n\nif "research-mode" in workspace_options:\n    # Enable research capabilities\n    pass\n\nif "web-search" in workspace_options:\n    # Enable web search functionality\n    pass\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);