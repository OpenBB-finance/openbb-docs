"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14242],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var i=t(27143),a=t(74848);function s(e){let{title:n}=e;return(0,a.jsx)(i.A,{children:(0,a.jsx)("title",{children:n})})}},79535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"workspace/data-widgets/file-viewer","title":"File Viewer","description":"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace","source":"@site/content/workspace/data-widgets/file-viewer.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/file-viewer","permalink":"/workspace/data-widgets/file-viewer","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/file-viewer.md","tags":[],"version":"current","lastUpdatedBy":"jose-donato","lastUpdatedAt":1750173638000,"sidebarPosition":7,"frontMatter":{"title":"File Viewer","sidebar_position":7,"description":"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace","keywords":["widgets","pdf","file viewer","base64","multi-file viewer"]},"sidebar":"tutorialSidebar","previous":{"title":"Metric","permalink":"/workspace/data-widgets/metric"},"next":{"title":"AgGrid Table Charts","permalink":"/workspace/data-widgets/aggrid-table-charts"}}');var a=t(74848),s=t(28453),l=t(39068);const o={title:"File Viewer",sidebar_position:7,description:"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace",keywords:["widgets","pdf","file viewer","base64","multi-file viewer"]},r=void 0,p={},d=[{value:"Single File",id:"single-file",level:2},{value:"PDF Widget with Base64",id:"pdf-widget-with-base64",level:3},{value:"PDF Widget with URL",id:"pdf-widget-with-url",level:3},{value:"Multi File",id:"multi-file",level:2},{value:"Multi PDF Viewer with Base64",id:"multi-pdf-viewer-with-base64",level:3},{value:"Multi PDF Viewer with URL",id:"multi-pdf-viewer-with-url",level:3},{value:"More complex example",id:"more-complex-example",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(l.A,{title:"File Viewer | OpenBB Workspace Docs"}),"\n",(0,a.jsx)(n.h2,{id:"single-file",children:"Single File"}),"\n",(0,a.jsx)(n.p,{children:"The (multi) file viewer widget supports two methods for serving files:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Base64 Encoding: The file content is encoded in base64 and sent directly in the response."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"URL Reference: A URL to the file is provided, which can be a presigned URL for secure access to files stored in cloud storage."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The endpoint should return a JSON response with the following structure:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "headers": {\n    "Content-Type": "application/json"\n  },\n  "data_format": {\n    "data_type": "pdf",\n    "filename": "example.pdf"\n  },\n  "content": "base64_encoded_content",  // For base64 method\n  // OR\n  "file_reference": "https://example.com/path/to/file.pdf"  // For URL method\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Note:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data_format.data_type"}),': The type of file (e.g., "pdf", "csv", "txt")']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data_format.filename"}),": The name of the file to display"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"content"}),": Base64-encoded file content (for base64 method)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"file_reference"}),": URL to the file (for URL method)"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"pdf-widget-with-base64",children:"PDF Widget with Base64"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays a PDF file using base64 encoding. This method is useful for displaying PDFs directly in the workspace."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with Base64 Example",src:"https://openbb-cms.directus.app/assets/9e202a65-eb71-4e43-b111-5f5c79dfa6dc.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with Base64",\n    "description": "Display a PDF file with base64 encoding",\n    "endpoint": "pdf_widget_base64",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n    "type": "pdf",\n})\n@app.get("/pdf_widget_base64")\ndef get_pdf_widget_base64():\n    """Serve a file through base64 encoding."""\n    try:\n        name = "sample.pdf"\n        with open(ROOT_PATH / name, "rb") as file:\n            file_data = file.read()\n            encoded_data = base64.b64encode(file_data)\n            content = encoded_data.decode("utf-8")\n    \n    except FileNotFoundError as exc:\n        raise HTTPException(\n            status_code=404,\n            detail="File not found"\n        ) from exc\n    \n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": name,\n            },\n            "content": content,\n        },\n    )\n'})}),"\n",(0,a.jsx)(n.h3,{id:"pdf-widget-with-url",children:"PDF Widget with URL"}),"\n",(0,a.jsx)(n.p,{children:"A widget that displays a PDF file using a direct URL. This method is more efficient for larger PDFs as it doesn't require base64 encoding."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with URL Example",src:"https://openbb-cms.directus.app/assets/7d4fc0e6-f458-49a1-9be9-161d2bec1886.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with URL",\n    "description": "Display a PDF file",\n    "type": "pdf", \n    "endpoint": "pdf_widget_url",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n})\n@app.get("/pdf_widget_url")\ndef get_pdf_widget_url():\n    """Serve a file through URL."""\n    file_reference = "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf"\n    if not file_reference:\n        raise HTTPException(status_code=404, detail="File not found")\n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": "Sample.pdf",\n            },\n            "url": file_reference,\n        },\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"multi-file",children:"Multi File"}),"\n",(0,a.jsx)(n.p,{children:"The main difference, in implementation, between multi and single file viewer is that the multi-file viewer requires two endpoints:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"An endpoint to get the list of available options."}),"\n",(0,a.jsx)(n.li,{children:"A POST endpoint to request the list of selected file names and receive a list of results."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Model that we need:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import List, Literal\nfrom pydantic import BaseModel\n\n\nclass FileOption(BaseModel):\n    label: str\n    value: str\n\n\nclass FileRequest(BaseModel):\n    filenames: List[str]\n\n\nclass DataFormat(BaseModel):\n    data_type: Literal["pdf"]\n    filename: str\n\n\nclass DataContent(BaseModel):\n    content: str\n    data_format: DataFormat\n\n\nclass DataUrl(BaseModel):\n    url: str\n    data_format: DataFormat\n\n\nclass DataError(BaseModel):\n    error_type: Literal["not_found"]\n    content: str\n\n\nFileOptions = List[FileOption]\nFileResponse = List[DataContent | DataUrl | DataError]\n'})}),"\n",(0,a.jsx)(n.p,{children:"For the endpoint with the list of available files, we are going to utilize:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'\n# PDF files data\nPDFS = {\n    "sample.pdf": {\n        "label": "Sample",\n        "filename": "Sample",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf",\n    },\n    "bitcoin.pdf": {\n        "label": "Bitcoin",\n        "filename": "bitcoin.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",\n    }\n}\n\n# Sample PDF options endpoint\n# This is a simple endpoint to get the list of available PDFs\n# and return it in the JSON format. The reason why we need this endpoint is because the multi_file_viewer widget\n# needs to know the list of available PDFs to display and we pass this endpoint to the widget as the optionsEndpoint\n@app.get("/get_pdf_options")\nasync def get_pdf_options():\n    """Get list of available PDFs"""\n    return [\n        FileOption(label=pdf["label"], value=pdf["filename"])\n        for pdf in PDFS.values()\n    ]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"multi-pdf-viewer-with-base64",children:"Multi PDF Viewer with Base64"}),"\n",(0,a.jsx)(n.p,{children:"A widget that allows viewing multiple PDF files using base64 encoding. Includes a file selector parameter for choosing which PDFs to display."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Multi PDF Viewer with Base64 Example",src:"https://openbb-cms.directus.app/assets/610ec2bc-2768-4d48-9f0b-0ad08a69b41e.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Multi PDF Viewer - Base64",\n    "description": "View multiple PDF files using base64 encoding",\n    "type": "multi_file_viewer",\n    "endpoint": "multi_pdf_base64",\n    "gridData": {\n        "w": 20,\n        "h": 10\n    },\n    "params": [\n        {\n            "paramName": "filenames",\n            "description": "PDF files to display",\n            "type": "endpoint",\n            "label": "PDF File",\n            "optionsEndpoint": "/get_pdf_options",\n            "show": False,\n            "value": ["bitcoin.pdf"],\n            "multiSelect": True,\n            "roles": ["fileSelector"]\n        }\n    ]\n})\n@app.post("/multi_pdf_base64")\nasync def get_multi_pdf_base64(\n    request: FileRequest,\n) -> List[DataContent | DataUrl | DataError]:\n    """Get PDF content in base64 format"""\n    files = []\n    for name in request.filenames:\n        if whitepaper := PDFS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            file_path = Path.cwd() / file_name_with_extension\n            if file_path.exists():\n                with open(file_path, "rb") as file:\n                    base64_content = base64.b64encode(file.read()).decode("utf-8")\n                    files.append(\n                        DataContent(\n                            content=base64_content,\n                            data_format=DataFormat(\n                                data_type="pdf",\n                                filename=file_name_with_extension,\n                            ),\n                        ).model_dump()\n                    )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found",\n                        content="File not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found",\n                    content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )                    \n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"multi-pdf-viewer-with-url",children:"Multi PDF Viewer with URL"}),"\n",(0,a.jsx)(n.p,{children:"A widget that allows viewing multiple PDF files using direct URLs. More efficient for larger PDFs as it doesn't require base64 encoding."}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Multi PDF Viewer with URL Example",src:"https://openbb-cms.directus.app/assets/8a269267-acd3-4c4f-93cb-0b64c4a87eda.png"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Multi PDF Viewer - URL",\n    "description": "View multiple PDF files using URLs",\n    "type": "multi_file_viewer", \n    "endpoint": "multi_pdf_url",\n    "gridData": {\n        "w": 20,\n        "h": 10\n    },\n    "params": [\n        {\n            "paramName": "filenames",\n            "description": "PDF files to display",\n            "type": "endpoint",\n            "label": "PDF File",\n            "optionsEndpoint": "/get_pdf_options",\n            "value": ["sample.pdf"],\n            "show": False,\n            "multiSelect": True,\n            "roles": ["fileSelector"]\n        }\n    ]\n})\n@app.post("/multi_pdf_url")\nasync def get_multi_pdf_url(\n    request: FileRequest,\n) -> List[DataContent | DataUrl | DataError]:\n    files = []\n    for name in request.filenames:\n        if whitepaper := PDFS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            if url := whitepaper.get("url"):\n                files.append(\n                    DataUrl(\n                        url=url,\n                        data_format=DataFormat(\n                            data_type="pdf",\n                            filename=file_name_with_extension\n                        ),\n                    ).model_dump()\n                )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found",\n                        content="URL not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found",\n                    content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)    \n'})}),"\n",(0,a.jsx)(n.h3,{id:"more-complex-example",children:"More complex example"}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"600",alt:"multi-file-viewer",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/multi-file-viewer.png"}),"\n",(0,a.jsxs)(n.p,{children:["This multi-file-viewer widget introduces a parameter called ",(0,a.jsx)(n.code,{children:"optionsParams"})," which allows you to pass the options to an endpoint from a different parameter. More information ",(0,a.jsx)(n.a,{href:"/workspace/widget-parameters/dependent-dropdown",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In our case we want to pass the options in the ",(0,a.jsx)(n.code,{children:"type"})," parameter to the ",(0,a.jsx)(n.code,{children:"/random/whitepapers"})," endpoint to filter the list of whitepapers."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# You can find these files in the OpenBB GitHub repository in the backend-examples-for-openbb-workspace folder.\n# https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace\n# Sample whitepaper data for the multi-file viewer widget\n# This is a list of dictionaries, each representing a whitepaper\n# Each whitepaper has the following properties:\n# - label: The name of the whitepaper\n# - filename: The file name of the whitepaper\n# - url: The URL to the whitepaper\n# - category: The type of whitepaper\nWHITEPAPERS = {\n    "bitcoin.pdf": {\n        "label": "Bitcoin",\n        "filename": "bitcoin.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",\n        "category": "l1",\n    },\n    "ethereum.pdf": {\n        "label": "Ethereum",\n        "filename": "ethereum.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",\n        "category": "l1",\n    },\n    "chainlink.pdf": {\n        "label": "ChainLink",\n        "filename": "chainlink.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",\n        "category": "oracles",\n    },\n    "solana.pdf": {\n        "label": "Solana",\n        "filename": "solana.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",\n        "category": "l1",\n    },\n}\n\n\n@app.get("/options")\nasync def get_options(category: str = Query("all")):\n    if category == "all":\n        return [\n            FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n            for whitepaper in WHITEPAPERS.values()\n        ]\n    return [\n        FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n        for whitepaper in WHITEPAPERS.values()\n        if whitepaper["category"] == category\n    ]\n\n# This is a simple example of how to return a base64 encoded pdf.\n@app.post("/whitepapers/base64")\nasync def get_whitepapers_base64(\n    request: FileRequest,\n) -> List[DataContent | DataUrl | DataError]:\n    files = []\n    for name in request.filenames:\n        if whitepaper := WHITEPAPERS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            file_path = Path.cwd() / file_name_with_extension\n            if file_path.exists():\n                with open(file_path, "rb") as file:\n                    base64_content = base64.b64encode(file.read()).decode("utf-8")\n                    files.append(\n                        DataContent(\n                            content=base64_content,\n                            data_format=DataFormat(\n                                data_type="pdf",\n                                filename=file_name_with_extension,\n                            ),\n                        ).model_dump()\n                    )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found", content="File not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n\n\n# This is a simple example of how to return a url\n# if you are using this endpoint you will need to change the widgets.json file to use this endpoint as well.\n# You would want to return your own presigned url here for the file to load correctly or else the file will not load due to CORS policy.\n@app.post("/whitepapers/url")\nasync def get_whitepapers_url(\n    request: FileRequest,\n) -> List[DataContent | DataUrl | DataError]:\n    files = []\n    for name in request.filenames:\n        if whitepaper := WHITEPAPERS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            if url := whitepaper.get("url"):\n                files.append(\n                    DataUrl(\n                        url=url,\n                        data_format=DataFormat(\n                            data_type="pdf", filename=file_name_with_extension\n                        ),\n                    ).model_dump()\n                )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found", content="URL not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding ",(0,a.jsx)(n.code,{children:"widgets.json"})," would have the following format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "whitepapers": {\n    "type": "multi_file_viewer",\n    "name": "Whitepapers",\n    "description": "A collection of crypto whitepapers.",\n    "endpoint": "/whitepapers/base64",\n    "gridData": {\n      "w": 40,\n      "h": 10\n    },\n    "params": [\n      {\n        "type": "endpoint",\n        "paramName": "filenames",\n        "value": ["bitcoin.pdf"],\n        "label": "Whitepaper",\n        "description": "Whitepaper to display.",\n        "optionsEndpoint": "/options",\n        "show": false,\n        "optionsParams": {\n          "category": "$category"\n        },\n        "multiSelect": true,\n        "roles": ["fileSelector"]\n      },\n      {\n        "type": "text",\n        "paramName": "category",\n        "value": "all",\n        "label": "Category",\n        "description": "Category of whitepaper to fetch.",\n        "options": [\n          {\n            "label": "All",\n            "value": "all"\n          },\n          {\n            "label": "L1",\n            "value": "l1"\n          },\n          {\n            "label": "L2",\n            "value": "l2"\n          },\n          {\n            "label": "Oracles",\n            "value": "oracles"\n          },\n          {\n            "label": "Defi",\n            "value": "defi"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Key configuration elements:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"type"}),': Set to "multi_file_viewer" to use this widget type']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"endpoint"}),": The endpoint that will return the file content"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"}),": Parameters for filtering and selecting files to display"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"filenames"})," parameter uses an endpoint to fetch a list of options"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"category"})," parameter allows filtering by category"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);