"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7544],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(27143),s=t(74848);function r(e){let{title:n}=e;return(0,s.jsx)(a.A,{children:(0,s.jsx)("title",{children:n})})}},70490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"python/basic_usage/response_model","title":"Response Model Output","description":"This page details the basic response and output that can be expected to be received from the the ODP Python Package.","source":"@site/content/python/basic_usage/response_model.mdx","sourceDirName":"python/basic_usage","slug":"/python/basic_usage/response_model","permalink":"/python/basic_usage/response_model","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/basic_usage/response_model.mdx","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1761133924000,"sidebarPosition":2,"frontMatter":{"title":"Response Model Output","sidebar_position":2,"description":"This page details the basic response and output that can be expected to be received from the the ODP Python Package.","keywords":["ODP","Python","results","tutorial","standardized output","OBBject","basic response","provider","warnings","chart","extra","command coverage"]},"sidebar":"tutorialSidebar","previous":{"title":"Input Query Parameters","permalink":"/python/basic_usage/query_parameters"},"next":{"title":"Introduction","permalink":"/python/extensions/"}}');var s=t(74848),r=t(28453),i=t(39068);const o={title:"Response Model Output",sidebar_position:2,description:"This page details the basic response and output that can be expected to be received from the the ODP Python Package.",keywords:["ODP","Python","results","tutorial","standardized output","OBBject","basic response","provider","warnings","chart","extra","command coverage"]},d=void 0,c={},l=[{value:"OBBject",id:"obbject",level:2},{value:"Results Formatters",id:"results-formatters",level:3},{value:"Metadata",id:"metadata",level:2},{value:"Execution Metadata",id:"execution-metadata",level:3},{value:"Disabling",id:"disabling",level:3},{value:"Results Metadata",id:"results-metadata",level:3},{value:"LLM Mode",id:"llm-mode",level:2},{value:"Output",id:"output",level:3},{value:"Docstring Sections",id:"docstring-sections",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{title:"Python Outputs - Basic Usage | OpenBB Docs"}),"\n",(0,s.jsx)(n.p,{children:"The outputs of the API and Python Interface are nearly identical,\nbut the API output is only a string representation of the function response.\nIn Python, it is an extensible Pydantic object."}),"\n",(0,s.jsx)(n.h2,{id:"obbject",children:"OBBject"}),"\n",(0,s.jsxs)(n.p,{children:["The output of every command is an object which contains the results of the request, along with additional information.\n",(0,s.jsx)(n.code,{children:"OBBject"})," always returns with the fields listed below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"id: ...                 # UUID Tag\nresults: ...            # Serializable results.\nprovider: ...           # Provider name.\nwarnings: ...           # List of warnings collected during execution.\nchart: ...              # Chart object, if any.\nextra: ...              # Extra info and execution metadata.\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\ndata = obb.equity.price.historical("SPY", provider="polygon")\n\ndata\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"OBBject\n\nid: 06520558-d54a-7e53-8000-7aafc8a42694\nresults: [{'date': datetime.datetime(2022, 10, 5, 0, 0), 'open': 375.62, 'high': 37...\nprovider: polygon\nwarnings: None\nchart: None\nextra: {'metadata': {'arguments': {'provider_choices': {'provider': 'polygon'}, 'st...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"results-formatters",children:"Results Formatters"}),"\n",(0,s.jsx)(n.p,{children:"Additional class methods are helpers for converting the results to a variety of formats."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_dict()"}),': converts to a dictionary, accepting all standard "orientation" parameters, i.e., "records"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_df()"})," / ",(0,s.jsx)(n.code,{children:"to_dataframe()"}),": converts to a Pandas DataFrame."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_numpy()"}),": converts to a Numpy array."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_polars()"}),": converts to a Polars table."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"The preferred output type can be set with a user preference."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'obb.user.preferences.output_type="dataframe"\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(n.p,{children:["The ODP Python package returns metadata related to the command execution, as well as any returned from a Provider endpoint.\nBoth are stored in the ",(0,s.jsx)(n.code,{children:"extra"})," attribute of the ",(0,s.jsx)(n.a,{href:"/python/developer/architecture_overview#obbject-class",children:"OBBject"})," response object."]}),"\n",(0,s.jsx)(n.p,{children:"It will always contain these elements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"arguments"}),": Any parameters supplied, and the selected provider source, to the function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"duration"}),": The number of nanoseconds the function took to complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"route"}),": The command path."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timestamp"}),": Timestamp for when the command was run."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"execution-metadata",children:"Execution Metadata"}),"\n",(0,s.jsxs)(n.p,{children:["Metadata for the command execution is captured under the ",(0,s.jsx)(n.code,{children:"metadata"})," key."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\ndata = obb.economy.calendar(provider="nasdaq")\n\ndata.extra\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"{'metadata': Metadata\n\n arguments: {'provider_choices': {'provider': 'nasdaq'}, 'standard_params': {'start_date': None, 'end_date': None}, 'extra_params': {}}\n duration: 565256375\n route: /economy/calendar\n timestamp: 2024-05-22 11:28:57.149548}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"disabling",children:"Disabling"}),"\n",(0,s.jsxs)(n.p,{children:["This content can be disabled as a setting in the ",(0,s.jsx)(n.a,{href:"/python/settings/environment_variables",children:(0,s.jsx)(n.code,{children:"user_settings.json"})})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "preferences": {\n    "metadata": false\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Metadata included as part of the command results will not be disabled by this setting."})}),"\n",(0,s.jsx)(n.h3,{id:"results-metadata",children:"Results Metadata"}),"\n",(0,s.jsxs)(n.p,{children:["Where commands return metadata related to the requested data, it is keyable from the ",(0,s.jsx)(n.code,{children:"extra"})," attribute with, ",(0,s.jsx)(n.code,{children:"results_metadata"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This dictionary contains contextual information and data for the ",(0,s.jsx)(n.code,{children:"results"})," that is not included in the tables.\nResults metadata will vary by command and provider, so it is worth exploring when it is included, below is a selection of samples."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{mdxType:"summary",children:"FRED"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = obb.economy.fred_series("T10Y2Y")\n\ndata.extra["results_metadata"]\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"{'T10Y2Y': {'title': '10-Year Treasury Constant Maturity Minus 2-Year Treasury Constant Maturity',\n  'units': 'Percent',\n  'frequency': 'Daily',\n  'seasonal_adjustment': 'Not Seasonally Adjusted',\n  'notes': 'Starting with the update on June 21, 2019, the Treasury bond data used in calculating interest rate spreads is obtained directly from the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).\\r\\nSeries is calculated as the spread between 10-Year Treasury Constant Maturity (BC_10YEAR) and 2-Year Treasury Constant Maturity (BC_2YEAR). Both underlying series are published at the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).'}}\n"})}),(0,s.jsxs)(n.p,{children:["The information stored here is used by the ",(0,s.jsx)(n.code,{children:"openbb-charting"})," extension for display."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00",alt:"FRED Chart"})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{mdxType:"summary",children:"EconDB"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = obb.economy.indicators("PCOPP", provider="econdb")\n\ndata.extra\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"{'results_metadata': {'PCOPP': {'title': 'World - Copper',\n   'country': 'World',\n   'frequency': 'M',\n   'dataset': 'IMF_PCPS',\n   'transform': None,\n   'units': 'USD',\n   'scale': 'Units',\n   'multiplier': 1,\n   'additional_info': {'FREQ:Frequency': 'M:Monthly',\n    'REF_AREA:Reference Area': 'W00:All Countries, excluding the IO',\n    'COMMODITY:Commodity': 'PCOPP:Primary Commodity Prices, Copper',\n    'UNIT_MEASURE:Unit of Measure': 'USD:US Dollars',\n    'UNIT_MULT:Scale': '0:Units'}}},\n}\n"})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{mdxType:"summary",children:"Cboe"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = obb.derivatives.options.chains("SPX", provider="cboe")\n\ndata.extra\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"{'results_metadata': {'symbol': '^SPX',\n  'security_type': 'index',\n  'bid': 5293.0298,\n  'bid_size': 1,\n  'ask': 5295.2002,\n  'ask_size': 1,\n  'open': 5319.2798,\n  'high': 5323.1802,\n  'low': 5286.0098,\n  'close': 5294.0898,\n  'volume': 0,\n  'current_price': 5294.0898,\n  'prev_close': 5321.4102,\n  'change': -27.3202,\n  'change_percent': None,\n  'iv30': 10.291,\n  'iv30_change': 0.546,\n  'iv30_change_percent': 0.056029,\n  'last_tick': 'down',\n  'last_trade_timestamp': '2024-05-22 14:50:36'},\n}\n"})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{mdxType:"summary",children:"SEC"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = obb.etf.holdings("BIL", provider="sec")\n\ndata.extra\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"{'results_metadata': {'fund_name': 'SPDR(R) Bloomberg 1-3 Month T-Bill ETF',\n  'series_id': 'S000017326',\n  'lei': '549300GQCVCME1YJ6B50',\n  'period_ending': '2023-12-31',\n  'fiscal_year_end': '2024-06-30',\n  'total_assets': 35015168619.91,\n  'total_liabilities': 1638123692.3,\n  'net_assets': 33377044927.61,\n  'cash_and_equivalents': '0.00000000',\n  'returns': {'2023-10-31': 0.0044,\n   '2023-11-30': 0.0044,\n   '2023-12-31': 0.0046},\n  'flow': {'2023-10-31': {'creation': 6591274706.7,\n    'redemption': 604472521.85},\n   '2023-11-30': {'creation': 3244045301.3, 'redemption': 4478684406.9},\n   '2023-12-31': {'creation': 639802303.2, 'redemption': 3018629744.0}},\n  'gains': {'2023-10-31': {'realized': -65924.99, 'unrealized': -3793500.04},\n   '2023-11-30': {'realized': 360345.39, 'unrealized': 292210.09},\n   '2023-12-31': {'realized': 319796.93, 'unrealized': 3862704.46}},\n  'borrowers': [{'name': 'BofA Securities, Inc.',\n    'lei': '549300HN4UKV1E2R3U73',\n    'value': 211562959.29},\n   {'name': 'J.P. Morgan Securities LLC',\n    'lei': 'ZBUT11V806EZRVTWT807',\n    'value': 957576952.9},\n   {'name': 'ING Financial Markets LLC',\n    'lei': 'KBVRJ5K57JZ3E2AVWX40',\n    'value': 247944722.5},\n   {'name': 'Barclays Capital Inc.',\n    'lei': 'AC28XWWI3WIBK2824319',\n    'value': 248250000.0},\n   {'name': 'Goldman Sachs & Co. LLC',\n    'lei': 'FOR8UP27PHTHYVLBNG30',\n    'value': 110741598.05},\n   {'name': 'Bank of Montreal',\n    'lei': 'NQQ6HPCNCCU6TUTQYE16',\n    'value': 87276542.32},\n   {'name': 'Nomura Securities International, Inc.',\n    'lei': 'OXTKY6Q8X53C9ILVV871',\n    'value': 469556172.09},\n   {'name': 'Daiwa Capital Markets America Inc.',\n    'lei': 'M67H5PRC0NQKM73ZAS82',\n    'value': 198566750.0}]}\n}\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"llm-mode",children:"LLM Mode"}),"\n",(0,s.jsxs)(n.p,{children:["Large Language Model (LLM) mode is optimized for interfacing with LLM frameworks such as ",(0,s.jsx)(n.a,{href:"https://github.com/jackmpcollins/magentic",children:"Magentic"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/langchain-ai/langchain",children:"Langchain"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/deepset-ai/haystack",children:"Haystack"}),", and others. It allows control over the length of docstrings, and converts the output to a JSON-encoded string."]}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["Enable LLM mode for the response object by configuring ",(0,s.jsx)(n.a,{href:"/python/settings/user_settings",children:(0,s.jsx)(n.code,{children:"user_settings.json"})}),", or for just the current Python session."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\nobb.user.preferences.output_type="llm"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Function responses will only contain the ",(0,s.jsx)(n.code,{children:"results"})," portion of the ",(0,s.jsx)(n.code,{children:"OBBject"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'\'[{"date":"2025-10-16T00:00:00","maturity":"month_3","rate":0.0189885821,"maturity_years":0.25}, ... ]\'\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can try other output ",(0,s.jsx)(n.a,{href:"#results-formatters",children:"formatters"})," such as ",(0,s.jsx)(n.code,{children:"dict"}),", or you can build your own output handlers as ",(0,s.jsx)(n.a,{href:"/python/developer/extension_types/obbject",children:"OBBject extensions"})]}),"\n",(0,s.jsx)(n.h3,{id:"docstring-sections",children:"Docstring Sections"}),"\n",(0,s.jsx)(n.admonition,{title:"Python Interface Only",type:"important",children:(0,s.jsx)(n.p,{children:"This setting does not alter the REST API documentation."})}),"\n",(0,s.jsxs)(n.p,{children:["Sections and length are defined in ",(0,s.jsx)(n.a,{href:"/python/settings/system_settings",children:(0,s.jsx)(n.code,{children:"system_settings.json"})}),".\nThey allow targeting individual sections, and limiting the overall length."]}),"\n",(0,s.jsxs)(n.p,{children:["Available docstring sections are: ",(0,s.jsx)(n.code,{children:"['description', 'parameters', 'returns', 'examples']"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "python_settings": {\n    "docstring_sections": ["description", "examples"],\n    "docstring_max_length": 1024\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, rebuild the Python static assets to apply these changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"openbb-build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The docstring should now be reduced, for example ",(0,s.jsx)(n.code,{children:"obb.equity.price.historical"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"Get historical price data for a given stock. This includes open, high, low, close, and volume.\n\n\nExamples\n--------\n>>> from openbb import obb\n>>> obb.equity.price.historical(symbol='AAPL', provider='fmp')\n>>> obb.equity.price.historical(symbol='AAPL', interval='1d', provider='intrinio')\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);