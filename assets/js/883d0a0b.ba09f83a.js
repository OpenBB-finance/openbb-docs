"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[74045],{9535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"workspace/developers/widget-types/file-viewer","title":"File Viewer","description":"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace","source":"@site/content/workspace/developers/widget-types/file-viewer.md","sourceDirName":"workspace/developers/widget-types","slug":"/workspace/developers/widget-types/file-viewer","permalink":"/workspace/developers/widget-types/file-viewer","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/widget-types/file-viewer.md","tags":[],"version":"current","lastUpdatedBy":"minhhoang1023","lastUpdatedAt":1761019357000,"sidebarPosition":6,"frontMatter":{"title":"File Viewer","sidebar_position":6,"description":"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace","keywords":["widgets","pdf","file viewer","base64","multi-file viewer"]},"sidebar":"tutorialSidebar","previous":{"title":"Metric","permalink":"/workspace/developers/widget-types/metric"},"next":{"title":"SSRM Mode","permalink":"/workspace/developers/widget-types/ssrm_mode"}}');var i=t(74848),s=t(28453),l=t(39068);const r={title:"File Viewer",sidebar_position:6,description:"Guide to using PDF and multi-PDF viewer widgets in OpenBB Workspace",keywords:["widgets","pdf","file viewer","base64","multi-file viewer"]},o=void 0,p={},d=[{value:"Single File",id:"single-file",level:2},{value:"PDF Widget with Base64",id:"pdf-widget-with-base64",level:3},{value:"PDF Widget with URL",id:"pdf-widget-with-url",level:3},{value:"Multi File",id:"multi-file",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Required Models",id:"required-models",level:4},{value:"Sample Data",id:"sample-data",level:4},{value:"Options Endpoint",id:"options-endpoint",level:4},{value:"Multi File Viewer with Base64 (POST)",id:"multi-file-viewer-with-base64-post",level:4},{value:"Multi File Viewer with URL (POST)",id:"multi-file-viewer-with-url-post",level:4},{value:"More complex example",id:"more-complex-example",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.A,{title:"File Viewer | OpenBB Workspace Docs"}),"\n",(0,i.jsx)(n.h2,{id:"single-file",children:"Single File"}),"\n",(0,i.jsx)(n.p,{children:"The (multi) file viewer widget supports two methods for serving files:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Base64 Encoding: The file content is encoded in base64 and sent directly in the response."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"URL Reference: A URL to the file is provided, which can be a presigned URL for secure access to files stored in cloud storage."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The endpoint should return a JSON response with the following structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "headers": {\n    "Content-Type": "application/json"\n  },\n  "data_format": {\n    "data_type": "pdf",\n    "filename": "example.pdf"\n  },\n  "content": "base64_encoded_content",  // For base64 method\n  // OR\n  "file_reference": "https://example.com/path/to/file.pdf"  // For URL method\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data_format.data_type"}),': The type of file (e.g., "pdf", "csv", "txt")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data_format.filename"}),": The name of the file to display"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"content"}),": Base64-encoded file content (for base64 method)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"file_reference"}),": URL to the file (for URL method)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pdf-widget-with-base64",children:"PDF Widget with Base64"}),"\n",(0,i.jsx)(n.p,{children:"A widget that displays a PDF file using base64 encoding. This method is useful for displaying PDFs directly in the workspace."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with Base64 Example",src:"https://openbb-cms.directus.app/assets/9e202a65-eb71-4e43-b111-5f5c79dfa6dc.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with Base64",\n    "description": "Display a PDF file with base64 encoding",\n    "endpoint": "pdf_widget_base64",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n    "type": "pdf",\n})\n@app.get("/pdf_widget_base64")\ndef get_pdf_widget_base64():\n    """Serve a file through base64 encoding."""\n    try:\n        name = "sample.pdf"\n        with open(ROOT_PATH / name, "rb") as file:\n            file_data = file.read()\n            encoded_data = base64.b64encode(file_data)\n            content = encoded_data.decode("utf-8")\n    \n    except FileNotFoundError as exc:\n        raise HTTPException(\n            status_code=404,\n            detail="File not found"\n        ) from exc\n    \n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": name,\n            },\n            "content": content,\n        },\n    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pdf-widget-with-url",children:"PDF Widget with URL"}),"\n",(0,i.jsx)(n.p,{children:"A widget that displays a PDF file using a direct URL. This method is more efficient for larger PDFs as it doesn't require base64 encoding."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"PDF Widget with URL Example",src:"https://openbb-cms.directus.app/assets/7d4fc0e6-f458-49a1-9be9-161d2bec1886.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "PDF Widget with URL",\n    "description": "Display a PDF file",\n    "type": "pdf", \n    "endpoint": "pdf_widget_url",\n    "gridData": {\n        "w": 20,\n        "h": 20\n    },\n})\n@app.get("/pdf_widget_url")\ndef get_pdf_widget_url():\n    """Serve a file through URL."""\n    file_reference = "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/sample.pdf"\n    if not file_reference:\n        raise HTTPException(status_code=404, detail="File not found")\n    return JSONResponse(\n        headers={"Content-Type": "application/json"},\n        content={\n            "data_format": {\n                "data_type": "pdf",\n                "filename": "Sample.pdf",\n            },\n            "url": file_reference,\n        },\n    )\n'})}),"\n",(0,i.jsx)(n.h2,{id:"multi-file",children:"Multi File"}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Multi PDF Viewer with Base64 Example",src:"https://openbb-cms.directus.app/assets/610ec2bc-2768-4d48-9f0b-0ad08a69b41e.png"}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecation Notice",type:"warning",children:(0,i.jsx)(n.p,{children:"The GET-based approach for multi-file viewers is deprecated. Please use the new POST-based approach shown in the example below.\nThe major change is the GET request to fetch the files is not a POST request that can take in and return a list of files."})}),"\n",(0,i.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.p,{children:"The new implementation uses POST requests to handle multiple files efficiently in a single request. This approach provides better performance and error handling."}),"\n",(0,i.jsx)(n.h4,{id:"required-models",children:"Required Models"}),"\n",(0,i.jsx)(n.p,{children:"First, define the necessary Pydantic models:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pydantic import BaseModel\nfrom typing import List, Union\n\nclass FileOption(BaseModel):\n    label: str\n    value: str\n\nclass FileRequest(BaseModel):\n    filenames: List[str]\n\nclass DataFormat(BaseModel):\n    data_type: str\n    filename: str\n\nclass DataContent(BaseModel):\n    content: str\n    data_format: DataFormat\n\nclass DataUrl(BaseModel):\n    url: str\n    data_format: DataFormat\n\nclass DataError(BaseModel):\n    error_type: str\n    content: str\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-data",children:"Sample Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Sample whitepaper data\nWHITEPAPERS = {\n    "bitcoin.pdf": {\n        "label": "Bitcoin",\n        "filename": "bitcoin.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",\n        "category": "l1",\n    },\n    "ethereum.pdf": {\n        "label": "Ethereum",\n        "filename": "ethereum.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",\n        "category": "l1",\n    },\n    "chainlink.pdf": {\n        "label": "Chainlink",\n        "filename": "chainlink.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",\n        "category": "oracles",\n    },\n    "solana.pdf": {\n        "label": "Solana",\n        "filename": "solana.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",\n        "category": "l1",\n    },\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"options-endpoint",children:"Options Endpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get("/options")\nasync def get_options(category: str = "all") -> List[FileOption]:\n    """Get list of available files filtered by category"""\n    if category == "all":\n        return [\n            FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n            for whitepaper in WHITEPAPERS.values()\n        ]\n    return [\n        FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n        for whitepaper in WHITEPAPERS.values()\n        if whitepaper["category"] == category\n    ]\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multi-file-viewer-with-base64-post",children:"Multi File Viewer with Base64 (POST)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.post("/whitepapers/base64")\nasync def get_whitepapers_base64(\n    request: FileRequest,\n) -> List[Union[DataContent, DataUrl, DataError]]:\n    """Get multiple PDF files in base64 format"""\n    files = []\n    for name in request.filenames:\n        if whitepaper := WHITEPAPERS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            file_path = Path.cwd() / "whitepapers" / file_name_with_extension\n            if file_path.exists():\n                with open(file_path, "rb") as file:\n                    base64_content = base64.b64encode(file.read()).decode("utf-8")\n                    files.append(\n                        DataContent(\n                            content=base64_content,\n                            data_format=DataFormat(\n                                data_type="pdf",\n                                filename=file_name_with_extension,\n                            ),\n                        ).model_dump()\n                    )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found", content="File not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multi-file-viewer-with-url-post",children:"Multi File Viewer with URL (POST)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.post("/whitepapers/url")\nasync def get_whitepapers_url(\n    request: FileRequest,\n) -> List[Union[DataContent, DataUrl, DataError]]:\n    """Get multiple PDF files via URLs"""\n    files = []\n    for name in request.filenames:\n        if whitepaper := WHITEPAPERS.get(name):\n            file_name_with_extension = whitepaper["filename"]\n            if url := whitepaper.get("url"):\n                files.append(\n                    DataUrl(\n                        url=url,\n                        data_format=DataFormat(\n                            data_type="pdf", filename=file_name_with_extension\n                        ),\n                    ).model_dump()\n                )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found", content="URL not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{name}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The corresponding ",(0,i.jsx)(n.code,{children:"widgets.json"})," would have the following format (for url just change the ",(0,i.jsx)(n.code,{children:"endpoint"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "whitepapers": {\n    "type": "multi_file_viewer",\n    "name": "Whitepapers",\n    "description": "A collection of crypto whitepapers.",\n    "endpoint": "/whitepapers/base64",\n    "gridData": {\n      "w": 40,\n      "h": 10\n    },\n    "params": [\n      {\n        "type": "endpoint",\n        "paramName": "whitepaper",\n        "value": ["bitcoin.pdf"],\n        "label": "Whitepaper",\n        "description": "Whitepaper to display.",\n        "optionsEndpoint": "/whitepapers/options",\n        "show": false,\n        "multiSelect": true,\n        "roles": ["fileSelector"]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"more-complex-example",children:"More complex example"}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"600",alt:"multi-file-viewer",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/multi-file-viewer.png"}),"\n",(0,i.jsxs)(n.p,{children:["This multi-file-viewer widget introduces a parameter called ",(0,i.jsx)(n.code,{children:"optionsParams"})," which allows you to pass the options to an endpoint from a different parameter. More information ",(0,i.jsx)(n.a,{href:"/workspace/developers/widget-parameters/dependent-dropdown",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In our case we want to pass the options in the ",(0,i.jsx)(n.code,{children:"type"})," parameter to the ",(0,i.jsx)(n.code,{children:"/whitepapers/options"})," endpoint to filter the list of whitepapers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# You can find these files in the OpenBB GitHub repository in the backend-examples-for-openbb-workspace folder.\n# https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace\n# Sample whitepaper data for the multi-file viewer widget\n# This is a dictionary where keys are filenames and values contain metadata\n# Each whitepaper has the following properties:\n# - label: The display name of the whitepaper\n# - filename: The filename of the whitepaper\n# - url: The URL to the whitepaper\n# - category: The category/type of whitepaper\nWHITEPAPERS = {\n    "bitcoin.pdf": {\n        "label": "Bitcoin",\n        "filename": "bitcoin.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/bitcoin.pdf",\n        "category": "l1",\n    },\n    "ethereum.pdf": {\n        "label": "Ethereum",\n        "filename": "ethereum.pdf",\n    "ethereum.pdf": {\n        "label": "Ethereum",\n        "filename": "ethereum.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/ethereum.pdf",\n        "category": "l1",\n    },\n    "chainlink.pdf": {\n        "label": "ChainLink",\n        "filename": "chainlink.pdf",\n    "chainlink.pdf": {\n        "label": "ChainLink",\n        "filename": "chainlink.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/chainlink.pdf",\n        "category": "oracles",\n    },\n    "solana.pdf": {\n        "label": "Solana",\n        "filename": "solana.pdf",\n    "solana.pdf": {\n        "label": "Solana",\n        "filename": "solana.pdf",\n        "url": "https://openbb-assets.s3.us-east-1.amazonaws.com/testing/solana.pdf",\n        "category": "l1",\n    },\n}\n}\n\n\n@app.get("/whitepapers/options")\nasync def get_whitepaper_options(category: str = Query("all")) -> List[FileOption]:\n    """Get list of available whitepapers filtered by category"""\n    if category == "all":\n        return [\n            FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n            for whitepaper in WHITEPAPERS.values()\n        ]\n        return [\n            FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n            for whitepaper in WHITEPAPERS.values()\n        ]\n    return [\n        FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n        for whitepaper in WHITEPAPERS.values()\n        if whitepaper["category"] == category\n        FileOption(label=whitepaper["label"], value=whitepaper["filename"])\n        for whitepaper in WHITEPAPERS.values()\n        if whitepaper["category"] == category\n    ]\n\n# This is an example of how to return a list of base64 encoded files using POST.\n@app.post("/whitepapers/view-base64")\nasync def view_whitepapers_base64(\n    request: FileRequest,\n) -> List[Union[DataContent, DataUrl, DataError]]:\n    """Get multiple whitepapers in base64 format"""\n    files = []\n    for filename in request.filenames:\n        if whitepaper := WHITEPAPERS.get(filename):\n            file_path = Path.cwd() / whitepaper["filename"]\n            if file_path.exists():\n                with open(file_path, "rb") as file:\n                    base64_content = base64.b64encode(file.read()).decode("utf-8")\n                    files.append(\n                        DataContent(\n                            content=base64_content,\n                            data_format=DataFormat(\n                                data_type="pdf", filename=whitepaper["filename"]\n                            ),\n                        ).model_dump()\n                    )\n            else:\n                files.append(\n                    DataError(\n                        error_type="not_found", content="Whitepaper file not found"\n                    ).model_dump()\n                )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{filename}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n\n\n# This is an example of how to return a list of URLs using POST.\n# You would want to return your own presigned URLs here for the files to load correctly \n# or else the files will not load due to CORS policy.\n@app.post("/whitepapers/view-url")\nasync def view_whitepapers_url(\n    request: FileRequest,\n) -> List[Union[DataContent, DataUrl, DataError]]:\n    """Get multiple whitepapers via URLs"""\n    files = []\n    for filename in request.filenames:\n        if whitepaper := WHITEPAPERS.get(filename):\n            # Fetch the presigned url and return it for the `url`.\n            # In the code below, we are simulating the presigned url by returning the url directly.\n            presigned_url = whitepaper["url"]\n            \n            files.append(\n                DataUrl(\n                    url=presigned_url,\n                    data_format=DataFormat(\n                        data_type="pdf", filename=whitepaper["filename"]\n                    ),\n                ).model_dump()\n            )\n        else:\n            files.append(\n                DataError(\n                    error_type="not_found", content=f"Whitepaper \'{filename}\' not found"\n                ).model_dump()\n            )\n    return JSONResponse(headers={"Content-Type": "application/json"}, content=files)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The corresponding ",(0,i.jsx)(n.code,{children:"widgets.json"})," would have the following format:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "whitepapers": {\n    "type": "multi_file_viewer",\n    "name": "Whitepapers",\n    "description": "A collection of crypto whitepapers.",\n    "endpoint": "/whitepapers/base64",\n    "gridData": {\n      "w": 40,\n      "h": 10\n    },\n    "params": [\n      {\n        "type": "endpoint",\n        "paramName": "whitepaper",\n        "value": ["bitcoin.pdf"],\n        "label": "Whitepaper",\n        "description": "Whitepaper to display.",\n        "optionsEndpoint": "/whitepapers/options",\n        "show": false,\n        "optionsParams": {\n          "category": "$category"\n        },\n        "multiSelect": true,\n        "roles": ["fileSelector"]\n      },\n      {\n        "type": "text",\n        "paramName": "category",\n        "value": "all",\n        "label": "Category",\n        "description": "Category of whitepaper to fetch.",\n        "options": [\n          {\n            "label": "All",\n            "value": "all"\n          },\n          {\n            "label": "L1",\n            "value": "l1"\n          },\n          {\n            "label": "L2",\n            "value": "l2"\n          },\n          {\n            "label": "Oracles",\n            "value": "oracles"\n          },\n          {\n            "label": "Defi",\n            "value": "defi"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["More examples can be found on the github repository at ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/backends-for-openbb",children:"https://github.com/OpenBB-finance/backends-for-openbb"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var a=t(96540);const i={},s=a.createContext(i);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(27143),i=t(74848);function s(e){let{title:n}=e;return(0,i.jsx)(a.A,{children:(0,i.jsx)("title",{children:n})})}}}]);