"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70273],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(96540);const i={},o=a.createContext(i);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},39068:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var a=n(27143),i=n(74848);function o(e){let{title:t}=e;return(0,i.jsx)(a.A,{children:(0,i.jsx)("title",{children:t})})}},43265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"workspace/data-widgets/omni","title":"Omni","description":"Learn how to create versatile Omni widgets for OpenBB Workspace that can dynamically return different content types based on input parameters.","source":"@site/content/workspace/data-widgets/omni.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/omni","permalink":"/workspace/data-widgets/omni","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/omni.md","tags":[],"version":"current","lastUpdatedBy":"Andrew","lastUpdatedAt":1754499749000,"sidebarPosition":19,"frontMatter":{"title":"Omni","sidebar_position":19,"description":"Learn how to create versatile Omni widgets for OpenBB Workspace that can dynamically return different content types based on input parameters.","keywords":["omni widget","dynamic content","POST request","multi-format output","widget configuration","citations","flexible widgets","OpenBB Workspace","widget development"]},"sidebar":"tutorialSidebar","previous":{"title":"Highcharts Chart","permalink":"/workspace/data-widgets/highcharts"},"next":{"title":"Parameter Positioning","permalink":"/workspace/widget-parameters/parameter-positioning"}}');var i=n(74848),o=n(28453),r=n(39068);const s={title:"Omni",sidebar_position:19,description:"Learn how to create versatile Omni widgets for OpenBB Workspace that can dynamically return different content types based on input parameters.",keywords:["omni widget","dynamic content","POST request","multi-format output","widget configuration","citations","flexible widgets","OpenBB Workspace","widget development"]},d=void 0,c={},l=[{value:"Key Features",id:"key-features",level:2},{value:"Basic Omni Widget",id:"basic-omni-widget",level:2},{value:"Omni Widget with Citations",id:"omni-widget-with-citations",level:2},{value:"Important Implementation Notes",id:"important-implementation-notes",level:2},{value:"POST Request Method",id:"post-request-method",level:3},{value:"Dynamic Output Control",id:"dynamic-output-control",level:3},{value:"Parameter Handling",id:"parameter-handling",level:3},{value:"Use Cases",id:"use-cases",level:2}];function p(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.A,{title:"Omni Widget | OpenBB Workspace Docs"}),"\n",(0,i.jsxs)(t.p,{children:["The Omni widget is a versatile widget type that can dynamically return different content formats (markdown, tables, or charts). Unlike other widgets that use GET requests, the Omni widget uses POST requests and passes all parameters in the request body. This widget requires the ",(0,i.jsx)(t.code,{children:"prompt"})," parameter to be passed in the params section of the widget configuration."]}),"\n",(0,i.jsx)(t.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Dynamic Output Control"}),": Can return different content types (text, table, chart)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Create Widgets from Responses"}),": Create widgets directly from the response types returned by the backend."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"POST Request Method"}),": Uses POST instead of GET, with parameters passed in the request body"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Citation Support"}),": Built-in support for adding citations and source information"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Flexible Parameter Handling"}),": All widget parameters are passed in the POST data"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"basic-omni-widget",children:"Basic Omni Widget"}),"\n",(0,i.jsxs)(t.p,{children:["Below is an example of a basic Omni widget that demonstrates the versatility by returning different content types based on the ",(0,i.jsx)(t.code,{children:"type"})," parameter. In a real world example you might choose to dynamically return different content types based on your backend logic."]}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Omni Widget Example",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget.png"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from pydantic import BaseModel, Field\nfrom typing import Any, List, Literal\nfrom uuid import UUID\nfrom fastapi import FastAPI, Body, Query\nimport json\n\nclass DataFormat(BaseModel):\n    data_type: str\n    parse_as: Literal["text", "table", "chart"]\n\nclass ExtraCitation(BaseModel):\n    source_info: SourceInfo | None = Field(default=None)\n    details: List[dict] | None = Field(default=None)\n\nclass OmniWidgetResponse(BaseModel):\n    content: Any\n    data_format: DataFormat\n    extra_citations: list[ExtraCitation] | None = Field(default_factory=list)\n    citable: bool = Field(default=True)\n\n@register_widget({\n    "name": "Omni Widget Example",\n    "description": "A versatile omni widget that can display multiple types of content",\n    "category": "General",\n    "type": "omni",\n    "endpoint": "omni-widget",\n    "params": [\n        {\n            "paramName": "prompt",\n            "type": "text",\n            "description": "The prompt to send to the LLM to make queries or ask questions.",\n            "label": "Prompt",\n            "show": False\n        },\n        {\n            "paramName": "type",\n            "type": "text",\n            "description": "Type of content to return",\n            "label": "Content Type",\n            "show": True,\n            "options": [\n                {"value": "markdown", "label": "Markdown"},\n                {"value": "chart", "label": "Chart"},\n                {"value": "table", "label": "Table"}\n            ]\n        }\n    ],\n    "gridData": {"w": 30, "h": 12}\n})\n@app.post("/omni-widget")\nasync def get_omni_widget(\n    data: str | dict = Body(...)\n):\n    if isinstance(data, str):\n        data = json.loads(data)\n\n    # Return table format\n    if data.get("type") == "table":\n        content = [\n            {"col1": "value1", "col2": "value2", "col3": "value3", "col4": "value4"},\n            {"col1": "value5", "col2": "value6", "col3": "value7", "col4": "value8"},\n            {"col1": "value9", "col2": "value10", "col3": "value11", "col4": "value12"},\n        ]\n        \n        return OmniWidgetResponse(\n            content=content,\n            data_format=DataFormat(data_type="object", parse_as="table")\n        )\n\n    # Return chart format\n    if data.get("type") == "chart":\n        content = {\n            "data": [\n                {"x": [1, 2, 3], "y": [4, 1, 2], "type": "bar"},\n                {"x": [1, 2, 3], "y": [2, 4, 5], "type": "bar"},\n                {"x": [1, 2, 3], "y": [2, 3, 6], "type": "bar"},\n            ],\n            "layout": {\n                "title": "Dynamic Chart",\n                "template": "plotly_dark"\n            },\n        }\n        \n        return OmniWidgetResponse(\n            content=content,\n            data_format=DataFormat(data_type="object", parse_as="chart")\n        )\n\n    # Return markdown format (default)\n    content = f"""### Dynamic Omni Widget Response\n\n**Input Parameters:**\n- **Search Query:** `{search}`\n- **Content Type:** `{data.get(\'type\', \'markdown\')}`\n- **Prompt:** `{data.get(\'prompt\', \'No prompt provided\')}`\n\n#### Raw Data:\n    {json.dumps(data, indent=2)}        \n\n    """\n        \n    return OmniWidgetResponse(\n        content=content,\n        data_format=DataFormat(data_type="object", parse_as="text")\n    )\n'})}),"\n",(0,i.jsx)(t.h2,{id:"omni-widget-with-citations",children:"Omni Widget with Citations"}),"\n",(0,i.jsxs)(t.p,{children:["This example demonstrates how to add citation support to your Omni widget, which is useful when you want to use the widget in conjunction with an agent. The citations are added to the response if the ",(0,i.jsx)(t.code,{children:"citable"})," parameter is set to ",(0,i.jsx)(t.code,{children:"True"}),". This is shown in the example below and returned when the user is interacting with the widget through an agent."]}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Omni Widget with Citations Example",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/omni-widget+with+citation.png"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@register_widget({\n    "name": "Omni Widget with Citations",\n    "description": "An omni widget that includes citation information",\n    "category": "General",\n    "type": "omni",\n    "endpoint": "omni-widget-citations",\n    "params": [\n        {\n            "paramName": "prompt",\n            "type": "text",\n            "description": "The prompt to send to the LLM to make queries or ask questions.",\n            "label": "Prompt",\n            "show": True\n        },\n        {\n            "paramName": "include_metadata",\n            "type": "boolean",\n            "description": "Include metadata in response",\n            "label": "Include Metadata",\n            "show": True,\n            "value": True\n        }\n    ],\n    "gridData": {"w": 30, "h": 15}\n})\n@app.post("/omni-widget-citations")\nasync def get_omni_widget_with_citations(\n    data: str | dict = Body(...)\n):\n    if isinstance(data, str):\n        data = json.loads(data)\n\n    # Create citation information\n    source_info = SourceInfo(\n        type="widget",\n        widget_id="omni_widget_citations",\n        origin="custom_backend",\n        name="Omni Widget with Citations",\n        description="Example widget demonstrating citation functionality",\n        metadata={\n            "prompt": data.get("prompt", ""),\n            "search_term": search,\n            "timestamp": "2024-01-01T00:00:00Z",\n            "data_source": "Custom API"\n        }\n    )\n    \n    extra_citation = ExtraCitation(\n        source_info=source_info,\n        details=[\n            {\n                "Source": "Custom Backend API",\n                "Prompt": data.get("prompt", ""),\n                "Search": search,\n                "Metadata_Included": data.get("include_metadata", False),\n                "Response_Type": "Dynamic Content"\n            }\n        ]\n    )\n\n    # Generate content based on parameters\n    content = f"""# Query Results\n\n**Search Query:** {search}\n**User Prompt:** {data.get(\'prompt\', \'No prompt provided\')}\n\n## Results\nThis is dynamically generated content based on your input parameters.\n\n### Metadata\n"""\n    \n    if data.get("include_metadata"):\n        content += f"""\n- **Widget ID:** omni_widget_citations\n- **Timestamp:** 2024-01-01T00:00:00Z\n- **Data Source:** Custom API\n- **Parameters:** {json.dumps(data, indent=2)}\n"""\n    else:\n        content += "Metadata hidden (set \'Include Metadata\' to true to view)"\n\n    return OmniWidgetResponse(\n        content=content,\n        data_format=DataFormat(data_type="object", parse_as="text"),\n        extra_citations=[extra_citation],\n        citable=True\n    )\n'})}),"\n",(0,i.jsx)(t.h2,{id:"important-implementation-notes",children:"Important Implementation Notes"}),"\n",(0,i.jsx)(t.h3,{id:"post-request-method",children:"POST Request Method"}),"\n",(0,i.jsx)(t.p,{children:"Unlike other widget types that use GET requests, the Omni widget uses POST requests. This allows for more complex parameter handling and larger payloads:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@app.post("/omni-widget")  # Note: POST, not GET\nasync def omni_endpoint(\n    data: str | dict = Body(...)      # Main parameters in request body\n):\n    # Handle both string and dict formats\n    if isinstance(data, str):\n        data = json.loads(data)\n    \n    # All widget parameters are available in the \'data\' object\n    param_value = data.get("paramName")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"dynamic-output-control",children:"Dynamic Output Control"}),"\n",(0,i.jsx)(t.p,{children:"The Omni widget can return different content types based on the parse_as field in the DataFormat:"}),"\n",(0,i.jsx)(t.p,{children:'"text": For markdown/text content\n"table": For tabular data (list of dictionaries)\n"chart": For Plotly chart objects'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Text/Markdown output\nreturn OmniWidgetResponse(\n    content="# Markdown content",\n    data_format=DataFormat(data_type="object", parse_as="text")\n)\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Table output\nreturn OmniWidgetResponse(\n    content=[{"col1": "val1", "col2": "val2"}],\n    data_format=DataFormat(data_type="object", parse_as="table")\n)   \n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Chart output\nreturn OmniWidgetResponse(\n    content={"data": [...], "layout": {...}},\n    data_format=DataFormat(data_type="object", parse_as="chart")\n)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameter-handling",children:"Parameter Handling"}),"\n",(0,i.jsxs)(t.p,{children:["All widget parameters defined in the widget configuration are passed in the POST request body, and the ",(0,i.jsx)(t.code,{children:"prompt"})," parameter is required:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "params": [\n    {\n        // Required parameter for the LLM to make queries or ask questions\n        "paramName": "prompt",\n        "type": "text",\n        "description": "The prompt to send to the LLM to make queries or ask questions.",\n        "label": "Prompt",\n        "show": False\n    }\n    {\n        "paramName": "user_input",\n        "type": "text",\n        "label": "User Input"\n    },\n    {\n        "paramName": "option_select",\n        "type": "text",\n        "options": [...]\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"These parameters are accessible in your endpoint:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@app.post("/omni-widget")\nasync def omni_endpoint(data: dict = Body(...)):\n    user_input = data.get("user_input")\n    selected_option = data.get("option_select")\n    prompt = data.get("prompt")\n    # Process parameters...\n'})}),"\n",(0,i.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsx)(t.p,{children:"The Omni widget is particularly useful for:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"AI/LLM Integration: Dynamic content generation based on user prompts"}),"\n",(0,i.jsx)(t.li,{children:"Multi-format Data Display: Single endpoint that can return different visualizations"}),"\n",(0,i.jsx)(t.li,{children:"Citation-heavy Applications: Research tools that need to track data sources."}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);