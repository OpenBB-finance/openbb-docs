"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[15347],{28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function a(t){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:a(t.components),i.createElement(o.Provider,{value:e},t.children)}},35095:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"workspace/developers/ai-features/citations-for-documents","title":"Citations for documents","description":"Add document-specific citations with PDF text highlighting for source attribution","source":"@site/content/workspace/developers/ai-features/citations-for-documents.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/citations-for-documents","permalink":"/workspace/developers/ai-features/citations-for-documents","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/citations-for-documents.md","tags":[],"version":"current","lastUpdatedBy":"minhhoang1023","lastUpdatedAt":1761019357000,"sidebarPosition":5,"frontMatter":{"title":"Citations for documents","sidebar_position":5,"description":"Add document-specific citations with PDF text highlighting for source attribution","keywords":["citations","documents","PDF","highlighting","pdfplumber"]},"sidebar":"tutorialSidebar","previous":{"title":"Highlight widget citations","permalink":"/workspace/developers/ai-features/highlight-widget-citations"},"next":{"title":"Create tables","permalink":"/workspace/developers/ai-features/create-tables"}}');var s=n(74848),o=n(28453),a=n(39068);const r={title:"Citations for documents",sidebar_position:5,description:"Add document-specific citations with PDF text highlighting for source attribution",keywords:["citations","documents","PDF","highlighting","pdfplumber"]},c=void 0,d={},l=[{value:"Architecture",id:"architecture",level:2},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2}];function p(t){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.A,{title:"AI Features \u2014 Citations for documents | OpenBB Workspace Docs"}),"\n",(0,s.jsxs)(e.p,{children:["Extract and cite specific content from PDF documents with precise text highlighting. Use ",(0,s.jsx)(e.code,{children:"pdfplumber"})," to get text positions and create visual citations in Workspace."]}),"\n",(0,s.jsxs)(e.p,{children:["Reference implementation ",(0,s.jsx)(e.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/vanilla-agent-pdf-citations",children:"in this GitHub repository"}),"."]}),"\n",(0,s.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Document Citations",src:"https://openbb-cms.directus.app/assets/c47a15c0-562c-4fc1-a221-a11cef487826.png"}),"\n",(0,s.jsx)(e.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(e.p,{children:"This pattern extends widget citations by adding document-level text extraction and positioning. Extract PDF content with character-level precision for accurate highlighting."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"agents.json"})," configuration:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'return JSONResponse(content={\n  "vanilla_agent_pdf_citations": {\n    "name": "Vanilla Agent PDF Citations",\n    "description": "A vanilla agent that handles PDF data with citation support.",\n    "endpoints": {"query": "http://localhost:7777/v1/query"},\n    "features": {\n      "streaming": True,\n      "widget-dashboard-select": True,\n      "widget-dashboard-search": False,\n    },\n  }\n})\n'})}),"\n",(0,s.jsx)(e.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Extract PDF content when widget data contains PDF format"}),"\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"pdfplumber"})," to get text with character positions"]}),"\n",(0,s.jsx)(e.li,{children:"Store text positions for citation highlighting"}),"\n",(0,s.jsxs)(e.li,{children:["Create multiple citation types:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Basic widget citation for data source"}),"\n",(0,s.jsx)(e.li,{children:"Highlighted citation for specific text passages"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"Stream citations with bounding boxes for visual highlighting"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"CitationHighlightBoundingBox"}),": Precise text highlighting with coordinates"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"PdfDataFormat"}),": Identifies PDF content in widget data"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"quote_bounding_boxes"}),": Attach visual highlights to citations"]}),"\n",(0,s.jsxs)(e.li,{children:["Text position tracking: ",(0,s.jsx)(e.code,{children:"x0"}),", ",(0,s.jsx)(e.code,{children:"top"}),", ",(0,s.jsx)(e.code,{children:"x1"}),", ",(0,s.jsx)(e.code,{children:"bottom"})," for accurate placement"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,s.jsx)(e.p,{children:"Extract PDF text with positions for precise highlighting:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import pdfplumber\nfrom openbb_ai import cite, citations\nfrom openbb_ai.models import CitationHighlightBoundingBox\n\ndef extract_pdf_with_positions(pdf_bytes: bytes) -> Tuple[str, List[Dict[str, Any]]]:\n    \"\"\"Extract text and positions from PDF.\"\"\"\n    document_text = \"\"\n    text_positions = []\n\n    with pdfplumber.open(io.BytesIO(pdf_bytes)) as pdf:\n        for page_num, page in enumerate(pdf.pages, 1):\n            # Extract character-level data for positioning\n            if page.chars:\n                # Group characters into lines\n                lines = {}\n                for char in page.chars:\n                    y = round(char['top'])\n                    if y not in lines:\n                        lines[y] = {'chars': [], 'x0': char['x0'], 'x1': char['x1']}\n                    lines[y]['chars'].append(char['text'])\n                    lines[y]['x0'] = min(lines[y]['x0'], char['x0'])\n                    lines[y]['x1'] = max(lines[y]['x1'], char['x1'])\n\n                # Get first meaningful line for citation\n                sorted_lines = sorted(lines.items())\n                for y_pos, line_data in sorted_lines[:5]:\n                    line_text = ''.join(line_data['chars']).strip()\n                    if line_text and len(line_text) > 10:\n                        text_positions.append({\n                            'text': line_text,\n                            'page': page_num,\n                            'x0': line_data['x0'],\n                            'top': y_pos,\n                            'x1': line_data['x1'],\n                            'bottom': y_pos + 12\n                        })\n                        break\n\n            # Extract full text for context\n            page_text = page.extract_text()\n            if page_text:\n                document_text += page_text + \"\\\\n\\\\n\"\n\n    return document_text, text_positions\n"})}),"\n",(0,s.jsx)(e.p,{children:"Create citations with line/word level highlighting in the PDF:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'async def handle_widget_data(data: list[DataContent | DataFileReferences]):\n    """Process widget data and create PDF citations."""\n\n    widget_text, pdf_text_positions = await handle_widget_data(message.data)\n    context_str += widget_text\n\n    # Create citations for widget data\n    for widget_data_request in message.input_arguments["data_sources"]:\n        widget = matching_widgets[0]\n\n        # Basic widget citation\n        basic_citation = cite(\n            widget=widget,\n            input_arguments=widget_data_request["input_args"],\n        )\n        citations_list.append(basic_citation)\n\n        # PDF citation with highlighting\n        if pdf_text_positions and len(pdf_text_positions) > 0:\n            first_line = pdf_text_positions[0]\n\n            pdf_citation = cite(\n                widget=widget,\n                input_arguments=widget_data_request["input_args"],\n                extra_details={\n                    "Page": first_line[\'page\'],\n                    "Reference": "First sentence of document"\n                }\n            )\n\n            # Add precise text highlighting\n            pdf_citation.quote_bounding_boxes = [[\n                CitationHighlightBoundingBox(\n                    text=first_line[\'text\'][:100],\n                    page=first_line[\'page\'],\n                    x0=first_line[\'x0\'],\n                    top=first_line[\'top\'],\n                    x1=first_line[\'x1\'],\n                    bottom=first_line[\'bottom\']\n                )\n            ]]\n\n            citations_list.append(pdf_citation)\n'})})]})}function h(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(p,{...t})}):p(t)}},39068:(t,e,n)=>{n.d(e,{A:()=>o});n(96540);var i=n(27143),s=n(74848);function o(t){let{title:e}=t;return(0,s.jsx)(i.A,{children:(0,s.jsx)("title",{children:e})})}}}]);