"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62624],{28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var n=a(96540);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}},39068:(e,t,a)=>{a.d(t,{A:()=>s});a(96540);var n=a(27143),i=a(74848);function s(e){let{title:t}=e;return(0,i.jsx)(n.A,{children:(0,i.jsx)("title",{children:t})})}},67490:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"platform/developer_guide/misc/validators","title":"Validators","description":"This guide provides detailed instructions on how and where validators should be used.","source":"@site/content/platform/developer_guide/misc/validators.mdx","sourceDirName":"platform/developer_guide/misc","slug":"/platform/developer_guide/misc/validators","permalink":"/platform/developer_guide/misc/validators","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/platform/developer_guide/misc/validators.mdx","tags":[],"version":"current","lastUpdatedBy":"Meghan Lopes","lastUpdatedAt":1760754688000,"sidebarPosition":2,"frontMatter":{"title":"Validators","sidebar_position":2,"description":"This guide provides detailed instructions on how and where validators should be used.","keywords":["OpenBB Platform","Data point addition","Provider creation","Query parameters","Data output models","Fetcher class","validator","field","param","Fast API"]},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Requests","permalink":"/platform/developer_guide/misc/http_requests"},"next":{"title":"Disabling Output Validation","permalink":"/platform/developer_guide/misc/disabling_output_validation"}}');var i=a(74848),s=a(28453),r=a(39068);const l={title:"Validators",sidebar_position:2,description:"This guide provides detailed instructions on how and where validators should be used.",keywords:["OpenBB Platform","Data point addition","Provider creation","Query parameters","Data output models","Fetcher class","validator","field","param","Fast API"]},d=void 0,o={},c=[{value:"Examples",id:"examples",level:2},{value:"Parsing Dates",id:"parsing-dates",level:3},{value:"Normalize Percent Values",id:"normalize-percent-values",level:3},{value:"Dynamic Default Date",id:"dynamic-default-date",level:3},{value:"Replace 0s With None",id:"replace-0s-with-none",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.A,{title:"Validators - Developer Guidelines - Development | OpenBB Platform Docs"}),"\n",(0,i.jsx)(t.p,{children:"Both QueryParams and Data models can benefit from the tactical use of Pydantic validators.\nThis page will outline some of the key scenarios where they are deployed."}),"\n",(0,i.jsx)(t.p,{children:"Overall, they assist with enforcing Fast API compliance for both inputs and outputs,\nand they work in the final stage of transformation immediately before output."}),"\n",(0,i.jsx)(t.p,{children:"Some situations where they are used include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Transform, conform, or otherwise alter the entered query parameter or returned data value."}),"\n",(0,i.jsx)(t.li,{children:"A query parameter or data field is a date."}),"\n",(0,i.jsx)(t.li,{children:"A query parameter requires a dynamic default state."}),"\n",(0,i.jsx)(t.li,{children:"Normalizing percent values."}),"\n",(0,i.jsx)(t.li,{children:"Cleaning NaN values."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"The items to import from the Pydantic library are:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from pydantic import field_validator, model_validator\n"})}),"\n",(0,i.jsx)(t.h3,{id:"parsing-dates",children:"Parsing Dates"}),"\n",(0,i.jsx)(t.p,{children:"Providers will format dates in a number of ways. OpenBB uses YYYY-MM-DD as the standard convention, for both inputs and outputs."}),"\n",(0,i.jsxs)(t.p,{children:["Outputs are a ",(0,i.jsx)(t.code,{children:"datetime"})," object or JSON serialized string. Validators are used to parse the date from the specific format.\nThis example is used within a provider's ",(0,i.jsx)(t.code,{children:"Data"})," model."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@field_validator("last_trade_timestamp", mode="before", check_fields=False)\n@classmethod\ndef parse_timestamp(cls, v):\n    """Parse a Unix timestamp."""\n    return datetime.fromtimestamp(v)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"normalize-percent-values",children:"Normalize Percent Values"}),"\n",(0,i.jsx)(t.p,{children:"At the provider level, we want to standardize the way values representing a percent are returned."}),"\n",(0,i.jsxs)(t.p,{children:["It is our intention to ensure those values are ready-to-consume by formulas without conversion.\nThis example would be used within a provider's ",(0,i.jsx)(t.code,{children:"Data"})," model."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@field_validator("change_percent", mode="before", check_fields=False)\n@classmethod\ndef normalize_percent(cls, v):\n    """Normalize the percent."""\n    return v / 100 if v else None\n'})}),"\n",(0,i.jsx)(t.h3,{id:"dynamic-default-date",children:"Dynamic Default Date"}),"\n",(0,i.jsxs)(t.p,{children:["It might be desirable to have a default date parameter that is not static. To allow this, we must set the default parameter value as ",(0,i.jsx)(t.code,{children:"None"}),", and use the ",(0,i.jsx)(t.code,{children:"model_validator"}),". This example is for the ",(0,i.jsx)(t.code,{children:"QueryParams"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@model_validator(mode="before")\n@classmethod\ndef validate_dates(cls, values) -> dict:\n    """Validate the query parameters."""\n    if values.get("start_date") is None:\n        values["start_date"] = (datetime.now() - timedelta(days=90)).date()\n    if values.get("end_date") is None:\n        values["end_date"] = datetime.now().date()\n    return values\n'})}),"\n",(0,i.jsx)(t.h3,{id:"replace-0s-with-none",children:"Replace 0s With None"}),"\n",(0,i.jsxs)(t.p,{children:["Sometimes values are returned as a ",(0,i.jsx)(t.code,{children:"0"})," when they should really be a ",(0,i.jsx)(t.code,{children:"null"}),".\nThis example looks at the entire ",(0,i.jsx)(t.code,{children:"Data"})," model, but could easily be adapted to use on individual fields."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@model_validator(mode="before")\n@classmethod\ndef replace_zero(cls, values):\n    """Check for zero values and replace with None."""\n    return (\n        {k: None if v == 0 else v for k, v in values.items()}\n        if isinstance(values, dict)\n        else values\n    )\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);