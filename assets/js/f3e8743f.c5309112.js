"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[16807],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},39068:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);var i=n(27143),s=n(74848);function a(e){let{title:t}=e;return(0,s.jsx)(i.A,{children:(0,s.jsx)("title",{children:t})})}},43496:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"workspace/developers/ai-features/parse-pdf-context","title":"Parse PDF context","description":"Parse PDF content from widget data and cite sources","source":"@site/content/workspace/developers/ai-features/parse-pdf-context.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/parse-pdf-context","permalink":"/workspace/developers/ai-features/parse-pdf-context","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/parse-pdf-context.md","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1758203068000,"sidebarPosition":3,"frontMatter":{"title":"Parse PDF context","sidebar_position":3,"description":"Parse PDF content from widget data and cite sources","keywords":["PDF","DataContent","PdfDataFormat","citations"]},"sidebar":"tutorialSidebar","previous":{"title":"Parse widget data","permalink":"/workspace/developers/ai-features/parse-widget-data"},"next":{"title":"Highlight widget citations","permalink":"/workspace/developers/ai-features/highlight-widget-citations"}}');var s=n(74848),a=n(28453),r=n(39068);const o={title:"Parse PDF context",sidebar_position:3,description:"Parse PDF content from widget data and cite sources",keywords:["PDF","DataContent","PdfDataFormat","citations"]},d=void 0,c={},l=[{value:"Architecture",id:"architecture",level:2},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.A,{title:"AI Features \u2014 Parse PDF context | OpenBB Workspace Docs"}),"\n",(0,s.jsx)(t.p,{children:"Extract text from PDF inputs supplied via widget data and append it to the model context. Optionally add citation highlights to reference quotes within the PDF."}),"\n",(0,s.jsxs)(t.p,{children:["Reference implementation ",(0,s.jsx)(t.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/35-vanilla-agent-pdf/vanilla_agent_pdf/main.py",children:"here"}),"."]}),"\n",(0,s.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Parse PDF",src:"https://openbb-cms.directus.app/assets/b9e323b3-9416-4452-9d32-f6d6b8b50443.png"}),"\n",(0,s.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(t.p,{children:"Handle PDF data delivered by the UI through the widget data tool. Support both URL and base64 PDFs and add text to the LLM context."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"agents.json"})," configuration with ",(0,s.jsx)(t.code,{children:"widget-dashboard-select"})," feature enabled:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'return JSONResponse(content={\n  "vanilla_agent_pdf": {\n    "endpoints": {"query": "http://localhost:7777/v1/query"},\n    "features": {\n      "widget-dashboard-select": True,\n      "widget-dashboard-search": False,\n    },\n  }\n})\n'})}),"\n",(0,s.jsx)(t.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Check for human message with ",(0,s.jsx)(t.code,{children:"widgets.primary"})," containing PDF data"]}),"\n",(0,s.jsxs)(t.li,{children:["Early exit: yield ",(0,s.jsx)(t.code,{children:"get_widget_data()"})," for UI execution"]}),"\n",(0,s.jsxs)(t.li,{children:["On subsequent tool message:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Iterate through ",(0,s.jsx)(t.code,{children:"DataContent"})," items"]}),"\n",(0,s.jsxs)(t.li,{children:["Detect ",(0,s.jsx)(t.code,{children:"PdfDataFormat"})," using ",(0,s.jsx)(t.code,{children:"isinstance()"})," check"]}),"\n",(0,s.jsxs)(t.li,{children:["Handle both ",(0,s.jsx)(t.code,{children:"SingleDataContent"})," (base64) and ",(0,s.jsx)(t.code,{children:"SingleFileReference"})," (URL)"]}),"\n",(0,s.jsxs)(t.li,{children:["Extract text using ",(0,s.jsx)(t.code,{children:"pdfplumber.open()"})," with ",(0,s.jsx)(t.code,{children:"io.BytesIO()"})]}),"\n",(0,s.jsx)(t.li,{children:"Append extracted text to context string"}),"\n",(0,s.jsx)(t.li,{children:"Process with LLM and stream response"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Optionally create ",(0,s.jsx)(t.code,{children:"cite()"})," with ",(0,s.jsx)(t.code,{children:"CitationHighlightBoundingBox"})," for text highlighting"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"PdfDataFormat"}),": Identifies PDF content in widget data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"SingleDataContent"}),": Contains base64-encoded PDF data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"SingleFileReference"}),": Contains URL reference to PDF"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"DataContent"}),"/",(0,s.jsx)(t.code,{children:"DataFileReferences"}),": Containers for data items"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"CitationHighlightBoundingBox"}),": Defines text highlighting coordinates"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"cite(widget, input_arguments, extra_details)"}),": Creates citations with bounding boxes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_widget_data()"}),": Requests PDF data from widgets"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,s.jsx)(t.p,{children:"Detect PDF data, extract text, and accumulate as context:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import base64\nimport io\nimport pdfplumber\nimport httpx\nfrom openbb_ai import get_widget_data, cite, citations\nfrom openbb_ai.models import (\n    QueryRequest, WidgetRequest, PdfDataFormat, \n    SingleDataContent, SingleFileReference, \n    DataContent, DataFileReferences,\n    CitationHighlightBoundingBox\n)\n\nasync def _download_file(url: str) -> bytes:\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n        return response.content\n\nasync def _get_pdf_text(item) -> str:\n    if isinstance(item, SingleDataContent):\n        # Handle base64 PDF\n        file_content = base64.b64decode(item.content)\n    elif isinstance(item, SingleFileReference):\n        # Handle URL PDF\n        file_content = await _download_file(str(item.url))\n    \n    with pdfplumber.open(io.BytesIO(file_content)) as pdf:\n        document_text = ""\n        for page in pdf.pages:\n            document_text += page.extract_text() + "\\n\\n"\n    return document_text\n\nasync def handle_widget_data(data: list[DataContent | DataFileReferences]) -> str:\n    result_str = "--- PDF Content ---\\n"\n    for result_item in data:\n        for item in result_item.items:\n            if isinstance(item.data_format, PdfDataFormat):\n                result_str += f"===== {item.data_format.filename} =====\\n"\n                result_str += await _get_pdf_text(item)\n                result_str += "------\\n"\n            else:\n                result_str += str(item.content) + "\\n"\n    return result_str\n'})}),"\n",(0,s.jsx)(t.p,{children:"Add citation highlights with bounding boxes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Create citations with text highlighting\ncitations_list = []\nfor widget in request.widgets.primary:\n    citation = cite(\n        widget=widget,\n        input_arguments={p.name: p.current_value for p in widget.params},\n        extra_details={"filename": "document.pdf"}\n    )\n    \n    # Add bounding boxes for specific text regions\n    citation.quote_bounding_boxes = [\n        [\n            CitationHighlightBoundingBox(\n                text="Key financial metrics",\n                page=1,\n                x0=72.0, top=117, x1=259, bottom=135\n            ),\n            CitationHighlightBoundingBox(\n                text="Revenue increased 15%", \n                page=1,\n                x0=110.0, top=140, x1=275, bottom=160\n            )\n        ]\n    ]\n    citations_list.append(citation)\n\nif citations_list:\n    yield citations(citations_list).model_dump()\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);