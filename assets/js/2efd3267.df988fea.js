"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53176],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(96540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(27143),a=t(74848);function r(e){let{title:n}=e;return(0,a.jsx)(i.A,{children:(0,a.jsx)("title",{children:n})})}},52764:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"workspace/data-widgets/index","title":"Data Widgets","description":"Build powerful financial dashboards with OpenBB Workspace\'s flexible widget system","source":"@site/content/workspace/data-widgets/index.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/","permalink":"/workspace/data-widgets/","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/index.md","tags":[],"version":"current","lastUpdatedBy":"Theodore Aptekarev","lastUpdatedAt":1751518586000,"sidebarPosition":11,"frontMatter":{"title":"Data Widgets","sidebar_position":11,"description":"Build powerful financial dashboards with OpenBB Workspace\'s flexible widget system","keywords":["widgets","data","visualization","charts","tables","forms"]},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/workspace/data-integration"},"next":{"title":"Markdown","permalink":"/workspace/data-widgets/markdown"}}');var a=t(74848),r=t(28453),o=t(39068);const d={title:"Data Widgets",sidebar_position:11,description:"Build powerful financial dashboards with OpenBB Workspace's flexible widget system",keywords:["widgets","data","visualization","charts","tables","forms"]},s="Data Widgets in OpenBB Workspace",c={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Example Widgets",id:"example-widgets",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.A,{title:"Data Widgets | OpenBB Workspace Docs"}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"data-widgets-in-openbb-workspace",children:"Data Widgets in OpenBB Workspace"})}),"\n",(0,a.jsx)(n.p,{children:"OpenBB Workspace provides a powerful and flexible UI framework that lets you create sophisticated financial dashboards through customizable data widgets."}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsxs)(n.p,{children:["In our ",(0,a.jsx)(n.a,{href:"/workspace/data-integration",children:"Data Integration"})," guide, we introduced the basic structure using ",(0,a.jsx)(n.code,{children:"main.py"})," and ",(0,a.jsx)(n.code,{children:"widgets.json"}),". To make development even easier, we've created a Python decorator that keeps your widget specifications right next to their implementation code. You can add it as part of the initial boilerplate, so you can build a backend with a single ",(0,a.jsx)(n.code,{children:"main.py"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Import required libraries\nfrom pathlib import Path\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom functools import wraps\nimport asyncio\n\n# Initialize empty dictionary for widgets\nWIDGETS = {}\n\n# Decorator that registers a widget configuration in the WIDGETS dictionary.\ndef register_widget(widget_config):\n    """\n    Decorator that registers a widget configuration in the WIDGETS dictionary.\n    \n    Args:\n        widget_config (dict): The widget configuration to add to the WIDGETS \n            dictionary. This should follow the same structure as other entries \n            in WIDGETS.\n    \n    Returns:\n        function: The decorated function.\n    """\n    def decorator(func):\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            # Call the original function\n            return await func(*args, **kwargs)\n            \n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            # Call the original function\n            return func(*args, **kwargs)\n        \n        # Extract the endpoint from the widget_config\n        endpoint = widget_config.get("endpoint")\n        if endpoint:\n            # Add an id field to the widget_config if not already present\n            if "id" not in widget_config:\n                widget_config["id"] = endpoint\n            \n            WIDGETS[endpoint] = widget_config\n        \n        # Return the appropriate wrapper based on whether the function is async\n        if asyncio.iscoroutinefunction(func):\n            return async_wrapper\n        return sync_wrapper\n    return decorator\n\n# Initialize FastAPI application with metadata\napp = FastAPI(\n    title="Simple Backend",\n    description="Simple backend app for OpenBB Workspace",\n    version="0.0.1"\n)\n\n# Define allowed origins for CORS (Cross-Origin Resource Sharing)\n# This restricts which domains can access the API\norigins = [\n    "https://pro.openbb.co",\n]\n\n# Configure CORS middleware to handle cross-origin requests\n# This allows the specified origins to make requests to the API\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=["*"],  # Allow all HTTP methods\n    allow_headers=["*"],  # Allow all headers\n)\n\nROOT_PATH = Path(__file__).parent.resolve()\n\n@app.get("/")\ndef read_root():\n    """Root endpoint that returns basic information about the API"""\n    return {"Info": "Hello World"}\n\n\n# Endpoint that returns the registered widgets configuration\n# The WIDGETS dictionary is maintained by the registry.py helper\n# which automatically registers widgets when using the @register_widget decorator\n@app.get("/widgets.json")\ndef get_widgets():\n    """Returns the configuration of all registered widgets\n    \n    The widgets are automatically registered through the @register_widget decorator\n    and stored in the WIDGETS dictionary from registry.py\n    \n    Returns:\n        dict: The configuration of all registered widgets\n    """\n    return WIDGETS\n\n\n# Simple markdown widget\n@register_widget({\n    "name": "Markdown Widget",\n    "description": "A markdown widget",\n    "type": "markdown",\n    "endpoint": "markdown_widget",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/markdown_widget")\ndef markdown_widget():\n    """Returns a markdown widget"""\n    return "# Markdown Widget"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-widgets",children:"Example Widgets"}),"\n",(0,a.jsxs)(n.p,{children:["Throughout this documentation, you'll find examples that include both a visual preview and the corresponding code implementation, using our ",(0,a.jsx)(n.code,{children:"register_widget"})," decorator. Each example includes the complete widget configuration and data."]}),"\n",(0,a.jsx)("div",{className:"flex justify-center",children:(0,a.jsx)("img",{width:"800",alt:"Example Markdown Widget",src:"https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Simple markdown widget\n@register_widget({\n    "name": "Markdown Widget",\n    "description": "A markdown widget",\n    "type": "markdown",\n    "endpoint": "markdown_widget",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/markdown_widget")\ndef markdown_widget():\n    """Returns a markdown widget"""\n    return "# Markdown Widget"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For more examples and complete implementations, visit our ",(0,a.jsx)(n.a,{href:"https://github.com/OpenBB-finance/backend-examples-for-openbb-workspace/tree/main/getting-started/reference-backend",children:"reference backend repository"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);