"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23602],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(27143),o=t(74848);function i(e){let{title:n}=e;return(0,o.jsx)(r.A,{children:(0,o.jsx)("title",{children:n})})}},99345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"platform/developer_guide/extensions","title":"Extensions","description":"This guide provides detailed instructions for including command examples in the router endpoints of the OpenBB Platform.","source":"@site/content/platform/developer_guide/extensions.mdx","sourceDirName":"platform/developer_guide","slug":"/platform/developer_guide/extensions","permalink":"/platform/developer_guide/extensions","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/platform/developer_guide/extensions.mdx","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1757133089000,"sidebarPosition":12,"frontMatter":{"title":"Extensions","sidebar_position":12,"description":"This guide provides detailed instructions for including command examples in the router endpoints of the OpenBB Platform.","keywords":["OpenBB community","OpenBB Platform","Custom commands","API","Python Interface","Examples","Usage","Parameters"]},"sidebar":"tutorialSidebar","previous":{"title":"Data Provider","permalink":"/platform/developer_guide/data_provider"},"next":{"title":"Create extension from scratch","permalink":"/platform/developer_guide/tutorials/add_extension"}}');var o=t(74848),i=t(28453),a=t(39068);const s={title:"Extensions",sidebar_position:12,description:"This guide provides detailed instructions for including command examples in the router endpoints of the OpenBB Platform.",keywords:["OpenBB community","OpenBB Platform","Custom commands","API","Python Interface","Examples","Usage","Parameters"]},d=void 0,p={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Router implementation",id:"router-implementation",level:2},{value:"Nested router",id:"nested-router",level:3},{value:"Smoke test",id:"smoke-test",level:3},{value:"Model Examples",id:"model-examples",level:3},{value:"APIEx",id:"apiex",level:4},{value:"PythonEx",id:"pythonex",level:4},{value:"Views implementation",id:"views-implementation",level:2},{value:"Helpers implementation",id:"helpers-implementation",level:2},{value:"Tests",id:"tests",level:2},{value:"Integration Tests",id:"integration-tests",level:2},{value:"API",id:"api",level:3},{value:"Python",id:"python",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.A,{title:"Extensions | OpenBB Platform Docs"}),"\n",(0,o.jsx)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"},children:(0,o.jsx)("img",{src:"https://openbb-cms.directus.app/assets/a25f6c03-19a8-4775-9e52-180aff8bf186.png",alt:"Extensions",width:"60%"})}),"\n",(0,o.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(n.p,{children:"The structure of the folder should look something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-md",children:"category/\n\u251c\u2500\u2500 openbb_category/\n\u2502 \u251c\u2500\u2500 subcategory1/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 subcategory1_router.py\n\u2502 \u2502\n\u2502 \u251c\u2500\u2500 subcategory2/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 subcategory2_router.py\n\u2502 \u2502\n\u2502 \u251c\u2500\u2500 category_router.py\n\u2502 \u251c\u2500\u2500 category_views.py\n\u2502 \u2502\n\u2502 \u2514\u2500\u2500 helpers.py\n\u2502\n\u2502\u2500\u2500 integration/\n\u2502 \u251c\u2500\u2500 test_category_api.py\n\u2502 \u2514\u2500\u2500 test_category_python.py\n\u2502\n\u2502\u2500\u2500 tests/\n\u2502 \u2514\u2500\u2500 test_helpers.py\n\u2502\n\u251c\u2500- __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,o.jsx)(n.h2,{id:"router-implementation",children:"Router implementation"}),"\n",(0,o.jsxs)(n.p,{children:["The router implementation corresponds to the ",(0,o.jsx)(n.code,{children:"subcategory1_router.py"}),", ",(0,o.jsx)(n.code,{children:"subcategory2_router.py"})," and even ",(0,o.jsx)(n.code,{children:"category_router.py"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This is where you add the router commands. Here is an example for ",(0,o.jsx)(n.code,{children:"openbb_category/economy_router.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Economy Router."""\n\n# pylint: disable=unused-argument\n\nfrom typing import Union\n\nfrom openbb_core.app.deprecation import OpenBBDeprecationWarning\nfrom openbb_core.app.model.command_context import CommandContext\nfrom openbb_core.app.model.example import APIEx\nfrom openbb_core.app.model.obbject import OBBject\nfrom openbb_core.app.provider_interface import (\n    ExtraParams,\n    ProviderChoices,\n    StandardParams,\n)\nfrom openbb_core.app.query import Query\nfrom openbb_core.app.router import Router\n\nfrom openbb_economy.gdp.gdp_router import router as gdp_router\nfrom openbb_economy.shipping.shipping_router import router as shipping_router\nfrom openbb_economy.survey.survey_router import router as survey_router\n\nrouter = Router(prefix="", description="Economic data.")\nrouter.include_router(gdp_router)\nrouter.include_router(shipping_router)\nrouter.include_router(survey_router)\n\n\n@router.command(\n    model="EconomicCalendar",\n    examples=[\n        APIEx(\n            parameters={"provider": "fmp"},\n            description="By default, the calendar will be forward-looking.",\n        ),\n        APIEx(\n            parameters={\n                "provider": "fmp",\n                "start_date": "2020-03-01",\n                "end_date": "2020-03-31",\n            }\n        ),\n        APIEx(\n            description="By default, the calendar will be forward-looking.",\n            parameters={"provider": "nasdaq"},\n        ),\n    ],\n)\nasync def calendar(\n    cc: CommandContext,\n    provider_choices: ProviderChoices,\n    standard_params: StandardParams,\n    extra_params: ExtraParams,\n) -> OBBject:\n    """Get the upcoming, or historical, economic calendar of global events."""\n    return await OBBject.from_query(Query(**locals()))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"nested-router",children:"Nested router"}),"\n",(0,o.jsxs)(n.p,{children:["There can be a nested router in order to highlight hierarchy. We typically stope at hierarchy 2, i.e. ",(0,o.jsx)(n.code,{children:"obb.category.subcategory.function"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The subcategory routers are equivalent, at the exception that they don't include other routers."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{mdxType:"summary",children:(0,o.jsx)(n.code,{children:"openbb_category/gdp/gdp_router.py"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Economy GDP Router."""\n\nfrom openbb_core.app.model.command_context import CommandContext\nfrom openbb_core.app.model.example import APIEx\nfrom openbb_core.app.model.obbject import OBBject\nfrom openbb_core.app.provider_interface import (\n    ExtraParams,\n    ProviderChoices,\n    StandardParams,\n)\nfrom openbb_core.app.query import Query\nfrom openbb_core.app.router import Router\n\nrouter = Router(prefix="/gdp")\n\n# pylint: disable=unused-argument\n\n\n@router.command(\n    model="GdpForecast",\n    examples=[\n        APIEx(parameters={"provider": "oecd"}),\n        APIEx(\n            parameters={\n                "country": "united_states,germany,france",\n                "frequency": "annual",\n                "units": "capita",\n                "provider": "oecd",\n            }\n        ),\n    ],\n)\nasync def forecast(\n    cc: CommandContext,\n    provider_choices: ProviderChoices,\n    standard_params: StandardParams,\n    extra_params: ExtraParams,\n) -> OBBject:\n    """Get Forecasted GDP Data."""\n    return await OBBject.from_query(Query(**locals()))\n'})})]}),"\n",(0,o.jsx)(n.h3,{id:"smoke-test",children:"Smoke test"}),"\n",(0,o.jsx)(n.p,{children:"Save the file, start a new Python session in a Terminal window, rebuild the app, and test it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"import openbb\n\nopenbb.build()\n\nexit()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\nobb.economy.calendar(\n    "provider": "fmp",\n    "start_date": "2020-03-01",\n    "end_date": "2020-03-31",\n).to_df()\n\nobb.economy.gdp.forecast(\n    "country": "united_states,germany,france",\n    "frequency": "annual",\n    "units": "capita",\n    "provider": "oecd",\n).to_df()\n'})}),"\n",(0,o.jsx)(n.p,{children:"This should allow you to understand whether the command has been implemented correctly."}),"\n",(0,o.jsx)(n.h3,{id:"model-examples",children:"Model Examples"}),"\n",(0,o.jsx)(n.p,{children:"Usage examples are defined in the router and are expected to provide working syntax, with descriptions for complex functions requiring many parameters. It is encouraged to include examples for every endpoint."}),"\n",(0,o.jsxs)(n.p,{children:["There are two models for defining examples, ",(0,o.jsx)(n.code,{children:"APIEx"})," and ",(0,o.jsx)(n.code,{children:"PythonEx"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.app.model.example import APIEx, PythonEx\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["When a provider is not installed, its example will be excluded from ",(0,o.jsx)(n.code,{children:"openapi.json"})," and Python docstrings."]}),(0,o.jsx)(n.p,{children:"Submissions to our repository require:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If any endpoint is excluded from the schema it only needs to contain a Python example."}),"\n",(0,o.jsx)(n.li,{children:"POST method examples should have both API and Python examples, unless they are excluded from the schema."}),"\n"]})]}),"\n",(0,o.jsx)(n.h4,{id:"apiex",children:"APIEx"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"APIEx"})," is more structured (and has less freedom) aiming to be language agnostic."]}),"\n",(0,o.jsx)(n.p,{children:"Requirements:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"At least one example using all required parameters. It cannot use any provider-specific parameters here. It should not specify the provider field."}),"\n",(0,o.jsx)(n.li,{children:"If there are more than three parameters, a description must be supplied in the example."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@router.command(\n    model="WorldNews",\n    examples=[\n        APIEx(parameters={}),\n        APIEx(parameters={"limit": 100}),\n        APIEx(\n            description="Get news on the specified dates.",\n            parameters={"start_date": "2024-02-01", "end_date": "2024-02-07"},\n        ),\n        APIEx(\n            description="Display the headlines of the news.",\n            parameters={"display": "headline", "provider": "benzinga"},\n        ),\n        APIEx(\n            description="Get news by topics.",\n            parameters={"topics": "finance", "provider": "benzinga"},\n        ),\n        APIEx(\n            description="Get news by source using \'tingo\' as provider.",\n            parameters={"provider": "tiingo", "source": "bloomberg"},\n        ),\n        APIEx(\n            description="Filter aticles by term using \'biztoc\' as provider.",\n            parameters={"provider": "biztoc", "term": "apple"},\n        ),\n    ],\n)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"pythonex",children:"PythonEx"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"PythonEx"})," gives more freedom to create complex examples."]}),"\n",(0,o.jsx)(n.p,{children:"Requirements:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Descriptions are mandatory."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@router.command(\n    methods=["POST"],\n    include_in_schema=False,\n    examples=[\n        PythonEx(\n            description="Perform Ordinary Least Squares (OLS) regression.",\n            code=[\n                "stock_data = obb.equity.price.historical(symbol=\'TSLA\', start_date=\'2023-01-01\', provider=\'fmp\').to_df()",\n                \'obb.econometrics.ols_regression(data=stock_data, y_column="close", x_columns=["open", "high", "low"])\',\n            ],\n        )\n    ],\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"views-implementation",children:"Views implementation"}),"\n",(0,o.jsxs)(n.p,{children:["This ",(0,o.jsx)(n.code,{children:"category_views.py"})," file only exists, if we want to display a specific chart from that dataset."]}),"\n",(0,o.jsxs)(n.p,{children:["This expects the user to utilize the ",(0,o.jsx)(n.code,{children:"openbb-charting"})," extension. Here's what it looks like."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00",alt:"FRED Chart"})}),"\n",(0,o.jsx)(n.p,{children:"In terms of implementation, these files can be quite large due to inherent customizability associated with charting."}),"\n",(0,o.jsx)(n.p,{children:"Here's an example for port information."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Views for the Economy Extension."""\n\n# flake8: noqa: PLR0912\n# pylint: disable=too-many-branches\n\nfrom typing import TYPE_CHECKING, Any, Optional\nfrom warnings import warn\n\nif TYPE_CHECKING:\n    from openbb_charting.core.openbb_figure import (\n        OpenBBFigure,\n    )\n\n\nclass EconomyViews:\n    """economy Views."""\n\n    @staticmethod\n    def economy_shipping_port_info(\n        **kwargs,\n    ) -> tuple["OpenBBFigure", dict[str, Any]]:\n        """Port Info Chart."""\n        # pylint: disable=import-outside-toplevel\n\n        provider = kwargs.get("provider")\n\n        if provider != "imf":\n            raise RuntimeError(\n                f"This charting method does not support {provider}. Supported providers: imf."\n            )\n\n        try:\n            from openbb_imf.views.port_info import (\n                plot_port_info_map,\n            )\n        except Exception as e:\n            raise RuntimeError("Unable to import the required module.") from e\n\n        data = (\n            kwargs.pop("data", None)\n            if "data" in kwargs and kwargs["data"] is not None\n            else kwargs.get("obbject_item")\n        )\n        fig = plot_port_info_map(data)  # type: ignore\n        fig.update_layout(\n            margin=dict(l=0, r=0, t=0, b=0),\n        )\n        content = fig.to_plotly_json()\n\n        content["config"] = dict(\n            responsive=False,\n            displayModeBar=False,\n            dragMode="pan",\n            doubleClick="reset",\n        )\n\n        return fig, content\n'})}),"\n",(0,o.jsx)(n.h2,{id:"helpers-implementation",children:"Helpers implementation"}),"\n",(0,o.jsx)(n.p,{children:"This file in general doesn't exist, particularly if we are building a data extension."}),"\n",(0,o.jsx)(n.p,{children:"However, for a toolkit extension, this may be helpful to add helper functions or others."}),"\n",(0,o.jsxs)(n.p,{children:["Example for ",(0,o.jsx)(n.code,{children:"openbb_quantitative/helpers.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Helper functions for Quantitative Analysis."""\n\nfrom typing import TYPE_CHECKING, Union\n\nif TYPE_CHECKING:\n    from pandas import DataFrame, Series\n\n\ndef validate_window(input_data: Union["Series", "DataFrame"], window: int) -> None:\n    """Validate the window input.\n\n    Parameters\n    ----------\n    input_data : Union[Series, DataFrame]\n        The input data to be validated.\n    window : int\n        The window to be validated.\n\n    Raises\n    ------\n    ValueError\n        If the window is greater than the input data length.\n    """\n    if window > len(input_data):\n        raise ValueError(\n            f"Window \'{window}\' is greater than the input data length \'{len(input_data)}\'"\n        )\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,o.jsxs)(n.p,{children:["This folder is usually empty for data extensions. With a ",(0,o.jsx)(n.code,{children:".gitkeep"})," file so the folder is recognized by git, even if empty."]}),"\n",(0,o.jsxs)(n.p,{children:["Unless we are doing a toolkit extension and the user wants to add additional tests to the ",(0,o.jsx)(n.code,{children:"helpers.py"})," file created."]}),"\n",(0,o.jsxs)(n.p,{children:["In that case we may have something like ",(0,o.jsx)(n.code,{children:"tests/test_quantitative_helpers.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Test the quantitative helpers."""\n\nimport pandas as pd\nfrom extensions.quantitative.openbb_quantitative.helpers import (\n    validate_window,\n)\n\n\ndef test_validate_window():\n    """Test the validate_window function."""\n    input_data = pd.Series(range(1, 100))\n    validate_window(\n        input_data=input_data,\n        window=20,\n    )\n'})}),"\n",(0,o.jsx)(n.h2,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,o.jsx)(n.p,{children:"The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider."}),"\n",(0,o.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of our ",(0,o.jsx)(n.code,{children:"integration/test_economy_api.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Test Economy API."""\n\nimport base64\n\nimport pytest\nimport requests\nfrom extensions.tests.conftest import parametrize\nfrom openbb_core.env import Env\nfrom openbb_core.provider.utils.helpers import get_querystring\n\n\n@pytest.fixture(scope="session")\ndef headers():\n    """Get the headers for the API request."""\n    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"\n    userpass_bytes = userpass.encode("ascii")\n    base64_bytes = base64.b64encode(userpass_bytes)\n\n    return {"Authorization": f"Basic {base64_bytes.decode(\'ascii\')}"}\n\n\n# pylint: disable=redefined-outer-name\n\n\n@parametrize(\n    "params",\n    [\n        (\n            {\n                "provider": "nasdaq",\n                "start_date": "2023-10-24",\n                "end_date": "2023-11-03",\n                "country": "united_states,japan",\n            }\n        ),\n        (\n            {\n                "provider": "tradingeconomics",\n                "start_date": "2023-01-01",\n                "end_date": "2023-06-06",\n                "country": "mexico,sweden",\n                "importance": "low",\n                "group": "gdp",\n                "calendar_id": None,\n            }\n        ),\n        (\n            {\n                "provider": "fmp",\n                "start_date": "2023-10-24",\n                "end_date": "2023-11-03",\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_economy_calendar(params, headers):\n    """Test the economy calendar endpoint."""\n    params = {p: v for p, v in params.items() if v}\n\n    query_str = get_querystring(params, [])\n    url = f"http://0.0.0.0:8000/api/v1/economy/calendar?{query_str}"\n    result = requests.get(url, headers=headers, timeout=10)\n    assert isinstance(result, requests.Response)\n    assert result.status_code == 200\n'})}),"\n",(0,o.jsx)(n.p,{children:"To run this test, we will need to open a second terminal and start the server."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"uvicorn openbb_core.api.rest_api:app\n"})}),"\n",(0,o.jsx)(n.p,{children:"Go back to the first terminal and run the test by entering:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"pytest test_economy_api.py\n"})}),"\n",(0,o.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of our ",(0,o.jsx)(n.code,{children:"integration/test_economy_python.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""Test economy extension."""\n\nimport pytest\nfrom extensions.tests.conftest import parametrize\nfrom openbb_core.app.model.obbject import OBBject\n\n\n@pytest.fixture(scope="session")\ndef obb(pytestconfig):  # pylint: disable=inconsistent-return-statements\n    """Fixture to setup obb."""\n\n    if pytestconfig.getoption("markexpr") != "not integration":\n        import openbb  # pylint: disable=import-outside-toplevel\n\n        return openbb.obb\n\n\n# pylint: disable=redefined-outer-name\n\n\n@parametrize(\n    "params",\n    [\n        (\n            {\n                "provider": "nasdaq",\n                "start_date": "2023-10-24",\n                "end_date": "2023-11-03",\n                "country": "united_states,japan",\n            }\n        ),\n        (\n            {\n                "provider": "tradingeconomics",\n                "start_date": "2023-01-01",\n                "end_date": "2023-06-06",\n                "country": "mexico,sweden",\n                "importance": "low",\n                "group": "gdp",\n                "calendar_id": None,\n            }\n        ),\n        (\n            {\n                "provider": "fmp",\n                "start_date": "2023-10-24",\n                "end_date": "2023-11-03",\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_economy_calendar(params, obb):\n    """Test economy calendar."""\n    params = {p: v for p, v in params.items() if v}\n\n    result = obb.economy.calendar(**params)\n    assert result\n    assert isinstance(result, OBBject)\n    assert len(result.results) > 0\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can run the test by running:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"pytest test_economy_python.py\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);