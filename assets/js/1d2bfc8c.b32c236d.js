"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95014],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(96540);const a={},r=t.createContext(a);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:s},e.children)}},32244:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"workspace/developers/ai-features/share-step-by-step-reasoning","title":"Share step-by-step reasoning","description":"Stream status updates alongside model output during long operations","source":"@site/content/workspace/developers/ai-features/share-step-by-step-reasoning.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/share-step-by-step-reasoning","permalink":"/workspace/developers/ai-features/share-step-by-step-reasoning","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/share-step-by-step-reasoning.md","tags":[],"version":"current","lastUpdatedBy":"minhhoang1023","lastUpdatedAt":1761019357000,"sidebarPosition":1,"frontMatter":{"title":"Share step-by-step reasoning","sidebar_position":1,"description":"Stream status updates alongside model output during long operations","keywords":["reasoning_step","SSE","status updates","progress"]},"sidebar":"tutorialSidebar","previous":{"title":"OpenBB AI SDK","permalink":"/workspace/developers/openbb-ai-sdk"},"next":{"title":"Parse widget data","permalink":"/workspace/developers/ai-features/parse-widget-data"}}');var a=n(74848),r=n(28453),i=n(39068);const o={title:"Share step-by-step reasoning",sidebar_position:1,description:"Stream status updates alongside model output during long operations",keywords:["reasoning_step","SSE","status updates","progress"]},l=void 0,c={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2}];function p(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.A,{title:"AI Features \u2014 Share step-by-step reasoning | OpenBB Workspace Docs"}),"\n",(0,a.jsxs)(s.p,{children:["Stream status updates with ",(0,a.jsx)(s.code,{children:"reasoning_step"})," so users can track multi\u2011stage actions (fetching data, running tools, post\u2011processing) as tokens arrive."]}),"\n",(0,a.jsxs)(s.p,{children:["Reference implementation in ",(0,a.jsx)(s.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/31-vanilla-agent-reasoning-steps/vanilla_agent_reasoning_steps/main.py",children:"this GitHub repository"}),"."]}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Reasoning",src:"https://openbb-cms.directus.app/assets/eaf36840-a06d-4958-9e0d-cb2570e5a08e.png"}),"\n",(0,a.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(s.p,{children:"Stream status updates alongside tokens so users see what the agent is doing."}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"agents.json"})," configuration:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'return JSONResponse(content={\n  "vanilla_agent_reasoning_steps": {\n    "endpoints": {"query": "http://localhost:7777/v1/query"},\n    "features": {\n      "streaming": True,\n      "widget-dashboard-select": False,\n      "widget-dashboard-search": False,\n    },\n  }\n})\n'})}),"\n",(0,a.jsx)(s.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Parse ",(0,a.jsx)(s.code,{children:"QueryRequest.messages"})," and convert to OpenAI-compatible format"]}),"\n",(0,a.jsx)(s.li,{children:"Add system message to define agent role and capabilities"}),"\n",(0,a.jsxs)(s.li,{children:["Emit ",(0,a.jsx)(s.code,{children:"reasoning_step()"})," at key processing stages:","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Before starting LLM processing"}),"\n",(0,a.jsx)(s.li,{children:"During data preparation or analysis steps"}),"\n",(0,a.jsx)(s.li,{children:"After completing major operations"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["Stream LLM response tokens with ",(0,a.jsx)(s.code,{children:"message_chunk()"})]}),"\n",(0,a.jsx)(s.li,{children:"Send final reasoning step upon completion"}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"reasoning_step(event_type, message, details)"}),": Creates ",(0,a.jsx)(s.code,{children:"StatusUpdateSSE"})," events","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"event_type"}),": ",(0,a.jsx)(s.code,{children:'"INFO"'}),", ",(0,a.jsx)(s.code,{children:'"SUCCESS"'}),", ",(0,a.jsx)(s.code,{children:'"WARNING"'}),", ",(0,a.jsx)(s.code,{children:'"ERROR"'})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"message"}),": Human-readable status description"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"details"}),": Optional dictionary with key-value pairs for additional context"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"message_chunk(text)"}),": Creates ",(0,a.jsx)(s.code,{children:"MessageChunkSSE"})," for streaming LLM output"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"LlmClientMessage"}),": Handles message conversion between formats"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:'from openbb_ai import reasoning_step, message_chunk\nfrom openbb_ai.models import QueryRequest, LlmClientMessage\nfrom openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam\n\nasync def query(request: QueryRequest) -> EventSourceResponse:\n    # Convert messages to OpenAI format\n    openai_messages = [\n        ChatCompletionSystemMessageParam(\n            role="system",\n            content="You are a helpful financial assistant."\n        )\n    ]\n\n    for message in request.messages:\n        if message.role == "human":\n            openai_messages.append(\n                ChatCompletionUserMessageParam(role="user", content=message.content)\n            )\n\n    async def execution_loop():\n        # Pre-processing reasoning\n        yield reasoning_step(\n            event_type="INFO",\n            message="Processing your request...",\n            details={"total_messages": len(request.messages)}\n        ).model_dump()\n\n        # Stream LLM response\n        yield reasoning_step(\n            event_type="INFO",\n            message="Generating response..."\n        ).model_dump()\n\n        async for event in await client.chat.completions.create(\n            model="gpt-4o",\n            messages=openai_messages,\n            stream=True\n        ):\n            if chunk := event.choices[0].delta.content:\n                yield message_chunk(chunk).model_dump()\n\n        # Completion reasoning\n        yield reasoning_step(\n            event_type="SUCCESS",\n            message="Response generated successfully!"\n        ).model_dump()\n\n    return EventSourceResponse(execution_loop(), media_type="text/event-stream")\n'})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},39068:(e,s,n)=>{n.d(s,{A:()=>r});n(96540);var t=n(27143),a=n(74848);function r(e){let{title:s}=e;return(0,a.jsx)(t.A,{children:(0,a.jsx)("title",{children:s})})}}}]);