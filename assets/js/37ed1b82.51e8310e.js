"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6149],{3798:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"python/developer/how-to/http_requests","title":"HTTP Requests","description":"This guide outlines OpenBB processes for making HTTP requests synchronously and asynchronously. Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.","source":"@site/content/python/developer/how-to/http_requests.mdx","sourceDirName":"python/developer/how-to","slug":"/python/developer/how-to/http_requests","permalink":"/python/developer/how-to/http_requests","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/how-to/http_requests.mdx","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1761133924000,"sidebarPosition":1,"frontMatter":{"title":"HTTP Requests","sidebar_position":1,"description":"This guide outlines OpenBB processes for making HTTP requests synchronously and asynchronously. Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.","keywords":["OpenBB Platform","Open source","Python interface","REST API","Code contribution","Requests","HTTP","Async","Synchronous","provider","extension","data","fetch"]},"sidebar":"tutorialSidebar","previous":{"title":"How-To","permalink":"/python/developer/how-to/"},"next":{"title":"Dynamic Command Execution","permalink":"/python/developer/how-to/dynamic_command_execution"}}');var o=s(74848),r=s(28453),i=s(39068);const a={title:"HTTP Requests",sidebar_position:1,description:"This guide outlines OpenBB processes for making HTTP requests synchronously and asynchronously. Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.",keywords:["OpenBB Platform","Open source","Python interface","REST API","Code contribution","Requests","HTTP","Async","Synchronous","provider","extension","data","fetch"]},c=void 0,l={},d=[{value:"Generate Query String",id:"generate-query-string",level:2},{value:"Excluding Params",id:"excluding-params",level:3},{value:"Making Requests",id:"making-requests",level:2},{value:"Synchronous - Requests",id:"synchronous---requests",level:3},{value:"Requests Session Object",id:"requests-session-object",level:3},{value:"Asynchronous - AIOHTTP",id:"asynchronous---aiohttp",level:3},{value:"Multi-URL Requests",id:"multi-url-requests",level:3},{value:"Response Callback",id:"response-callback",level:3},{value:"AIOHTTP Session Object",id:"aiohttp-session-object",level:3},{value:"Asynchronous Fetchers",id:"asynchronous-fetchers",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.A,{title:"HTTP Requests - Contributor Guidelines - Development | OpenBB Docs"}),"\n",(0,o.jsxs)(n.p,{children:["Utility functions within the ",(0,o.jsx)(n.code,{children:"openbb-core"})," simplify the procedure for making both asynchronous and synchronous requests.\nThese cover the majority of typical requests and should be imported for use instead of creating a new client from scratch."]}),"\n",(0,o.jsx)(n.h2,{id:"generate-query-string",children:"Generate Query String"}),"\n",(0,o.jsxs)(n.p,{children:["The helper function ",(0,o.jsx)(n.code,{children:"get_querystring()"})," converts a dictionary of parameters to a standard query URL string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils.helpers import get_querystring\n"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{mdxType:"summary",children:"Function Docstring"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"\nParameters\n----------\nitems: dict\n    The dictionary to be turned into a querystring.\n\nexclude: List[str]\n    The keys to be excluded from the querystring.\n\nReturns\n-------\nstr\n    The querystring.\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"excluding-params",children:"Excluding Params"}),"\n",(0,o.jsxs)(n.p,{children:['Within the context of the Fetcher, the "query" object is a Pydantic model. To pass the query parameters to the helper function, apply ',(0,o.jsx)(n.code,{children:"model_dump()"})," to the query object. This removes any key",":values"," where the value is ",(0,o.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["There may be parameters that are not intended to be included in the parameters portion of the URL string.\nPass those as a ",(0,o.jsx)(n.code,{children:"list"})," to the ",(0,o.jsx)(n.code,{children:"exclude"})," parameter of ",(0,o.jsx)(n.code,{children:"get_querystring()"}),". If None, pass an empty list."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'query_string = get_querystring(query.model_dump(), ["interval"])\n'})}),"\n",(0,o.jsx)(n.h2,{id:"making-requests",children:"Making Requests"}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Using these functions applies ",(0,o.jsx)(n.code,{children:"http"})," settings from ",(0,o.jsx)(n.a,{href:"/python/settings/system_settings#available-settings",children:"system_settings.json"}),", if supplied."]})}),"\n",(0,o.jsx)(n.h3,{id:"synchronous---requests",children:"Synchronous - Requests"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils import make_request\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This function is an abstract helper to make requests from a URL with potential headers and parameters.\nIt accepts ",(0,o.jsx)(n.code,{children:"**kwargs"})," and returns a ",(0,o.jsx)(n.code,{children:"requests.Response"})," object.\nIf no headers are supplied, it will attempt to use a generic user-agent.\nAdd headers as a dictionary to the ",(0,o.jsx)(n.code,{children:"headers"})," parameter of the query."]}),"\n",(0,o.jsxs)(n.p,{children:["All parameters of ",(0,o.jsx)(n.code,{children:"requests.get"})," or ",(0,o.jsx)(n.code,{children:"requests.post"}),"are accessible and passed through as ",(0,o.jsx)(n.code,{children:"**kwargs"}),"."]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{mdxType:"summary",children:"Function Docstring"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'\n    Parameters\n    ----------\n    url : str\n        Url to make the request to\n    method : str, optional\n        HTTP method to use.  Can be "GET" or "POST", by default "GET"\n    timeout : int, optional\n        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout\n\n    Returns\n    -------\n    requests.Response\n        Request response object\n\n    Raises\n    ------\n    ValueError\n        If invalid method is passed\n'})})]}),"\n",(0,o.jsx)(n.h3,{id:"requests-session-object",children:"Requests Session Object"}),"\n",(0,o.jsxs)(n.p,{children:["Use this function to initialize and return a configured ",(0,o.jsx)(n.code,{children:"requests.Session"})," object. There are no parameters."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils.helpers import get_requests_session\n\nsession = get_requests_session()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"asynchronous---aiohttp",children:"Asynchronous - AIOHTTP"}),"\n",(0,o.jsx)(n.p,{children:"Use this function to make single URL requests asynchronously. No callback handling is required for JSON content."}),"\n",(0,o.jsxs)(n.p,{children:["This function uses the ",(0,o.jsx)(n.code,{children:"aiohttp"})," client and accepts ",(0,o.jsx)(n.code,{children:"kwargs"}),".\nIt has a default callback function that assumes the content is ",(0,o.jsx)(n.code,{children:"json"}),".\nNo post-request object parsing is required, but this behaviour is overridden with the ",(0,o.jsx)(n.code,{children:"response_callback"})," parameter."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils.helpers import amake_request\n"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{mdxType:"summary",children:"Function Docstring"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    Parameters\n    ----------\n    url : str\n        Url to make the request to\n    method : str, optional\n        HTTP method to use.  Can be "GET" or "POST", by default "GET"\n    timeout : int, optional\n        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout\n    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional\n        Async callback with response and session as arguments that returns the json, by default None\n    session : ClientSession, optional\n        Custom session to use for requests, by default None\n\n\n    Returns\n    -------\n    Union[dict, List[dict]]\n        Response json\n'})})]}),"\n",(0,o.jsxs)(n.admonition,{type:"tip",children:[(0,o.jsxs)(n.p,{children:["Don't forget to ",(0,o.jsx)(n.code,{children:"await"}),"!"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'url = "https://someurlwithdata.profit"\nresponse_json = await amake_requests(url)\n'})}),(0,o.jsxs)(n.p,{children:["Absent ",(0,o.jsx)(n.code,{children:"await"}),", the response is a coroutine."]})]}),"\n",(0,o.jsx)(n.h3,{id:"multi-url-requests",children:"Multi-URL Requests"}),"\n",(0,o.jsxs)(n.p,{children:["Use this function to download and handle data from a list of URLs. The same default callback function from ",(0,o.jsx)(n.code,{children:"amake_request"})," exists, only here it appends the expected ",(0,o.jsx)(n.code,{children:"json"})," output to a ",(0,o.jsx)(n.code,{children:"list[dict]"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils.helpers import amake_requests\n"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{mdxType:"summary",children:"Function Docstring"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    Parameters\n    ----------\n    urls : Union[str, List[str]]\n        List of urls to make requests to\n    method : Literal["GET", "POST"], optional\n        HTTP method to use.  Can be "GET" or "POST", by default "GET"\n    timeout : int, optional\n        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout\n    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional\n        Async callback with response and session as arguments that returns the json, by default None\n    session : ClientSession, optional\n        Custom session to use for requests, by default None\n\n    Returns\n    -------\n    Union[dict, List[dict]]\n        Response json\n'})})]}),"\n",(0,o.jsx)(n.h3,{id:"response-callback",children:"Response Callback"}),"\n",(0,o.jsx)(n.p,{children:"AIOHTTP uses a callback pattern, and if you need to handle response types other than JSON, pass a small handler as a parameter."}),"\n",(0,o.jsx)(n.p,{children:"The example below is a method for converting CSV data to a dictionary and appending it to a list."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from io import StringIO\nfrom typing import Any\nfrom pandas import DataFrame\n\nresults = []\n\nasync def response_callback(response, _: Any):\n    """Callback for HTTP Client Response."""\n    response = await response.text()\n    data = DataFrame(StringIO(response), skiprows=2)\n    results.append(data.to_dict("records"))\n\nurl = "https://someurlwithdata.profit"\n\nresponse_json = await amake_requests(url, response_callback=response_callback)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"aiohttp-session-object",children:"AIOHTTP Session Object"}),"\n",(0,o.jsx)(n.p,{children:"Use this function to initialize and return a configured AIOHTTP session object."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from openbb_core.provider.utils.helpers import get_async_requests_session\n\nsession = await get_async_requests_session()  # Don't do this in the main event loop of the file.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It can be used within an ",(0,o.jsx)(n.code,{children:"async with"})," context block."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'\nurl = "https://someurlwithdata.profit"\n\nasync with await get_async_requests_session() as session:\n    async with await session.get(url) as response:\n        if response.status != 200:\n            raise OpenBBError(\n                f"Failed to fetch data: {response.status} -> {response.reason}"\n            )\n\n        data = await response.json()\n'})}),"\n",(0,o.jsx)(n.h2,{id:"asynchronous-fetchers",children:"Asynchronous Fetchers"}),"\n",(0,o.jsxs)(n.p,{children:["When asynchronous methods are used within a Fetcher, implement the ",(0,o.jsx)(n.code,{children:"aextract_data"})," method instead of ",(0,o.jsx)(n.code,{children:"extract_data"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    @staticmethod\n    async def aextract_data(\n        query: SourceModelQueryParams,\n        credentials: Optional[dict[str, str]],\n        **kwargs: Any,\n    ) -> list[dict]:\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(96540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(27143),o=s(74848);function r(e){let{title:n}=e;return(0,o.jsx)(t.A,{children:(0,o.jsx)("title",{children:n})})}}}]);