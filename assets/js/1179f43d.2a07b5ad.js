"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[18442],{28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(96540);const s={},d=n.createContext(s);function i(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:t},e.children)}},39068:(e,t,a)=>{a.d(t,{A:()=>d});a(96540);var n=a(27143),s=a(74848);function d(e){let{title:t}=e;return(0,s.jsx)(n.A,{children:(0,s.jsx)("title",{children:t})})}},79546:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"workspace/developers/ai-features/interact-with-dashboard","title":"Interact with dashboard","description":"Receive full dashboard widget metadata and conditionally fetch data","source":"@site/content/workspace/developers/ai-features/interact-with-dashboard.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/interact-with-dashboard","permalink":"/workspace/developers/ai-features/interact-with-dashboard","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/interact-with-dashboard.md","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1759256439000,"sidebarPosition":7,"frontMatter":{"title":"Interact with dashboard","sidebar_position":7,"description":"Receive full dashboard widget metadata and conditionally fetch data","keywords":["dashboard widgets","widget-dashboard-search","WidgetRequest","get_widget_data"]},"sidebar":"tutorialSidebar","previous":{"title":"Custom agent features","permalink":"/workspace/developers/ai-features/custom-agent-features"},"next":{"title":"widgets.json Reference","permalink":"/workspace/developers/json-specs/widgets-json-reference"}}');var s=a(74848),d=a(28453),i=a(39068);const r={title:"Interact with dashboard",sidebar_position:7,description:"Receive full dashboard widget metadata and conditionally fetch data",keywords:["dashboard widgets","widget-dashboard-search","WidgetRequest","get_widget_data"]},o=void 0,c={},l=[{value:"Architecture",id:"architecture",level:2},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{title:"AI Features \u2014 Interact with dashboard | OpenBB Workspace Docs"}),"\n",(0,s.jsxs)(t.p,{children:["Receive the list of widgets on the current dashboard (",(0,s.jsx)(t.code,{children:"secondary"}),") and any explicitly selected (",(0,s.jsx)(t.code,{children:"primary"}),"). Summarize what\u2019s available and fetch data for a chosen widget."]}),"\n",(0,s.jsxs)(t.p,{children:["Reference implementation in ",(0,s.jsx)(t.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/40-vanilla-agent-dashboard-widgets/vanilla_agent_dashboard_widgets/main.py",children:"this GitHub repository"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Example that highlights that the agent has access to data on the dashboard (secondary) and that there are no tabs."}),"\n",(0,s.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"No tab no param no primary",src:"https://openbb-cms.directus.app/assets/2dbcd500-a801-415f-a6d2-2052fa9abc17.png"}),"\n",(0,s.jsx)(t.p,{children:"Example that highlights that the agent still has access to data on the dashboard (secondary) but also has explicit context (primary) as a multi-file viewer widget."}),"\n",(0,s.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"No tab no param primary",src:"https://openbb-cms.directus.app/assets/16b8ea4b-9dc4-487e-b9ac-14b573602684.png"}),"\n",(0,s.jsx)(t.p,{children:"Example that highlights that the agent has access to data that lives on the dashboard (and on all the tabs!)."}),"\n",(0,s.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Tab params",src:"https://openbb-cms.directus.app/assets/a12edb2e-cf15-49ca-bb99-b8468fdfe65d.png"}),"\n",(0,s.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(t.p,{children:"Receive dashboard metadata and selected widgets, summarize what's available, and fetch a sample widget's data."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"agents.json"})," configuration with ",(0,s.jsx)(t.code,{children:"widget-dashboard-select"})," enabled so it accepts explicit context and ",(0,s.jsx)(t.code,{children:"widget-dashboard-search"})," so it can retrieve widgets from the dashboard."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'return JSONResponse(content={\n  "vanilla_agent_dashboard_widgets": {\n    "endpoints": {"query": "http://localhost:7777/v1/query"},\n    "features": {\n      "widget-dashboard-select": True,\n      "widget-dashboard-search": True,\n    },\n  }\n})\n'})}),"\n",(0,s.jsx)(t.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Access both ",(0,s.jsx)(t.code,{children:"widgets.primary"})," (user-selected) and ",(0,s.jsx)(t.code,{children:"widgets.secondary"})," (dashboard) widget collections"]}),"\n",(0,s.jsx)(t.li,{children:"Combine widget lists for comprehensive dashboard overview"}),"\n",(0,s.jsxs)(t.li,{children:["Check ",(0,s.jsx)(t.code,{children:"workspace_state.current_dashboard_info"})," for tab information"]}),"\n",(0,s.jsxs)(t.li,{children:["Stream formatted widget inventory with ",(0,s.jsx)(t.code,{children:"message_chunk()"}),":","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Widget names, types, and parameter configurations"}),"\n",(0,s.jsx)(t.li,{children:"Tab organization if present"}),"\n",(0,s.jsx)(t.li,{children:"Data availability status"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Demonstrate data retrieval by fetching sample widget with ",(0,s.jsx)(t.code,{children:"get_widget_data()"})]}),"\n",(0,s.jsx)(t.li,{children:"Process returned data and show preview with metadata"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"WidgetCollection"}),": Contains ",(0,s.jsx)(t.code,{children:"primary"}),", ",(0,s.jsx)(t.code,{children:"secondary"}),", and ",(0,s.jsx)(t.code,{children:"extra"})," widget groups"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Widget"}),": Individual widget with ",(0,s.jsx)(t.code,{children:"uuid"}),", ",(0,s.jsx)(t.code,{children:"name"}),", ",(0,s.jsx)(t.code,{children:"type"}),", and ",(0,s.jsx)(t.code,{children:"params"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"WidgetParam"}),": Parameter definition with ",(0,s.jsx)(t.code,{children:"name"}),", ",(0,s.jsx)(t.code,{children:"type"}),", ",(0,s.jsx)(t.code,{children:"current_value"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_widget_data(widget_requests)"}),": Fetches data from specified widgets"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"WorkspaceState"}),": Provides dashboard context and tab information"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"message_chunk(text)"}),": Streams widget summaries and data previews"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,s.jsx)(t.p,{children:"Unify primary and secondary widgets, render a summary, then fetch data for one widget:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from openbb_ai import get_widget_data, WidgetRequest, message_chunk\nfrom openbb_ai.models import QueryRequest\n\nasync def query(request: QueryRequest) -> EventSourceResponse:\n    async def execution_loop():\n        # Combine all available widgets\n        all_widgets = []\n        primary_count = 0\n        secondary_count = 0\n\n        if request.widgets:\n            if request.widgets.primary:\n                all_widgets.extend(request.widgets.primary)\n                primary_count = len(request.widgets.primary)\n            if request.widgets.secondary:\n                all_widgets.extend(request.widgets.secondary)\n                secondary_count = len(request.widgets.secondary)\n\n        if not all_widgets:\n            yield message_chunk("No widgets found on your dashboard.").model_dump()\n            return\n\n        # Stream dashboard overview\n        dashboard_info = ""\n        if request.workspace_state and request.workspace_state.current_dashboard_info:\n            dashboard_name = request.workspace_state.current_dashboard_info.name\n            tab_count = len(request.workspace_state.current_dashboard_info.tabs)\n            dashboard_info = f"Dashboard: **{dashboard_name}** ({tab_count} tabs)\\n\\n"\n\n        widget_summary = f"""# Dashboard Widget Analysis\n\n{dashboard_info}## Widget Inventory\n- **Selected widgets (primary)**: {primary_count}\n- **Dashboard widgets (secondary)**: {secondary_count}\n- **Total available**: {len(all_widgets)}\n\n## Available Widgets\n"""\n\n        for i, widget in enumerate(all_widgets[:5]):  # Show first 5\n            widget_type = "\ud83c\udfaf Selected" if i < primary_count else "\ud83d\udcca Dashboard"\n            param_count = len(widget.params) if widget.params else 0\n            widget_summary += f"- **{widget.name}** ({widget_type}) - {param_count} parameters\\n"\n\n        if len(all_widgets) > 5:\n            widget_summary += f"- ... and {len(all_widgets) - 5} more widgets\\n"\n\n        yield message_chunk(widget_summary + "\\n").model_dump()\n\n        # Demonstrate data retrieval with last widget\n        if all_widgets:\n            sample_widget = all_widgets[-1]\n            yield message_chunk(f"Let me fetch data from **{sample_widget.name}** as an example:\\n\\n").model_dump()\n\n            yield get_widget_data([\n                WidgetRequest(\n                    widget=sample_widget,\n                    input_arguments={p.name: p.current_value for p in sample_widget.params} if sample_widget.params else {}\n                )\n            ]).model_dump()\n\n    return EventSourceResponse(execution_loop(), media_type="text/event-stream")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);