"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82225],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var a=t(96540);const i={},r=a.createContext(i);function d(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),a.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(27143),i=t(74848);function r(e){let{title:n}=e;return(0,i.jsx)(a.A,{children:(0,i.jsx)("title",{children:n})})}},42031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"workspace/data-widgets/aggrid-table-charts","title":"AgGrid Table Charts","description":"AgGrid Table Charts","source":"@site/content/workspace/data-widgets/aggrid-table-charts.md","sourceDirName":"workspace/data-widgets","slug":"/workspace/data-widgets/aggrid-table-charts","permalink":"/workspace/data-widgets/aggrid-table-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/data-widgets/aggrid-table-charts.md","tags":[],"version":"current","lastUpdatedBy":"Theodore Aptekarev","lastUpdatedAt":1751385909000,"sidebarPosition":13,"frontMatter":{"title":"AgGrid Table Charts","sidebar_position":13,"description":"AgGrid Table Charts","keywords":["asd"]},"sidebar":"tutorialSidebar","previous":{"title":"File Viewer","permalink":"/workspace/data-widgets/file-viewer"},"next":{"title":"Plotly Charts","permalink":"/workspace/data-widgets/plotly-charts"}}');var i=t(74848),r=t(28453),d=t(39068);const s={title:"AgGrid Table Charts",sidebar_position:13,description:"AgGrid Table Charts",keywords:["asd"]},l=void 0,o={},c=[{value:"Basic Table Widget",id:"basic-table-widget",level:2},{value:"Table Widget from API",id:"table-widget-from-api",level:2},{value:"Table Widget with Column Definitions",id:"table-widget-with-column-definitions",level:2},{value:"Table Widget with Render Functions",id:"table-widget-with-render-functions",level:2},{value:"Table Widget with Hover Card",id:"table-widget-with-hover-card",level:2},{value:"Table to Chart Widget",id:"table-to-chart-widget",level:2},{value:"Table to Time Series Widget",id:"table-to-time-series-widget",level:2},{value:"OTHERS",id:"others",level:2},{value:"Table Interface",id:"table-interface",level:3},{value:"Table to Chart Conversion",id:"table-to-chart-conversion",level:3},{value:"Available Chart Types",id:"available-chart-types",level:3},{value:"Chart Customization",id:"chart-customization",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(d.A,{title:"AgGrid Table Charts | OpenBB Workspace Docs"}),"\n",(0,i.jsx)(n.h2,{id:"basic-table-widget",children:"Basic Table Widget"}),"\n",(0,i.jsx)(n.p,{children:"A widget that displays data in a tabular format. This example shows how to create a table with cryptocurrency data including TVL and price changes."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget Example",src:"https://openbb-cms.directus.app/assets/96f31526-87c1-40f3-8ecb-6cc869d2e910.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget",\n    "description": "A table widget",\n    "type": "table",\n    "endpoint": "table_widget",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/table_widget")\ndef table_widget():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": "Ethereum",\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": "Bitcoin",\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": "Solana",\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsx)(n.h2,{id:"table-widget-from-api",children:"Table Widget from API"}),"\n",(0,i.jsx)(n.p,{children:"A widget that fetches and displays data from an external API. This example demonstrates integration with the DeFi Llama API to show chain TVL data."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget from API Example",src:"https://openbb-cms.directus.app/assets/ab850520-843d-4fe2-b95c-c8346b41ac93.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget from API Endpoint",\n    "description": "A table widget from an API endpoint",\n    "type": "table",\n    "endpoint": "table_widget_from_api_endpoint",\n    "gridData": {"w": 12, "h": 4},\n})\n@app.get("/table_widget_from_api_endpoint")\ndef table_widget_from_api_endpoint():\n    """Get current TVL of all chains using Defi LLama"""\n    response = requests.get("https://api.llama.fi/v2/chains")\n\n    if response.status_code == 200:\n        return response.json()\n\n    print(f"Request error {response.status_code}: {response.text}")\n    raise HTTPException(\n        status_code=response.status_code,\n        detail=response.text\n    )\n'})}),"\n",(0,i.jsx)(n.h2,{id:"table-widget-with-column-definitions",children:"Table Widget with Column Definitions"}),"\n",(0,i.jsx)(n.p,{children:'A widget that displays data in a tabular format with customizable column definitions. The most important part of this widget is the "columnsDefs" key in the data object which allows for detailed column configuration.'}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget with Column Definitions Example",src:"https://openbb-cms.directus.app/assets/efea3aa4-fd2a-4098-bd64-1a7c825b6c96.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget with Column Definitions",\n    "description": "A table widget with column definitions",\n    "type": "table",\n    "endpoint": "table_widget_with_column_definitions",\n    "gridData": {"w": 20, "h": 6},\n    "data": {\n        "table": {\n            "columnsDefs": [\n                {\n                    "field": "name",\n                    "headerName": "Asset",\n                    "cellDataType": "text",\n                    "formatterFn": "none",\n                    "renderFn": "titleCase",\n                    "width": 120,\n                    "pinned": "left"\n                },\n                {\n                    "field": "tvl",\n                    "headerName": "TVL (USD)",\n                    "headerTooltip": "Total Value Locked",\n                    "cellDataType": "number",\n                    "formatterFn": "int",\n                    "width": 150\n                },\n                {\n                    "field": "change_1d",\n                    "headerName": "24h Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                },\n                {\n                    "field": "change_7d",\n                    "headerName": "7d Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                    "hide": True\n                },\n            ]\n        }\n    },\n})\n@app.get("/table_widget_with_column_definitions")\ndef table_widget_with_column_definitions():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": "Ethereum",\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": "Bitcoin",\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": "Solana",\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsx)(n.h2,{id:"table-widget-with-render-functions",children:"Table Widget with Render Functions"}),"\n",(0,i.jsx)(n.p,{children:'A widget that demonstrates various rendering functions for table cells. The key feature is the "renderFn" key in the columnsDefs object which allows for custom cell rendering.'}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget with Render Functions Example",src:"https://openbb-cms.directus.app/assets/ba983638-e6bb-4a3f-9c80-b360f3577b11.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget with Render Functions",\n    "description": "A table widget with render functions",\n    "type": "table",\n    "endpoint": "table_widget_with_render_functions",\n    "gridData": {"w": 20, "h": 6},\n    "data": {\n        "table": {\n            "columnsDefs": [\n                {\n                    "field": "name",\n                    "headerName": "Asset",\n                    "cellDataType": "text",\n                    "formatterFn": "none",\n                    "renderFn": "titleCase",\n                    "width": 120,\n                    "pinned": "left"\n                },\n                {\n                    "field": "tvl",\n                    "headerName": "TVL (USD)",\n                    "headerTooltip": "Total Value Locked",\n                    "cellDataType": "number",\n                    "formatterFn": "int",               \n                    "width": 150,\n                    "renderFn": "columnColor",\n                    "renderFnParams": {\n                        "colorRules": [\n                            {\n                                "condition": "between",\n                                "range": {\n                                    "min": 30000000000,\n                                    "max": 40000000000\n                                },\n                                "color": "blue",\n                                "fill": False\n                            },\n                            {\n                                "condition": "lt",\n                                "value": 10000000000,\n                                "color": "#FFA500",\n                                "fill": False\n                            },\n                            {\n                                "condition": "gt",\n                                "value": 40000000000,\n                                "color": "green",\n                                "fill": True\n                            }\n                        ]\n                    }\n                },\n                {\n                    "field": "change_1d",\n                    "headerName": "24h Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "renderFn": "greenRed",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                },\n                {\n                    "field": "change_7d",\n                    "headerName": "7d Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "renderFn": "greenRed",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                }\n            ]\n        }\n    },\n})\n@app.get("/table_widget_with_render_functions")\ndef table_widget_with_render_functions():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": "Ethereum",\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": "Bitcoin",\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": "Solana",\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For more information on this, check ",(0,i.jsx)(n.a,{href:"/workspace/widget-configuration/render-functions",children:"Render functions"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"table-widget-with-hover-card",children:"Table Widget with Hover Card"}),"\n",(0,i.jsx)(n.p,{children:"A widget that demonstrates the hover card feature, allowing additional information to be displayed when hovering over table cells."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table Widget with Hover Card Example",src:"https://openbb-cms.directus.app/assets/60a39927-8985-4f3a-8e14-0016e167b79f.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table Widget with Hover Card",\n    "description": "A table widget with hover card",\n    "type": "table",\n    "endpoint": "table_widget_with_hover_card",\n    "gridData": {"w": 20, "h": 6},\n    "data": {\n        "table": {\n            "columnsDefs": [\n                {\n                    "field": "name",\n                    "headerName": "Asset",\n                    "cellDataType": "text",\n                    "formatterFn": "none",\n                    "width": 120,\n                    "pinned": "left",\n                    "renderFn": "hoverCard",\n                    "renderFnParams": {\n                        "hoverCard": {\n                            "cellField": "value",\n                            "title": "Project Details",\n                            "markdown": "### {value} (since {foundedDate})\\n**Description:** {description}"\n                        }\n                    }\n                },\n                {\n                    "field": "tvl",\n                    "headerName": "TVL (USD)",\n                    "headerTooltip": "Total Value Locked",\n                    "cellDataType": "number",\n                    "formatterFn": "int",               \n                    "width": 150,\n                    "renderFn": "columnColor",\n                },\n                {\n                    "field": "change_1d",\n                    "headerName": "24h Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "renderFn": "greenRed",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                },\n                {\n                    "field": "change_7d",\n                    "headerName": "7d Change",\n                    "cellDataType": "number",\n                    "formatterFn": "percent",\n                    "renderFn": "greenRed",\n                    "width": 120,\n                    "maxWidth": 150,\n                    "minWidth": 70,\n                }\n            ]\n        }\n    },\n})\n@app.get("/table_widget_with_hover_card")\ndef table_widget_with_hover_card():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": {\n                "value": "Ethereum",\n                "description": "A decentralized, open-source blockchain with smart contract functionality",\n                "foundedDate": "2015-07-30"\n            },\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": {\n                "value": "Bitcoin",\n                "description": "The first decentralized cryptocurrency",\n                "foundedDate": "2009-01-03"\n            },\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": {\n                "value": "Solana",\n                "description": "A high-performance blockchain supporting builders around the world",\n                "foundedDate": "2020-03-16"\n            },\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsx)(n.h2,{id:"table-to-chart-widget",children:"Table to Chart Widget"}),"\n",(0,i.jsx)(n.p,{children:'A widget that demonstrates how to convert table data into a chart view. The key feature is the "chartView" configuration in the data object.'}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table to Chart Widget Example",src:"https://openbb-cms.directus.app/assets/72c0802d-34c9-4bd2-aa3f-77e7d89ccb7c.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table to Chart Widget",\n    "description": "A table widget",\n    "type": "table",\n    "endpoint": "table_to_chart_widget",\n    "gridData": {"w": 20, "h": 12},\n    "data": {\n        "table": {\n            "enableCharts": True,\n            "showAll": False,\n            "chartView": {\n                "enabled": True,\n                "chartType": "column"\n            },\n            "columnsDefs": [\n                {\n                    "field": "name",\n                    "headerName": "Asset",\n                    "chartDataType": "category",\n                },\n                {\n                    "field": "tvl",\n                    "headerName": "TVL (USD)",\n                    "chartDataType": "series",\n                },\n            ]\n        }\n    },\n})\n@app.get("/table_to_chart_widget")\ndef table_to_chart_widget():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "name": "Ethereum",\n            "tvl": 45000000000,\n            "change_1d": 2.5,\n            "change_7d": 5.2\n        },\n        {\n            "name": "Bitcoin",\n            "tvl": 35000000000,\n            "change_1d": 1.2,\n            "change_7d": 4.8\n        },\n        {\n            "name": "Solana",\n            "tvl": 8000000000,\n            "change_1d": -0.5,\n            "change_7d": 2.1\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsx)(n.h2,{id:"table-to-time-series-widget",children:"Table to Time Series Widget"}),"\n",(0,i.jsx)(n.p,{children:'A widget that demonstrates how to display time series data in a chart format. The key feature is the use of "chartDataType": "time" for date fields.'}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Table to Time Series Widget Example",src:"https://openbb-cms.directus.app/assets/f2b0f099-795a-4c97-8361-069d91aca150.png"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@register_widget({\n    "name": "Table to Time Series Widget",\n    "description": "A table widget",\n    "type": "table",\n    "endpoint": "table_to_time_series_widget",\n    "gridData": {"w": 20, "h": 12},\n    "data": {\n        "table": {\n            "enableCharts": True,\n            "showAll": False,\n            "chartView": {\n                "enabled": True,\n                "chartType": "line"\n            },\n            "columnsDefs": [\n                {\n                    "field": "date",\n                    "headerName": "Date",\n                    "chartDataType": "time",\n                },\n                {\n                    "field": "Ethereum",\n                    "headerName": "Ethereum",\n                    "chartDataType": "series",\n                },\n                {\n                    "field": "Bitcoin",\n                    "headerName": "Bitcoin",\n                    "chartDataType": "series",\n                },\n                {\n                    "field": "Solana",\n                    "headerName": "Solana",\n                    "chartDataType": "series",\n                }\n            ]\n        }\n    },\n})\n@app.get("/table_to_time_series_widget")\ndef table_to_time_series_widget():\n    """Returns a mock table data for demonstration"""\n    mock_data = [\n        {\n            "date": "2024-06-06",\n            "Ethereum": 1.0000,\n            "Bitcoin": 1.0000,\n            "Solana": 1.0000\n        },\n        {\n            "date": "2024-06-07",\n            "Ethereum": 1.0235,\n            "Bitcoin": 0.9822,\n            "Solana": 1.0148\n        },\n        {\n            "date": "2024-06-08",\n            "Ethereum": 0.9945,\n            "Bitcoin": 1.0072,\n            "Solana": 0.9764\n        },\n        {\n            "date": "2024-06-09",\n            "Ethereum": 1.0205,\n            "Bitcoin": 0.9856,\n            "Solana": 1.0300\n        },\n        {\n            "date": "2024-06-10",\n            "Ethereum": 0.9847,\n            "Bitcoin": 1.0195,\n            "Solana": 0.9897\n        }\n    ]\n    return mock_data\n'})}),"\n",(0,i.jsx)(n.h2,{id:"others",children:"OTHERS"}),"\n",(0,i.jsx)(n.h3,{id:"table-interface",children:"Table Interface"}),"\n",(0,i.jsx)(n.p,{children:"The Table widget offers comprehensive data manipulation and visualization capabilities:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Column Resizing"}),': Adjust column widths manually or use the "Autosize all columns" feature for automatic optimization.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Column Reorganization"}),": Implement drag-and-drop functionality to reorder columns. Click and hold any column header to reposition it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Column Filtering"}),": Toggle column visibility through column settings to focus on relevant data for your analysis."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sorting"}),": Click column headers to sort data in ascending or descending order."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Data Selection"}),": Select specific data points or ranges to generate visualizations."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"table-to-chart-conversion",children:"Table to Chart Conversion"}),"\n",(0,i.jsx)(n.p,{children:"The widget supports two primary methods for converting table data into charts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Selection-based Charting"}),": Select desired data points, choose a chart type, and generate visualizations instantly. This feature is particularly useful for quantitative analysis."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The example below demonstrates data selection and right-click menu options for creating a line chart:"}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"selection-charting",src:"https://openbb-assets.s3.amazonaws.com/docs/pro/selection-charting-1.png"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ChartView Mode"}),': Access the "ChartView" icon to transform the table into a dynamic chart. This mode automatically updates the visualization as underlying data changes.']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following example shows the ChartView interface:"}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"chartview",src:"https://openbb-assets.s3.amazonaws.com/docs/pro/chartview-setting.png"})}),"\n",(0,i.jsx)(n.p,{children:"The highlighted ChartView option enables seamless conversion between table and chart views."}),"\n",(0,i.jsx)(n.h3,{id:"available-chart-types",children:"Available Chart Types"}),"\n",(0,i.jsx)(n.p,{children:"The built-in charts support a variety of types. Here are the allowed values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Column Charts"}),": ",(0,i.jsx)(n.code,{children:"column"}),", ",(0,i.jsx)(n.code,{children:"groupedColumn"}),", ",(0,i.jsx)(n.code,{children:"stackedColumn"}),", ",(0,i.jsx)(n.code,{children:"normalizedColumn"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bar Charts"}),": ",(0,i.jsx)(n.code,{children:"bar"}),", ",(0,i.jsx)(n.code,{children:"groupedBar"}),", ",(0,i.jsx)(n.code,{children:"stackedBar"}),", ",(0,i.jsx)(n.code,{children:"normalizedBar"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Line and Scatter Charts"}),": ",(0,i.jsx)(n.code,{children:"line"}),", ",(0,i.jsx)(n.code,{children:"scatter"}),", ",(0,i.jsx)(n.code,{children:"bubble"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pie and Donut Charts"}),": ",(0,i.jsx)(n.code,{children:"pie"}),", ",(0,i.jsx)(n.code,{children:"donut"}),", ",(0,i.jsx)(n.code,{children:"doughnut"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Area Charts"}),": ",(0,i.jsx)(n.code,{children:"area"}),", ",(0,i.jsx)(n.code,{children:"stackedArea"}),", ",(0,i.jsx)(n.code,{children:"normalizedArea"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Other Types"}),": ",(0,i.jsx)(n.code,{children:"histogram"}),", ",(0,i.jsx)(n.code,{children:"radarLine"}),", ",(0,i.jsx)(n.code,{children:"radarArea"}),", ",(0,i.jsx)(n.code,{children:"nightingale"}),", ",(0,i.jsx)(n.code,{children:"radialColumn"}),", ",(0,i.jsx)(n.code,{children:"radialBar"}),", ",(0,i.jsx)(n.code,{children:"sunburst"}),", ",(0,i.jsx)(n.code,{children:"rangeBar"}),", ",(0,i.jsx)(n.code,{children:"rangeArea"}),", ",(0,i.jsx)(n.code,{children:"boxPlot"}),", ",(0,i.jsx)(n.code,{children:"treemap"}),", ",(0,i.jsx)(n.code,{children:"heatmap"}),", ",(0,i.jsx)(n.code,{children:"waterfall"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"chart-customization",children:"Chart Customization"}),"\n",(0,i.jsxs)(n.p,{children:["You can change the chart settings by clicking on the three dots and then the ",(0,i.jsx)(n.code,{children:"Chart Settings"})," in the dropdown menu."]}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"400",alt:"chart",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings.png"}),"\n",(0,i.jsx)(n.p,{children:"Here you can change the chart type, the chart settings, and some other settings in each tab."}),"\n",(0,i.jsx)("img",{className:"pro-border-gradient",width:"400",alt:"chart",src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/chart+settings+2.png"}),"\n",(0,i.jsx)(n.p,{children:"The customization interface provides three main configuration areas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Customization"}),": Modify chart appearance, including titles, colors, and styling elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Series Management"}),": Control the visibility and configuration of data series."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chart Type Selection"}),": Choose from various chart types to best represent your data."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example of a customized chart with multiple visualization types:"}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,i.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"example",src:"https://openbb-assets.s3.amazonaws.com/docs/pro/combo-chart.png"})}),"\n",(0,i.jsx)(n.p,{children:"The final example demonstrates how to combine different chart types for enhanced data visualization."})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);