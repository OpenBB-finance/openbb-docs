"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38510],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(27143),i=t(74848);function r(e){let{title:n}=e;return(0,i.jsx)(a.A,{children:(0,i.jsx)("title",{children:n})})}},51228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"python/extensions/interface/openbb-api","title":"openbb-api","description":"Learn how to use a Python tool to generate widgets.json from an openapi.json file.","source":"@site/content/python/extensions/interface/openbb-api.mdx","sourceDirName":"python/extensions/interface","slug":"/python/extensions/interface/openbb-api","permalink":"/python/extensions/interface/openbb-api","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/extensions/interface/openbb-api.mdx","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1761197956000,"sidebarPosition":3,"frontMatter":{"title":"openbb-api","sidebar_position":3,"description":"Learn how to use a Python tool to generate widgets.json from an openapi.json file.","keywords":["widgets.json","openapi.json","OpenBB API","Endpoint integration","Widget configuration","Language-Agnostic API","API implementation","Python","FastAPI","Workspace widgets","Widget definitions","Autogenerate"]},"sidebar":"tutorialSidebar","previous":{"title":"Technical Indicators","permalink":"/python/extensions/infrastructure/openbb-charting/indicators"},"next":{"title":"openbb-mcp","permalink":"/python/extensions/interface/openbb-mcp"}}');var i=t(74848),r=t(28453),o=t(39068);t(89781);const s={title:"openbb-api",sidebar_position:3,description:"Learn how to use a Python tool to generate widgets.json from an openapi.json file.",keywords:["widgets.json","openapi.json","OpenBB API","Endpoint integration","Widget configuration","Language-Agnostic API","API implementation","Python","FastAPI","Workspace widgets","Widget definitions","Autogenerate"]},l=void 0,d={},c=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"Example Syntax",id:"example-syntax",level:3},{value:"Factory Flag",id:"factory-flag",level:3},{value:"App or Factory Name",id:"app-or-factory-name",level:3},{value:"Inline Widget Definitions",id:"inline-widget-definitions",level:2},{value:"OpenAPI Extra",id:"openapi-extra",level:3},{value:"Exclude Endpoint",id:"exclude-endpoint",level:3},{value:"Dropdown Parameters",id:"dropdown-parameters",level:3},{value:"JSON Schema Extra",id:"json-schema-extra",level:3},{value:"Convert From OpenAPI JSON",id:"convert-from-openapi-json",level:2},{value:"Examples",id:"examples",level:2},{value:"Markdown Widget",id:"markdown-widget",level:3},{value:"Metric Widget",id:"metric-widget",level:3},{value:"PDF Widget",id:"pdf-widget",level:3},{value:"Plotly Chart Widget",id:"plotly-chart-widget",level:3},{value:"Omni Widget",id:"omni-widget",level:3},{value:"Form Widget",id:"form-widget",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{title:"ODP API | OpenBB Docs"}),"\n",(0,i.jsxs)(n.p,{children:["The, ",(0,i.jsx)(n.a,{href:"https://pypi.org/project/openbb-platform-api/",children:"openbb-platform-api"}),", Python package is for converting FastAPI instances, or ",(0,i.jsx)(n.code,{children:"openapi.json"})," objects, into OpenBB Workspace Backends and Widget definitions."]}),"\n",(0,i.jsx)(n.p,{children:"It provides drop-in-like functionality for the FastAPI + Uvicorn development stack, and is intended to speed up the development of Workspace Apps and Backends with Minimal Viable Python."}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bulk-generate widgets from an OpenAPI JSON schema file."}),"\n",(0,i.jsx)(n.li,{children:"Start and configure Backends for Workspace using arbitrary Python files and FastAPI app factories, or use the environment's installed Open Data Platform extensions."}),"\n",(0,i.jsx)(n.li,{children:"Merges inline widget configurations with automatically generated content for customizing any property of a widget's definition."}),"\n",(0,i.jsxs)(n.li,{children:["No separate ",(0,i.jsx)(n.code,{children:"widgets.json"})," file required."]}),"\n",(0,i.jsxs)(n.li,{children:["Use an existing ",(0,i.jsx)(n.code,{children:"widgets.json"})," file, or create a new one, and it can be edited live without requiring restart."]}),"\n",(0,i.jsx)(n.li,{children:"Automatically adds endpoints to serve Workspace configuration JSON files."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"Install from PyPI in an environment with a Python version between 3.9 and 3.13:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"pip install openbb-platform-api\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"Without supplying parameters, the script loads a FastAPI instance generated by the environment's installed Open Data Platform extensions and preferences."}),"\n",(0,i.jsxs)(n.p,{children:["If there are no installed extensions, and no ",(0,i.jsx)(n.code,{children:"--app"})," parameter is supplied, an API with zero endpoints and widgets will be created."]}),"\n",(0,i.jsxs)(n.p,{children:["Defaults are, ",(0,i.jsx)(n.code,{children:"--host 127.0.0.1 --port 6900"}),", and it will fallback to the next available port if already in use."]}),"\n",(0,i.jsx)(n.h3,{id:"keyword-arguments",children:"Keyword Arguments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"--app                           Absolute path to the Python file with the target FastAPI instance. Default is the installed Open Data Platform API.\n--name                          Name of the FastAPI instance in the app file. Default is 'app'.\n--factory                       Flag to indicate if the app name is a factory function. Default is 'false'.\n--editable                      Flag to make widgets.json an editable file that can be modified during runtime. Default is 'false'.\n--build                         If the file already exists, changes prompt action to overwrite/append/ignore. Only valid when --editable true.\n--no-build                      Do not build the widgets.json file. Use this flag to load an existing widgets.json file without checking for updates.\n--exclude                       JSON encoded list of API paths to exclude from widgets.json. Disable entire routes with '*' - e.g. '[\"/api/v1/*\"]'.\n--widgets-json                  Absolute/relative path to use as the widgets.json file. Default is ~/envs/{env}/assets/widgets.json, when --editable is 'true'.\n--apps-json                     Absolute/relative path to use as the apps.json file for the server. Default is ~/OpenBBUserData/workspace_apps.json.\n--agents-json                   Absolute/relative path to use as the agents.json file. Including this will add the /agents endpoint to the API.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Remaining parameters are passed to ",(0,i.jsx)(n.code,{children:"uvicorn.run"})]}),"\n",(0,i.jsx)(n.h3,{id:"example-syntax",children:"Example Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"openbb-api --app ./some_file.py --host 0.0.0.0 --port 8005 --reload\n"})}),"\n",(0,i.jsx)(n.h3,{id:"factory-flag",children:"Factory Flag"}),"\n",(0,i.jsxs)(n.p,{children:["If the FastAPI instance is served via factory function, set the ",(0,i.jsx)(n.code,{children:"--factory"})," flag."]}),"\n",(0,i.jsx)(n.p,{children:"Also, declare the name of the factory function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"openbb-api --app some_file.py:main --factory\n"})}),"\n",(0,i.jsx)(n.h3,{id:"app-or-factory-name",children:"App or Factory Name"}),"\n",(0,i.jsxs)(n.p,{children:["It is assumed that the FastAPI instance within the module is named, ",(0,i.jsx)(n.code,{children:"app"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"openbb-api --app some_file.py --name my_app\n"})}),"\n",(0,i.jsx)(n.h2,{id:"inline-widget-definitions",children:"Inline Widget Definitions"}),"\n",(0,i.jsxs)(n.p,{children:["With FastAPI and Pydantic, widget definitions can be supplied inside the code and ",(0,i.jsx)(n.code,{children:"openapi.json"})," schema."]}),"\n",(0,i.jsx)(n.h3,{id:"openapi-extra",children:"OpenAPI Extra"}),"\n",(0,i.jsxs)(n.p,{children:["The entrypoint at the function-level provides the same utility as examples demonstrating a ",(0,i.jsx)(n.code,{children:"@register_widget"})," decorator, with no required imports or boiler-plate code."]}),"\n",(0,i.jsx)(n.p,{children:"Define as many, or few, items as desired here. They will be given the highest priority in the final result, overriding pre-existing definitions within the route."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\n\napp = FastAPI()\n\napp.get(\n  "/some_endpoint",\n  openapi_extra={\n    "widget_config": {\n      # Any key:value object defined on the Widgets JSON Reference page.\n      "name": "Custom Widget Name",\n      "description": "Override the function\'s docstring with a different description",\n    }\n  }\n)\nasync def endpoint_func():\n  """Description that gets transferred to Widget\'s description."""\n  pass\n'})}),"\n",(0,i.jsx)(n.h3,{id:"exclude-endpoint",children:"Exclude Endpoint"}),"\n",(0,i.jsxs)(n.p,{children:["An API endpoint may not be intended as a widget, like an optionsEndpoint. Exclude it from the widgets by setting ",(0,i.jsx)(n.code,{children:'{"exclude": True}'}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get(\n  "/some_param_choices",\n  openapi_extra={\n    "widget_config": {\n      "exclude": True\n    }\n  }\n)\nasync def some_param_choices():\n  return [{"label": "Choice 1", "value": "choice1"}]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"dropdown-parameters",children:"Dropdown Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/workspace/developers/widget-parameters/dropdown",children:"Dropdown"})," choices are generated automatically from a ",(0,i.jsx)(n.code,{children:"Literal"})," Type of function parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Literal\n\n@app.get(\n  "/some_endpoint_with_dropdown",\n)\nasync def some_endpoint_with_dropdown(\n  choices: Literal[\n    "Choice 1",\n    "Choice 2",\n    "Choice 3"\n  ] = "Choice 3"\n):\n  pass\n'})}),"\n",(0,i.jsx)(n.p,{children:"The params array in the Widget definition will end up like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "widgetId": "some_endpoint_with_dropdown_custom_obb",\n  "params": [\n    {\n      "paramName": "choices",\n      "label": "Choices",\n      "value": "Choice 3",\n      "type": "text",\n      "description": "",\n      "options": [\n        {"label": "Choice 1", "value": "Choice 1"},\n        {"label": "Choice 2", "value": "Choice 2"},\n        {"label": "Choice 3", "value": "Choice 3"},\n      ],\n    },\n  ],\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"json-schema-extra",children:"JSON Schema Extra"}),"\n",(0,i.jsx)(n.p,{children:"Annotating parameters and response models extends the capabilities for auto-generation, and is a way to define items unreachable by automation."}),"\n",(0,i.jsxs)(n.p,{children:["Additional settings, compatible with ",(0,i.jsx)(n.code,{children:"widgets.json"}),", are placed in the ",(0,i.jsx)(n.code,{children:"json_schema_extra"})," dictionary, under the key, ",(0,i.jsx)(n.code,{children:"x-widget_config"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Annotated\nfrom fastapi import FastAPI, Query\n\nmy_param: Annotated[\n  str,\n  Query(\n    title="My Title",\n    description="My custom hovertext with detailed information",\n    json_schema_extra={\n      "x-widget_config": {\n        "optionsEndpoint": "/my_param_choices_endpoint_returning_list_of_dictionaries" #[{"label": "Display Name": "value": "actual_value"}]\n      }\n    }\n  )\n]\n\napp = FastAPI()\n\n@app.get(\n  "/annotated_endpoint",\n  openapi_extra={\n    "widget_config": {\n      "params": [\n        "paramName": "my_param", # Identify the parameter to match with and update.\n        "value": "new_default_value"  # Tell Workspace to use a different default value.\n      ]\n    }\n  }\n)\nasync def annotated_endpoint(my_param = "") -> str:  # Defining a `str` here marks the widget as `{"type":"markdown"}`\n  """Example creating markdown widget."""\n  return "Hello world!"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Column definitions for tables are discovered by using a Pydantic model as the return type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import datetime\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\nclass MyData(BaseModel):\n    """This is a custom response model."""\n\n    # Add fields to the model.\n    column_1: datetime.date = Field(\n        description="The date column is a mandatory field.",\n        title="Some Date",\n    )\n    column_2: Optional[str] = Field(\n        default=None,\n        description="This is an optional string column.",\n        title="Some String",\n    )\n    column_3: int = Field(\n        default=-1,\n        description="This is an integer column.",\n        title="Some Integer",\n    )\n    column_4: float = Field(\n        default=10.25,\n        description="This is a float column.",\n        title="Some Float",\n    )\n    column_5: float = Field(\n        default=10.25,\n        description="This is a percent column.",\n        title="Some Percent",\n        json_schema_extra={"x-widget_config": {"formatterFn": "percent"}},\n    )\n    column_6: float = Field(\n        default=0.1025,\n        description="This is a normalized percent value adjusted for presentation.",\n        title="Some Normalized Percent",\n        json_schema_extra={\n            "x-widget_config": {\n                "formatterFn": "normalizedPercent",\n                "renderFn": "greenRed",\n            }\n        },\n    )\n\n\n@app.get("/hello_data")\nasync def hello_data() -> list[MyData]: # Define response as a list of models. This sets {"type":"table"} in the widget definition.\n    """Widget description created by docstring."""\n    # Do something with the parameters and return the result of work.\n    return [MyData(column_1=datetime.date.today(), column_2="Hello!")]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"convert-from-openapi-json",children:"Convert From OpenAPI JSON"}),"\n",(0,i.jsxs)(n.p,{children:["Convert ",(0,i.jsx)(n.code,{children:"openapi.json"})," to ",(0,i.jsx)(n.code,{children:"widgets.json"})," with an imported function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openbb_platform_api.utils.widgets import build_json\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is the spec file for a basic FastAPI server with only one endpoint that returns a JSON list object:"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"openapi.json"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "openapi": "3.1.0",\n  "info": {\n    "title": "FastAPI",\n    "version": "0.1.0"\n  },\n  "paths": {\n    "stock_quote": {\n      "get": {\n        "summary": "Quote",\n        "description": "Widget description derived from the endpoint\'s docstring.",\n        "operationId": "quotestock_quote_get",\n        "parameters": [\n          {\n            "name": "some_parameter",\n            "in": "query",\n            "required": true,\n            "schema": {\n              "type": "integer",\n              "title": "Some Parameter"\n            }\n          },\n          {\n            "name": "symbol",\n            "in": "query",\n            "required": false,\n            "schema": {\n              "type": "string",\n              "default": "AAPL",\n              "title": "Symbol"\n            }\n          }\n        ],\n        "responses": {\n          "200": {\n            "description": "Successful Response",\n            "content": {\n              "application/json": {\n                "schema": {\n                  "type": "array",\n                  "items": {},\n                  "title": "Response Quotestock Quote Get"\n                }\n              }\n            }\n          },\n          "422": {\n            "description": "Validation Error",\n            "content": {\n              "application/json": {\n                "schema": {\n                  "$ref": "#/components/schemas/HTTPValidationError"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  "components": {\n    "schemas": {\n      "HTTPValidationError": {\n        "properties": {\n          "detail": {\n            "items": {\n              "$ref": "#/components/schemas/ValidationError"\n            },\n            "type": "array",\n            "title": "Detail"\n          }\n        },\n        "type": "object",\n        "title": "HTTPValidationError"\n      },\n      "ValidationError": {\n        "properties": {\n          "loc": {\n            "items": {\n              "anyOf": [\n                {\n                  "type": "string"\n                },\n                {\n                  "type": "integer"\n                }\n              ]\n            },\n            "type": "array",\n            "title": "Location"\n          },\n          "msg": {\n            "type": "string",\n            "title": "Message"\n          },\n          "type": {\n            "type": "string",\n            "title": "Error Type"\n          }\n        },\n        "type": "object",\n        "required": [\n          "loc",\n          "msg",\n          "type"\n        ],\n        "title": "ValidationError"\n      }\n    }\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"Assuming the spec above is an in-memory object, use the syntax below to convert it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import json\nfrom openbb_platform_api.utils.widgets import build_json\n\nopenapi = json.loads(...)\nwidgets = json.dumps(build_json(openapi), []) # The empty list can be a list of paths to ignore.\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"widgets.json"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "stock_quote_custom_obb": {\n    "name": "Stock Quote",\n    "description": "Widget description derived from the endpoint\'s docstring.",\n    "category": "Stock Quote",\n    "type": "table",\n    "searchCategory": "Stock Quote",\n    "widgetId": "stock_quote_custom_obb",\n    "params": [\n      {\n        "label": "Some Parameter",\n        "description": "Some Parameter",\n        "type": "text",\n        "value": null,\n        "show": true,\n        "paramName": "some_parameter"\n      },\n      {\n        "label": "Symbol",\n        "description": "Symbol",\n        "type": "text",\n        "value": "AAPL",\n        "show": true,\n        "paramName": "symbol"\n      }\n    ],\n    "endpoint": "stock_quote",\n    "runButton": false,\n    "gridData": {\n      "w": 40,\n      "h": 15\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true,\n        "enableAdvanced": true\n      }\n    },\n    "source": [\n      "Custom"\n    ]\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.p,{children:["The default widget type is ",(0,i.jsx)(n.code,{children:"table"}),", and all that is required to generate a basic AgGrid widget is to return a list of dictionaries."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["It should be assumed that ",(0,i.jsx)(n.code,{children:"app"})," is an instance of ",(0,i.jsx)(n.code,{children:"FastAPI"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI\n\napp = FastAPI()\n"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get("/table_widget")\nasync def table_widget() -> list:\n  """Returns a table widget with no column definitions."""\n  return [{"column1": "Hello", "column2": "World!"}]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"markdown-widget",children:"Markdown Widget"}),"\n",(0,i.jsxs)(n.p,{children:["Define the response output as a string to set the generated widget entry as a ",(0,i.jsx)(n.a,{href:"/workspace/developers/widget-types/markdown",children:"Markdown widget"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get("/markdown_widget")\nasync def markdown_widget() -> str:\n    """Returns a markdown widget"""\n    return "# Markdown Widget"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://openbb-cms.directus.app/assets/60cbbcb5-194e-4c03-905e-65f3de7f4efe.png",alt:"Markdown Widget"})}),"\n",(0,i.jsx)(n.h3,{id:"metric-widget",children:"Metric Widget"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/workspace/developers/widget-types/metric",children:"Metric Widget"})," is generated by importing a response model type, and returning a dictionary."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from openbb_platform_api.response_models import MetricResponseModel\n\n@app.get("/test_metric", response_model=MetricResponseModel)\nasync def test_metric():\n    """Widget description created by docstring."""\n    return dict(label="Example Label", value=12345, delta=5.67)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://openbb-assets.s3.us-east-1.amazonaws.com/docs/pro/metric-widget.png",alt:"Metric Widget"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Generated Widget Entry"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "test_metric_custom_obb": {\n    "name": "Test Metric",\n    "description": "Widget description created by docstring.",\n    "category": "Metric",\n    "type": "metric",\n    "searchCategory": "Metric",\n    "widgetId": "test_metric_custom_obb",\n    "params": [],\n    "endpoint": "/test_metric",\n    "runButton": false,\n    "gridData": {\n      "w": 4,\n      "h": 5\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true\n      }\n    },\n    "source": [\n      "Custom"\n    ]\n  }\n}\n'})})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"Return multiple metrics in the same widget by returning a list of MetricResponseModel types."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get("/test_metric", response_model=list[MetricResponseModel])\nasync def test_metric():\n    """Widget description created by docstring."""\n    return [\n        dict(label="Example Label", value=12345, delta=5.67),\n        dict(label="Another Label", value=67890, delta=-2.34),\n    ]\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"pdf-widget",children:"PDF Widget"}),"\n",(0,i.jsx)(n.p,{children:"Generate a PDF widget by importing a response model and returning a dictionary. The model formats the PDF as a base64-encoded string that can be read by Workspace."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Annotated\n\nfrom fastapi import Query\nfrom openbb_platform_api.response_models import PdfResponseModel\n\n@app.get("/open_pdf", response_model=PdfResponseModel)\nasync def open_pdf(\n    file_path: Annotated[\n        str,\n        Query(\n            description="Local path to the PDF document.",\n            title="File Path",\n        ),\n    ],\n):\n    """Open a local PDF document."""\n    with open(file_path, "rb") as file:\n        pdf = file.read()\n\n    return dict(\n        content=pdf,\n    )\n'})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Generated Widget Entry"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "open_pdf_custom_obb": {\n    "name": "Open PDF",\n    "description": "Open a local PDF document.",\n    "category": "File",\n    "type": "pdf",\n    "searchCategory": "File",\n    "widgetId": "open_pdf_custom_obb",\n    "params": [\n      {\n        "label": "File Path",\n        "description": "Local path to the PDF document.",\n        "optional": false,\n        "type": "text",\n        "value": null,\n        "show": true,\n        "paramName": "file_path"\n      }\n    ],\n    "endpoint": "/open_pdf",\n    "runButton": false,\n    "gridData": {\n      "w": 20,\n      "h": 25\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true\n      }\n    },\n    "source": [\n      "Custom"\n    ],\n    "refetchInterval": false,\n    "subCategory": "PDF"\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"plotly-chart-widget",children:"Plotly Chart Widget"}),"\n",(0,i.jsxs)(n.p,{children:["Plotly Figure objects should be returned as their JSON-serializable, dictionary, representation. At minimum, the ",(0,i.jsx)(n.code,{children:"openapi_extra"})," dictionary should contain the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.get(\n    "/hello_chart",\n    openapi_extra={"widget_config": {"type": "chart"}},\n)\nasync def hello_chart() -> dict:\n    """Widget description created by docstring."""\n    from plotly.graph_objs import Bar, Layout, Figure\n\n    fig = Figure(\n        data=[Bar(x=["A", "B", "C"], y=[1, 2, 3])],\n        layout=Layout(title="Hello Chart!", template="plotly_dark"),\n    )\n\n    return fig.to_plotly_json()\n'})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Generated Widget Entry"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "hello_chart_custom_obb": {\n    "name": "Hello Chart",\n    "description": "Widget description created by docstring.",\n    "category": "Hello Chart",\n    "type": "chart",\n    "searchCategory": "Hello Chart",\n    "widgetId": "hello_chart_custom_obb",\n    "params": [],\n    "endpoint": "/hello_chart",\n    "runButton": false,\n    "gridData": {\n      "w": 40,\n      "h": 15\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true\n      }\n    },\n    "source": [\n      "Custom"\n    ]\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"omni-widget",children:"Omni Widget"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.a,{href:"/workspace/developers/widget-types/omni",children:"Omni Widget"})," requires a little more structure, it relies on Pydantic models to generate query parameters and validate the output."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["POST endpoint where all parameters are sent to the request body as a dictionary.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A single, positional argument."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Inherit from utility class for Input model and parameter definitions.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Import: ",(0,i.jsx)(n.code,{children:"from openbb_platform_api.query_models import OmniWidgetInput"})]}),"\n",(0,i.jsxs)(n.li,{children:["Pre-defined ",(0,i.jsx)(n.code,{children:"prompt"})," parameter. Where required, overwrite the existing in the inheriting model's definition."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Use utility class for API response model.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Import: ",(0,i.jsx)(n.code,{children:"from openbb_platform_api.response_models import OmniWidgetResponseModel"})]}),"\n",(0,i.jsxs)(n.li,{children:["Simplifies output handling by dynamically setting the ",(0,i.jsx)(n.code,{children:"data_format"})," object based on the supplied ",(0,i.jsx)(n.code,{children:"content"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Define the response model as, ",(0,i.jsx)(n.code,{children:"OmniWidgetResponseModel"}),", return a dictionary from the function.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'{"content": ...}'})}),"\n",(0,i.jsxs)(n.li,{children:["API will validate the content and assign the output based on:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"text": For markdown/text content'}),"\n",(0,i.jsx)(n.li,{children:'"table": For tabular data (list of dictionaries or dictionary of arrays)'}),"\n",(0,i.jsx)(n.li,{children:'"chart": For Plotly Figure objects'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Literal, Optional\nfrom openbb_platform_api.query_models import OmniWidgetInput\nfrom openbb_platform_api.response_models import OmniWidgetResponseModel\nfrom pydantic import Field\n\nclass TestOmniWidgetQueryModel(OmniWidgetInput):\n    """Test query model for OmniWidget."""\n    # Here, all parameters are required except `parse_as`.\n    param1: str = Field(description="A string parameter for testing")\n    param2: int = Field(description="An integer parameter for testing")\n    param3: bool = Field(default=False, description="A boolean parameter for testing")\n    start_date: str = Field(description="The start date for testing")\n    end_date: str = Field(description="The end date for testing")\n    parse_as: Optional[Literal["table", "chart", "text"]] = Field(  # Here for demonstration and handled by function output validation.\n        default=None,\n        description="The format to parse the response as, either \'table\', \'chart\', or \'text\'."\n        + " If not defined, the model will try to infer the type based on the content.",\n    )\n\n@app.post("/omni_widget", response_model=OmniWidgetResponseModel)\nasync def create_omni_widget(item: TestOmniWidgetQueryModel):\n    """This is a test endpoint for generating an OmniWidget in OpenBB Workspace."""\n    # Here you would process the incoming request and return a response\n\n    some_test_data = [\n        {"prompt": item.prompt,  # This is the text area box on the widget.\n        "param1": item.param1,\n        "param2": item.param2,\n        "param3": item.param3,\n        "start_date": item.start_date,\n        "end_date": item.end_date,\n    }]\n\n    if item.parse_as == "chart":  # This could also be an instance of plotly.graph_objects.Figure\n        some_test_data = {\n            "data": [{"type": "bar", "x": ["A", "B", "C"], "y": [1, 2, 3]}],\n            "layout": {"template": "plotly_dark", "title": {"text": "Hello Chart!"}}\n        }\n    elif item.parse_as == "text":\n        some_test_data = f"""\n### This is a test OmniWidget response\n\n- Prompt: {item.prompt}\n- Param1: {item.param1}\n- Param2: {item.param2}\n- Param3: {item.param3}\n- Start Date: {item.start_date}\n- End Date: {item.end_date}\n"""\n    return {"content": some_test_data}\n\n'})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://pypi-camo.freetls.fastly.net/e8796d08d0ae50bb5b653c317dd936fce33ecf1a/68747470733a2f2f6769746875622e636f6d2f757365722d6174746163686d656e74732f6173736574732f36613561613838362d393730312d343434382d623339372d656437626162393963616337",alt:"omni widget"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Generated Widget Entry"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "omni_widget_custom_obb": {\n    "name": "Omni Widget",\n    "description": "This is a test endpoint for generating an OmniWidget in OpenBB Workspace.",\n    "category": "Omni Widget",\n    "type": "omni",\n    "searchCategory": "Omni Widget",\n    "widgetId": "omni_widget_custom_obb",\n    "params": [\n      {\n        "label": "Prompt",\n        "description": "Input prompt value for the OmniWidget.",\n        "optional": true,\n        "type": "text",\n        "value": "",\n        "show": false,\n        "paramName": "prompt"\n      },\n      {\n        "label": "Param 1",\n        "description": "A string parameter for testing",\n        "optional": true,\n        "type": "text",\n        "value": null,\n        "paramName": "param_1"\n      },\n      {\n        "label": "Param 2",\n        "description": "An integer parameter for testing",\n        "optional": true,\n        "type": "number",\n        "value": null,\n        "paramName": "param_2"\n      },\n      {\n        "label": "Param 3",\n        "description": "A boolean parameter for testing",\n        "optional": true,\n        "type": "boolean",\n        "value": false,\n        "paramName": "param_3"\n      },\n      {\n        "label": "Start Date",\n        "description": "The start date for testing",\n        "optional": true,\n        "type": "date",\n        "value": null,\n        "paramName": "start_date"\n      },\n      {\n        "label": "End Date",\n        "description": "The end date for testing",\n        "optional": true,\n        "type": "date",\n        "value": null,\n        "paramName": "end_date"\n      },\n      {\n        "label": "Parse As",\n        "description": "The format to parse the response as, either \'table\', \'chart\', or \'text\'. If not defined, the model will try to infer the type based on the content.",\n        "optional": true,\n        "type": "text",\n        "value": null,\n        "options": [\n          {\n            "label": "table",\n            "value": "table"\n          },\n          {\n            "label": "chart",\n            "value": "chart"\n          },\n          {\n            "label": "text",\n            "value": "text"\n          }\n        ],\n        "paramName": "parse_as"\n      }\n    ],\n    "endpoint": "/omni_widget",\n    "runButton": false,\n    "gridData": {\n      "w": 40,\n      "h": 15\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true\n      }\n    },\n    "source": [\n      "Custom"\n    ]\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"form-widget",children:"Form Widget"}),"\n",(0,i.jsx)(n.p,{children:"An input form can be added as a widget parameter, where a successful submission to a POST endpoint triggers a refresh of the widget data."}),"\n",(0,i.jsxs)(n.p,{children:["The entry in ",(0,i.jsx)(n.code,{children:"widgets.json"})," will be automatically created if the conditions below are met:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["GET request route defines in top-level ",(0,i.jsx)(n.code,{children:"widget_config"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'{"form_endpoint": "/path_to/form_post_endpoint"}'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["POST method route takes 1 positional argument, a sub-class of Pydantic BaseModel.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a model, similar to annotated table fields, defining all inputs to the form."}),"\n",(0,i.jsx)(n.li,{children:"Submit button added automatically if not manually defined."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The following snippet creates a widget with a form as the input, and an output table of all submitted forms, as processed through the ",(0,i.jsx)(n.code,{children:"IntakeForm"})," model."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import uuid\nfrom datetime import date as dateType\nfrom typing import Literal, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, ConfigDict, Field\n\napp = FastAPI()\n\nAccountTypes = Literal["General Fund", "Separately Managed", "Private Equity", "Family Office"]\n\n\nclass GeneralIntake(BaseModel):\n    """Submit a form via POST request."""\n\n    model_config = ConfigDict(\n        extra="ignore", model_title_generator=lambda model: "Submit Form"\n    )\n\n    date_created: dateType = Field(alias="Created On", default_factory=dateType.today)\n    first_name: str = Field(alias="First Name")\n    last_name: str = Field(alias="Last Name")\n    email: str = Field(alias="Contact Email")\n    dob: dateType = Field(\n        alias="Date Of Birth",\n    )\n    account_types: Union[AccountTypes, list[AccountTypes]] = Field(\n        alias="Type Of Account",\n        json_schema_extra={\n            "x-widget_config": {"multiSelect": True},\n        },\n    )\n\n\nclass IntakeForm(BaseModel):\n    """Submission Records."""\n\n    model_config = ConfigDict(extra="ignore")\n\n    contacted: bool = Field(\n        title="Contacted",\n        default=False,\n    )\n    date_created: dateType = Field(\n        title="Created On",\n    )\n    first_name: str = Field(title="First Name")\n    last_name: str = Field(title="Last Name")\n    email: str = Field(title="Contact Email")\n    dob: dateType = Field(\n        title="Date Of Birth",\n    )\n    account_types: Union[AccountTypes, list[AccountTypes]] = Field(\n        title="Account Interest",\n    )\n    unique_id: uuid.UUID = Field(\n        title="Unique ID",\n        default_factory=uuid.uuid4,\n    )\n\n\nINTAKE_FORMS: list[IntakeForm] = []\n\n\n@app.post("/general_intake_submit")\nasync def general_intake_post(data: GeneralIntake) -> bool:\n    global INTAKE_FORMS\n    try:\n        INTAKE_FORMS.append(IntakeForm(**data.model_dump()))\n        return True\n    except Exception as e:\n        raise e from e\n\n\n@app.get(\n    "/general_intake",\n    openapi_extra= {\n        "widget_config": {\n            "form_endpoint": "/general_intake_submit",\n        },\n    },\n)\nasync def general_intake() -> list[IntakeForm]:\n    return INTAKE_FORMS\n'})})]}),"\n",(0,i.jsx)("img",{width:"1552",alt:"Form Input Widget",src:"https://github.com/user-attachments/assets/16bb3844-ea43-44c8-ae44-67159b0b70e4"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{mdxType:"summary",children:"Generated Widget Entry"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "general_intake_custom_obb": {\n    "name": "General Intake",\n    "description": "",\n    "category": "General Intake",\n    "type": "table",\n    "searchCategory": "General Intake",\n    "widgetId": "general_intake_custom_obb",\n    "params": [\n      {\n        "type": "form",\n        "paramName": "form",\n        "label": "Submit Form",\n        "description": "Submit a form via POST request.",\n        "endpoint": "/general_intake_submit",\n        "inputParams": [\n          {\n            "label": "Created On",\n            "description": "Created On",\n            "type": "date",\n            "value": null,\n            "paramName": "Created On"\n          },\n          {\n            "label": "First Name",\n            "description": "First Name",\n            "type": "text",\n            "value": null,\n            "paramName": "First Name"\n          },\n          {\n            "label": "Last Name",\n            "description": "Last Name",\n            "type": "text",\n            "value": null,\n            "paramName": "Last Name"\n          },\n          {\n            "label": "Contact Email",\n            "description": "Contact Email",\n            "type": "text",\n            "value": null,\n            "paramName": "Contact Email"\n          },\n          {\n            "label": "Date Of Birth",\n            "description": "Date Of Birth",\n            "type": "date",\n            "value": null,\n            "paramName": "Date Of Birth"\n          },\n          {\n            "label": "Type Of Account",\n            "description": "Type Of Account",\n            "type": "text",\n            "value": null,\n            "multiSelect": true,\n            "options": [\n              {\n                "label": "General Fund",\n                "value": "General Fund"\n              },\n              {\n                "label": "Separately Managed",\n                "value": "Separately Managed"\n              },\n              {\n                "label": "Private Equity",\n                "value": "Private Equity"\n              },\n              {\n                "label": "Family Office",\n                "value": "Family Office"\n              }\n            ],\n            "paramName": "Type Of Account"\n          },\n          {\n            "paramName": "submit",\n            "label": "Submit",\n            "value": true,\n            "type": "button",\n            "description": "Submit the form."\n          }\n        ]\n      }\n    ],\n    "endpoint": "/general_intake",\n    "runButton": false,\n    "gridData": {\n      "w": 40,\n      "h": 15\n    },\n    "data": {\n      "dataKey": "",\n      "table": {\n        "showAll": true,\n        "columnsDefs": [\n          {\n            "field": "contacted",\n            "formatterFn": null,\n            "headerName": "Contacted",\n            "headerTooltip": "Contacted",\n            "cellDataType": "text"\n          },\n          {\n            "field": "date_created",\n            "formatterFn": null,\n            "headerName": "Created On",\n            "headerTooltip": "Created On",\n            "cellDataType": "date"\n          },\n          {\n            "field": "first_name",\n            "formatterFn": null,\n            "headerName": "First Name",\n            "headerTooltip": "First Name",\n            "cellDataType": "text"\n          },\n          {\n            "field": "last_name",\n            "formatterFn": null,\n            "headerName": "Last Name",\n            "headerTooltip": "Last Name",\n            "cellDataType": "text"\n          },\n          {\n            "field": "email",\n            "formatterFn": null,\n            "headerName": "Contact Email",\n            "headerTooltip": "Contact Email",\n            "cellDataType": "text"\n          },\n          {\n            "field": "dob",\n            "formatterFn": null,\n            "headerName": "Date Of Birth",\n            "headerTooltip": "Date Of Birth",\n            "cellDataType": "date"\n          },\n          {\n            "field": "account_types",\n            "formatterFn": null,\n            "headerName": "Account Interest",\n            "headerTooltip": "Account Interest",\n            "cellDataType": "text"\n          },\n          {\n            "field": "unique_id",\n            "formatterFn": null,\n            "headerName": "Unique ID",\n            "headerTooltip": "Unique ID",\n            "cellDataType": "text"\n          }\n        ],\n        "enableAdvanced": true\n      }\n    },\n    "source": [\n      "Custom"\n    ],\n    "form_endpoint": "/general_intake_submit"\n  }\n}\n'})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},89781:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(56289),i=t(34164),r=t(56347),o=t(41121),s=t(74848);function l(e){let{title:n,url:t,description:l,command:d}=e;const{pathname:c}=(0,r.zy)(),p=c.replace(/\/v\d+/,""),m=!p.includes("/reference")&&!p.includes("/widgets-library/")&&!p.includes("/data_models");return(0,s.jsx)(a.A,{className:(0,i.A)("self-stretch min-h-[90px] h-full p-5 rounded !no-underline cursor-pointer flex-col justify-start items-start gap-4 flex transition-all duration-300 ease-in-out","dark:bg-[#151518] dark:hover:bg-[#212126] dark:!text-white","bg-[#F5F5F6] hover:bg-[#DCDDE0] !text-black"),to:t,children:(0,s.jsxs)("div",{className:"self-stretch flex-col justify-center items-start gap-1.5 flex",children:[(0,s.jsxs)("div",{className:"self-stretch justify-between items-center inline-flex",children:[(0,s.jsx)("div",{className:"!text-red text-sm font-bold font-['Inter'] leading-snug",children:n}),m&&(0,s.jsx)("div",{className:"justify-start items-start gap-2.5 flex",children:(0,s.jsx)(o.A,{className:"w-4 h-4"})})]}),l&&(0,s.jsx)("div",{className:"dark:text-[#ebebed] text-[#2A2A2A] text-sm font-normal font-['Inter'] leading-snug",children:l})]})})}}}]);