"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3487],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},39068:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(27143),a=n(74848);function s(e){let{title:t}=e;return(0,a.jsx)(r.A,{children:(0,a.jsx)("title",{children:t})})}},84880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"workspace/developers/ai-features/create-charts","title":"Create charts","description":"Stream inline charts as part of your agent\u2019s response","source":"@site/content/workspace/developers/ai-features/create-charts.md","sourceDirName":"workspace/developers/ai-features","slug":"/workspace/developers/ai-features/create-charts","permalink":"/workspace/developers/ai-features/create-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/workspace/developers/ai-features/create-charts.md","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1761197956000,"sidebarPosition":6,"frontMatter":{"title":"Create charts","sidebar_position":6,"description":"Stream inline charts as part of your agent\u2019s response","keywords":["charts","visualization","artifacts","SSE"]},"sidebar":"tutorialSidebar","previous":{"title":"Create tables","permalink":"/workspace/developers/ai-features/create-tables"},"next":{"title":"Custom agent features","permalink":"/workspace/developers/ai-features/custom-agent-features"}}');var a=n(74848),s=n(28453),i=n(39068);const o={title:"Create charts",sidebar_position:6,description:"Stream inline charts as part of your agent\u2019s response",keywords:["charts","visualization","artifacts","SSE"]},c=void 0,l={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Query flow",id:"query-flow",level:3},{value:"OpenBB AI SDK",id:"openbb-ai-sdk",level:3},{value:"Core logic",id:"core-logic",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.A,{title:"AI Features \u2014 Create charts | OpenBB Workspace Docs"}),"\n",(0,a.jsxs)(t.p,{children:["Stream visualizations (line, bar, scatter, pie, donut) with ",(0,a.jsx)(t.code,{children:"chart(...)"}),". Charts appear below the message that emitted them."]}),"\n",(0,a.jsxs)(t.p,{children:["Reference implementation in ",(0,a.jsx)(t.a,{href:"https://github.com/OpenBB-finance/agents-for-openbb/tree/main/33-vanilla-agent-charts/vanilla_agent_charts/main.py",children:"this GitHub repository"}),"."]}),"\n",(0,a.jsx)("img",{className:"pro-border-gradient",width:"800",alt:"Charts",src:"https://openbb-cms.directus.app/assets/e9d93282-20cb-4b3a-bf58-17032191e82a.png"}),"\n",(0,a.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(t.p,{children:"Emit chart artifacts so visualizations render below the answer. The example shows multiple chart types in one response."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"agents.json"})," configuration with ",(0,a.jsx)(t.code,{children:"widget-dashboard-select"})," feature enabled:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'return JSONResponse(content={\n  "vanilla_agent_charts": {\n    "endpoints": {"query": "http://localhost:7777/v1/query"},\n    "features": {\n      "widget-dashboard-select": False,\n      "widget-dashboard-search": False,\n    },\n  }\n})\n'})}),"\n",(0,a.jsx)(t.h3,{id:"query-flow",children:"Query flow"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Process user request and prepare data for visualization"}),"\n",(0,a.jsxs)(t.li,{children:["Stream explanatory text with ",(0,a.jsx)(t.code,{children:"message_chunk()"})]}),"\n",(0,a.jsx)(t.li,{children:"Create chart data as list of dictionaries"}),"\n",(0,a.jsxs)(t.li,{children:["Choose appropriate chart type based on data characteristics:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Line/Bar/Scatter"}),": Use ",(0,a.jsx)(t.code,{children:"x_key"})," and ",(0,a.jsx)(t.code,{children:"y_keys"})," for XY data"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Pie/Donut"}),": Use ",(0,a.jsx)(t.code,{children:"angle_key"})," for values, ",(0,a.jsx)(t.code,{children:"callout_label_key"})," for labels"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["Emit ",(0,a.jsx)(t.code,{children:"chart()"})," artifacts with proper configuration"]}),"\n",(0,a.jsx)(t.li,{children:"Charts render interactively below streamed content"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"openbb-ai-sdk",children:"OpenBB AI SDK"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"chart(type, data, x_key, y_keys, name, description)"}),": Creates ",(0,a.jsx)(t.code,{children:"MessageArtifactSSE"})," for chart display"]}),"\n",(0,a.jsxs)(t.li,{children:["Chart types: ",(0,a.jsx)(t.code,{children:'"line"'}),", ",(0,a.jsx)(t.code,{children:'"bar"'}),", ",(0,a.jsx)(t.code,{children:'"scatter"'}),", ",(0,a.jsx)(t.code,{children:'"pie"'}),", ",(0,a.jsx)(t.code,{children:'"donut"'})]}),"\n",(0,a.jsxs)(t.li,{children:["Chart parameters handled by specific models:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"LineChartParameters"}),", ",(0,a.jsx)(t.code,{children:"BarChartParameters"}),", ",(0,a.jsx)(t.code,{children:"ScatterChartParameters"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"PieChartParameters"}),", ",(0,a.jsx)(t.code,{children:"DonutChartParameters"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"message_chunk(text)"}),": Streams explanatory text around charts"]}),"\n",(0,a.jsx)(t.li,{children:"Charts support interactive features like zoom, hover, and data export"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"core-logic",children:"Core logic"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from openbb_ai import message_chunk, chart\nfrom openbb_ai.models import QueryRequest\nimport datetime\n\nasync def query(request: QueryRequest) -> EventSourceResponse:\n    async def execution_loop():\n        # Stream introduction\n        yield message_chunk("Let me create some visualizations to illustrate the data trends.\\n\\n").model_dump()\n\n        # Prepare time series data\n        price_data = [\n            {"date": "2024-01-01", "price": 150.0, "volume": 1200000},\n            {"date": "2024-01-02", "price": 152.5, "volume": 1350000},\n            {"date": "2024-01-03", "price": 148.2, "volume": 1100000},\n            {"date": "2024-01-04", "price": 155.8, "volume": 1450000},\n        ]\n\n        # Create line chart for price trend\n        yield chart(\n            type="line",\n            data=price_data,\n            x_key="date",\n            y_keys=["price"],\n            name="Stock Price Trend",\n            description="Daily stock price movement over time"\n        ).model_dump()\n\n        yield message_chunk("\\n\\nThe line chart shows an overall upward trend. Now let\'s look at volume distribution:\\n\\n").model_dump()\n\n        # Create bar chart for volume\n        yield chart(\n            type="bar",\n            data=price_data,\n            x_key="date",\n            y_keys=["volume"],\n            name="Trading Volume",\n            description="Daily trading volume by date"\n        ).model_dump()\n\n        # Portfolio allocation pie chart\n        portfolio_data = [\n            {"asset": "Stocks", "allocation": 60},\n            {"asset": "Bonds", "allocation": 25},\n            {"asset": "Cash", "allocation": 10},\n            {"asset": "Real Estate", "allocation": 5}\n        ]\n\n        yield message_chunk("\\n\\nHere\'s the portfolio allocation breakdown:\\n\\n").model_dump()\n\n        yield chart(\n            type="pie",\n            data=portfolio_data,\n            angle_key="allocation",\n            callout_label_key="asset",\n            name="Portfolio Allocation",\n            description="Investment portfolio distribution by asset class"\n        ).model_dump()\n\n    return EventSourceResponse(execution_loop(), media_type="text/event-stream")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);