"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50998],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(96540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},39068:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var o=n(27143),s=n(74848);function r(e){let{title:t}=e;return(0,s.jsx)(o.A,{children:(0,s.jsx)("title",{children:t})})}},86584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"python/developer/how-to/annotated_results","title":"Annotated Results","description":"This guide provides instructions for returning extra response metadata from Provider extension models. Use this class to include important citations, credits, or other dictionary-like items that should not be included in table or chart data.","source":"@site/content/python/developer/how-to/annotated_results.mdx","sourceDirName":"python/developer/how-to","slug":"/python/developer/how-to/annotated_results","permalink":"/python/developer/how-to/annotated_results","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/how-to/annotated_results.mdx","tags":[],"version":"current","lastUpdatedBy":"DidierRLopes","lastUpdatedAt":1761133924000,"sidebarPosition":6,"frontMatter":{"title":"Annotated Results","sidebar_position":6,"description":"This guide provides instructions for returning extra response metadata from Provider extension models. Use this class to include important citations, credits, or other dictionary-like items that should not be included in table or chart data.","keywords":["ODP","credits","source","citation","accreditation","OpenBB Platform","metadata","provider","results metadata","AnnotatedResult","annotations","develop","results"]},"sidebar":"tutorialSidebar","previous":{"title":"Disabling Output Validation","permalink":"/python/developer/how-to/disabling_output_validation"},"next":{"title":"Deprecating Endpoints","permalink":"/python/developer/how-to/deprecating_endpoints"}}');var s=n(74848),r=n(28453),i=n(39068);const a={title:"Annotated Results",sidebar_position:6,description:"This guide provides instructions for returning extra response metadata from Provider extension models. Use this class to include important citations, credits, or other dictionary-like items that should not be included in table or chart data.",keywords:["ODP","credits","source","citation","accreditation","OpenBB Platform","metadata","provider","results metadata","AnnotatedResult","annotations","develop","results"]},d=void 0,l={},c=[{value:"<code>AnnotatedResult</code> Class",id:"annotatedresult-class",level:2},{value:"How To Use",id:"how-to-use",level:2},{value:"Output",id:"output",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{title:"Annotated Results & Metadata - Developer | OpenBB Docs"}),"\n",(0,s.jsxs)(t.h2,{id:"annotatedresult-class",children:[(0,s.jsx)(t.code,{children:"AnnotatedResult"})," Class"]}),"\n",(0,s.jsx)(t.p,{children:"Use this class to return function metadata, or other data, that is not intended to be included with the main results."}),"\n",(0,s.jsx)(t.p,{children:"For example, source citations can be included by using this object as a wrapper for the real results."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from openbb_core.provider.abstract.annotated_result import AnnotatedResult\n"})}),"\n",(0,s.jsx)(t.p,{children:"Initialize the class with two objects."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"result"})}),": Any","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Serializable results - i.e, ",(0,s.jsx)(t.code,{children:"list[dict]"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"metadata"})}),": dict","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"JSON-encodable dictionary"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use",children:"How To Use"}),"\n",(0,s.jsx)(t.admonition,{type:"important",children:(0,s.jsxs)(t.p,{children:["The class is used in conjunction with the ",(0,s.jsx)(t.a,{href:"/python/developer/extension_types/provider",children:(0,s.jsx)(t.code,{children:"ProviderInterface"})}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["In the provider's ",(0,s.jsx)(t.code,{children:"Fetcher.transform_data"})," method, wrap and annotate the output like below."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'    @staticmethod\n    def transform_data(\n        query: FredSeriesQueryParams,\n        data: dict,\n        **kwargs: Any,\n    ) -> AnnotatedResult[list[FredSeriesData]]:\n        """Transform data."""\n        records = data.get("results", [])\n        metadata = data.get("metadata", {})\n\n        return AnnotatedResult(\n            result=[FredSeriesData.model_validate(r) for r in records],\n            metadata=metadata,\n        )\n'})}),"\n",(0,s.jsx)(t.h2,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(t.p,{children:["When the pattern above is used, the metadata dictionary is returned to, ",(0,s.jsx)(t.code,{children:'output.extra["results_metadata"]'}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);