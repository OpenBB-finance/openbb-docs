"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[39394],{28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(96540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},32805:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"python/developer/how-to/validators","title":"Validators","description":"This guide describes the use of validators with model inputs and outputs.","source":"@site/content/python/developer/how-to/validators.mdx","sourceDirName":"python/developer/how-to","slug":"/python/developer/how-to/validators","permalink":"/python/developer/how-to/validators","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/python/developer/how-to/validators.mdx","tags":[],"version":"current","lastUpdatedBy":"Danglewood","lastUpdatedAt":1761197956000,"sidebarPosition":2,"frontMatter":{"title":"Validators","sidebar_position":2,"description":"This guide describes the use of validators with model inputs and outputs.","keywords":["ODP","Pydantic","field_validator","model_validator","QueryParams","Data","Fetcher","validator","Field","Fast API"]},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic Command Execution","permalink":"/python/developer/how-to/dynamic_command_execution"},"next":{"title":"Disabling Output Validation","permalink":"/python/developer/how-to/disabling_output_validation"}}');var i=a(74848),s=a(28453),o=a(39068);const r={title:"Validators",sidebar_position:2,description:"This guide describes the use of validators with model inputs and outputs.",keywords:["ODP","Pydantic","field_validator","model_validator","QueryParams","Data","Fetcher","validator","Field","Fast API"]},l=void 0,d={},c=[{value:"Importing",id:"importing",level:2},{value:"Examples",id:"examples",level:2},{value:"Parsing Dates",id:"parsing-dates",level:3},{value:"Normalize Percent Values",id:"normalize-percent-values",level:3},{value:"Dynamic Default Date",id:"dynamic-default-date",level:3},{value:"Replace 0s With None",id:"replace-0s-with-none",level:3}];function h(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{title:"Validators - Developer | OpenBB Docs"}),"\n",(0,i.jsx)(t.p,{children:"Both QueryParams and Data models can benefit from the tactical use of Pydantic validators.\nThey assist with enforcing FastAPI compliance for both inputs and outputs,\nand they work in the final stage of transformation immediately before output."}),"\n",(0,i.jsx)(t.p,{children:"Some situations where they are used include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Transform, conform, or otherwise alter the entered query parameter or returned data value."}),"\n",(0,i.jsx)(t.li,{children:"Handle type checking and formatting."}),"\n",(0,i.jsx)(t.li,{children:"Setting default values."}),"\n",(0,i.jsx)(t.li,{children:"Normalizing percent values."}),"\n",(0,i.jsx)(t.li,{children:"Cleaning NaN values."}),"\n",(0,i.jsx)(t.li,{children:"Validating unbound string parameters."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"importing",children:"Importing"}),"\n",(0,i.jsx)(t.p,{children:"The items to import are from the Pydantic library:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from pydantic import field_validator, model_validator\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Field validators work at the row-level and do not access other parts of the model.\nUse ",(0,i.jsx)(t.code,{children:"model_validator"})," to work with the entire row."]})}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"These are a few examples, functions will be inside the class code block definition.\nSome static type checkers may disagree with the Pydantic patterns."}),"\n",(0,i.jsx)(t.h3,{id:"parsing-dates",children:"Parsing Dates"}),"\n",(0,i.jsxs)(t.p,{children:["Providers will format dates in a number of ways. OpenBB uses YYYY-MM-DD as the standard convention for inputs.\nOutputs are a ",(0,i.jsx)(t.code,{children:"datetime"})," object or a valid ISO date string."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@field_validator("last_trade_timestamp", mode="before", check_fields=False)\n@classmethod\ndef _parse_timestamp(cls, v):\n    """Parse a Unix timestamp."""\n    return datetime.fromtimestamp(v)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"normalize-percent-values",children:"Normalize Percent Values"}),"\n",(0,i.jsx)(t.p,{children:"At the provider level, we want to standardize the way values representing a percent are returned."}),"\n",(0,i.jsxs)(t.p,{children:["It is our intention to ensure those values are ready-to-consume by formulas without conversion.\nThis example would be used within a provider's ",(0,i.jsx)(t.code,{children:"Data"})," model."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@field_validator("change_percent", mode="before", check_fields=False)\n@classmethod\ndef _normalize_percent(cls, v):\n    """Normalize the percent."""\n    return v / 100 if v else None\n'})}),"\n",(0,i.jsx)(t.h3,{id:"dynamic-default-date",children:"Dynamic Default Date"}),"\n",(0,i.jsxs)(t.p,{children:["It might be desirable to have a default date parameter that is not static. To allow this, we must set the default parameter value as ",(0,i.jsx)(t.code,{children:"None"}),", and use the ",(0,i.jsx)(t.code,{children:"model_validator"}),". This example is for the ",(0,i.jsx)(t.code,{children:"QueryParams"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@model_validator(mode="before")\n@classmethod\ndef _validate_dates(cls, values):\n    """Validate the query parameters."""\n    if values.get("start_date") is None:\n        values["start_date"] = (datetime.now() - timedelta(days=90)).date()\n    if values.get("end_date") is None:\n        values["end_date"] = datetime.now().date()\n    return values\n'})}),"\n",(0,i.jsx)(t.h3,{id:"replace-0s-with-none",children:"Replace 0s With None"}),"\n",(0,i.jsxs)(t.p,{children:["Sometimes values are returned as a ",(0,i.jsx)(t.code,{children:"0"})," when they should really be a ",(0,i.jsx)(t.code,{children:"null"}),".\nThis example looks at the entire ",(0,i.jsx)(t.code,{children:"Data"})," model, but could easily be adapted to use on individual fields."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'@model_validator(mode="before")\n@classmethod\ndef replace_zero(cls, values):\n    """Check for zero values and replace with None."""\n    return (\n        {k: None if v == 0 else v for k, v in values.items()}\n        if isinstance(values, dict)\n        else values\n    )\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},39068:(e,t,a)=>{a.d(t,{A:()=>s});a(96540);var n=a(27143),i=a(74848);function s(e){let{title:t}=e;return(0,i.jsx)(n.A,{children:(0,i.jsx)("title",{children:t})})}}}]);