"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41859],{5854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"platform/developer_guide/tutorials/add_extension","title":"Create extension from scratch","description":"This guide outlines the process for adding a new endpoint to an existing data provider, that does not yet have a standard model.","source":"@site/content/platform/developer_guide/tutorials/add_extension.mdx","sourceDirName":"platform/developer_guide/tutorials","slug":"/platform/developer_guide/tutorials/add_extension","permalink":"/platform/developer_guide/tutorials/add_extension","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenBB-finance/openbb-docs/edit/main/content/platform/developer_guide/tutorials/add_extension.mdx","tags":[],"version":"current","lastUpdatedBy":"minhhoang1023","lastUpdatedAt":1761059224000,"sidebarPosition":1,"frontMatter":{"title":"Create extension from scratch","sidebar_position":1,"description":"This guide outlines the process for adding a new endpoint to an existing data provider, that does not yet have a standard model.","keywords":["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","new endpoint","fmp","OpenBB extensions","OpenBB provider","standard model","data model","currency","snapshot","router","how to"]},"sidebar":"tutorialSidebar","previous":{"title":"Extensions","permalink":"/platform/developer_guide/extensions"},"next":{"title":"Add provider to existing extension","permalink":"/platform/developer_guide/tutorials/add_new_provider_to_existing_extension"}}');var i=t(74848),s=t(28453),l=t(39068);const a={title:"Create extension from scratch",sidebar_position:1,description:"This guide outlines the process for adding a new endpoint to an existing data provider, that does not yet have a standard model.",keywords:["OpenBB Platform","Open source","Python interface","REST API","contribution","contributing","documentation","code","provider","new endpoint","fmp","OpenBB extensions","OpenBB provider","standard model","data model","currency","snapshot","router","how to"]},d=void 0,o={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Background information",id:"background-information",level:2},{value:"Build Standard Model",id:"build-standard-model",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Create a new file",id:"create-a-new-file",level:3},{value:"QueryParams",id:"queryparams",level:3},{value:"Data",id:"data",level:3},{value:"Build Provider Models",id:"build-provider-models",level:2},{value:"Create File For Provider",id:"create-file-for-provider",level:3},{value:"Define QueryParams",id:"define-queryparams",level:3},{value:"Define Data",id:"define-data",level:3},{value:"Define Fetcher",id:"define-fetcher",level:3},{value:"Add router endpoint to extension",id:"add-router-endpoint-to-extension",level:2},{value:"Smoke test",id:"smoke-test",level:3},{value:"Tests",id:"tests",level:2},{value:"Unit test for provider",id:"unit-test-for-provider",level:3},{value:"Integration tests for router endpoint",id:"integration-tests-for-router-endpoint",level:3},{value:"API",id:"api",level:4},{value:"Python",id:"python",level:4},{value:"Submit A Pull Request",id:"submit-a-pull-request",level:2},{value:"Linters",id:"linters",level:4},{value:"Install Pre-Commit Hooks",id:"install-pre-commit-hooks",level:4},{value:"Commit Changes",id:"commit-changes",level:4},{value:"Push Changes",id:"push-changes",level:4},{value:"Open a Pull Request",id:"open-a-pull-request",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.A,{title:"Add Command To An Existing Provider - How-To | OpenBB Platform Docs"}),"\n",(0,i.jsx)(n.p,{children:"This page will walk through adding a new router endpoint to an existing data provider, and how to go about creating a new standard model."}),"\n",(0,i.jsxs)(n.p,{children:["To demonstrate, we will be extending the ",(0,i.jsx)(n.code,{children:"openbb-currency"})," router. The objective is to add a snapshot of currencies relative to a base currency."]}),"\n",(0,i.jsx)(n.p,{children:"The process will be very similar to adding a data provider to an existing endpoint - but here, we need to create a new standard model and add an extension."}),"\n",(0,i.jsx)(n.p,{children:"It's about the same amount of work, but effort should be placed in consideration of others inheriting from this model in the future."}),"\n",(0,i.jsx)(n.p,{children:"At a high level, the workflow is going to look something like:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"With clear objectives, define the requirements for inputs and outputs of this function."}),"\n",(0,i.jsx)(n.li,{children:"Create a standard model that will be suitable for any provider to inherit from."}),"\n",(0,i.jsx)(n.li,{children:"Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher."}),"\n",(0,i.jsxs)(n.li,{children:["Create a new router endpoint in the ",(0,i.jsx)(n.code,{children:"openbb-currency"})," module."]}),"\n",(0,i.jsx)(n.li,{children:"Rebuild the Python interface and static assets."}),"\n",(0,i.jsx)(n.li,{children:"Create unit tests."}),"\n",(0,i.jsx)(n.li,{children:"Create integration tests."}),"\n",(0,i.jsx)(n.li,{children:"Submit a pull request."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,i.jsx)(n.p,{children:"Clone the GitHub repo and navigate into the project's folder."}),"\n",(0,i.jsx)(n.p,{children:"If you have already done this, update your local branch:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"git fetch"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"git pull origin develop"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'Install the OpenBB Platform in "editable" mode.'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"cd openbb_platform"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"python dev_install.py -e"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Rebuild the Python interface and static assets."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"import openbb"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"openbb.build()"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with ",(0,i.jsx)(n.code,{children:"feature/"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"git checkout -b feature/currency-snapshots"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"background-information",children:"Background information"}),"\n",(0,i.jsx)(n.p,{children:"Currencies, as an asset class, have different data properties than securities. For this exercise, we're really only concerned about the differences within the market data we are working with.\nThings to keep in mind are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Market trading hours are relative to three major centers: Hong Kong, London, New York."}),"\n",(0,i.jsx)(n.li,{children:"Between the active global trading sessions, FX markets are 24/5."}),"\n",(0,i.jsx)(n.li,{children:"The data returned from a source could be time-indexed to any of the three market centers, localized as UTC, or make you guess."}),"\n",(0,i.jsx)(n.li,{children:"OHLC time series data will not always have volume."}),"\n",(0,i.jsx)(n.li,{children:"Not all sources will provide bid/ask, and/or, lot sizes."}),"\n",(0,i.jsxs)(n.li,{children:['Perspective for the data is a relative relationship, there are always two "symbols".',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Similar to index benchmarking, but with a layer of interest rate expectations."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Gold and silver are typically included as, XAU and XAG, respectively."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"build-standard-model",children:"Build Standard Model"}),"\n",(0,i.jsx)(n.p,{children:"The essence of a standard model is to be a shared resource with common ground between all sources."}),"\n",(0,i.jsx)(n.p,{children:"It should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence."}),"\n",(0,i.jsx)(n.p,{children:"Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform."}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:["Our objective in this exercise has similar endpoints in the Equity and Index modules, ",(0,i.jsx)(n.code,{children:"obb.equity.market_snapshots()"})," and ",(0,i.jsx)(n.code,{children:"obb.index.snapshots()"}),";\nhowever, there are differences between currency data and stocks."]}),"\n",(0,i.jsx)(n.p,{children:'The normal parameter for most asset classes, "symbol", fits our requirement; but, it is not the correct description. Instead, we want to name it, "base".\nWe need data providers to have an option to "allow" querying multiple base symbols.'}),"\n",(0,i.jsx)(n.p,{children:"We want to view the universe relative to a base currency, but we also want the option for comparative analysis between multiple bases."}),"\n",(0,i.jsx)(n.p,{children:'In the data model, we\'ll need to split the typical "symbol" field into two: "base" and "currency".'}),"\n",(0,i.jsx)(n.p,{children:"It's quite likely that a large portion of users will not desire the entire universe, but maybe 20-30 of them.\nIt would be a good idea to have a parameter that filters for a list of desired currencies."}),"\n",(0,i.jsxs)(n.p,{children:['For this purpose, we want to express the view as an "',(0,i.jsx)(n.a,{href:"https://www.investopedia.com/terms/i/indirectquote.asp",children:"indirect quote"}),'" from the perspective of the "base currency".\nHow many units of "currency" X are received by selling one unit of the "base".\nCompared against the USD, EUR should be less than 1, AUD should be greater than 1, and gold is a large decimal.']}),"\n",(0,i.jsx)(n.p,{children:"We can easily apply an inverse that allows users to decide for themselves which perspective they want to view\nthe exchange rate from. This is something that will need to be applied at the provider level, and it should be a requirement."}),"\n",(0,i.jsx)(n.p,{children:'We will add a parameter, "quote_type", with choices ["indirect", "direct"].'}),"\n",(0,i.jsx)(n.p,{children:"There is one major monkey wrench in all of this. Is it, EUR/USD or USD/EUR? Do all providers return the same conventions?\nIt's a known-unknown, and we can't assume blindly that all follow the norm - or are even consistent with themselves.\nWe'll need to check a variety of response data from each source to find out."}),"\n",(0,i.jsx)(n.p,{children:"The output needs to be usable as a conversion table, and this will likely need to be manually enforced."}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsx)(n.p,{children:"The rule must be clearly communicated and each provider's output should be verified for compliance, else coerced to be."})}),"\n",(0,i.jsx)(n.h3,{id:"create-a-new-file",children:"Create a new file"}),"\n",(0,i.jsxs)(n.p,{children:["We're going to map this new endpoint in the interface to, ",(0,i.jsx)(n.code,{children:"obb.currency.snapshots()"}),". We'll name the model accordingly, ",(0,i.jsx)(n.code,{children:"CurrencySnapshots"}),", and create a file, ",(0,i.jsx)(n.code,{children:"currency_snapshots.py"}),". The file should be created here:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/\n"})}),"\n",(0,i.jsx)(n.p,{children:"The first line of the file should be a docstring, the second line should be empty, and the import statements follow."}),"\n",(0,i.jsx)(n.p,{children:"The code block below are the typical imports in a standard model file, modify to suit the specific requirements."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Constrained types can be imported from the Pydantic library, i.e. ",(0,i.jsx)(n.code,{children:"PositiveInt"}),", ",(0,i.jsx)(n.code,{children:"NonNegativeFloat"}),", etc."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""Currency Snapshots Standard Model."""\n\nfrom typing import Literal, Optional\n\nfrom pydantic import Field, field_validator\n\nfrom openbb_core.provider.abstract.data import Data\nfrom openbb_core.provider.abstract.query_params import QueryParams\nfrom openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS\n'})}),"\n",(0,i.jsx)(n.h3,{id:"queryparams",children:"QueryParams"}),"\n",(0,i.jsxs)(n.p,{children:["Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.\nThe same applies to ",(0,i.jsx)(n.code,{children:"Literal"})," types, set as a generic ",(0,i.jsx)(n.code,{children:"str"})," or ",(0,i.jsx)(n.code,{children:"int"})," type and redefine it within the provider model as a ",(0,i.jsx)(n.code,{children:'Literal["choice1", "choice2"]'}),".\nWe don't want a standard model parameter to provide invalid choices for individual providers."]}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.code,{children:"CurrencySnapshotsQueryParams"})," model is going to be very similar to ",(0,i.jsx)(n.code,{children:"MarketSnapshotsQueryParams"}),', with the only difference being the field name "base".']}),"\n",(0,i.jsxs)(n.admonition,{type:"important",children:[(0,i.jsxs)(n.p,{children:["If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - ",(0,i.jsx)(n.code,{children:"Union[str, List[str]]"}),".\nInstead, define it for the single value, ",(0,i.jsx)(n.code,{children:"str"}),", and then add the property below to the provider's QueryParams model."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'__json_schema_extra__ = {"base": ["multiple_items_allowed"]}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"The code block below is a continuation of the section above."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CurrencySnapshotsQueryParams(QueryParams):\n    """Currency Snapshots Query Params."""\n\n    base: str = Field(description="The base currency symbol.", default="usd")\n    quote_type: Literal["direct", "indirect"] = Field(\n        description="Whether the quote is direct or indirect."\n        + " Selecting \'direct\' will return the exchange rate"\n        + " as the amount of domestic currency required to buy one unit"\n        + " of the foreign currency."\n        + " Selecting \'indirect\' (default) will return the exchange rate"\n        + " as the amount of foreign currency required to buy one unit"\n        + " of the domestic currency.",\n        default="indirect",\n    )\n    counter_currencies: Optional[Union[str, List[str]]] = Field(\n        description="An optional list of counter currency symbols to filter for."\n        + " None returns all.",\n        default=None,\n    )\n\n    @field_validator("base", mode="before", check_fields=False)\n    @classmethod\n    def to_upper(cls, v):\n        """Convert the base currency to uppercase."""\n        return v.upper()\n\n    @field_validator("counter_currencies", mode="before", check_fields=False)\n    @classmethod\n    def convert_string(cls, v):\n        """Convert the counter currencies to an upper case string list."""\n        if v is not None:\n            return ",".join(v).upper() if isinstance(v, list) else v.upper()\n        return None\n'})}),"\n",(0,i.jsx)(n.p,{children:"It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.\nThis can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations."}),"\n",(0,i.jsx)(n.h3,{id:"data",children:"Data"}),"\n",(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"QueryParams"}),', we don\'t want to attempt to define every potential future field. We want a core foundation for others to build on.\nWe will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our\nWe will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our\ndata parsing requirements for this endpoint:']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Split the six-letter symbol as two symbols."}),"\n",(0,i.jsxs)(n.li,{children:["If the provider only returns ",(0,i.jsx)(n.code,{children:'{"symbol": "price"}'}),", it will need to coerced accordingly within the ",(0,i.jsx)(n.code,{children:"transform_data"})," static method of the ",(0,i.jsx)(n.code,{children:"Fetcher"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CurrencySnapshotsData(Data):\n    """Currency Snapshots Data."""\n\n    base_currency: str = Field(description="The base, or domestic, currency.")\n    counter_currency: str = Field(description="The counter, or foreign, currency.")\n    last_rate: float = Field(\n        description="The exchange rate, relative to the base currency."\n        + " By default, rates are expressed as the amount of foreign currency"\n        + " received from selling one unit of the base currency,"\n        + " or the quantity of foreign currency required to purchase"\n        + " one unit of the domestic currency."\n        + " To inverse the perspective, set the \'quote_type\' parameter as \'direct\'.\n    )\n    open: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("open", ""),\n        default=None,\n    )\n    high: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("high", ""),\n        default=None,\n    )\n    low: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("low", ""),\n        default=None,\n    )\n    close: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("close", ""),\n        default=None,\n    )\n    volume: Optional[int] = Field(\n        description=DATA_DESCRIPTIONS.get("volume", ""), default=None\n    )\n    prev_close: Optional[float] = Field(\n        description=DATA_DESCRIPTIONS.get("prev_close", ""),\n        default=None,\n    )\n'})}),"\n",(0,i.jsx)(n.p,{children:"Combine the three code blocks above to make a complete standard model file, and then we have completed the first two tasks."}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","With clear objectives, define the requirements for inputs and outputs of this function."]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Create a standard model that will be suitable for any provider to inherit from."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"build-provider-models",children:"Build Provider Models"}),"\n",(0,i.jsxs)(n.p,{children:["We're going to start with one provider, ",(0,i.jsx)(n.a,{href:"https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote",children:"FMP"}),", and this section will look a lot like the process outlined ",(0,i.jsx)(n.a,{href:"/platform/developer_guide/tutorials/add_new_provider_to_existing_extension",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"create-file-for-provider",children:"Create File For Provider"}),"\n",(0,i.jsx)(n.p,{children:"We need to create a new file in the FMP provider extension. This will have the same name as our standard model."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"The first line in the file will always be a docstring, with the import statements beginning below an empty line."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""FMP Currency Snapshots Model."""\n\n# pylint: disable=unused-argument\n\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional\n\nfrom openbb_core.provider.abstract.fetcher import Fetcher\nfrom openbb_core.provider.standard_models.currency_snapshots import (\n    CurrencySnapshotsData,\n    CurrencySnapshotsQueryParams,\n)\nfrom openbb_core.provider.utils.errors import EmptyDataError\nfrom openbb_core.provider.utils.helpers import amake_request\nfrom pandas import DataFrame, concat\nfrom pydantic import Field, field_validator\n'})}),"\n",(0,i.jsx)(n.h3,{id:"define-queryparams",children:"Define QueryParams"}),"\n",(0,i.jsxs)(n.p,{children:["Here, we won't need to define any new parameters. All that's added is a URL to the endpoint's documentation,\nand then the ",(0,i.jsx)(n.code,{children:"__json_schema_extra__"})," dictionary which will allow multiple base symbols to be accepted by this provider."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):\n    """\n    FMP Currency Snapshots Query.\n\n    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote\n    """\n\n    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"define-data",children:"Define Data"}),"\n",(0,i.jsx)(n.p,{children:"Sample output data from the source is pasted below, and we can see that there are some fields which don't have anything to do with currencies. Those will be dropped."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "symbol": "AEDAUD",\n    "name": "AED/AUD",\n    "price": 0.40401,\n    "changesPercentage": 0.3901,\n    "change": 0.0016,\n    "dayLow": 0.40211,\n    "dayHigh": 0.40535,\n    "yearHigh": 0.440948,\n    "yearLow": 0.356628,\n    "marketCap": null,\n    "priceAvg50": 0.39494148,\n    "priceAvg200": 0.40097216,\n    "volume": 0,\n    "avgVolume": 0,\n    "exchange": "FOREX",\n    "open": 0.40223,\n    "previousClose": 0.40244,\n    "eps": null,\n    "pe": null,\n    "earningsAnnouncement": null,\n    "sharesOutstanding": null,\n    "timestamp": 1677792573\n  }\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"We'll then need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsData(CurrencySnapshotsData):\n    """FMP Currency Snapshots Data."""\n\n    __alias_dict__ = {\n        "last_rate": "price",\n        "high": "dayHigh",\n        "low": "dayLow",\n        "ma50": "priceAvg50",\n        "ma200": "priceAvg200",\n        "year_high": "yearHigh",\n        "year_low": "yearLow",\n        "prev_close": "previousClose",\n        "change_percent": "changesPercentage",\n        "last_rate_timestamp": "timestamp",\n    }\n\n    change: Optional[float] = Field(\n        description="The change in the price from the previous close.", default=None\n    )\n    change_percent: Optional[float] = Field(\n        description="The change in the price from the previous close, as a normalized percent.",\n        default=None,\n        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},\n    )\n    ma50: Optional[float] = Field(\n        description="The 50-day moving average.", default=None\n    )\n    ma200: Optional[float] = Field(\n        description="The 200-day moving average.", default=None\n    )\n    year_high: Optional[float] = Field(description="The 52-week high.", default=None)\n    year_low: Optional[float] = Field(description="The 52-week low.", default=None)\n    last_rate_timestamp: Optional[datetime] = Field(\n        description="The timestamp of the last rate.", default=None\n    )\n\n    @field_validator("change_percent", mode="before", check_fields=False)\n    @classmethod\n    def normalize_percent(cls, v):\n        """Normalize the percent."""\n        return v / 100 if v is not None else None\n'})}),"\n",(0,i.jsx)(n.p,{children:"A validator is setup to convert the percentage to a normalized value (1% -> 0.01)."}),"\n",(0,i.jsx)(n.h3,{id:"define-fetcher",children:"Define Fetcher"}),"\n",(0,i.jsxs)(n.p,{children:["The Fetcher class will always have the same general construction, in this instance we will use the ",(0,i.jsx)(n.code,{children:"transform_data"})," stage to parse and filter the returned data before validating the model on output."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FMPCurrencySnapshotsFetcher(\n    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]\n):\n    """FMP Currency Snapshots Fetcher."""\n\n    @staticmethod\n    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:\n        """Transform the query parameters."""\n        return FMPCurrencySnapshotsQueryParams(**params)\n\n    @staticmethod\n    async def aextract_data(\n        query: FMPCurrencySnapshotsQueryParams,\n        credentials: Optional[Dict[str, str]],\n        **kwargs: Any,\n    ) -> List[Dict]:\n        """Extract the data from the FMP endpoint."""\n\n        api_key = credentials.get("fmp_api_key") if credentials else ""\n\n        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"\n\n        return await amake_request(url, **kwargs)  # type: ignore\n\n    @staticmethod\n    def transform_data(\n        query: FMPCurrencySnapshotsQueryParams,\n        data: List[Dict],\n        **kwargs: Any,\n    ) -> List[FMPCurrencySnapshotsData]:\n        """Filter by the query parameters and validate the model."""\n\n        if not data:\n            raise EmptyDataError("No data was returned from the FMP endpoint.")\n\n        # Drop all the zombie columns FMP returns.\n        df = (\n            DataFrame(data)\n            .dropna(how="all", axis=1)\n            .drop(columns=["exchange", "avgVolume"])\n        )\n\n        new_df = DataFrame()\n\n        # Filter for the base currencies requested and the quote_type.\n        for symbol in query.base.split(","):\n            temp = (\n                df.query("`symbol`.str.startswith(@symbol)")\n                if query.quote_type == "indirect"\n                else df.query("`symbol`.str.endswith(@symbol)")\n            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})\n            temp["base_currency"] = symbol\n            temp["counter_currency"] = (\n                [d.split("/")[1] for d in temp["counter_currency"]]\n                if query.quote_type == "indirect"\n                else [d.split("/")[0] for d in temp["counter_currency"]]\n            )\n            # Filter for the counter currencies, if requested.\n            if query.counter_currencies is not None:\n                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable\n                    query.counter_currencies\n                    if isinstance(query.counter_currencies, list)\n                    else query.counter_currencies.split(",")\n                )\n                temp = (\n                    temp.query("`counter_currency`.isin(@counter_currencies)")\n                    .set_index("counter_currency")\n                    # Sets the counter currencies in the order they were requested.\n                    .filter(items=counter_currencies, axis=0)\n                    .reset_index()\n                )\n            # If there are no records, don\'t concatenate.\n            if len(temp) > 0:\n                # Convert the Unix timestamp to a datetime.\n                temp.timestamp = temp.timestamp.apply(\n                    lambda x: datetime.fromtimestamp(x)\n                )\n                new_df = concat([new_df, temp])\n            if len(new_df) == 0:\n                raise EmptyDataError(\n                    "No data was found using the applied filters. Check the parameters."\n                )\n            # Fill and replace any NaN values with NoneType.\n            new_df = new_df.fillna("N/A").replace("N/A", None)\n        return [\n            FMPCurrencySnapshotsData.model_validate(d)\n            for d in new_df.reset_index(drop=True).to_dict(orient="records")\n        ]\n'})}),"\n",(0,i.jsx)(n.p,{children:"The last four code blocks combined are the entire contents of the new provider model file."}),"\n",(0,i.jsxs)(n.p,{children:["Next, open ",(0,i.jsx)(n.code,{children:"~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/__init__.py"}),", import the new model, and map it in the Provider class."]}),"\n",(0,i.jsx)(n.p,{children:"Step 3 is now done."}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"add-router-endpoint-to-extension",children:"Add router endpoint to extension"}),"\n",(0,i.jsx)(n.p,{children:"To use our new function, we need to create a router command. The currency router is located here:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"~/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"It's as simple as copying and pasting the function above and modifying details to suit."}),"\n",(0,i.jsx)(n.p,{children:"The examples will be included in the docstring of the endpoint."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@router.command(\n    model="CurrencySnapshots",\n    examples=[\n        APIEx(parameters={}),\n        APIEx(\n            description="Get exchange rates from USD and XAU to EUR, JPY, and GBP using \'fmp\' as provider.",\n            parameters={\n                "provider": "fmp",\n                "base": "USD,XAU",\n                "counter_currencies": "EUR,JPY,GBP",\n                "quote_type": "indirect",\n            },\n        ),\n    ],\n)\nasync def snapshots(\n    cc: CommandContext,\n    provider_choices: ProviderChoices,\n    standard_params: StandardParams,\n    extra_params: ExtraParams,\n) -> OBBject:\n    """Snapshots of currency exchange rates from an indirect or direct perspective of a base currency."""\n    return await OBBject.from_query(Query(**locals()))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Steps 4 is done:"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Create a new router endpoint in the ",(0,i.jsx)(n.code,{children:"openbb-currency"})," module."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"smoke-test",children:"Smoke test"}),"\n",(0,i.jsx)(n.p,{children:"Save the file, start a new Python session in a Terminal window, rebuild the app, and test it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"import openbb\n\nopenbb.build()\n\nexit()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from openbb import obb\n\nobb.currency.snapshots(base="xau,xag", counter_currencies=["usd", "gbp", "eur", "hkd"],quote_type="indirect").to_df()\n'})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"base_currency"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"counter_currency"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"last_rate"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"open"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"high"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"low"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"volume"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"prev_close"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"change"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"change_percent"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"ma50"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"ma200"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"year_high"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"year_low"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"last_rate_timestamp"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAU"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"USD"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2092.76"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2083.17"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2092.8"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2079.4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2246"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2083"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9.76"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.0046855"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2030.83"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1976.63"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2084.35"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1813.82"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 06:16:12"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAU"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"GBP"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1645.45"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1644.1"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1645.6"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1640"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"643"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1644"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1.45"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.000881995"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1603.92"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1573.46"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1652.15"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1482.2"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:45:11"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAU"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EUR"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1924"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1921.5"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1924"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1917.15"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1517"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1921"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.0015617"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1874.69"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1826.4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1921.6"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1719.35"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:51:11"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAU"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"HKD"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16341.8"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16310"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16341.9"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16276.4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1665"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16307"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"34.75"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.002131"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"15891.1"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"15452.8"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16306.3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"14238"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:57:11"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAG"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"USD"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.299"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.1091"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.3062"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.0172"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2074"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.299"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.013"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"22.7862"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.4349"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"26.035"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"20.005"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:56:41"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAG"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"GBP"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.26"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.21"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.26"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.14"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"413"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.26"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.0144444"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"17.9988"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.5021"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"20.67"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16.81"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:24:10"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAG"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EUR"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.36"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.32"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.37"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.2087"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1079"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.36"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.0171429"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.0393"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.4906"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"23.64"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.97"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:30:10"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"XAG"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"HKD"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"181.237"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"180.881"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"181.399"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"180.124"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1596"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"180"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1.237"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.0068722"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"178.342"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"181.815"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"204.411"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"157.209"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"2024-03-04 05:30:10"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Steps 5 is done:"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Create a new router endpoint in the ",(0,i.jsx)(n.code,{children:"openbb-currency"})," module."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(n.p,{children:"We'll need to create a unit test for the FMP provider, and then integration tests for the Python interface and Fast API. It's as simple as creating a new router function was, copying and pasting."}),"\n",(0,i.jsx)(n.h3,{id:"unit-test-for-provider",children:"Unit test for provider"}),"\n",(0,i.jsxs)(n.p,{children:["This is located in the ",(0,i.jsx)(n.code,{children:"openbb-fmp"})," extension:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Import the new fetcher with the rest of the imports (keep them alphabetically sorted)."}),"\n",(0,i.jsx)(n.li,{children:"Copy and paste the last test function in the file."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@pytest.mark.record_http\ndef test_fmp_currency_snapshots_fetcher(credentials=test_credentials):\n    params = {\n        "base": "XAU",\n        "quote_type": "indirect",\n        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",\n    }\n\n    fetcher = FMPCurrencySnapshotsFetcher()\n    result = fetcher.test(params, credentials)\n    assert result is None\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to the path above and enter: ",(0,i.jsx)(n.code,{children:"pytest test_fmp_fetchers.py --record http --record-no-overwrite"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This will generate a new file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check the file for any obvious errors, like a bad HTTP request status code."}),"\n",(0,i.jsx)(n.p,{children:"Step 6 is done:"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Add integration tests."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests-for-router-endpoint",children:"Integration tests for router endpoint"}),"\n",(0,i.jsx)(n.p,{children:"The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider."}),"\n",(0,i.jsx)(n.h4,{id:"api",children:"API"}),"\n",(0,i.jsx)(n.p,{children:"Open the file below, and go to the last test in the file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can copy this one:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@parametrize(\n    "params",\n    [({"provider": "ecb"})],\n)\n@pytest.mark.integration\ndef test_currency_reference_rates(params, headers):\n    params = {p: v for p, v in params.items() if v}\n\n    query_str = get_querystring(params, [])\n    url = f"http://0.0.0.0:8000/api/v1/currency/reference_rates?{query_str}"\n    result = requests.get(url, headers=headers, timeout=10)\n    assert isinstance(result, requests.Response)\n    assert result.status_code == 200\n'})}),"\n",(0,i.jsx)(n.p,{children:"Converting it for our new endpoint:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@parametrize(\n    "params",\n    [\n        (\n            {\n                "provider": "fmp",\n                "base": "USD,XAU",\n                "counter_currencies": "EUR,JPY,GBP",\n                "quote_type": "indirect",\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_currency_snapshots(params, headers):\n    params = {p: v for p, v in params.items() if v}\n\n    query_str = get_querystring(params, [])\n    url = f"http://0.0.0.0:8000/api/v1/currency/snapshots?{query_str}"\n    result = requests.get(url, headers=headers, timeout=10)\n    assert isinstance(result, requests.Response)\n    assert result.status_code == 200\n'})}),"\n",(0,i.jsx)(n.h4,{id:"python",children:"Python"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@parameterize"})," section can be copied directly to the Python integration test."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@parametrize(\n    "params",\n    [\n        (\n            {\n                "provider": "fmp",\n                "base": "USD,XAU",\n                "counter_currencies": "EUR,JPY,GBP",\n                "quote_type": "indirect",\n            }\n        ),\n    ],\n)\n@pytest.mark.integration\ndef test_currency_snapshots(params, obb):\n    result = obb.currency.snapshots(**params)\n    assert result\n    assert isinstance(result, OBBject)\n    assert len(result.results) > 0\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now run ",(0,i.jsx)(n.code,{children:"pytest"})," for both of these files."]}),"\n",(0,i.jsx)(n.p,{children:"Step 7 is done:"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Add integration tests."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"submit-a-pull-request",children:"Submit A Pull Request"}),"\n",(0,i.jsxs)(n.p,{children:["We're already on the correct branch, ",(0,i.jsx)(n.code,{children:"feature/currency-snapshots"}),", but it may be out-of-sync with the ",(0,i.jsx)(n.code,{children:"develop"})," branch. Let's update it just to be sure."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"git fetch\ngit pull origin develop\n"})}),"\n",(0,i.jsx)(n.h4,{id:"linters",children:"Linters"}),"\n",(0,i.jsx)(n.p,{children:"Before opening a pull request, run the linters over all files that were touched."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"black"}),"\n",(0,i.jsx)(n.li,{children:"ruff"}),"\n",(0,i.jsx)(n.li,{children:"mypy"}),"\n",(0,i.jsx)(n.li,{children:"pylint"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Fix all items, and valid fixes for ",(0,i.jsx)(n.code,{children:"pylint"})," can be disabling on that line. It won't always know what is contextually correct."]}),"\n",(0,i.jsx)(n.p,{children:"Here are all the files we touched in this process:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/currency_snapshots.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/openbb/assets/module_map.json"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/OpenBB/openbb_platform/openbb/package/currency.py"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"install-pre-commit-hooks",children:"Install Pre-Commit Hooks"}),"\n",(0,i.jsxs)(n.p,{children:["The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, ",(0,i.jsx)(n.code,{children:"OpenBB"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"pre-commit install\n"})}),"\n",(0,i.jsx)(n.h4,{id:"commit-changes",children:"Commit Changes"}),"\n",(0,i.jsx)(n.p,{children:"Add all the files then commit the results to the local branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:'git commit -m "add obb.currency.snapshots() endpoint and create new standard model"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"push-changes",children:"Push Changes"}),"\n",(0,i.jsx)(n.p,{children:"Assuming the commit is successful, push the changes to the remote branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"git push --set-upstream origin feature/currency-snapshots\n"})}),"\n",(0,i.jsx)(n.h4,{id:"open-a-pull-request",children:"Open a Pull Request"}),"\n",(0,i.jsx)(n.p,{children:"A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why"}),"?:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This PR is the result of creating a piece of contributor documentation (not included in this PR) for creating a new router endpoint and standard model."}),"\n",(0,i.jsx)(n.li,{children:"Endpoint was requested by @minhhoang1023."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What"}),"?:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"obb.currency.snapshots()"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["This endpoint provides a similar data set to ",(0,i.jsx)(n.code,{children:"obb.equity.market_snapshots()"})," or ",(0,i.jsx)(n.code,{children:"obb.index.snapshots()"}),", with minor twists:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set one, or multiple, 'base' currencies."}),"\n",(0,i.jsx)(n.li,{children:"Filter results for a list of supplied counter currencies."}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"quote_type"}),' parameter for the perspective on the exchange rate, "direct" or "indirect".']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Impact"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Not a breaking change."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Future providers to this endpoint will require parsing symbols and filtering as part of the ",(0,i.jsx)(n.code,{children:"transform_data"})," stage, as well as ensure the ",(0,i.jsx)(n.code,{children:"quote_type"})," is correctly applied."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Testing Done"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A variety of ",(0,i.jsx)(n.code,{children:"base"})," and ",(0,i.jsx)(n.code,{children:"counter_currencies"}),", checking both ",(0,i.jsx)(n.code,{children:"quote_type"})," settings."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'obb.currency.snapshots(base="usd,xau,xag", counter_currencies="usd,eur,gbp,chf,aud,jpy,cny,cad", quote_type="indirect"'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Any other information"}),":"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/7943d2ef-05b9-4a25-9d17-32618e2c57cf",alt:"Screenshot 2024-03-04 at 10 05 00\u202fAM"})}),"\n",(0,i.jsx)(n.p,{children:"With this final step, we have completed all the tasks outlined at the top of the page."}),"\n",(0,i.jsxs)(n.p,{children:["This guide was based on ",(0,i.jsx)(n.a,{href:"https://github.com/OpenBB-finance/OpenBBTerminal/pull/6162",children:"this pull request"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},39068:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(27143),i=t(74848);function s(e){let{title:n}=e;return(0,i.jsx)(r.A,{children:(0,i.jsx)("title",{children:n})})}}}]);