---
title: "Ameribor"
description: "AMERIBOR"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `Ameribor` | `AmeriborQueryParams` | `AmeriborData` |

### Import Statement

```python
from openbb_core.provider.standard_models.ameribor import (
AmeriborData,
AmeriborQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[Literal['all', 'overnight', 'average_30d', 'average_90d', 'term_30d', 'term_90d'], str], list[Union[Literal['all', 'overnight', 'average_30d', 'average_90d', 'term_30d', 'term_90d'], str]]]`

Period of AMERIBOR rate. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>
</Tabs>



---

---
title: "Analyst Estimates"
description: "Get historical analyst estimates for earnings and revenue"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `AnalystEstimates` | `AnalystEstimatesQueryParams` | `AnalystEstimatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.analyst_estimates import (
AnalystEstimatesData,
AnalystEstimatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`estimated_revenue_low`**: `int`

Estimated revenue low.

**`estimated_revenue_high`**: `int`

Estimated revenue high.

**`estimated_revenue_avg`**: `int`

Estimated revenue average.

**`estimated_sga_expense_low`**: `int`

Estimated SGA expense low.

**`estimated_sga_expense_high`**: `int`

Estimated SGA expense high.

**`estimated_sga_expense_avg`**: `int`

Estimated SGA expense average.

**`estimated_ebitda_low`**: `int`

Estimated EBITDA low.

**`estimated_ebitda_high`**: `int`

Estimated EBITDA high.

**`estimated_ebitda_avg`**: `int`

Estimated EBITDA average.

**`estimated_ebit_low`**: `int`

Estimated EBIT low.

**`estimated_ebit_high`**: `int`

Estimated EBIT high.

**`estimated_ebit_avg`**: `int`

Estimated EBIT average.

**`estimated_net_income_low`**: `int`

Estimated net income low.

**`estimated_net_income_high`**: `int`

Estimated net income high.

**`estimated_net_income_avg`**: `int`

Estimated net income average.

**`estimated_eps_avg`**: `float`

Estimated EPS average.

**`estimated_eps_high`**: `float`

Estimated EPS high.

**`estimated_eps_low`**: `float`

Estimated EPS low.

**`number_analyst_estimated_revenue`**: `int`

Number of analysts who estimated revenue.

**`number_analysts_estimated_eps`**: `int`

Number of analysts who estimated EPS.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`estimated_revenue_low`**: `int`

Estimated revenue low.

**`estimated_revenue_high`**: `int`

Estimated revenue high.

**`estimated_revenue_avg`**: `int`

Estimated revenue average.

**`estimated_sga_expense_low`**: `int`

Estimated SGA expense low.

**`estimated_sga_expense_high`**: `int`

Estimated SGA expense high.

**`estimated_sga_expense_avg`**: `int`

Estimated SGA expense average.

**`estimated_ebitda_low`**: `int`

Estimated EBITDA low.

**`estimated_ebitda_high`**: `int`

Estimated EBITDA high.

**`estimated_ebitda_avg`**: `int`

Estimated EBITDA average.

**`estimated_ebit_low`**: `int`

Estimated EBIT low.

**`estimated_ebit_high`**: `int`

Estimated EBIT high.

**`estimated_ebit_avg`**: `int`

Estimated EBIT average.

**`estimated_net_income_low`**: `int`

Estimated net income low.

**`estimated_net_income_high`**: `int`

Estimated net income high.

**`estimated_net_income_avg`**: `int`

Estimated net income average.

**`estimated_eps_avg`**: `float`

Estimated EPS average.

**`estimated_eps_high`**: `float`

Estimated EPS high.

**`estimated_eps_low`**: `float`

Estimated EPS low.

**`number_analyst_estimated_revenue`**: `int`

Number of analysts who estimated revenue.

**`number_analysts_estimated_eps`**: `int`

Number of analysts who estimated EPS.

</TabItem>
</Tabs>



---

---
title: "Analyst Search"
description: "Search for specific analysts and get their forecast track record"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `AnalystSearch` | `AnalystSearchQueryParams` | `AnalystSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models.analyst_search import (
AnalystSearchData,
AnalystSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`analyst_name`**: `Union[str, list[str]]`

Analyst names to return. Omitting will return all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_name`**: `Union[str, list[str]]`

Firm names to return. Omitting will return all available firms. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`analyst_name`**: `Union[str, list[str]]`

Analyst names to return. Omitting will return all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_name`**: `Union[str, list[str]]`

Firm names to return. Omitting will return all available firms. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`analyst_ids`**: `Union[str, list[str]]`

list of analyst IDs to return. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_ids`**: `Union[str, list[str]]`

Firm IDs to return. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`limit`**: `int`

Number of results returned. Limit 1000.

 • *Default:* `100`

 • *Optional:* `True`

---

**`page`**: `int`

Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date.

 • *Default:* `0`

 • *Optional:* `True`

---

**`fields`**: `Union[str, list[str]]`

Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`last_updated`**: `datetime`

Date of the last update.

**`firm_name`**: `str`

Firm name of the analyst.

**`name_first`**: `str`

Analyst first name.

**`name_last`**: `str`

Analyst last name.

**`name_full`**: `str`

Analyst full name.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`last_updated`**: `datetime`

Date of the last update.

**`firm_name`**: `str`

Firm name of the analyst.

**`name_first`**: `str`

Analyst first name.

**`name_last`**: `str`

Analyst last name.

**`name_full`**: `str`

Analyst full name.

**`analyst_id`**: `str`

ID of the analyst.

**`firm_id`**: `str`

ID of the analyst firm.

**`smart_score`**: `float`

A weighted average of the total_ratings_percentile, overall_avg_return_percentile, and overall_success_rate

**`overall_success_rate`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain overall.

**`overall_avg_return_percentile`**: `float`

The percentile (normalized) of this analyst's overall average return per rating in comparison to other analysts' overall average returns per rating.

**`total_ratings_percentile`**: `float`

The percentile (normalized) of this analyst's total number of ratings in comparison to the total number of ratings published by all other analysts

**`total_ratings`**: `int`

Number of recommendations made by this analyst.

**`overall_gain_count`**: `int`

The number of ratings that have gained value since the date of recommendation

**`overall_loss_count`**: `int`

The number of ratings that have lost value since the date of recommendation

**`overall_average_return`**: `float`

The average percent (normalized) price difference per rating since the date of recommendation

**`overall_std_dev`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings since the date of recommendation

**`gain_count_1m`**: `int`

The number of ratings that have gained value over the last month

**`loss_count_1m`**: `int`

The number of ratings that have lost value over the last month

**`average_return_1m`**: `float`

The average percent (normalized) price difference per rating over the last month

**`std_dev_1m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last month

**`smart_score_1m`**: `float`

A weighted average smart score over the last month.

**`success_rate_1m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last month

**`gain_count_3m`**: `int`

The number of ratings that have gained value over the last 3 months

**`loss_count_3m`**: `int`

The number of ratings that have lost value over the last 3 months

**`average_return_3m`**: `float`

The average percent (normalized) price difference per rating over the last 3 months

**`std_dev_3m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 3 months

**`smart_score_3m`**: `float`

A weighted average smart score over the last 3 months.

**`success_rate_3m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 3 months

**`gain_count_6m`**: `int`

The number of ratings that have gained value over the last 6 months

**`loss_count_6m`**: `int`

The number of ratings that have lost value over the last 6 months

**`average_return_6m`**: `float`

The average percent (normalized) price difference per rating over the last 6 months

**`std_dev_6m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 6 months

**`gain_count_9m`**: `int`

The number of ratings that have gained value over the last 9 months

**`loss_count_9m`**: `int`

The number of ratings that have lost value over the last 9 months

**`average_return_9m`**: `float`

The average percent (normalized) price difference per rating over the last 9 months

**`std_dev_9m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 9 months

**`smart_score_9m`**: `float`

A weighted average smart score over the last 9 months.

**`success_rate_9m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 9 months

**`gain_count_1y`**: `int`

The number of ratings that have gained value over the last 1 year

**`loss_count_1y`**: `int`

The number of ratings that have lost value over the last 1 year

**`average_return_1y`**: `float`

The average percent (normalized) price difference per rating over the last 1 year

**`std_dev_1y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 1 year

**`smart_score_1y`**: `float`

A weighted average smart score over the last 1 year.

**`success_rate_1y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 1 year

**`gain_count_2y`**: `int`

The number of ratings that have gained value over the last 2 years

**`loss_count_2y`**: `int`

The number of ratings that have lost value over the last 2 years

**`average_return_2y`**: `float`

The average percent (normalized) price difference per rating over the last 2 years

**`std_dev_2y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 2 years

**`smart_score_2y`**: `float`

A weighted average smart score over the last 3 years.

**`success_rate_2y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 2 years

**`gain_count_3y`**: `int`

The number of ratings that have gained value over the last 3 years

**`loss_count_3y`**: `int`

The number of ratings that have lost value over the last 3 years

**`average_return_3y`**: `float`

The average percent (normalized) price difference per rating over the last 3 years

**`std_dev_3y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 3 years

**`smart_score_3y`**: `float`

A weighted average smart score over the last 3 years.

**`success_rate_3y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 3 years

</TabItem>
</Tabs>



---

---
title: "Available Indicators"
description: "Get the available economic indicators for a provider"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `AvailableIndicators` | `AvailableIndicatorsQueryParams` | `AvailableIndicatorsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.available_indicators import (
AvailableIndicatorsData,
AvailableIndicatorsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='econdb' label='econdb'>

**`use_cache`**: `bool`

Whether to use cache or not, by default is True The cache of indicator symbols will persist for one week.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`query`**: `Union[str, list[str]]`

The query string to search through the available indicators. Use semicolons to separate multiple terms. Multiple items allowed for provider(s): imf.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

**`currency`**: `str`

The currency, or unit, the data is based in.

**`scale`**: `str`

The scale of the data.

**`multiplier`**: `int`

The multiplier of the data to arrive at whole units.

**`transformation`**: `str`

Transformation type.

**`source`**: `str`

The original source of the data.

**`first_date`**: `date`

The first date of the data.

**`last_date`**: `date`

The last date of the data.

**`last_insert_timestamp`**: `datetime`

The time of the last update. Data is typically reported with a lag.

</TabItem>

<TabItem value='imf' label='imf'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

**`dataset`**: `str`

The IMF dataset associated with the symbol.

**`table`**: `str`

The name of the table associated with the symbol.

**`level`**: `int`

The indentation level of the data, relative to the table and symbol_root

**`order`**: `Union[float, int]`

Order of the data, relative to the table.

**`children`**: `str`

The symbol of the child data, if any.

**`unit`**: `str`

The unit of the data.

</TabItem>
</Tabs>



---

---
title: "Available Indices"
description: "All indices available from a given provider"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `AvailableIndices` | `AvailableIndicesQueryParams` | `AvailableIndicesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.available_indices import (
AvailableIndicesData,
AvailableIndicesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='cboe' label='cboe'>

**`use_cache`**: `bool`

When True, the Cboe Index directory will be cached for 24 hours. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

</TabItem>

<TabItem value='tmx' label='tmx'>

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`symbol`**: `str`

Symbol for the index.

**`description`**: `str`

Description for the index. Valid only for US indices.

**`data_delay`**: `int`

Data delay for the index. Valid only for US indices.

**`open_time`**: `datetime.time`

Opening time for the index. Valid only for US indices.

**`close_time`**: `datetime.time`

Closing time for the index. Valid only for US indices.

**`time_zone`**: `str`

Time zone for the index. Valid only for US indices.

**`tick_days`**: `str`

The trading days for the index. Valid only for US indices.

**`tick_frequency`**: `str`

The frequency of the index ticks. Valid only for US indices.

**`tick_period`**: `str`

The period of the index ticks. Valid only for US indices.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`stock_exchange`**: `str`

Stock exchange where the index is listed.

**`exchange_short_name`**: `str`

Short name of the stock exchange where the index is listed.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`symbol`**: `str`

The ticker symbol of the index.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`code`**: `str`

ID code for keying the index in the OpenBB Terminal.

**`symbol`**: `str`

Symbol for the index.

</TabItem>
</Tabs>



---

---
title: "Balance Of Payments"
description: "Balance of Payments Reports"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BalanceOfPayments` | `BalanceOfPaymentsQueryParams` | `BalanceOfPaymentsData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
BalanceOfPaymentsData,
BalanceOfPaymentsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='ecb' label='ecb'>

**`report_type`**: `Literal['main', 'summary', 'services', 'investment_income', 'direct_investment', 'portfolio_investment', 'other_investment']`

The report type, the level of detail in the data.

 • *Default:* `main`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly']`

The frequency of the data.  Monthly is valid only for ['main', 'summary'].

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`country`**: `Literal['brazil', 'canada', 'china', 'eu_ex_euro_area', 'eu_institutions', 'india', 'japan', 'russia', 'switzerland', 'united_kingdom', 'united_states', 'total']`

The country/region of the data.  This parameter will override the 'report_type' parameter.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`country`**: `Literal['argentina', 'australia', 'austria', 'belgium', 'brazil', 'canada', 'chile', 'china', 'colombia', 'costa_rica', 'czechia', 'denmark', 'estonia', 'finland', 'france', 'germany', 'greece', 'hungary', 'iceland', 'india', 'indonesia', 'ireland', 'israel', 'italy', 'japan', 'korea', 'latvia', 'lithuania', 'luxembourg', 'mexico', 'netherlands', 'new_zealand', 'norway', 'poland', 'portugal', 'russia', 'saudi_arabia', 'slovak_republic', 'slovenia', 'south_africa', 'spain', 'sweden', 'switzerland', 'turkey', 'united_kingdom', 'united_states', 'g7', 'g20']`

The country to get data. Enter as a 3-letter ISO country code, default is USA.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>

<TabItem value='ecb' label='ecb'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>

<TabItem value='fred' label='fred'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>
</Tabs>



---

---
title: "Balance Sheet"
description: "Get the balance sheet for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BalanceSheet` | `BalanceSheetQueryParams` | `BalanceSheetData` |

### Import Statement

```python
from openbb_core.provider.standard_models.balance_sheet import (
BalanceSheetData,
BalanceSheetQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Default:* `True`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date when the filing was made.

**`accepted_date`**: `datetime`

The date and time when the filing was accepted.

**`reported_currency`**: `str`

The currency in which the balance sheet was reported.

**`cash_and_cash_equivalents`**: `float`

Cash and cash equivalents.

**`short_term_investments`**: `float`

Short term investments.

**`cash_and_short_term_investments`**: `float`

Cash and short term investments.

**`net_receivables`**: `float`

Net receivables.

**`inventory`**: `float`

Inventory.

**`other_current_assets`**: `float`

Other current assets.

**`total_current_assets`**: `float`

Total current assets.

**`plant_property_equipment_net`**: `float`

Plant property equipment net.

**`goodwill`**: `float`

Goodwill.

**`intangible_assets`**: `float`

Intangible assets.

**`goodwill_and_intangible_assets`**: `float`

Goodwill and intangible assets.

**`long_term_investments`**: `float`

Long term investments.

**`tax_assets`**: `float`

Tax assets.

**`other_non_current_assets`**: `float`

Other non current assets.

**`non_current_assets`**: `float`

Total non current assets.

**`other_assets`**: `float`

Other assets.

**`total_assets`**: `float`

Total assets.

**`accounts_payable`**: `float`

Accounts payable.

**`short_term_debt`**: `float`

Short term debt.

**`tax_payables`**: `float`

Tax payables.

**`current_deferred_revenue`**: `float`

Current deferred revenue.

**`other_current_liabilities`**: `float`

Other current liabilities.

**`total_current_liabilities`**: `float`

Total current liabilities.

**`long_term_debt`**: `float`

Long term debt.

**`deferred_revenue_non_current`**: `float`

Non current deferred revenue.

**`deferred_tax_liabilities_non_current`**: `float`

Deferred tax liabilities non current.

**`other_non_current_liabilities`**: `float`

Other non current liabilities.

**`total_non_current_liabilities`**: `float`

Total non current liabilities.

**`other_liabilities`**: `float`

Other liabilities.

**`capital_lease_obligations`**: `float`

Capital lease obligations.

**`total_liabilities`**: `float`

Total liabilities.

**`preferred_stock`**: `float`

Preferred stock.

**`common_stock`**: `float`

Common stock.

**`retained_earnings`**: `float`

Retained earnings.

**`accumulated_other_comprehensive_income`**: `float`

Accumulated other comprehensive income (loss).

**`other_shareholders_equity`**: `float`

Other shareholders equity.

**`other_total_shareholders_equity`**: `float`

Other total shareholders equity.

**`total_common_equity`**: `float`

Total common equity.

**`total_equity_non_controlling_interests`**: `float`

Total equity non controlling interests.

**`total_liabilities_and_shareholders_equity`**: `float`

Total liabilities and shareholders equity.

**`minority_interest`**: `float`

Minority interest.

**`total_liabilities_and_total_equity`**: `float`

Total liabilities and total equity.

**`total_investments`**: `float`

Total investments.

**`total_debt`**: `float`

Total debt.

**`net_debt`**: `float`

Net debt.

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`cash_and_cash_equivalents`**: `float`

Cash and cash equivalents.

**`cash_and_due_from_banks`**: `float`

Cash and due from banks.

**`restricted_cash`**: `float`

Restricted cash.

**`short_term_investments`**: `float`

Short term investments.

**`federal_funds_sold`**: `float`

Federal funds sold.

**`accounts_receivable`**: `float`

Accounts receivable.

**`note_and_lease_receivable`**: `float`

Note and lease receivable. (Vendor non-trade receivables)

**`inventories`**: `float`

Net Inventories.

**`customer_and_other_receivables`**: `float`

Customer and other receivables.

**`interest_bearing_deposits_at_other_banks`**: `float`

Interest bearing deposits at other banks.

**`time_deposits_placed_and_other_short_term_investments`**: `float`

Time deposits placed and other short term investments.

**`trading_account_securities`**: `float`

Trading account securities.

**`loans_and_leases`**: `float`

Loans and leases.

**`allowance_for_loan_and_lease_losses`**: `float`

Allowance for loan and lease losses.

**`current_deferred_refundable_income_taxes`**: `float`

Current deferred refundable income taxes.

**`other_current_assets`**: `float`

Other current assets.

**`loans_and_leases_net_of_allowance`**: `float`

Loans and leases net of allowance.

**`accrued_investment_income`**: `float`

Accrued investment income.

**`other_current_non_operating_assets`**: `float`

Other current non-operating assets.

**`loans_held_for_sale`**: `float`

Loans held for sale.

**`prepaid_expenses`**: `float`

Prepaid expenses.

**`total_current_assets`**: `float`

Total current assets.

**`plant_property_equipment_gross`**: `float`

Plant property equipment gross.

**`accumulated_depreciation`**: `float`

Accumulated depreciation.

**`premises_and_equipment_net`**: `float`

Net premises and equipment.

**`plant_property_equipment_net`**: `float`

Net plant property equipment.

**`long_term_investments`**: `float`

Long term investments.

**`mortgage_servicing_rights`**: `float`

Mortgage servicing rights.

**`unearned_premiums_asset`**: `float`

Unearned premiums asset.

**`non_current_note_lease_receivables`**: `float`

Non-current note lease receivables.

**`deferred_acquisition_cost`**: `float`

Deferred acquisition cost.

**`goodwill`**: `float`

Goodwill.

**`separate_account_business_assets`**: `float`

Separate account business assets.

**`non_current_deferred_refundable_income_taxes`**: `float`

Noncurrent deferred refundable income taxes.

**`intangible_assets`**: `float`

Intangible assets.

**`employee_benefit_assets`**: `float`

Employee benefit assets.

**`other_assets`**: `float`

Other assets.

**`other_non_current_operating_assets`**: `float`

Other noncurrent operating assets.

**`other_non_current_non_operating_assets`**: `float`

Other noncurrent non-operating assets.

**`interest_bearing_deposits`**: `float`

Interest bearing deposits.

**`total_non_current_assets`**: `float`

Total noncurrent assets.

**`total_assets`**: `float`

Total assets.

**`non_interest_bearing_deposits`**: `float`

Non interest bearing deposits.

**`federal_funds_purchased_and_securities_sold`**: `float`

Federal funds purchased and securities sold.

**`bankers_acceptance_outstanding`**: `float`

Bankers acceptance outstanding.

**`short_term_debt`**: `float`

Short term debt.

**`accounts_payable`**: `float`

Accounts payable.

**`current_deferred_revenue`**: `float`

Current deferred revenue.

**`current_deferred_payable_income_tax_liabilities`**: `float`

Current deferred payable income tax liabilities.

**`accrued_interest_payable`**: `float`

Accrued interest payable.

**`accrued_expenses`**: `float`

Accrued expenses.

**`other_short_term_payables`**: `float`

Other short term payables.

**`customer_deposits`**: `float`

Customer deposits.

**`dividends_payable`**: `float`

Dividends payable.

**`claims_and_claim_expense`**: `float`

Claims and claim expense.

**`future_policy_benefits`**: `float`

Future policy benefits.

**`current_employee_benefit_liabilities`**: `float`

Current employee benefit liabilities.

**`unearned_premiums_liability`**: `float`

Unearned premiums liability.

**`other_taxes_payable`**: `float`

Other taxes payable.

**`policy_holder_funds`**: `float`

Policy holder funds.

**`other_current_liabilities`**: `float`

Other current liabilities.

**`other_current_non_operating_liabilities`**: `float`

Other current non-operating liabilities.

**`separate_account_business_liabilities`**: `float`

Separate account business liabilities.

**`total_current_liabilities`**: `float`

Total current liabilities.

**`long_term_debt`**: `float`

Long term debt.

**`other_long_term_liabilities`**: `float`

Other long term liabilities.

**`non_current_deferred_revenue`**: `float`

Non-current deferred revenue.

**`non_current_deferred_payable_income_tax_liabilities`**: `float`

Non-current deferred payable income tax liabilities.

**`non_current_employee_benefit_liabilities`**: `float`

Non-current employee benefit liabilities.

**`other_non_current_operating_liabilities`**: `float`

Other non-current operating liabilities.

**`other_non_current_non_operating_liabilities`**: `float`

Other non-current, non-operating liabilities.

**`total_non_current_liabilities`**: `float`

Total non-current liabilities.

**`capital_lease_obligations`**: `float`

Capital lease obligations.

**`asset_retirement_reserve_litigation_obligation`**: `float`

Asset retirement reserve litigation obligation.

**`total_liabilities`**: `float`

Total liabilities.

**`commitments_contingencies`**: `float`

Commitments contingencies.

**`redeemable_non_controlling_interest`**: `float`

Redeemable non-controlling interest.

**`preferred_stock`**: `float`

Preferred stock.

**`common_stock`**: `float`

Common stock.

**`retained_earnings`**: `float`

Retained earnings.

**`treasury_stock`**: `float`

Treasury stock.

**`accumulated_other_comprehensive_income`**: `float`

Accumulated other comprehensive income.

**`participating_policy_holder_equity`**: `float`

Participating policy holder equity.

**`other_equity_adjustments`**: `float`

Other equity adjustments.

**`total_common_equity`**: `float`

Total common equity.

**`total_preferred_common_equity`**: `float`

Total preferred common equity.

**`non_controlling_interest`**: `float`

Non-controlling interest.

**`total_equity_non_controlling_interests`**: `float`

Total equity non-controlling interests.

**`total_liabilities_shareholders_equity`**: `float`

Total liabilities and shareholders equity.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`accounts_receivable`**: `float`

Accounts receivable

**`marketable_securities`**: `float`

Marketable securities

**`prepaid_expenses`**: `float`

Prepaid expenses

**`other_current_assets`**: `float`

Other current assets

**`total_current_assets`**: `float`

Total current assets

**`property_plant_equipment_net`**: `float`

Property plant and equipment net

**`inventory`**: `float`

Inventory

**`other_non_current_assets`**: `float`

Other non-current assets

**`total_non_current_assets`**: `float`

Total non-current assets

**`intangible_assets`**: `float`

Intangible assets

**`total_assets`**: `float`

Total assets

**`accounts_payable`**: `float`

Accounts payable

**`employee_wages`**: `float`

Employee wages

**`other_current_liabilities`**: `float`

Other current liabilities

**`total_current_liabilities`**: `float`

Total current liabilities

**`other_non_current_liabilities`**: `float`

Other non-current liabilities

**`total_non_current_liabilities`**: `float`

Total non-current liabilities

**`long_term_debt`**: `float`

Long term debt

**`total_liabilities`**: `float`

Total liabilities

**`minority_interest`**: `float`

Minority interest

**`temporary_equity_attributable_to_parent`**: `float`

Temporary equity attributable to parent

**`equity_attributable_to_parent`**: `float`

Equity attributable to parent

**`temporary_equity`**: `float`

Temporary equity

**`preferred_stock`**: `float`

Preferred stock

**`redeemable_non_controlling_interest`**: `float`

Redeemable non-controlling interest

**`redeemable_non_controlling_interest_other`**: `float`

Redeemable non-controlling interest other

**`total_shareholders_equity`**: `float`

Total stock holders equity

**`total_equity`**: `float`

Total equity

**`total_liabilities_and_shareholders_equity`**: `float`

Total liabilities and stockholders equity

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "Balance Sheet Growth"
description: "Get the growth of a company's balance sheet items over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BalanceSheetGrowth` | `BalanceSheetGrowthQueryParams` | `BalanceSheetGrowthData` |

### Import Statement

```python
from openbb_core.provider.standard_models.balance_sheet_growth import (
BalanceSheetGrowthData,
BalanceSheetGrowthQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_cash_and_cash_equivalents`**: `float`

Growth rate of cash and cash equivalents.

**`growth_short_term_investments`**: `float`

Growth rate of short-term investments.

**`growth_cash_and_short_term_investments`**: `float`

Growth rate of cash and short-term investments.

**`growth_net_receivables`**: `float`

Growth rate of net receivables.

**`growth_inventory`**: `float`

Growth rate of inventory.

**`growth_other_current_assets`**: `float`

Growth rate of other current assets.

**`growth_total_current_assets`**: `float`

Growth rate of total current assets.

**`growth_property_plant_equipment_net`**: `float`

Growth rate of net property, plant, and equipment.

**`growth_goodwill`**: `float`

Growth rate of goodwill.

**`growth_intangible_assets`**: `float`

Growth rate of intangible assets.

**`growth_goodwill_and_intangible_assets`**: `float`

Growth rate of goodwill and intangible assets.

**`growth_long_term_investments`**: `float`

Growth rate of long-term investments.

**`growth_tax_assets`**: `float`

Growth rate of tax assets.

**`growth_other_non_current_assets`**: `float`

Growth rate of other non-current assets.

**`growth_total_non_current_assets`**: `float`

Growth rate of total non-current assets.

**`growth_other_assets`**: `float`

Growth rate of other assets.

**`growth_total_assets`**: `float`

Growth rate of total assets.

**`growth_account_payables`**: `float`

Growth rate of accounts payable.

**`growth_short_term_debt`**: `float`

Growth rate of short-term debt.

**`growth_tax_payables`**: `float`

Growth rate of tax payables.

**`growth_deferred_revenue`**: `float`

Growth rate of deferred revenue.

**`growth_other_current_liabilities`**: `float`

Growth rate of other current liabilities.

**`growth_total_current_liabilities`**: `float`

Growth rate of total current liabilities.

**`growth_long_term_debt`**: `float`

Growth rate of long-term debt.

**`growth_deferred_revenue_non_current`**: `float`

Growth rate of non-current deferred revenue.

**`growth_deferrred_tax_liabilities_non_current`**: `float`

Growth rate of non-current deferred tax liabilities.

**`growth_other_non_current_liabilities`**: `float`

Growth rate of other non-current liabilities.

**`growth_total_non_current_liabilities`**: `float`

Growth rate of total non-current liabilities.

**`growth_other_liabilities`**: `float`

Growth rate of other liabilities.

**`growth_total_liabilities`**: `float`

Growth rate of total liabilities.

**`growth_common_stock`**: `float`

Growth rate of common stock.

**`growth_retained_earnings`**: `float`

Growth rate of retained earnings.

**`growth_accumulated_other_comprehensive_income`**: `float`

Growth rate of accumulated other comprehensive income/loss.

**`growth_other_total_shareholders_equity`**: `float`

Growth rate of other total stockholders' equity.

**`growth_total_shareholders_equity`**: `float`

Growth rate of total stockholders' equity.

**`growth_total_liabilities_and_shareholders_equity`**: `float`

Growth rate of total liabilities and stockholders' equity.

**`growth_total_investments`**: `float`

Growth rate of total investments.

**`growth_total_debt`**: `float`

Growth rate of total debt.

**`growth_net_debt`**: `float`

Growth rate of net debt.

</TabItem>
</Tabs>



---

---
title: "Bls Search"
description: "Search BLS surveys by category and keyword or phrase to identify BLS series IDs"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BlsSearch` | `BlsSearchQueryParams` | `BlsSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
BlsSearchData,
BlsSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

The search word(s). Use semi-colon to separate multiple queries as an & operator.

 • *Optional:* `True`

</TabItem>

<TabItem value='bls' label='bls'>

**`query`**: `str`

The search word(s). Use semi-colon to separate multiple queries as an & operator.

 • *Optional:* `True`

---

**`category`**: `Literal['cpi', 'pce', 'ppi', 'ip', 'jolts', 'nfp', 'cps', 'lfs', 'wages', 'ec', 'sla', 'bed', 'tu']`

<details>
<summary mdxType="summary">Description</summary>

The category of BLS survey to search within.<br/>
        An empty search query will return all series within the category. Options are:<br/>
        <br/>
    cpi - Consumer Price Index<br/>
        <br/>
    pce - Personal Consumption Expenditure<br/>
        <br/>
    ppi - Producer Price Index<br/>
        <br/>
    ip - Industry Productivity<br/>
        <br/>
    jolts - Job Openings and Labor Turnover Survey<br/>
        <br/>
    nfp - Nonfarm Payrolls<br/>
        <br/>
    cps - Current Population Survey<br/>
        <br/>
    lfs - Labor Force Statistics<br/>
        <br/>
    wages - Wages<br/>
        <br/>
    ec - Employer Costs<br/>
        <br/>
    sla - State and Local Area Employment<br/>
        <br/>
    bed - Business Employment Dynamics<br/>
        <br/>
    tu - Time Use

</details>

 • *Optional:* `False`

---

**`include_extras`**: `bool`

Include additional information in the search results. Extra fields returned are metadata and vary by survey. Fields are undefined strings that typically have names ending with '_code'.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_code_map`**: `bool`

When True, includes the complete code map for eaçh survey in the category, returned separately as a nested JSON to the `extras['results_metadata']` property of the response. Example content is the NAICS industry map for PPI surveys. Each code is a value within the 'symbol' of the time series.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

The title of the series.

**`survey_name`**: `str`

The name of the survey.

</TabItem>

<TabItem value='bls' label='bls'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

The title of the series.

**`survey_name`**: `str`

The name of the survey.

</TabItem>
</Tabs>



---

---
title: "Bls Series"
description: "Get time series data for one, or more, BLS series IDs"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BlsSeries` | `BlsSeriesQueryParams` | `BlsSeriesData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
BlsSeriesData,
BlsSeriesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): bls.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='bls' label='bls'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): bls.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`calculations`**: `bool`

Include calculations in the response, if available. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

---

**`annual_average`**: `bool`

Include annual averages in the response, if available. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

---

**`aspects`**: `bool`

Include all aspects associated with a data point for a given BLS series ID, if available. Returned with the series metadata, under `extras` of the response object. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series.

**`value`**: `float`

Observation value for the symbol and date.

</TabItem>

<TabItem value='bls' label='bls'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series.

**`value`**: `float`

Observation value for the symbol and date.

**`change_1M`**: `float`

One month change in value.

**`change_3M`**: `float`

Three month change in value.

**`change_6M`**: `float`

Six month change in value.

**`change_12M`**: `float`

One year change in value.

**`change_percent_1M`**: `float`

One month change in percent.

**`change_percent_3M`**: `float`

Three month change in percent.

**`change_percent_6M`**: `float`

Six month change in percent.

**`change_percent_12M`**: `float`

One year change in percent.

**`latest`**: `bool`

Latest value indicator.

**`footnotes`**: `str`

Footnotes accompanying the value.

</TabItem>
</Tabs>



---

---
title: "Bond Indices"
description: "Bond Indices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BondIndices` | `BondIndicesQueryParams` | `BondIndicesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.bond_indices import (
BondIndicesData,
BondIndicesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'oas']`

The type of series. OAS is the option-adjusted spread. Default is yield.

 • *Default:* `yield`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'oas']`

The type of series. OAS is the option-adjusted spread. Default is yield.

 • *Default:* `yield`

 • *Optional:* `True`

---

**`category`**: `Literal['high_yield', 'us', 'emerging_markets']`

The type of index category. Used in conjunction with 'index', default is 'us'.

 • *Default:* `us`

 • *Optional:* `True`

---

**`index`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

The specific index to query. Used in conjunction with 'category' and 'index_type', default is 'yield_curve'.<br/>
        Possible values are:<br/>
            corporate<br/>
            seasoned_corporate<br/>
            liquid_corporate<br/>
            yield_curve<br/>
            crossover<br/>
            public_sector<br/>
            private_sector<br/>
            non_financial<br/>
            high_grade<br/>
            high_yield<br/>
            liquid_emea<br/>
            emea<br/>
            liquid_asia<br/>
            asia<br/>
            liquid_latam<br/>
            latam<br/>
            liquid_aaa<br/>
            liquid_bbb<br/>
            aaa<br/>
            aa<br/>
            a<br/>
            bbb<br/>
            bb<br/>
            b<br/>
            ccc Multiple items allowed for provider(s): fred.

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `a`
- `aa`
- `aaa`
- `asia`
- `b`
- `bb`
- `bbb`
- `ccc`
- `corporate`
- `crossover`
- `emea`
- `high_grade`
- `high_yield`
- `latam`
- `liquid_aaa`
- `liquid_asia`
- `liquid_bbb`
- `liquid_corporate`
- `liquid_emea`
- `liquid_latam`
- `non_financial`
- `private_sector`
- `public_sector`
- `seasoned_corporate`
- `yield_curve`
</details>

 • *Default:* `yield_curve`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set, default is 'avg'.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Default:* `avg`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Index values.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Index values.

**`maturity`**: `str`

The maturity range of the bond index. Only applicable when 'index' is 'yield_curve'.

**`title`**: `str`

The title of the index.

</TabItem>
</Tabs>



---

---
title: "Bond Prices"
description: "Corporate Bond Prices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `BondPrices` | `BondPricesQueryParams` | `BondPricesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.bond_prices import (
BondPricesData,
BondPricesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

The country to get data. Matches partial name.

 • *Optional:* `True`

---

**`issuer_name`**: `str`

Name of the issuer.  Returns partial matches and is case insensitive.

 • *Optional:* `True`

---

**`isin`**: `Union[list, str]`

International Securities Identification Number(s) of the bond(s).

 • *Optional:* `True`

---

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

 • *Optional:* `True`

---

**`currency`**: `Union[list, str]`

Currency of the bond. Formatted as the 3-letter ISO 4217 code (e.g. GBP, EUR, USD).

 • *Optional:* `True`

---

**`coupon_min`**: `float`

Minimum coupon rate of the bond.

 • *Optional:* `True`

---

**`coupon_max`**: `float`

Maximum coupon rate of the bond.

 • *Optional:* `True`

---

**`issued_amount_min`**: `int`

Minimum issued amount of the bond.

 • *Optional:* `True`

---

**`issued_amount_max`**: `str`

Maximum issued amount of the bond.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Minimum maturity date of the bond.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Maximum maturity date of the bond.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`country`**: `str`

The country to get data. Matches partial name.

 • *Optional:* `True`

---

**`issuer_name`**: `str`

Name of the issuer.  Returns partial matches and is case insensitive.

 • *Optional:* `True`

---

**`isin`**: `Union[list, str]`

International Securities Identification Number(s) of the bond(s).

 • *Optional:* `True`

---

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

 • *Optional:* `True`

---

**`currency`**: `Union[list, str]`

Currency of the bond. Formatted as the 3-letter ISO 4217 code (e.g. GBP, EUR, USD).

 • *Optional:* `True`

---

**`coupon_min`**: `float`

Minimum coupon rate of the bond.

 • *Optional:* `True`

---

**`coupon_max`**: `float`

Maximum coupon rate of the bond.

 • *Optional:* `True`

---

**`issued_amount_min`**: `int`

Minimum issued amount of the bond.

 • *Optional:* `True`

---

**`issued_amount_max`**: `str`

Maximum issued amount of the bond.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Minimum maturity date of the bond.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Maximum maturity date of the bond.

 • *Optional:* `True`

---

**`issue_date_min`**: `date`

Filter by the minimum original issue date.

 • *Optional:* `True`

---

**`issue_date_max`**: `date`

Filter by the maximum original issue date.

 • *Optional:* `True`

---

**`last_traded_min`**: `date`

Filter by the minimum last trade date.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

All bond data is sourced from a single JSON file that is updated daily. The file is cached for one day to eliminate downloading more than once. Caching will significantly speed up subsequent queries. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`isin`**: `str`

International Securities Identification Number of the bond.

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

**`figi`**: `str`

FIGI of the bond.

**`cusip`**: `str`

CUSIP of the bond.

**`coupon_rate`**: `float`

Coupon rate of the bond.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`isin`**: `str`

International Securities Identification Number of the bond.

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

**`figi`**: `str`

FIGI of the bond.

**`cusip`**: `str`

CUSIP of the bond.

**`coupon_rate`**: `float`

Coupon rate of the bond.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate. Values are returned as a normalized percent.

**`price`**: `float`

The last price for the bond.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_traded_date`**: `date`

Last traded date of the bond.

**`maturity_date`**: `date`

Maturity date of the bond.

**`issue_date`**: `date`

Issue date of the bond. This is the date when the bond first accrues interest.

**`issuer_name`**: `str`

Name of the issuing entity.

</TabItem>
</Tabs>



---

---
title: "COT"
description: "Get Commitment of Traders Reports"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `COT` | `COTQueryParams` | `COTData` |

### Import Statement

```python
from openbb_core.provider.standard_models.cot import (
COTData,
COTQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`id`**: `str`

A string with the CFTC market code or other identifying string, such as the contract market name, commodity name, or commodity group - i.e, 'gold' or 'japanese yen'.Default report is Fed Funds Futures. Use the 'cftc_market_code' for an exact match.

 • *Default:* `045601`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Default is the most recent report.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='cftc' label='cftc'>

**`id`**: `str`

A string with the CFTC market code or other identifying string, such as the contract market name, commodity name, or commodity group - i.e, 'gold' or 'japanese yen'.Default report is Fed Funds Futures. Use the 'cftc_market_code' for an exact match.

 • *Default:* `045601`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Default is the most recent report.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`report_type`**: `Literal['legacy', 'disaggregated', 'financial', 'supplemental']`

<details>
<summary mdxType="summary">Description</summary>

The type of report to retrieve. Set `id` as 'all' to return all items in the report<br/>
            type (default date range returns the latest report). The Legacy report is broken down by exchange<br/>
            with reported open interest further broken down into three trader classifications: commercial,<br/>
            non-commercial and non-reportable. The Disaggregated reports are broken down by Agriculture and<br/>
            Natural Resource contracts. The Disaggregated reports break down reportable open interest positions<br/>
            into four classifications: Producer/Merchant, Swap Dealers, Managed Money and Other Reportables.<br/>
            The Traders in Financial Futures (TFF) report includes financial contracts. The TFF report breaks<br/>
            down the reported open interest into five classifications: Dealer, Asset Manager, Leveraged Money,<br/>
            Other Reportables and Non-Reportables.

</details>

 • *Default:* `legacy`

 • *Optional:* `True`

---

**`futures_only`**: `bool`

Returns the futures-only report. Default is False, for the combined report.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`report_week`**: `str`

Report week for the year.

**`market_and_exchange_names`**: `str`

Market and exchange names.

**`cftc_contract_market_code`**: `str`

CFTC contract market code.

**`cftc_market_code`**: `str`

CFTC market code.

**`cftc_region_code`**: `str`

CFTC region code.

**`cftc_commodity_code`**: `str`

CFTC commodity code.

**`cftc_contract_market_code_quotes`**: `str`

CFTC contract market code quotes.

**`cftc_market_code_quotes`**: `str`

CFTC market code quotes.

**`cftc_commodity_code_quotes`**: `str`

CFTC commodity code quotes.

**`cftc_subgroup_code`**: `str`

CFTC subgroup code.

**`commodity`**: `str`

Commodity.

**`commodity_group`**: `str`

Commodity group name.

**`commodity_subgroup`**: `str`

Commodity subgroup name.

**`futonly_or_combined`**: `str`

If the report is futures-only or combined.

**`contract_units`**: `str`

Contract units.

</TabItem>

<TabItem value='cftc' label='cftc'>

**`date`**: `Union[date, str]`

The date of the data.

**`report_week`**: `str`

Report week for the year.

**`market_and_exchange_names`**: `str`

Market and exchange names.

**`cftc_contract_market_code`**: `str`

CFTC contract market code.

**`cftc_market_code`**: `str`

CFTC market code.

**`cftc_region_code`**: `str`

CFTC region code.

**`cftc_commodity_code`**: `str`

CFTC commodity code.

**`cftc_contract_market_code_quotes`**: `str`

CFTC contract market code quotes.

**`cftc_market_code_quotes`**: `str`

CFTC market code quotes.

**`cftc_commodity_code_quotes`**: `str`

CFTC commodity code quotes.

**`cftc_subgroup_code`**: `str`

CFTC subgroup code.

**`commodity`**: `str`

Commodity.

**`commodity_group`**: `str`

Commodity group name.

**`commodity_subgroup`**: `str`

Commodity subgroup name.

**`futonly_or_combined`**: `str`

If the report is futures-only or combined.

**`contract_units`**: `str`

Contract units.

</TabItem>
</Tabs>



---

---
title: "COT Search"
description: "Get the current Commitment of Traders Reports"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `COTSearch` | `COTSearchQueryParams` | `COTSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
COTSearchData,
COTSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='cftc' label='cftc'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`code`**: `str`

CFTC market contract code of the report.

**`name`**: `str`

Name of the underlying asset.

**`category`**: `str`

Category of the underlying asset.

**`subcategory`**: `str`

Subcategory of the underlying asset.

**`units`**: `str`

The units for one contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='cftc' label='cftc'>

**`code`**: `str`

CFTC market contract code of the report.

**`name`**: `str`

Name of the underlying asset.

**`category`**: `str`

Category of the underlying asset.

**`subcategory`**: `str`

Subcategory of the underlying asset.

**`units`**: `str`

The units for one contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Name of the commodity.

</TabItem>
</Tabs>



---

---
title: "Calendar Dividend"
description: "Get historical and upcoming dividend payments"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CalendarDividend` | `CalendarDividendQueryParams` | `CalendarDividendData` |

### Import Statement

```python
from openbb_core.provider.standard_models.calendar_dividend import (
CalendarDividendData,
CalendarDividendQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

**`adjusted_amount`**: `float`

The adjusted-dividend amount.

**`label`**: `str`

Ex-dividend date formatted for display.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

**`annualized_amount`**: `float`

The indicated annualized dividend amount.

</TabItem>
</Tabs>



---

---
title: "Calendar Earnings"
description: "Get historical and upcoming company earnings releases"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CalendarEarnings` | `CalendarEarningsQueryParams` | `CalendarEarningsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.calendar_earnings import (
CalendarEarningsData,
CalendarEarningsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['us', 'ca']`

The country to get calendar data for.

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`eps_actual`**: `float`

The actual earnings per share announced.

**`revenue_actual`**: `float`

The actual reported revenue.

**`revenue_consensus`**: `float`

The revenue forecast consensus.

**`period_ending`**: `date`

The fiscal period end date.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`updated_date`**: `date`

The date the data was updated last.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`eps_actual`**: `float`

The actual earnings per share (USD) announced.

**`surprise_percent`**: `float`

The earnings surprise as normalized percentage points.

**`num_estimates`**: `int`

The number of analysts providing estimates for the consensus.

**`period_ending`**: `str`

The fiscal period end date.

**`previous_report_date`**: `date`

The previous report date for the same period last year.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`market_cap`**: `int`

The market cap (USD) of the reporting entity.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`market_cap`**: `float`

Market cap of the entity.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`exchange`**: `str`

The primary trading exchange.

**`sector_id`**: `int`

The Seeking Alpha Sector ID.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company's name.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The consensus estimated EPS in dollars.

**`eps_actual`**: `float`

The actual EPS in dollars.

**`eps_surprise`**: `float`

The EPS surprise in dollars.

**`surprise_percent`**: `float`

The EPS surprise as a normalized percent.

**`reporting_time`**: `str`

The time of the report - i.e., before or after market.

</TabItem>
</Tabs>



---

---
title: "Calendar Events"
description: "Get historical and upcoming company events, such as Investor Day, Conference Call, Earnings Release"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CalendarEvents` | `CalendarEventsQueryParams` | `CalendarEventsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.calendar_events import (
CalendarEventsData,
CalendarEventsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data. The date of the event.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data. The date of the event.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the symbol is listed.

**`time`**: `str`

The estimated time of the event, local to the exchange.

**`timing`**: `str`

The timing of the event - e.g. before, during, or after market hours.

**`description`**: `str`

The title of the event.

**`url`**: `str`

The URL to the press release for the announcement.

**`announcement_date`**: `date`

The date when the event was announced.

</TabItem>
</Tabs>



---

---
title: "Calendar Ipo"
description: "Get historical and upcoming initial public offerings (IPOs)"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CalendarIpo` | `CalendarIpoQueryParams` | `CalendarIpoData` |

### Import Statement

```python
from openbb_core.provider.standard_models.calendar_ipo import (
CalendarIpoData,
CalendarIpoQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`status`**: `Literal['upcoming', 'priced', 'withdrawn']`

Status of the IPO. [upcoming, priced, or withdrawn]

 • *Optional:* `True`

---

**`min_value`**: `int`

Return IPOs with an offer dollar amount greater than the given amount.

 • *Optional:* `True`

---

**`max_value`**: `int`

Return IPOs with an offer dollar amount less than the given amount.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`status`**: `Literal['upcoming', 'priced', 'filed', 'withdrawn']`

The status of the IPO.

 • *Default:* `priced`

 • *Optional:* `True`

---

**`is_spo`**: `bool`

If True, returns data for secondary public offerings (SPOs).

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

**`status`**: `Literal['upcoming', 'priced', 'withdrawn']`

The status of the IPO. Upcoming IPOs have not taken place yet but are expected to. Priced IPOs have taken place. Withdrawn IPOs were expected to take place, but were subsequently withdrawn.

**`exchange`**: `str`

The acronym of the stock exchange that the company is going to trade publicly on. Typically NYSE or NASDAQ.

**`offer_amount`**: `float`

The total dollar amount of shares offered in the IPO. Typically this is share price * share count

**`share_price`**: `float`

The price per share at which the IPO was offered.

**`share_price_lowest`**: `float`

The expected lowest price per share at which the IPO will be offered. Before an IPO is priced, companies typically provide a range of prices per share at which they expect to offer the IPO (typically available for upcoming IPOs).

**`share_price_highest`**: `float`

The expected highest price per share at which the IPO will be offered. Before an IPO is priced, companies typically provide a range of prices per share at which they expect to offer the IPO (typically available for upcoming IPOs).

**`share_count`**: `int`

The number of shares offered in the IPO.

**`share_count_lowest`**: `int`

The expected lowest number of shares that will be offered in the IPO. Before an IPO is priced, companies typically provide a range of shares that they expect to offer in the IPO (typically available for upcoming IPOs).

**`share_count_highest`**: `int`

The expected highest number of shares that will be offered in the IPO. Before an IPO is priced, companies typically provide a range of shares that they expect to offer in the IPO (typically available for upcoming IPOs).

**`announcement_url`**: `str`

The URL to the company's announcement of the IPO

**`sec_report_url`**: `str`

The URL to the company's S-1, S-1/A, F-1, or F-1/A SEC filing, which is required to be filed before an IPO takes place.

**`open_price`**: `float`

The opening price at the beginning of the first trading day (only available for priced IPOs).

**`close_price`**: `float`

The closing price at the end of the first trading day (only available for priced IPOs).

**`volume`**: `int`

The volume at the end of the first trading day (only available for priced IPOs).

**`day_change`**: `float`

The percentage change between the open price and the close price on the first trading day (only available for priced IPOs).

**`week_change`**: `float`

The percentage change between the open price on the first trading day and the close price approximately a week after the first trading day (only available for priced IPOs).

**`month_change`**: `float`

The percentage change between the open price on the first trading day and the close price approximately a month after the first trading day (only available for priced IPOs).

**`id`**: `str`

The Intrinio ID of the IPO.

**`company`**: `IntrinioCompany`

The company that is going public via the IPO.

**`security`**: `IntrinioSecurity`

The primary Security for the Company that is going public via the IPO

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

**`name`**: `str`

The name of the company.

**`offer_amount`**: `float`

The dollar value of the shares offered.

**`share_count`**: `int`

The number of shares offered.

**`expected_price_date`**: `date`

The date the pricing is expected.

**`filed_date`**: `date`

The date the IPO was filed.

**`withdraw_date`**: `date`

The date the IPO was withdrawn.

**`deal_status`**: `str`

The status of the deal.

</TabItem>
</Tabs>



---

---
title: "Calendar Splits"
description: "Get historical and upcoming stock split operations"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CalendarSplits` | `CalendarSplitsQueryParams` | `CalendarSplitsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.calendar_splits import (
CalendarSplitsData,
CalendarSplitsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`label`**: `str`

Label of the stock splits.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`numerator`**: `float`

Numerator of the stock splits.

**`denominator`**: `float`

Denominator of the stock splits.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`label`**: `str`

Label of the stock splits.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`numerator`**: `float`

Numerator of the stock splits.

**`denominator`**: `float`

Denominator of the stock splits.

</TabItem>
</Tabs>



---

---
title: "Cash Flow Statement"
description: "Get the cash flow statement for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CashFlowStatement` | `CashFlowStatementQueryParams` | `CashFlowStatementData` |

### Import Statement

```python
from openbb_core.provider.standard_models.cash_flow import (
CashFlowStatementData,
CashFlowStatementQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Default:* `False`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date of the filing.

**`accepted_date`**: `datetime`

The date the filing was accepted.

**`reported_currency`**: `str`

The currency in which the cash flow statement was reported.

**`net_income`**: `float`

Net income.

**`depreciation_and_amortization`**: `float`

Depreciation and amortization.

**`deferred_income_tax`**: `float`

Deferred income tax.

**`stock_based_compensation`**: `float`

Stock-based compensation.

**`change_in_working_capital`**: `float`

Change in working capital.

**`change_in_account_receivables`**: `float`

Change in account receivables.

**`change_in_inventory`**: `float`

Change in inventory.

**`change_in_account_payable`**: `float`

Change in account payable.

**`change_in_other_working_capital`**: `float`

Change in other working capital.

**`change_in_other_non_cash_items`**: `float`

Change in other non-cash items.

**`net_cash_from_operating_activities`**: `float`

Net cash from operating activities.

**`purchase_of_property_plant_and_equipment`**: `float`

Purchase of property, plant and equipment.

**`acquisitions`**: `float`

Acquisitions.

**`purchase_of_investment_securities`**: `float`

Purchase of investment securities.

**`sale_and_maturity_of_investments`**: `float`

Sale and maturity of investments.

**`other_investing_activities`**: `float`

Other investing activities.

**`net_cash_from_investing_activities`**: `float`

Net cash from investing activities.

**`repayment_of_debt`**: `float`

Repayment of debt.

**`issuance_of_common_equity`**: `float`

Issuance of common equity.

**`repurchase_of_common_equity`**: `float`

Repurchase of common equity.

**`payment_of_dividends`**: `float`

Payment of dividends.

**`other_financing_activities`**: `float`

Other financing activities.

**`net_cash_from_financing_activities`**: `float`

Net cash from financing activities.

**`effect_of_exchange_rate_changes_on_cash`**: `float`

Effect of exchange rate changes on cash.

**`net_change_in_cash_and_equivalents`**: `float`

Net change in cash and equivalents.

**`cash_at_beginning_of_period`**: `float`

Cash at beginning of period.

**`cash_at_end_of_period`**: `float`

Cash at end of period.

**`operating_cash_flow`**: `float`

Operating cash flow.

**`capital_expenditure`**: `float`

Capital expenditure.

**`free_cash_flow`**: `float`

None

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`net_income_continuing_operations`**: `float`

Net Income (Continuing Operations)

**`net_income_discontinued_operations`**: `float`

Net Income (Discontinued Operations)

**`net_income`**: `float`

Consolidated Net Income.

**`provision_for_loan_losses`**: `float`

Provision for Loan Losses

**`provision_for_credit_losses`**: `float`

Provision for credit losses

**`depreciation_expense`**: `float`

Depreciation Expense.

**`amortization_expense`**: `float`

Amortization Expense.

**`share_based_compensation`**: `float`

Share-based compensation.

**`non_cash_adjustments_to_reconcile_net_income`**: `float`

Non-Cash Adjustments to Reconcile Net Income.

**`changes_in_operating_assets_and_liabilities`**: `float`

Changes in Operating Assets and Liabilities (Net)

**`net_cash_from_continuing_operating_activities`**: `float`

Net Cash from Continuing Operating Activities

**`net_cash_from_discontinued_operating_activities`**: `float`

Net Cash from Discontinued Operating Activities

**`net_cash_from_operating_activities`**: `float`

Net Cash from Operating Activities

**`divestitures`**: `float`

Divestitures

**`sale_of_property_plant_and_equipment`**: `float`

Sale of Property, Plant, and Equipment

**`acquisitions`**: `float`

Acquisitions

**`purchase_of_investments`**: `float`

Purchase of Investments

**`purchase_of_investment_securities`**: `float`

Purchase of Investment Securities

**`sale_and_maturity_of_investments`**: `float`

Sale and Maturity of Investments

**`loans_held_for_sale`**: `float`

Loans Held for Sale (Net)

**`purchase_of_property_plant_and_equipment`**: `float`

Purchase of Property, Plant, and Equipment

**`other_investing_activities`**: `float`

Other Investing Activities (Net)

**`net_cash_from_continuing_investing_activities`**: `float`

Net Cash from Continuing Investing Activities

**`net_cash_from_discontinued_investing_activities`**: `float`

Net Cash from Discontinued Investing Activities

**`net_cash_from_investing_activities`**: `float`

Net Cash from Investing Activities

**`payment_of_dividends`**: `float`

Payment of Dividends

**`repurchase_of_common_equity`**: `float`

Repurchase of Common Equity

**`repurchase_of_preferred_equity`**: `float`

Repurchase of Preferred Equity

**`issuance_of_common_equity`**: `float`

Issuance of Common Equity

**`issuance_of_preferred_equity`**: `float`

Issuance of Preferred Equity

**`issuance_of_debt`**: `float`

Issuance of Debt

**`repayment_of_debt`**: `float`

Repayment of Debt

**`other_financing_activities`**: `float`

Other Financing Activities (Net)

**`cash_interest_received`**: `float`

Cash Interest Received

**`net_change_in_deposits`**: `float`

Net Change in Deposits

**`net_increase_in_fed_funds_sold`**: `float`

Net Increase in Fed Funds Sold

**`net_cash_from_continuing_financing_activities`**: `float`

Net Cash from Continuing Financing Activities

**`net_cash_from_discontinued_financing_activities`**: `float`

Net Cash from Discontinued Financing Activities

**`net_cash_from_financing_activities`**: `float`

Net Cash from Financing Activities

**`effect_of_exchange_rate_changes`**: `float`

Effect of Exchange Rate Changes

**`other_net_changes_in_cash`**: `float`

Other Net Changes in Cash

**`net_change_in_cash_and_equivalents`**: `float`

Net Change in Cash and Equivalents

**`cash_income_taxes_paid`**: `float`

Cash Income Taxes Paid

**`cash_interest_paid`**: `float`

Cash Interest Paid

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`net_cash_flow_from_operating_activities_continuing`**: `float`

Net cash flow from operating activities continuing.

**`net_cash_flow_from_operating_activities_discontinued`**: `float`

Net cash flow from operating activities discontinued.

**`net_cash_flow_from_operating_activities`**: `float`

Net cash flow from operating activities.

**`net_cash_flow_from_investing_activities_continuing`**: `float`

Net cash flow from investing activities continuing.

**`net_cash_flow_from_investing_activities_discontinued`**: `float`

Net cash flow from investing activities discontinued.

**`net_cash_flow_from_investing_activities`**: `float`

Net cash flow from investing activities.

**`net_cash_flow_from_financing_activities_continuing`**: `float`

Net cash flow from financing activities continuing.

**`net_cash_flow_from_financing_activities_discontinued`**: `float`

Net cash flow from financing activities discontinued.

**`net_cash_flow_from_financing_activities`**: `float`

Net cash flow from financing activities.

**`net_cash_flow_continuing`**: `float`

Net cash flow continuing.

**`net_cash_flow_discontinued`**: `float`

Net cash flow discontinued.

**`exchange_gains_losses`**: `float`

Exchange gains losses.

**`net_cash_flow`**: `float`

Net cash flow.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "Cash Flow Statement Growth"
description: "Get the growth of a company's cash flow statement items over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CashFlowStatementGrowth` | `CashFlowStatementGrowthQueryParams` | `CashFlowStatementGrowthData` |

### Import Statement

```python
from openbb_core.provider.standard_models.cash_flow_growth import (
CashFlowStatementGrowthData,
CashFlowStatementGrowthQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_net_income`**: `float`

Growth rate of net income.

**`growth_depreciation_and_amortization`**: `float`

Growth rate of depreciation and amortization.

**`growth_deferred_income_tax`**: `float`

Growth rate of deferred income tax.

**`growth_stock_based_compensation`**: `float`

Growth rate of stock-based compensation.

**`growth_change_in_working_capital`**: `float`

Growth rate of change in working capital.

**`growth_account_receivables`**: `float`

Growth rate of accounts receivables.

**`growth_inventory`**: `float`

Growth rate of inventory.

**`growth_account_payable`**: `float`

Growth rate of account payable.

**`growth_other_working_capital`**: `float`

Growth rate of other working capital.

**`growth_other_non_cash_items`**: `float`

Growth rate of other non-cash items.

**`growth_net_cash_from_operating_activities`**: `float`

Growth rate of net cash provided by operating activities.

**`growth_purchase_of_property_plant_and_equipment`**: `float`

Growth rate of investments in property, plant, and equipment.

**`growth_acquisitions`**: `float`

Growth rate of net acquisitions.

**`growth_purchase_of_investment_securities`**: `float`

Growth rate of purchases of investments.

**`growth_sale_and_maturity_of_investments`**: `float`

Growth rate of sales maturities of investments.

**`growth_other_investing_activities`**: `float`

Growth rate of other investing activities.

**`growth_net_cash_from_investing_activities`**: `float`

Growth rate of net cash used for investing activities.

**`growth_repayment_of_debt`**: `float`

Growth rate of debt repayment.

**`growth_common_stock_issued`**: `float`

Growth rate of common stock issued.

**`growth_common_stock_repurchased`**: `float`

Growth rate of common stock repurchased.

**`growth_dividends_paid`**: `float`

Growth rate of dividends paid.

**`growth_other_financing_activities`**: `float`

Growth rate of other financing activities.

**`growth_net_cash_from_financing_activities`**: `float`

Growth rate of net cash used/provided by financing activities.

**`growth_effect_of_exchange_rate_changes_on_cash`**: `float`

Growth rate of the effect of foreign exchange changes on cash.

**`growth_net_change_in_cash_and_equivalents`**: `float`

Growth rate of net change in cash.

**`growth_cash_at_beginning_of_period`**: `float`

Growth rate of cash at the beginning of the period.

**`growth_cash_at_end_of_period`**: `float`

Growth rate of cash at the end of the period.

**`growth_operating_cash_flow`**: `float`

Growth rate of operating cash flow.

**`growth_capital_expenditure`**: `float`

Growth rate of capital expenditure.

**`growth_free_cash_flow`**: `float`

Growth rate of free cash flow.

</TabItem>
</Tabs>



---

---
title: "Central Bank Holdings"
description: "Get the balance sheet holdings of a central bank"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CentralBankHoldings` | `CentralBankHoldingsQueryParams` | `CentralBankHoldingsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.central_bank_holdings import (
CentralBankHoldingsData,
CentralBankHoldingsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`holding_type`**: `Literal['all_agency', 'agency_debts', 'mbs', 'cmbs', 'all_treasury', 'bills', 'notesbonds', 'frn', 'tips']`

Type of holdings to return.

 • *Default:* `all_treasury`

 • *Optional:* `True`

---

**`summary`**: `bool`

If True, returns historical weekly summary by holding type. This parameter takes priority over other parameters.

 • *Default:* `False`

 • *Optional:* `True`

---

**`cusip`**: `Union[str, list[str]]`

 Multiple items allowed for provider(s): federal_reserve.

 • *Optional:* `True`

---

**`wam`**: `bool`

If True, returns weighted average maturity aggregated by agency or treasury securities. This parameter takes priority over `holding_type`, `cusip`, and `monthly`.

 • *Default:* `False`

 • *Optional:* `True`

---

**`monthly`**: `bool`

If True, returns historical data for all Treasury securities at a monthly interval. This parameter takes priority over other parameters, except `wam`. Only valid when `holding_type` is set to: 'all_treasury', 'bills', 'notesbonds', 'frn', 'tips'.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`security_type`**: `str`

Type of security - i.e. TIPs, FRNs, etc.

**`description`**: `str`

Description of the security. Only returned for Agency securities.

**`is_aggreated`**: `Literal['Y']`

Whether the security is aggregated. Only returned for Agency securities.

**`cusip`**: `str`



**`issuer`**: `str`

Issuer of the security.

**`maturity_date`**: `date`

Maturity date of the security.

**`term`**: `str`

Term of the security. Only returned for Agency securities.

**`face_value`**: `float`

Current face value of the security (Thousands of $USD). Current face value of the securities, which is the remaining principal balance of the securities.

**`par_value`**: `float`

Par value of the security (Thousands of $USD). Changes in par may reflect primary and secondary market transactions and/or custodial account activity.

**`coupon`**: `float`

Coupon rate of the security.

**`spread`**: `float`

Spread to the current reference rate, as determined at each security's initial auction.

**`percent_outstanding`**: `float`

Total percent of the outstanding CUSIP issuance.

**`bills`**: `float`

Treasury bills amount (Thousands of $USD). Only returned when 'summary' is True.

**`frn`**: `float`

Floating rate Treasury notes amount (Thousands of $USD). Only returned when 'summary' is True.

**`notes_and_bonds`**: `float`

Treasuy Notes and bonds amount (Thousands of $USD). Only returned when 'summary' is True.

**`tips`**: `float`

Treasury inflation-protected securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`mbs`**: `float`

Mortgage-backed securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`cmbs`**: `float`

Commercial mortgage-backed securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`agencies`**: `float`

Agency securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`total`**: `float`

Total SOMA holdings amount (Thousands of $USD). Only returned when 'summary' is True.

**`tips_inflation_compensation`**: `float`

Treasury inflation-protected securities inflation compensation amount (Thousands of $USD). Only returned when 'summary' is True.

**`change_prior_week`**: `float`

Change in SOMA holdings from the prior week (Thousands of $USD).

**`change_prior_year`**: `float`

Change in SOMA holdings from the prior year (Thousands of $USD).

</TabItem>
</Tabs>



---

---
title: "Cik Map"
description: "Map a ticker symbol to a CIK number"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CikMap` | `CikMapQueryParams` | `CikMapData` |

### Import Statement

```python
from openbb_core.provider.standard_models.cik_map import (
CikMapData,
CikMapQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request, default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

</TabItem>

<TabItem value='sec' label='sec'>

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

</TabItem>
</Tabs>



---

---
title: "Commercial Paper"
description: "Commercial Paper"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CommercialPaper` | `CommercialPaperQueryParams` | `CommercialPaperData` |

### Import Statement

```python
from openbb_core.provider.standard_models.commercial_paper import (
CommercialPaperData,
CommercialPaperQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[str, Literal['all', 'overnight', '7d', '15d', '30d', '60d', '90d']], list[Union[str, Literal['all', 'overnight', '7d', '15d', '30d', '60d', '90d']]]]`

A target maturity. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`category`**: `Union[Union[str, Literal['all', 'asset_backed', 'financial', 'nonfinancial', 'a2p2']], list[Union[str, Literal['all', 'asset_backed', 'financial', 'nonfinancial', 'a2p2']]]]`

The category of asset. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

**`asset_type`**: `Literal['asset_backed', 'financial', 'nonfinancial', 'a2p2']`

The category of asset.

</TabItem>
</Tabs>



---

---
title: "Commodity Spot Prices"
description: "Commodity Spot Prices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CommoditySpotPrices` | `CommoditySpotPricesQueryParams` | `CommoditySpotPricesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.commodity_spot_prices import (
CommoditySpotPricesData,
CommoditySpotPricesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`commodity`**: `Literal['wti', 'brent', 'natural_gas', 'jet_fuel', 'propane', 'heating_oil', 'diesel_gulf_coast', 'diesel_ny_harbor', 'diesel_la', 'gasoline_ny_harbor', 'gasoline_gulf_coast', 'rbob', 'all']`

Commodity name associated with the EIA spot price commodity data, default is 'all'.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        None = No change<br/>
        a = Annual<br/>
        q = Quarterly<br/>
        m = Monthly<br/>
        w = Weekly<br/>
        d = Daily<br/>
        wef = Weekly, Ending Friday<br/>
        weth = Weekly, Ending Thursday<br/>
        wew = Weekly, Ending Wednesday<br/>
        wetu = Weekly, Ending Tuesday<br/>
        wem = Weekly, Ending Monday<br/>
        wesu = Weekly, Ending Sunday<br/>
        wesa = Weekly, Ending Saturday<br/>
        bwew = Biweekly, Ending Wednesday<br/>
        bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Commodity name.

**`price`**: `float`

Price of the commodity.

**`unit`**: `str`

Unit of the commodity price.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Commodity name.

**`price`**: `float`

Price of the commodity.

**`unit`**: `str`

Unit of the commodity price.

</TabItem>
</Tabs>



---

---
title: "Company Filings"
description: "Get public company filings"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CompanyFilings` | `CompanyFilingsQueryParams` | `CompanyFilingsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.company_filings import (
CompanyFilingsData,
CompanyFilingsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`form_type`**: `str`

SEC form type to filter by.

 • *Optional:* `True`

---

**`limit`**: `int`

Number of results to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`form_type`**: `str`

SEC form type to filter by.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`thea_enabled`**: `bool`

Return filings that have been read by Intrinio's Thea NLP.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`year`**: `int`

Calendar year of the data, default is current year. The earliest year available is 1994, for all companies and form types.

 • *Optional:* `True`

---

**`form_group`**: `Literal['annual', 'quarterly', 'proxy', 'insider', '8k', 'registration', 'comment']`

The form group to fetch, default is 8k.

 • *Default:* `8k`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`cik`**: `Union[str, int]`

Lookup filings by Central Index Key (CIK) instead of by symbol.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `Union[str, list[str]]`

SEC form type to filter by. Multiple items allowed for provider(s): sec.

<details>
<summary mdxType="summary">Choices</summary>

- `1`
- `1-A`
- `1-A_POS`
- `1-A-W`
- `1-E`
- `1-E_AD`
- `1-K`
- `1-SA`
- `1-U`
- `1-Z`
- `1-Z-W`
- `10-12B`
- `10-12G`
- `10-D`
- `10-K`
- `10-KT`
- `10-Q`
- `10-QT`
- `11-K`
- `11-KT`
- `13F-HR`
- `13F-NT`
- `13FCONP`
- `144`
- `15-12B`
- `15-12G`
- `15-15D`
- `15F-12B`
- `15F-12G`
- `15F-15D`
- `18-12B`
- `18-K`
- `19B-4E`
- `2-A`
- `2-AF`
- `2-E`
- `20-F`
- `20FR12B`
- `20FR12G`
- `24F-2NT`
- `25`
- `25-NSE`
- `253G1`
- `253G2`
- `253G3`
- `253G4`
- `3`
- `305B2`
- `34-12H`
- `4`
- `40-17F1`
- `40-17F2`
- `40-17G`
- `40-17GCS`
- `40-202A`
- `40-203A`
- `40-206A`
- `40-24B2`
- `40-33`
- `40-6B`
- `40-8B25`
- `40-8F-2`
- `40-APP`
- `40-F`
- `40-OIP`
- `40FR12B`
- `40FR12G`
- `424A`
- `424B1`
- `424B2`
- `424B3`
- `424B4`
- `424B5`
- `424B7`
- `424B8`
- `424H`
- `425`
- `485APOS`
- `485BPOS`
- `485BXT`
- `486APOS`
- `486BPOS`
- `486BXT`
- `487`
- `497`
- `497AD`
- `497H2`
- `497J`
- `497K`
- `497VPI`
- `497VPU`
- `5`
- `6-K`
- `6B_NTC`
- `6B_ORDR`
- `8-A12B`
- `8-A12G`
- `8-K`
- `8-K12B`
- `8-K12G3`
- `8-K15D5`
- `8-M`
- `8F-2_NTC`
- `8F-2_ORDR`
- `9-M`
- `ABS-15G`
- `ABS-EE`
- `ADN-MTL`
- `ADV-E`
- `ADV-H-C`
- `ADV-H-T`
- `ADV-NR`
- `ANNLRPT`
- `APP_NTC`
- `APP_ORDR`
- `APP_WD`
- `APP_WDG`
- `ARS`
- `ATS-N`
- `ATS-N-C`
- `ATS-N/UA`
- `AW`
- `AW_WD`
- `C`
- `C-AR`
- `C-AR-W`
- `C-TR`
- `C-TR-W`
- `C-U`
- `C-U-W`
- `C-W`
- `CB`
- `CERT`
- `CERTARCA`
- `CERTBATS`
- `CERTCBO`
- `CERTNAS`
- `CERTNYS`
- `CERTPAC`
- `CFPORTAL`
- `CFPORTAL-W`
- `CORRESP`
- `CT_ORDER`
- `D`
- `DEF_14A`
- `DEF_14C`
- `DEFA14A`
- `DEFA14C`
- `DEFC14A`
- `DEFC14C`
- `DEFM14A`
- `DEFM14C`
- `DEFN14A`
- `DEFR14A`
- `DEFR14C`
- `DEL_AM`
- `DFAN14A`
- `DFRN14A`
- `DOS`
- `DOSLTR`
- `DRS`
- `DRSLTR`
- `DSTRBRPT`
- `EFFECT`
- `F-1`
- `F-10`
- `F-10EF`
- `F-10POS`
- `F-1MEF`
- `F-3`
- `F-3ASR`
- `F-3D`
- `F-3DPOS`
- `F-3MEF`
- `F-4`
- `F-4_POS`
- `F-4MEF`
- `F-6`
- `F-6_POS`
- `F-6EF`
- `F-7`
- `F-7_POS`
- `F-8`
- `F-8_POS`
- `F-80`
- `F-80POS`
- `F-9`
- `F-9_POS`
- `F-N`
- `F-X`
- `FOCUSN`
- `FWP`
- `G-405`
- `G-405N`
- `G-FIN`
- `G-FINW`
- `IRANNOTICE`
- `MA`
- `MA-A`
- `MA-I`
- `MA-W`
- `MSD`
- `MSDCO`
- `MSDW`
- `N-1`
- `N-14`
- `N-14_8C`
- `N-14MEF`
- `N-18F1`
- `N-1A`
- `N-2`
- `N-2_POSASR`
- `N-23C-2`
- `N-23C3A`
- `N-23C3B`
- `N-23C3C`
- `N-2ASR`
- `N-2MEF`
- `N-30B-2`
- `N-30D`
- `N-4`
- `N-5`
- `N-54A`
- `N-54C`
- `N-6`
- `N-6F`
- `N-8A`
- `N-8B-2`
- `N-8F`
- `N-8F_NTC`
- `N-8F_ORDR`
- `N-CEN`
- `N-CR`
- `N-CSR`
- `N-CSRS`
- `N-MFP`
- `N-MFP1`
- `N-MFP2`
- `N-PX`
- `N-Q`
- `N-VP`
- `N-VPFS`
- `NO_ACT`
- `NPORT-EX`
- `NPORT-NP`
- `NPORT-P`
- `NRSRO-CE`
- `NRSRO-UPD`
- `NSAR-A`
- `NSAR-AT`
- `NSAR-B`
- `NSAR-BT`
- `NSAR-U`
- `NT_10-D`
- `NT_10-K`
- `NT_10-Q`
- `NT_11-K`
- `NT_20-F`
- `NT_N-CEN`
- `NT_N-MFP`
- `NT_N-MFP1`
- `NT_N-MFP2`
- `NT_NPORT-EX`
- `NT_NPORT-P`
- `NT-NCEN`
- `NT-NCSR`
- `NT-NSAR`
- `NTFNCEN`
- `NTFNCSR`
- `NTFNSAR`
- `NTN_10D`
- `NTN_10K`
- `NTN_10Q`
- `NTN_20F`
- `OIP_NTC`
- `OIP_ORDR`
- `POS_8C`
- `POS_AM`
- `POS_AMI`
- `POS_EX`
- `POS462B`
- `POS462C`
- `POSASR`
- `PRE_14A`
- `PRE_14C`
- `PREC14A`
- `PREC14C`
- `PREM14A`
- `PREM14C`
- `PREN14A`
- `PRER14A`
- `PRER14C`
- `PRRN14A`
- `PX14A6G`
- `PX14A6N`
- `QRTLYRPT`
- `QUALIF`
- `REG-NR`
- `REVOKED`
- `RW`
- `RW_WD`
- `S-1`
- `S-11`
- `S-11MEF`
- `S-1MEF`
- `S-20`
- `S-3`
- `S-3ASR`
- `S-3D`
- `S-3DPOS`
- `S-3MEF`
- `S-4`
- `S-4_POS`
- `S-4EF`
- `S-4MEF`
- `S-6`
- `S-8`
- `S-8_POS`
- `S-B`
- `S-BMEF`
- `SBSE`
- `SBSE-A`
- `SBSE-BD`
- `SBSE-C`
- `SBSE-W`
- `SC_13D`
- `SC_13E1`
- `SC_13E3`
- `SC_13G`
- `SC_14D9`
- `SC_14F1`
- `SC_14N`
- `SC_TO-C`
- `SC_TO-I`
- `SC_TO-T`
- `SC13E4F`
- `SC14D1F`
- `SC14D9C`
- `SC14D9F`
- `SD`
- `SDR`
- `SE`
- `SEC_ACTION`
- `SEC_STAFF_ACTION`
- `SEC_STAFF_LETTER`
- `SF-1`
- `SF-3`
- `SL`
- `SP_15D2`
- `STOP_ORDER`
- `SUPPL`
- `T-3`
- `TA-1`
- `TA-2`
- `TA-W`
- `TACO`
- `TH`
- `TTW`
- `UNDER`
- `UPLOAD`
- `WDL-REQ`
- `X-17A-5`
</details>

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.  If True, cache will store for one day.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

The start date to fetch.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

The end date to fetch.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`filing_url`**: `str`

URL to the filing page.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`accepted_date`**: `datetime`

Accepted date of the filing.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`id`**: `str`

Intrinio ID of the filing.

**`period_end_date`**: `date`

Ending date of the fiscal period for the filing.

**`accepted_date`**: `datetime`

Accepted date of the filing.

**`sec_unique_id`**: `str`

SEC unique ID of the filing.

**`filing_url`**: `str`

URL to the filing page.

**`instance_url`**: `str`

URL for the XBRL filing for the report.

**`industry_group`**: `str`

Industry group of the company.

**`industry_category`**: `str`

Industry category of the company.

**`word_count`**: `int`

Number of words in the filing, if available.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`period_ending`**: `date`

The ending date for the reporting period, if available.

**`name`**: `str`

The name of the company, if available.

**`reporting_owner`**: `str`

The name of the reporting owner, if applicable.

**`pdf_url`**: `str`

The URL to the PDF document, if available.

**`xls_url`**: `str`

The URL to the XLS document, if available.

**`xbr_url`**: `str`

The URL to the XBR document, if available.

**`doc_link`**: `str`

The URL to the DOC document, if available.

</TabItem>

<TabItem value='sec' label='sec'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`report_date`**: `date`

The date of the filing.

**`act`**: `Union[str, int]`

The SEC Act number.

**`items`**: `Union[str, float]`

The SEC Item numbers.

**`primary_doc_description`**: `str`

The description of the primary document.

**`primary_doc`**: `str`

The filename of the primary document.

**`accession_number`**: `Union[str, int]`

The accession number.

**`file_number`**: `Union[str, int]`

The file number.

**`film_number`**: `Union[str, int]`

The film number.

**`is_inline_xbrl`**: `Union[str, int]`

Whether the filing is an inline XBRL filing.

**`is_xbrl`**: `Union[str, int]`

Whether the filing is an XBRL filing.

**`size`**: `Union[str, int]`

The size of the filing.

**`complete_submission_url`**: `str`

The URL to the complete filing submission.

**`filing_detail_url`**: `str`

The URL to the filing details.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`description`**: `str`

The description of the filing.

**`size`**: `str`

The file size of the PDF document.

</TabItem>
</Tabs>



---

---
title: "Company News"
description: "Company News"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CompanyNews` | `CompanyNewsQueryParams` | `CompanyNewsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.company_news import (
CompanyNewsData,
CompanyNewsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`display`**: `Literal['headline', 'abstract', 'full']`

Specify headline only (headline), headline + teaser (abstract), or headline + full body (full).

 • *Default:* `full`

 • *Optional:* `True`

---

**`updated_since`**: `int`

Number of seconds since the news was updated.

 • *Optional:* `True`

---

**`published_since`**: `int`

Number of seconds since the news was published.

 • *Optional:* `True`

---

**`sort`**: `Literal['id', 'created', 'updated']`

Key to sort the news by.

 • *Default:* `created`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order to sort the news by.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`isin`**: `str`

The company's ISIN.

 • *Optional:* `True`

---

**`cusip`**: `str`

The company's CUSIP.

 • *Optional:* `True`

---

**`channels`**: `str`

Channels of the news to retrieve.

 • *Optional:* `True`

---

**`topics`**: `str`

Topics of the news to retrieve.

 • *Optional:* `True`

---

**`authors`**: `str`

Authors of the news to retrieve.

 • *Optional:* `True`

---

**`content_types`**: `str`

Content types of the news to retrieve.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the results. Use in combination with limit.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`source`**: `Literal['yahoo', 'moody', 'moody_us_news', 'moody_us_press_releases']`

The source of the news article.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['positive', 'neutral', 'negative']`

Return news only from this source.

 • *Optional:* `True`

---

**`language`**: `str`

Filter by language. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`topic`**: `str`

Filter by topic. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_greater_than`**: `int`

News stories will have a word count greater than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_less_than`**: `int`

News stories will have a word count less than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`is_spam`**: `bool`

Filter whether it is marked as spam or not. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`business_relevance_greater_than`**: `float`

News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

---

**`business_relevance_less_than`**: `float`

News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Sort order of the articles.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`offset`**: `int`

Page offset, used in conjunction with limit.

 • *Default:* `0`

 • *Optional:* `True`

---

**`source`**: `Union[str, list[str]]`

A comma-separated list of the domains requested. Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`page`**: `int`

The page number to start from. Use with limit.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

URL to the images of the news.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`id`**: `str`

Article ID.

**`author`**: `str`

Author of the article.

**`teaser`**: `str`

Teaser of the news.

**`channels`**: `str`

Channels associated with the news.

**`stocks`**: `str`

Stocks associated with the news.

**`tags`**: `str`

Tags associated with the news.

**`updated`**: `datetime`

Updated date of the news.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Name of the news source.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

The source of the news article.

**`summary`**: `str`

The summary of the news article.

**`topics`**: `str`

The topics related to the news article.

**`word_count`**: `int`

The word count of the news article.

**`business_relevance`**: `float`

How strongly correlated the news article is to the business

**`sentiment`**: `str`

The sentiment of the news article - i.e, negative, positive.

**`sentiment_confidence`**: `float`

The confidence score of the sentiment rating.

**`language`**: `str`

The language of the news article.

**`spam`**: `bool`

Whether the news article is spam.

**`copyright`**: `str`

The copyright notice of the news article.

**`id`**: `str`

Article ID.

**`security`**: `IntrinioSecurity`

The Intrinio Security object. Contains the security details related to the news article.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the article.

**`tags`**: `str`

Keywords/tags in the article

**`id`**: `str`

Article ID.

**`amp_url`**: `str`

AMP URL.

**`publisher`**: `PolygonPublisher`

Publisher of the article.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`tags`**: `str`

Tags associated with the news article.

**`article_id`**: `int`

Unique ID of the news article.

**`source`**: `str`

News source.

**`crawl_date`**: `datetime`

Date the news article was crawled.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the news.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the news article

</TabItem>
</Tabs>



---

---
title: "Compare Company Facts"
description: "Compare reported company facts and fundamental data points"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CompareCompanyFacts` | `CompareCompanyFactsQueryParams` | `CompareCompanyFactsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.compare_company_facts import (
CompareCompanyFactsData,
CompareCompanyFactsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): sec.

 • *Optional:* `True`

---

**`fact`**: `str`

The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): sec.

 • *Optional:* `True`

---

**`fact`**: `Literal['AccountsPayableCurrent', 'AccountsReceivableNet', 'AccountsReceivableNetCurrent', 'AccrualForTaxesOtherThanIncomeTaxesCurrent', 'AccrualForTaxesOtherThanIncomeTaxesCurrentAndNoncurrent', 'AccruedIncomeTaxesCurrent', 'AccruedIncomeTaxesNoncurrent', 'AccruedInsuranceCurrent', 'AccruedLiabilitiesCurrent', 'AccumulatedDepreciationDepletionAndAmortizationPropertyPlantAndEquipment', 'AccumulatedOtherComprehensiveIncomeLossNetOfTax', 'AcquisitionsNetOfCashAcquiredAndPurchasesOfIntangibleAndOtherAssets', 'AdjustmentsToAdditionalPaidInCapitalSharebasedCompensationRequisiteServicePeriodRecognitionValue', 'AdvertisingExpense', 'AllocatedShareBasedCompensationExpense', 'AntidilutiveSecuritiesExcludedFromComputationOfEarningsPerShareAmount', 'Assets', 'AssetsCurrent', 'AssetsNoncurrent', 'NoncurrentAssets', 'AssetImpairmentCharges', 'BuildingsAndImprovementsGross', 'CapitalLeaseObligationsCurrent', 'CapitalLeaseObligationsNoncurrent', 'Cash', 'CashAndCashEquivalentsAtCarryingValue', 'CashCashEquivalentsAndShortTermInvestments', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsIncludingDisposalGroupAndDiscontinuedOperations', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsPeriodIncreaseDecreaseIncludingExchangeRateEffect', 'CommitmentsAndContingencies', 'CommercialPaper', 'CommonStockDividendsPerShareDeclared', 'CommonStockDividendsPerShareCashPaid', 'CommonStocksIncludingAdditionalPaidInCapital', 'ComprehensiveIncomeNetOfTax', 'ComprehensiveIncomeNetOfTaxAttributableToNoncontrollingInterest', 'ComprehensiveIncomeNetOfTaxIncludingPortionAttributableToNoncontrollingInterest', 'ConstructionInProgressGross', 'ContractWithCustomerAssetNet', 'ContractWithCustomerLiability', 'ContractWithCustomerLiabilityCurrent', 'ContractWithCustomerLiabilityNoncurrent', 'CostOfRevenue', 'CostOfGoodsAndServicesSold', 'CurrentFederalTaxExpenseBenefit', 'CurrentForeignTaxExpenseBenefit', 'CurrentIncomeTaxExpenseBenefit', 'CurrentStateAndLocalTaxExpenseBenefit', 'DebtInstrumentFaceAmount', 'DebtInstrumentFairValue', 'DebtLongtermAndShorttermCombinedAmount', 'DeferredFederalIncomeTaxExpenseBenefit', 'DeferredForeignIncomeTaxExpenseBenefit', 'DeferredIncomeTaxExpenseBenefit', 'DeferredIncomeTaxesAndTaxCredits', 'DeferredIncomeTaxLiabilities', 'DeferredIncomeTaxLiabilitiesNet', 'DeferredRevenue', 'DeferredTaxAssetsGross', 'DeferredTaxAssetsLiabilitiesNet', 'DeferredTaxAssetsNet', 'DeferredTaxLiabilities', 'DefinedContributionPlanCostRecognized', 'Depreciation', 'DepreciationAmortizationAndAccretionNet', 'DepreciationAmortizationAndOther', 'DepreciationAndAmortization', 'DepreciationDepletionAndAmortization', 'DerivativeCollateralObligationToReturnCash', 'DerivativeCollateralRightToReclaimCash', 'DerivativeFairValueOfDerivativeNet', 'DerivativeLiabilityCollateralRightToReclaimCashOffset', 'DerivativeNotionalAmount', 'Dividends', 'DividendsCash', 'DividendsPayableAmountPerShare', 'DividendsPayableCurrent', 'DistributedEarnings', 'EarningsPerShareBasic', 'EarningsPerShareDiluted', 'EffectOfExchangeRateOnCashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents', 'EffectOfExchangeRateOnCashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsIncludingDisposalGroupAndDiscontinuedOperations', 'EmployeeRelatedLiabilitiesCurrent', 'EmployeeRelatedLiabilitiesCurrentAndNoncurrent', 'EmployeeServiceShareBasedCompensationTaxBenefitFromCompensationExpense', 'FinanceLeaseInterestExpense', 'FinanceLeaseInterestPaymentOnLiability', 'FinanceLeaseLiability', 'FinanceLeaseLiabilityCurrent', 'FinanceLeaseLiabilityNoncurrent', 'FinanceLeaseLiabilityPaymentsDue', 'FinanceLeaseLiabilityPaymentsDueAfterYearFive', 'FinanceLeaseLiabilityPaymentsDueNextTwelveMonths', 'FinanceLeaseLiabilityPaymentsDueYearFive', 'FinanceLeaseLiabilityPaymentsDueYearFour', 'FinanceLeaseLiabilityPaymentsDueYearThree', 'FinanceLeaseLiabilityPaymentsDueYearTwo', 'FinanceLeaseLiabilityPaymentsRemainderOfFiscalYear', 'FinanceLeaseLiabilityUndiscountedExcessAmount', 'FinanceLeasePrincipalPayments', 'FinanceLeaseRightOfUseAsset', 'FinancingReceivableAllowanceForCreditLosses', 'FiniteLivedIntangibleAssetsNet', 'FixturesAndEquipmentGross', 'GainLossOnInvestments', 'GainLossOnInvestmentsAndDerivativeInstruments', 'GainLossOnSaleOfBusiness', 'GainsLossesOnExtinguishmentOfDebt', 'GeneralAndAdministrativeExpense', 'Goodwill', 'GrossProfit', 'ImpairmentOfIntangibleAssetsExcludingGoodwill', 'ImpairmentOfIntangibleAssetsIndefinitelivedExcludingGoodwill', 'IncomeLossFromContinuingOperations', 'IncomeLossFromContinuingOperationsAttributableToNoncontrollingEntity', 'IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest', 'IncomeLossFromContinuingOperationsPerBasicShare', 'IncomeLossFromContinuingOperationsPerDilutedShare', 'InterestAndDebtExpense', 'IncomeTaxExpenseBenefit', 'IncomeTaxesPaid', 'IncomeTaxesPaidNet', 'IncreaseDecreaseInAccountsAndOtherReceivables', 'IncreaseDecreaseInAccountsPayable', 'IncreaseDecreaseInAccountsReceivable', 'IncreaseDecreaseInAccruedLiabilities', 'IncreaseDecreaseInAccruedIncomeTaxesPayable', 'IncreaseDecreaseInAccruedTaxesPayable', 'IncreaseDecreaseInContractWithCustomerLiability', 'IncreaseDecreaseInDeferredIncomeTaxes', 'IncreaseDecreaseInInventories', 'IncreaseDecreaseInOtherCurrentAssets', 'IncreaseDecreaseInOtherCurrentLiabilities', 'IncreaseDecreaseInOtherNoncurrentAssets', 'IncreaseDecreaseInOtherNoncurrentLiabilities', 'IncreaseDecreaseInPensionPlanObligations', 'IncrementalCommonSharesAttributableToShareBasedPaymentArrangements', 'InterestExpenseDebt', 'InterestIncomeExpenseNet', 'InterestPaid', 'InterestPaidNet', 'InventoryNet', 'InvestmentIncomeInterest', 'Land', 'LeaseAndRentalExpense', 'LesseeOperatingLeaseLiabilityPaymentsDue', 'LesseeOperatingLeaseLiabilityPaymentsDueAfterYearFive', 'LesseeOperatingLeaseLiabilityPaymentsDueNextTwelveMonths', 'LesseeOperatingLeaseLiabilityPaymentsDueYearFive', 'LesseeOperatingLeaseLiabilityPaymentsDueYearFour', 'LesseeOperatingLeaseLiabilityPaymentsDueYearThree', 'LesseeOperatingLeaseLiabilityPaymentsDueYearTwo', 'LesseeOperatingLeaseLiabilityPaymentsRemainderOfFiscalYear', 'LettersOfCreditOutstandingAmount', 'Liabilities', 'LiabilitiesAndStockholdersEquity', 'LiabilitiesCurrent', 'LineOfCredit', 'LineOfCreditFacilityMaximumBorrowingCapacity', 'LongTermDebt', 'LongTermDebtCurrent', 'LongTermDebtMaturitiesRepaymentsOfPrincipalAfterYearFive', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInNextTwelveMonths', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearFive', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearFour', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearThree', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearTwo', 'LongTermDebtMaturitiesRepaymentsOfPrincipalRemainderOfFiscalYear', 'LongTermDebtNoncurrent', 'LongTermInvestments', 'LossContingencyEstimateOfPossibleLoss', 'MachineryAndEquipmentGross', 'MarketableSecuritiesCurrent', 'MarketableSecuritiesNoncurrent', 'MinorityInterest', 'NetCashProvidedByUsedInFinancingActivities', 'NetCashProvidedByUsedInInvestingActivities', 'NetCashProvidedByUsedInOperatingActivities', 'NetIncomeLoss', 'NetIncomeLossAttributableToNoncontrollingInterest', 'NetIncomeLossAttributableToNonredeemableNoncontrollingInterest', 'NetIncomeLossAttributableToRedeemableNoncontrollingInterest', 'NonoperatingIncomeExpense', 'NoninterestIncome', 'NotesReceivableNet', 'OperatingExpenses', 'OperatingIncomeLoss', 'OperatingLeaseCost', 'OperatingLeaseLiability', 'OperatingLeaseLiabilityCurrent', 'OperatingLeaseLiabilityNoncurrent', 'OperatingLeaseRightOfUseAsset', 'OtherAccruedLiabilitiesCurrent', 'OtherAssetsCurrent', 'OtherAssetsNoncurrent', 'OtherComprehensiveIncomeLossAvailableForSaleSecuritiesAdjustmentNetOfTax', 'OtherComprehensiveIncomeLossCashFlowHedgeGainLossAfterReclassificationAndTax', 'OtherComprehensiveIncomeLossDerivativeInstrumentGainLossafterReclassificationandTax', 'OtherComprehensiveIncomeLossDerivativeInstrumentGainLossbeforeReclassificationafterTax', 'OtherComprehensiveIncomeLossForeignCurrencyTransactionAndTranslationAdjustmentNetOfTax', 'OtherComprehensiveIncomeLossNetOfTax', 'OtherComprehensiveIncomeLossNetOfTaxPortionAttributableToParent', 'OtherComprehensiveIncomeUnrealizedHoldingGainLossOnSecuritiesArisingDuringPeriodNetOfTax', 'OtherIncome', 'OtherLiabilitiesCurrent', 'OtherLiabilitiesNoncurrent', 'OtherLongTermDebt', 'OtherNoncashIncomeExpense', 'PaymentsForCapitalImprovements', 'PaymentsOfDividends', 'PaymentsOfDividendsMinorityInterest', 'PaymentsForProceedsFromBusinessesAndInterestInAffiliates', 'PaymentsForProceedsFromOtherInvestingActivities', 'PaymentsForRent', 'PaymentsForRepurchaseOfCommonStock', 'PaymentsOfDebtExtinguishmentCosts', 'PaymentsToAcquireInvestments', 'PaymentsToAcquirePropertyPlantAndEquipment', 'PreferredStockSharesOutstanding', 'PreferredStockValue', 'PrepaidExpenseAndOtherAssetsCurrent', 'PrepaidExpenseCurrent', 'ProceedsFromDebtMaturingInMoreThanThreeMonths', 'ProceedsFromDebtNetOfIssuanceCosts', 'ProceedsFromDivestitureOfBusinesses', 'ProceedsFromInvestments', 'ProceedsFromIssuanceOfCommonStock', 'ProceedsFromIssuanceOfDebt', 'ProceedsFromIssuanceOfLongTermDebt', 'ProceedsFromIssuanceOfUnsecuredDebt', 'ProceedsFromIssuanceOrSaleOfEquity', 'ProceedsFromMaturitiesPrepaymentsAndCallsOfAvailableForSaleSecurities', 'ProceedsFromPaymentsForOtherFinancingActivities', 'ProceedsFromPaymentsToMinorityShareholders', 'ProceedsFromRepaymentsOfShortTermDebt', 'ProceedsFromRepaymentsOfShortTermDebtMaturingInThreeMonthsOrLess', 'ProceedsFromSaleOfPropertyPlantAndEquipment', 'ProceedsFromStockOptionsExercised', 'ProfitLoss', 'PropertyPlantAndEquipmentGross', 'PropertyPlantAndEquipmentNet', 'ReceivablesNetCurrent', 'RedeemableNoncontrollingInterestEquityCarryingAmount', 'RepaymentsOfDebtMaturingInMoreThanThreeMonths', 'RepaymentsOfLongTermDebt', 'ResearchAndDevelopmentExpense', 'RestrictedCash', 'RestrictedCashAndCashEquivalents', 'RestrictedStockExpense', 'RestructuringCharges', 'RetainedEarningsAccumulatedDeficit', 'Revenues', 'RevenueFromContractWithCustomerExcludingAssessedTax', 'SecuredLongTermDebt', 'SellingAndMarketingExpense', 'SellingGeneralAndAdministrativeExpense', 'ShareBasedCompensation', 'ShortTermBorrowings', 'ShortTermInvestments', 'StockholdersEquity', 'StockholdersEquityIncludingPortionAttributableToNoncontrollingInterest', 'StockholdersEquityOther', 'StockIssuedDuringPeriodValueNewIssues', 'StockOptionPlanExpense', 'StockRedeemedOrCalledDuringPeriodValue', 'StockRepurchasedDuringPeriodValue', 'StockRepurchasedAndRetiredDuringPeriodValue', 'TaxesPayableCurrent', 'TradingSecuritiesDebt', 'TreasuryStockAcquiredAverageCostPerShare', 'TreasuryStockSharesAcquired', 'UnrealizedGainLossOnInvestments', 'UnrecognizedTaxBenefits', 'UnsecuredDebt', 'VariableLeaseCost', 'WeightedAverageNumberOfDilutedSharesOutstanding', 'WeightedAverageNumberOfSharesOutstandingBasic', 'WeightedAverageNumberDilutedSharesOutstandingAdjustment']`

Fact or concept from the SEC taxonomy, in UpperCamelCase. Defaults to, 'Revenues'. AAPL, MSFT, GOOG, BRK-A currently report revenue as, 'RevenueFromContractWithCustomerExcludingAssessedTax'. In previous years, they have reported as 'Revenues'.

 • *Default:* `Revenues`

 • *Optional:* `True`

---

**`year`**: `int`

The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied.

 • *Optional:* `True`

---

**`instantaneous`**: `bool`

<details>
<summary mdxType="summary">Description</summary>

Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data.<br/>
The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied.

</details>

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use cache for the request. Defaults to True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`value`**: `float`

The reported value of the fact or concept.

**`reported_date`**: `date`

The date when the report was filed.

**`period_beginning`**: `date`

The start date of the reporting period.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

The fiscal year.

**`fiscal_period`**: `str`

The fiscal period of the fiscal year.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`value`**: `float`

The reported value of the fact or concept.

**`reported_date`**: `date`

The date when the report was filed.

**`period_beginning`**: `date`

The start date of the reporting period.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

The fiscal year.

**`fiscal_period`**: `str`

The fiscal period of the fiscal year.

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

**`location`**: `str`

Geographic location of the reporting entity.

**`form`**: `str`

The SEC form associated with the fact or concept.

**`frame`**: `str`

The frame ID associated with the fact or concept, if applicable.

**`accession`**: `str`

SEC filing accession number associated with the reported fact or concept.

**`fact`**: `str`

The display name of the fact or concept.

**`unit`**: `str`

The unit of measurement for the fact or concept.

</TabItem>
</Tabs>



---

---
title: "Compare Groups"
description: "Get company data grouped by sector, industry or country and display either performance or valuation metrics"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CompareGroups` | `CompareGroupsQueryParams` | `CompareGroupsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.compare_groups import (
CompareGroupsData,
CompareGroupsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`group`**: `Literal['sector', 'industry', 'country', 'capitalization', 'energy', 'materials', 'industrials', 'consumer_cyclical', 'consumer_defensive', 'healthcare', 'financial', 'technology', 'communication_services', 'utilities', 'real_estate']`

US-listed stocks only. When an individual sector is selected, it is broken down by industry. The default is 'sector'.

 • *Default:* `sector`

 • *Optional:* `True`

---

**`metric`**: `Literal['performance', 'valuation', 'overview']`

Statistical metric to return. Select from: ['performance', 'valuation', 'overview'] The default is 'performance'.

 • *Default:* `performance`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`name`**: `str`

Name or label of the group.

**`stocks`**: `int`

The number of stocks in the group.

**`market_cap`**: `int`

The market cap of the group.

**`performance_1d`**: `float`

The performance in the last day, as a normalized percent.

**`performance_1w`**: `float`

The performance in the last week, as a normalized percent.

**`performance_1m`**: `float`

The performance in the last month, as a normalized percent.

**`performance_3m`**: `float`

The performance in the last quarter, as a normalized percent.

**`performance_6m`**: `float`

The performance in the last half year, as a normalized percent.

**`performance_1y`**: `float`

The performance in the last year, as a normalized percent.

**`performance_ytd`**: `float`

The performance in the year to date, as a normalized percent.

**`dividend_yield`**: `float`

The dividend yield of the group, as a normalized percent.

**`pe`**: `float`

The P/E ratio of the group.

**`forward_pe`**: `float`

The forward P/E ratio of the group.

**`peg`**: `float`

The PEG ratio of the group.

**`eps_growth_past_5y`**: `float`

The EPS growth of the group for the past 5 years, as a normalized percent.

**`eps_growth_next_5y`**: `float`

The estimated EPS growth of the groupo for the next 5 years, as a normalized percent.

**`sales_growth_past_5y`**: `float`

The sales growth of the group for the past 5 years, as a normalized percent.

**`float_short`**: `float`

The percent of the float shorted for the group, as a normalized value.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

**`volume`**: `int`

The trading volume.

**`volume_average`**: `int`

The 3-month average volume of the group.

**`volume_relative`**: `float`

The relative volume compared to the 3-month average volume.

</TabItem>
</Tabs>



---

---
title: "Composite Leading Indicator"
description: "Get the composite leading indicator (CLI)"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CompositeLeadingIndicator` | `CompositeLeadingIndicatorQueryParams` | `CompositeLeadingIndicatorData` |

### Import Statement

```python
from openbb_core.provider.standard_models.composite_leading_indicator import (
CompositeLeadingIndicatorData,
CompositeLeadingIndicatorQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[Union[Literal['g20', 'g7', 'asia5', 'north_america', 'europe4', 'australia', 'brazil', 'canada', 'china', 'france', 'germany', 'india', 'indonesia', 'italy', 'japan', 'mexico', 'south_africa', 'south_korea', 'spain', 'turkey', 'united_kingdom', 'united_states', 'all'], str], list[Union[Literal['g20', 'g7', 'asia5', 'north_america', 'europe4', 'australia', 'brazil', 'canada', 'china', 'france', 'germany', 'india', 'indonesia', 'italy', 'japan', 'mexico', 'south_africa', 'south_korea', 'spain', 'turkey', 'united_kingdom', 'united_states', 'all'], str]]]`

Country to get the CLI for, default is G20. Multiple items allowed for provider(s): oecd.

 • *Default:* `g20`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['amplitude', 'normalized']`

Adjustment of the data, either 'amplitude' or 'normalized'. Default is amplitude.

 • *Default:* `amplitude`

 • *Optional:* `True`

---

**`growth_rate`**: `bool`

Return the 1-year growth rate (%) of the CLI, default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

CLI value

**`country`**: `str`

Country for the CLI value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

CLI value

**`country`**: `str`

Country for the CLI value.

</TabItem>
</Tabs>



---

---
title: "Consumer Price Index"
description: "Get Consumer Price Index (CPI)"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ConsumerPriceIndex` | `ConsumerPriceIndexQueryParams` | `ConsumerPriceIndexData` |

### Import Statement

```python
from openbb_core.provider.standard_models.consumer_price_index import (
ConsumerPriceIndexData,
ConsumerPriceIndexQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): fred, oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`country`**: `Union[Literal['australia', 'austria', 'belgium', 'brazil', 'bulgaria', 'canada', 'chile', 'china', 'croatia', 'cyprus', 'czech_republic', 'denmark', 'estonia', 'finland', 'france', 'germany', 'greece', 'hungary', 'iceland', 'india', 'indonesia', 'ireland', 'israel', 'italy', 'japan', 'korea', 'latvia', 'lithuania', 'luxembourg', 'malta', 'mexico', 'netherlands', 'new_zealand', 'norway', 'poland', 'portugal', 'romania', 'russian_federation', 'slovak_republic', 'slovakia', 'slovenia', 'south_africa', 'spain', 'sweden', 'switzerland', 'turkey', 'united_kingdom', 'united_states'], str]`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

Country to get CPI for.  This is the list of OECD supported countries

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expenditure`**: `Literal['total', 'all', 'actual_rentals', 'alcoholic_beverages_tobacco_narcotics', 'all_non_food_non_energy', 'clothing_footwear', 'communication', 'education', 'electricity_gas_other_fuels', 'energy', 'overall_excl_energy_food_alcohol_tobacco', 'food_non_alcoholic_beverages', 'fuels_lubricants_personal', 'furniture_household_equipment', 'goods', 'housing', 'housing_excluding_rentals', 'housing_water_electricity_gas', 'health', 'imputed_rentals', 'maintenance_repair_dwelling', 'miscellaneous_goods_services', 'recreation_culture', 'residuals', 'restaurants_hotels', 'services_less_housing', 'services_less_house_excl_rentals', 'services', 'transport', 'water_supply_other_services']`

Expenditure component of CPI.

 • *Default:* `total`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

**`expenditure`**: `str`

Expenditure component of CPI.

</TabItem>
</Tabs>



---

---
title: "Country Interest Rates"
description: "Get interest rates by country(s) and duration"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CountryInterestRates` | `CountryInterestRatesQueryParams` | `CountryInterestRatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.country_interest_rates import (
CountryInterestRatesData,
CountryInterestRatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `belgium`
- `bulgaria`
- `brazil`
- `ireland`
- `mexico`
- `indonesia`
- `new_zealand`
- `japan`
- `united_kingdom`
- `france`
- `chile`
- `canada`
- `netherlands`
- `united_states`
- `south_korea`
- `norway`
- `austria`
- `south_africa`
- `denmark`
- `switzerland`
- `hungary`
- `luxembourg`
- `australia`
- `germany`
- `sweden`
- `iceland`
- `turkey`
- `greece`
- `israel`
- `czech_republic`
- `latvia`
- `slovenia`
- `poland`
- `estonia`
- `lithuania`
- `portugal`
- `costa_rica`
- `slovakia`
- `finland`
- `spain`
- `romania`
- `russia`
- `euro_area19`
- `colombia`
- `italy`
- `india`
- `china`
- `croatia`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `belgium`
- `bulgaria`
- `brazil`
- `ireland`
- `mexico`
- `indonesia`
- `new_zealand`
- `japan`
- `united_kingdom`
- `france`
- `chile`
- `canada`
- `netherlands`
- `united_states`
- `south_korea`
- `norway`
- `austria`
- `south_africa`
- `denmark`
- `switzerland`
- `hungary`
- `luxembourg`
- `australia`
- `germany`
- `sweden`
- `iceland`
- `turkey`
- `greece`
- `israel`
- `czech_republic`
- `latvia`
- `slovenia`
- `poland`
- `estonia`
- `lithuania`
- `portugal`
- `costa_rica`
- `slovakia`
- `finland`
- `spain`
- `romania`
- `russia`
- `euro_area19`
- `colombia`
- `italy`
- `india`
- `china`
- `croatia`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`duration`**: `Literal['immediate', 'short', 'long']`

Duration of the interest rate. 'immediate' is the overnight rate, 'short' is the 3-month rate, and 'long' is the 10-year rate.

 • *Default:* `short`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

The interest rate value.

**`country`**: `str`

Country for which the interest rate is given.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

The interest rate value.

**`country`**: `str`

Country for which the interest rate is given.

</TabItem>
</Tabs>



---

---
title: "Country Profile"
description: "Get a profile of country statistics and economic indicators"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CountryProfile` | `CountryProfileQueryParams` | `CountryProfileData` |

### Import Statement

```python
from openbb_core.provider.standard_models.country_profile import (
CountryProfileData,
CountryProfileQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

---

**`latest`**: `bool`

If True, return only the latest data. If False, return all available data for each indicator.

 • *Default:* `True`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day.Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`



**`population`**: `int`

Population.

**`gdp_usd`**: `float`

Gross Domestic Product, in billions of USD.

**`gdp_qoq`**: `float`

GDP growth quarter-over-quarter change, as a normalized percent.

**`gdp_yoy`**: `float`

GDP growth year-over-year change, as a normalized percent.

**`cpi_yoy`**: `float`

Consumer Price Index year-over-year change, as a normalized percent.

**`core_yoy`**: `float`

Core Consumer Price Index year-over-year change, as a normalized percent.

**`retail_sales_yoy`**: `float`

Retail Sales year-over-year change, as a normalized percent.

**`industrial_production_yoy`**: `float`

Industrial Production year-over-year change, as a normalized percent.

**`policy_rate`**: `float`

Short term policy rate, as a normalized percent.

**`yield_10y`**: `float`

10-year government bond yield, as a normalized percent.

**`govt_debt_gdp`**: `float`

Government debt as a percent (normalized) of GDP.

**`current_account_gdp`**: `float`

Current account balance as a percent (normalized) of GDP.

**`jobless_rate`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `str`



**`population`**: `int`

Population.

**`gdp_usd`**: `float`

Gross Domestic Product, in billions of USD.

**`gdp_qoq`**: `float`

GDP growth quarter-over-quarter change, as a normalized percent.

**`gdp_yoy`**: `float`

GDP growth year-over-year change, as a normalized percent.

**`cpi_yoy`**: `float`

Consumer Price Index year-over-year change, as a normalized percent.

**`core_yoy`**: `float`

Core Consumer Price Index year-over-year change, as a normalized percent.

**`retail_sales_yoy`**: `float`

Retail Sales year-over-year change, as a normalized percent.

**`industrial_production_yoy`**: `float`

Industrial Production year-over-year change, as a normalized percent.

**`policy_rate`**: `float`

Short term policy rate, as a normalized percent.

**`yield_10y`**: `float`

10-year government bond yield, as a normalized percent.

**`govt_debt_gdp`**: `float`

Government debt as a percent (normalized) of GDP.

**`current_account_gdp`**: `float`

Current account balance as a percent (normalized) of GDP.

**`jobless_rate`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "Crypto Historical"
description: "Get historical price data for cryptocurrency pair(s) within a provider"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CryptoHistorical` | `CryptoHistoricalQueryParams` | `CryptoHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.crypto_historical import (
CryptoHistoricalData,
CryptoHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '7d', '30d'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`exchanges`**: `Union[Union[list[str], str], list[Union[list[str], str]]]`

To limit the query to a subset of exchanges e.g. ['POLONIEX', 'GDAX'] Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `int`

Number of transactions for the symbol in the time period.

**`volume_notional`**: `float`

The last size done for the asset on the specific date in the quote currency. The volume of the asset on the specific date in the quote currency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>
</Tabs>



---

---
title: "Crypto Search"
description: "Search available cryptocurrency pairs within a provider"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CryptoSearch` | `CryptoSearchQueryParams` | `CryptoSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models.crypto_search import (
CryptoSearchData,
CryptoSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (Crypto)

**`name`**: `str`

Name of the crypto.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (Crypto)

**`name`**: `str`

Name of the crypto.

**`currency`**: `str`

The currency the crypto trades for.

**`exchange`**: `str`

The exchange code the crypto trades on.

**`exchange_name`**: `str`

The short name of the exchange the crypto trades on.

</TabItem>
</Tabs>



---

---
title: "Currency Historical"
description: "Currency Historical Price"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CurrencyHistorical` | `CurrencyHistoricalQueryParams` | `CurrencyHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.currency_historical import (
CurrencyHistoricalData,
CurrencyHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '5d', '21d'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>
</Tabs>



---

---
title: "Currency Pairs"
description: "Currency Search"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CurrencyPairs` | `CurrencyPairsQueryParams` | `CurrencyPairsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.currency_pairs import (
CurrencyPairsData,
CurrencyPairsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol of the currency pair.

**`name`**: `str`

Name of the currency pair.

**`currency`**: `str`

Base currency of the currency pair.

**`stock_exchange`**: `str`

Stock exchange of the currency pair.

**`exchange_short_name`**: `str`

Short name of the stock exchange of the currency pair.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

**`base_currency`**: `str`

ISO 4217 currency code of the base currency.

**`quote_currency`**: `str`

ISO 4217 currency code of the quote currency.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

**`currency_symbol`**: `str`

The symbol of the quote currency.

**`base_currency_symbol`**: `str`

The symbol of the base currency.

**`base_currency_name`**: `str`

Name of the base currency.

**`market`**: `str`

Name of the trading market. Always 'fx'.

**`locale`**: `str`

Locale of the currency pair.

**`last_updated`**: `date`

The date the reference data was last updated.

**`delisted`**: `date`

The date the item was delisted.

</TabItem>
</Tabs>



---

---
title: "Currency Reference Rates"
description: "Get current, official, currency reference rates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CurrencyReferenceRates` | `CurrencyReferenceRatesQueryParams` | `CurrencyReferenceRatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.currency_reference_rates import (
CurrencyReferenceRatesData,
CurrencyReferenceRatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='ecb' label='ecb'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`EUR`**: `float`

Euro.

**`USD`**: `float`

US Dollar.

**`JPY`**: `float`

Japanese Yen.

**`BGN`**: `float`

Bulgarian Lev.

**`CZK`**: `float`

Czech Koruna.

**`DKK`**: `float`

Danish Krone.

**`GBP`**: `float`

Pound Sterling.

**`HUF`**: `float`

Hungarian Forint.

**`PLN`**: `float`

Polish Zloty.

**`RON`**: `float`

Romanian Leu.

**`SEK`**: `float`

Swedish Krona.

**`CHF`**: `float`

Swiss Franc.

**`ISK`**: `float`

Icelandic Krona.

**`NOK`**: `float`

Norwegian Krone.

**`TRY`**: `float`

Turkish Lira.

**`AUD`**: `float`

Australian Dollar.

**`BRL`**: `float`

Brazilian Real.

**`CAD`**: `float`

Canadian Dollar.

**`CNY`**: `float`

Chinese Yuan.

**`HKD`**: `float`

Hong Kong Dollar.

**`IDR`**: `float`

Indonesian Rupiah.

**`ILS`**: `float`

Israeli Shekel.

**`INR`**: `float`

Indian Rupee.

**`KRW`**: `float`

South Korean Won.

**`MXN`**: `float`

Mexican Peso.

**`MYR`**: `float`

Malaysian Ringgit.

**`NZD`**: `float`

New Zealand Dollar.

**`PHP`**: `float`

Philippine Peso.

**`SGD`**: `float`

Singapore Dollar.

**`THB`**: `float`

Thai Baht.

**`ZAR`**: `float`

South African Rand.

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[date, str]`

The date of the data.

**`EUR`**: `float`

Euro.

**`USD`**: `float`

US Dollar.

**`JPY`**: `float`

Japanese Yen.

**`BGN`**: `float`

Bulgarian Lev.

**`CZK`**: `float`

Czech Koruna.

**`DKK`**: `float`

Danish Krone.

**`GBP`**: `float`

Pound Sterling.

**`HUF`**: `float`

Hungarian Forint.

**`PLN`**: `float`

Polish Zloty.

**`RON`**: `float`

Romanian Leu.

**`SEK`**: `float`

Swedish Krona.

**`CHF`**: `float`

Swiss Franc.

**`ISK`**: `float`

Icelandic Krona.

**`NOK`**: `float`

Norwegian Krone.

**`TRY`**: `float`

Turkish Lira.

**`AUD`**: `float`

Australian Dollar.

**`BRL`**: `float`

Brazilian Real.

**`CAD`**: `float`

Canadian Dollar.

**`CNY`**: `float`

Chinese Yuan.

**`HKD`**: `float`

Hong Kong Dollar.

**`IDR`**: `float`

Indonesian Rupiah.

**`ILS`**: `float`

Israeli Shekel.

**`INR`**: `float`

Indian Rupee.

**`KRW`**: `float`

South Korean Won.

**`MXN`**: `float`

Mexican Peso.

**`MYR`**: `float`

Malaysian Ringgit.

**`NZD`**: `float`

New Zealand Dollar.

**`PHP`**: `float`

Philippine Peso.

**`SGD`**: `float`

Singapore Dollar.

**`THB`**: `float`

Thai Baht.

**`ZAR`**: `float`

South African Rand.

</TabItem>
</Tabs>



---

---
title: "Currency Snapshots"
description: "Snapshots of currency exchange rates from an indirect or direct perspective of a base currency"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `CurrencySnapshots` | `CurrencySnapshotsQueryParams` | `CurrencySnapshotsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.currency_snapshots import (
CurrencySnapshotsData,
CurrencySnapshotsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in the price from the previous close.

**`change_percent`**: `float`

The change in the price from the previous close, as a normalized percent.

**`ma50`**: `float`

The 50-day moving average.

**`ma200`**: `float`

The 200-day moving average.

**`year_high`**: `float`

The 52-week high.

**`year_low`**: `float`

The 52-week low.

**`last_rate_timestamp`**: `datetime`

The timestamp of the last rate.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`vwap`**: `float`

The volume-weighted average price.

**`change`**: `float`

The change in price from the previous day.

**`change_percent`**: `float`

The percentage change in price from the previous day.

**`prev_open`**: `float`

The previous day's opening price.

**`prev_high`**: `float`

The previous day's high price.

**`prev_low`**: `float`

The previous day's low price.

**`prev_volume`**: `float`

The previous day's volume.

**`prev_vwap`**: `float`

The previous day's VWAP.

**`bid`**: `float`

The current bid price.

**`ask`**: `float`

The current ask price.

**`minute_open`**: `float`

The open price from the most recent minute bar.

**`minute_high`**: `float`

The high price from the most recent minute bar.

**`minute_low`**: `float`

The low price from the most recent minute bar.

**`minute_close`**: `float`

The close price from the most recent minute bar.

**`minute_volume`**: `float`

The volume from the most recent minute bar.

**`minute_vwap`**: `float`

The VWAP from the most recent minute bar.

**`minute_transactions`**: `float`

The number of transactions in the most recent minute bar.

**`quote_timestamp`**: `datetime`

The timestamp of the last quote.

**`minute_timestamp`**: `datetime`

The timestamp for the start of the most recent minute bar.

**`last_updated`**: `datetime`

The last time the data was updated.

</TabItem>
</Tabs>



---

---
title: "Direction Of Trade"
description: "Get Direction Of Trade Statistics from the IMF database"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `DirectionOfTrade` | `DirectionOfTradeQueryParams` | `DirectionOfTradeData` |

### Import Statement

```python
from openbb_core.provider.standard_models.direction_of_trade import (
DirectionOfTradeData,
DirectionOfTradeQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. None is an equiavlent to 'all'. If 'all' is used, the counterpart field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`counterpart`**: `Union[str, list[str]]`

Counterpart country to the trade. None is an equiavlent to 'all'. If 'all' is used, the country field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`direction`**: `Literal['exports', 'imports', 'balance', 'all']`

Trade direction. Use 'all' to get all data for this dimension.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`country`**: `Union[str, list[str]]`

The country to get data. None is an equiavlent to 'all'. If 'all' is used, the counterpart field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`counterpart`**: `Union[str, list[str]]`

Counterpart country to the trade. None is an equiavlent to 'all'. If 'all' is used, the country field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`direction`**: `Literal['exports', 'imports', 'balance', 'all']`

Trade direction. Use 'all' to get all data for this dimension.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`counterpart`**: `str`

Counterpart country or region to the trade.

**`title`**: `str`

Title corresponding to the symbol.

**`value`**: `float`

Trade value.

**`scale`**: `str`

Scale of the value.

</TabItem>

<TabItem value='imf' label='imf'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`counterpart`**: `str`

Counterpart country or region to the trade.

**`title`**: `str`

Title corresponding to the symbol.

**`value`**: `float`

Trade value.

**`scale`**: `str`

Scale of the value.

</TabItem>
</Tabs>



---

---
title: "Discount Window Primary Credit Rate"
description: "Discount Window Primary Credit Rate"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `DiscountWindowPrimaryCreditRate` | `DiscountWindowPrimaryCreditRateQueryParams` | `DiscountWindowPrimaryCreditRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.dwpcr_rates import (
DiscountWindowPrimaryCreditRateData,
DiscountWindowPrimaryCreditRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`parameter`**: `Literal['daily_excl_weekend', 'monthly', 'weekly', 'daily', 'annual']`

FRED series ID of DWPCR data.

 • *Default:* `daily_excl_weekend`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Discount Window Primary Credit Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Discount Window Primary Credit Rate.

</TabItem>
</Tabs>



---

---
title: "Discovery Filings"
description: "Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `DiscoveryFilings` | `DiscoveryFilingsQueryParams` | `DiscoveryFilingsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.discovery_filings import (
DiscoveryFilingsData,
DiscoveryFilingsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `str`

Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `str`

Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`is_done`**: `bool`

Flag for whether or not the filing is done.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`title`**: `str`

Title of the filing.

**`date`**: `Union[datetime, str]`

The date of the data.

**`form_type`**: `str`

The form type of the filing

**`link`**: `str`

URL to the filing page on the SEC site.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`title`**: `str`

Title of the filing.

**`date`**: `Union[datetime, str]`

The date of the data.

**`form_type`**: `str`

The form type of the filing

**`link`**: `str`

URL to the filing page on the SEC site.

</TabItem>
</Tabs>



---

---
title: "ETF Active"
description: "Get the most active ETFs"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ETFActive` | `ETFActiveQueryParams` | `ETFActiveData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
ETFActiveData,
ETFActiveQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

---
title: "ETF Gainers"
description: "Get the top ETF gainers"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ETFGainers` | `ETFGainersQueryParams` | `ETFGainersData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
ETFGainersData,
ETFGainersQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`bluegrass_channel`**: `str`

Bluegrass channel.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

---
title: "ETF Losers"
description: "Get the top ETF losers"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ETFLosers` | `ETFLosersQueryParams` | `ETFLosersData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
ETFLosersData,
ETFLosersQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`bluegrass_channel`**: `str`

Bluegrass channel.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

---
title: "Earnings Call Transcript"
description: "Get earnings call transcripts for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EarningsCallTranscript` | `EarningsCallTranscriptQueryParams` | `EarningsCallTranscriptData` |

### Import Statement

```python
from openbb_core.provider.standard_models.earnings_call_transcript import (
EarningsCallTranscriptData,
EarningsCallTranscriptQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `Union[Union[int, str], list[Union[int, str]]]`

Year of the earnings call transcript. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `Union[Union[int, str], list[Union[int, str]]]`

Year of the earnings call transcript. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`quarter`**: `int`

Quarter of the earnings call transcript.

**`year`**: `int`

Year of the earnings call transcript.

**`date`**: `Union[datetime, str]`

The date of the data.

**`content`**: `str`

Content of the earnings call transcript.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`quarter`**: `int`

Quarter of the earnings call transcript.

**`year`**: `int`

Year of the earnings call transcript.

**`date`**: `Union[datetime, str]`

The date of the data.

**`content`**: `str`

Content of the earnings call transcript.

</TabItem>
</Tabs>



---

---
title: "Economic Calendar"
description: "Get the upcoming, or historical, economic calendar of global events"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EconomicCalendar` | `EconomicCalendarQueryParams` | `EconomicCalendarData` |

### Import Statement

```python
from openbb_core.provider.standard_models.economic_calendar import (
EconomicCalendarData,
EconomicCalendarQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country of the event Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `True`

</TabItem>

<TabItem value='tradingeconomics' label='tradingeconomics'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country of the event. Multiple items allowed for provider(s): tradingeconomics.

<details>
<summary mdxType="summary">Choices</summary>

- `afghanistan`
- `albania`
- `algeria`
- `andorra`
- `angola`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cambodia`
- `cameroon`
- `canada`
- `cape_verde`
- `cayman_islands`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_timor`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `ethiopia`
- `euro_area`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `greece`
- `grenada`
- `guatemala`
- `guinea`
- `guinea_bissau`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `isle_of_man`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `laos`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `liechtenstein`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `mauritania`
- `mauritius`
- `mexico`
- `moldova`
- `monaco`
- `mongolia`
- `montenegro`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `puerto_rico`
- `qatar`
- `republic_of_the_congo`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_korea`
- `south_sudan`
- `spain`
- `sri_lanka`
- `sudan`
- `suriname`
- `swaziland`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `vietnam`
- `yemen`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`importance`**: `Literal['low', 'medium', 'high']`

Importance of the event.

 • *Optional:* `True`

---

**`group`**: `Literal['interest_rate', 'inflation', 'bonds', 'consumer', 'gdp', 'government', 'housing', 'labour', 'markets', 'money', 'prices', 'trade', 'business']`

Grouping of events.

 • *Optional:* `True`

---

**`calendar_id`**: `Union[Union[None, int, str], list[Union[None, int, str]]]`

Get events by TradingEconomics Calendar ID. Multiple items allowed for provider(s): tradingeconomics.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`change`**: `float`

Value change since previous.

**`change_percent`**: `float`

Percentage change since previous.

**`last_updated`**: `datetime`

Last updated timestamp.

**`created_at`**: `datetime`

Created at timestamp.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`description`**: `str`

Event description.

</TabItem>

<TabItem value='tradingeconomics' label='tradingeconomics'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`forecast`**: `Union[str, float]`

TradingEconomics projections.

**`reference`**: `str`

Abbreviated period for which released data refers to.

**`reference_date`**: `date`

Date for the reference period.

**`calendar_id`**: `int`

TradingEconomics Calendar ID.

**`date_span`**: `int`

Date span of the event.

**`symbol`**: `str`

TradingEconomics Symbol.

**`ticker`**: `str`

TradingEconomics Ticker symbol.

**`te_url`**: `str`

TradingEconomics URL path.

**`source_url`**: `str`

Source URL.

**`last_updated`**: `datetime`

Last update of the data.

</TabItem>
</Tabs>



---

---
title: "Economic Indicators"
description: "Get economic indicators by country and indicator"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EconomicIndicators` | `EconomicIndicatorsQueryParams` | `EconomicIndicatorsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.economic_indicators import (
EconomicIndicatorsData,
EconomicIndicatorsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. The base symbol for the indicator (e.g. GDP, CPI, etc.). Use `available_indicators()` to get a list of available symbols. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

---

**`transform`**: `Literal['toya', 'tpop', 'tusd', 'tpgp']`

<details>
<summary mdxType="summary">Description</summary>

The transformation to apply to the data, default is None.<br/>
<br/>
    tpop: Change from previous period<br/>
    toya: Change from one year ago<br/>
    tusd: Values as US dollars<br/>
    tpgp: Values as a percent of GDP<br/>
<br/>
    Only 'tpop' and 'toya' are applicable to all indicators. Applying transformations across multiple indicators/countries may produce unexpected results.<br/>
    This is because not all indicators are compatible with all transformations, and the original units and scale differ between entities.<br/>
    `tusd` should only be used where values are currencies.

</details>

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'month']`

The frequency of the data, default is 'quarter'. Only valid when 'symbol' is 'main'.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

Symbol to get data for. Use `available_indicators()` to get the list of available symbols. Use 'IRFCL' to get all the data from International Reserves & Foreign Currency Liquidity indicators. Use 'core_fsi' to get the core Financial Soundness Indicators. Use 'core_fsi_underlying' to include underlying data for the core Financial Soundness Indicators. Complete tables are available only by single country, and are keyed as described below. The default is 'irfcl_top_lines'. Available presets not listed in `available_indicators()` are:<br/>
<br/>
        'IRFCL': All the data from the set of indicators. Not compatible with multiple countries.<br/>
        'irfcl_top_lines': The default, top line items from the IRFCL data. Compatible with multiple countries.<br/>
        'reserve_assets_and_other_fx_assets': Table I of the IRFCL data. Not compatible with multiple countries.<br/>
        'predetermined_drains_on_fx_assets': Table II of the IRFCL data. Not compatible with multiple countries.<br/>
        'contingent_drains_fx_assets': Table III of the IRFCL data. Not compatible with multiple countries.<br/>
        'memorandum_items': The memorandum items table of the IRFCL data. Not compatible with multiple countries.<br/>
        'gold_reserves': Gold reserves as value in USD and Fine Troy Ounces. Compatible with multiple countries.<br/>
        'derivative_assets': Net derivative assets as value in USD. Compatible with multipile countries.<br/>
        'fsi_core': The core Financial Soundness Indicators. Compatible with multiple countries.<br/>
        'fsi_core_underlying': The core FSIs underlying series data. Not compatible with country='all'.<br/>
        'fsi_encouraged_set': The encouraged set of Financial Soundness Indicators. Not compatible with country='all'.<br/>
        'fsi_other': The other Financial Soundness Indicators. Not compatible with country='all'.<br/>
        'fsi_balance_sheets': Data categorized as Balance Sheets and Income Statements. Not compatible with country='all'.<br/>
        'fsi_all': All the Financial Soundness Indicators. Not compatible with multiple countries. Multiple items allowed for provider(s): imf.

</details>

 • *Default:* `irfcl_top_lines`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'month']`

Frequency of the data, default is 'quarter'.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



</TabItem>

<TabItem value='imf' label='imf'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



**`unit`**: `str`

The unit of the value.

**`scale`**: `str`

The scale of the value.

**`table`**: `str`

The name of the table associated with the symbol.

**`level`**: `int`

The indentation level of the data, relative to the table and symbol_root

**`order`**: `Union[float, int]`

Order of the data, relative to the table.

**`reference_sector`**: `str`

The reference sector for the data.

**`title`**: `str`

The title of the series associated with the symbol.

</TabItem>
</Tabs>



---

---
title: "Equity Active"
description: "Get the most actively traded stocks based on volume"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityActive` | `EquityActiveQueryParams` | `EquityActiveData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityActiveData,
EquityActiveQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity Aggressive Small Caps"
description: "Get top small cap stocks based on earnings growth"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityAggressiveSmallCaps` | `EquityAggressiveSmallCapsQueryParams` | `EquityAggressiveSmallCapsData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityAggressiveSmallCapsData,
EquityAggressiveSmallCapsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results. Default is all.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity FTD"
description: "Get reported Fail-to-deliver (FTD) data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityFTD` | `EquityFTDQueryParams` | `EquityFTDData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityFTDData,
EquityFTDQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

<details>
<summary mdxType="summary">Description</summary>

Limit the number of reports to parse, from most recent.<br/>
        Approximately 24 reports per year, going back to 2009.

</details>

 • *Default:* `24`

 • *Optional:* `True`

---

**`skip_reports`**: `int`

Skip N number of reports from current. A value of 1 will skip the most recent report.

 • *Default:* `0`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`settlement_date`**: `date`

The settlement date of the fail.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cusip`**: `str`

CUSIP of the Security.

**`quantity`**: `int`

The number of fails on that settlement date.

**`price`**: `float`

The price at the previous closing price from the settlement date.

**`description`**: `str`

The description of the Security.

</TabItem>

<TabItem value='sec' label='sec'>

**`settlement_date`**: `date`

The settlement date of the fail.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cusip`**: `str`

CUSIP of the Security.

**`quantity`**: `int`

The number of fails on that settlement date.

**`price`**: `float`

The price at the previous closing price from the settlement date.

**`description`**: `str`

The description of the Security.

</TabItem>
</Tabs>



---

---
title: "Equity Gainers"
description: "Get the top price gainers in the stock market"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityGainers` | `EquityGainersQueryParams` | `EquityGainersData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityGainersData,
EquityGainersQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`category`**: `Literal['dividend', 'energy', 'healthcare', 'industrials', 'price_performer', 'rising_stars', 'real_estate', 'tech', 'utilities', '52w_high', 'volume']`

The category of list to retrieve. Defaults to `price_performer`.

 • *Default:* `price_performer`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`thirty_day_price_change`**: `float`

30 Day Price Change.

**`ninety_day_price_change`**: `float`

90 Day Price Change.

**`dividend_yield`**: `float`

Dividend Yield.

**`avg_volume_10d`**: `float`

10 Day Avg. Volume.

**`rank`**: `int`

The rank of the stock in the list.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity Historical"
description: "Get historical price data for a given stock"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityHistorical` | `EquityHistoricalQueryParams` | `EquityHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_historical import (
EquityHistoricalData,
EquityHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '60m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. 'splits_only' is not supported for intraday data.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '10m', '15m', '30m', '60m', '1h', '1d', '1W', '1M', '1Q', '1Y']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`start_time`**: `datetime.time`

Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`end_time`**: `datetime.time`

Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`timezone`**: `str`

Timezone of the data, in the IANA format (Continent/City).

 • *Default:* `America/New_York`

 • *Optional:* `True`

---

**`source`**: `Literal['realtime', 'delayed', 'nasdaq_basic']`

The source of the data.

 • *Default:* `realtime`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'unadjusted']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '1W', '1M', '1Y'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '2m', '5m', '15m', '30m', '60m', '1h', '1d', '1W', '1M'], str, int]`

Time interval of the data to return. Or, any integer (entered as a string) representing the number of minutes. Default is daily data. There is no extended hours data, and intraday data is limited to after April 12 2022.

 • *Default:* `day`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. Only valid for daily data.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_actions`**: `bool`

Include dividends and stock splits in results.

 • *Default:* `True`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `Annotated[float, Gt(gt=0)]`

The adjusted close price.

**`dividend`**: `Annotated[float, Ge(ge=0)]`

Dividend amount, if a dividend was paid.

**`split_ratio`**: `Annotated[float, Ge(ge=0)]`

Split coefficient, if a split occurred.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`calls_volume`**: `int`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `int`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `int`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`unadjusted_volume`**: `float`

Unadjusted volume of the symbol.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`average`**: `float`

Average trade price of an individual equity during the interval.

**`change`**: `float`

Change in the price of the symbol from the previous day.

**`change_percent`**: `float`

Percent change in the price of the symbol from the previous day.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`fifty_two_week_high`**: `float`

52 week high price for the symbol.

**`fifty_two_week_low`**: `float`

52 week low price for the symbol.

**`factor`**: `float`

factor by which to multiply equity prices before this date, in order to calculate historically-adjusted equity prices.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

**`close_time`**: `datetime`

The timestamp that represents the end of the interval span.

**`interval`**: `str`

The data time frequency.

**`intra_period`**: `bool`

If true, the equity price represents an unfinished period (be it day, week, quarter, month, or year), meaning that the close price is the latest price available, not the official close price for the period

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume weighted average price for the day.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price, as a normalized percentage.

**`transactions`**: `int`

Total number of transactions recorded.

**`transactions_value`**: `float`

Nominal value of recorded transactions.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`last_price`**: `float`

The last price of the equity.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount (split-adjusted), if a dividend was paid.

</TabItem>
</Tabs>



---

---
title: "Equity Info"
description: "Get general information about a company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityInfo` | `EquityInfoQueryParams` | `EquityInfoData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_info import (
EquityInfoData,
EquityInfoQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`index`**: `str`

Included in indices - i.e., Dow, Nasdaq, or S&P.

**`optionable`**: `str`

Whether options trade against the ticker.

**`shortable`**: `str`

If the asset is shortable.

**`shares_outstanding`**: `str`

The number of shares outstanding, as an abbreviated string.

**`shares_float`**: `str`

The number of shares in the public float, as an abbreviated string.

**`short_interest`**: `str`

The last reported number of shares sold short, as an abbreviated string.

**`institutional_ownership`**: `float`

The institutional ownership of the stock, as a normalized percent.

**`market_cap`**: `str`

The market capitalization of the stock, as an abbreviated string.

**`dividend_yield`**: `float`

The dividend yield of the stock, as a normalized percent.

**`earnings_date`**: `str`

The last, or next confirmed, earnings date and announcement time, as a string. The format is Nov 02 AMC - for after market close.

**`beta`**: `float`

The beta of the stock relative to the broad market.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`is_etf`**: `bool`

If the symbol is an ETF.

**`is_actively_trading`**: `bool`

If the company is actively trading.

**`is_adr`**: `bool`

If the stock is an ADR.

**`is_fund`**: `bool`

If the company is a fund.

**`image`**: `str`

Image of the company.

**`currency`**: `str`

Currency in which the stock is traded.

**`market_cap`**: `int`

Market capitalization of the company.

**`last_price`**: `float`

The last traded price.

**`year_high`**: `float`

The one-year high of the price.

**`year_low`**: `float`

The one-year low of the price.

**`volume_avg`**: `int`

Average daily trading volume.

**`annualized_dividend_amount`**: `float`

The annualized dividend payment based on the most recent regular dividend payment.

**`beta`**: `float`

Beta of the stock relative to the market.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`id`**: `str`

Intrinio ID for the company.

**`thea_enabled`**: `bool`

Whether the company has been enabled for Thea.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`email`**: `str`

The email of the company.

**`issue_type`**: `str`

The issuance type of the asset.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_escrow`**: `int`

The number of shares held in escrow.

**`shares_total`**: `int`

The total number of shares outstanding from all classes.

**`dividend_frequency`**: `str`

The dividend frequency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`exchange_timezone`**: `str`

The timezone of the exchange.

**`issue_type`**: `str`

The issuance type of the asset.

**`currency`**: `str`

The currency in which the asset is traded.

**`market_cap`**: `int`

The market capitalization of the asset.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_float`**: `int`

The number of shares in the public float.

**`shares_implied_outstanding`**: `int`

Implied shares outstanding of common equityassuming the conversion of all convertible subsidiary equity into common.

**`shares_short`**: `int`

The reported number of shares short.

**`dividend_yield`**: `float`

The dividend yield of the asset, as a normalized percent.

**`beta`**: `float`

The beta of the asset relative to the broad market.

</TabItem>
</Tabs>



---

---
title: "Equity Losers"
description: "Get the top price losers in the stock market"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityLosers` | `EquityLosersQueryParams` | `EquityLosersData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityLosersData,
EquityLosersQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity NBBO"
description: "Get the National Best Bid and Offer for a given stock"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityNBBO` | `EquityNBBOQueryParams` | `EquityNBBOData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_nbbo import (
EquityNBBOData,
EquityNBBOQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols.

 • *Default:* `50000`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges.

 • *Optional:* `True`

---

**`timestamp_lt`**: `Union[datetime, str]`

Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_gt`**: `Union[datetime, str]`

Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_lte`**: `Union[datetime, str]`

Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_gte`**: `Union[datetime, str]`

Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ask_exchange`**: `str`

The exchange ID for the ask.

**`ask`**: `float`

The last ask price.

**`ask_size`**: `int`

<details>
<summary mdxType="summary">Description</summary>

The ask size. This represents the number of round lot orders at the given ask price.<br/>
        The normal round lot size is 100 shares.<br/>
        An ask size of 2 means there are 200 shares available to purchase at the given ask price.

</details>

**`bid_size`**: `int`

The bid size in round lots.

**`bid`**: `float`

The last bid price.

**`bid_exchange`**: `str`

The exchange ID for the bid.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`ask_exchange`**: `str`

The exchange ID for the ask.

**`ask`**: `float`

The last ask price.

**`ask_size`**: `int`

<details>
<summary mdxType="summary">Description</summary>

The ask size. This represents the number of round lot orders at the given ask price.<br/>
        The normal round lot size is 100 shares.<br/>
        An ask size of 2 means there are 200 shares available to purchase at the given ask price.

</details>

**`bid_size`**: `int`

The bid size in round lots.

**`bid`**: `float`

The last bid price.

**`bid_exchange`**: `str`

The exchange ID for the bid.

**`tape`**: `str`

The exchange tape.

**`conditions`**: `Union[str, list[int], list[str]]`

A list of condition codes.

**`indicators`**: `list[int]`

A list of indicator codes.

**`sequence_num`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11)

**`participant_timestamp`**: `datetime`

The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.

**`sip_timestamp`**: `datetime`

The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this quote from the exchange which produced it.

**`trf_timestamp`**: `datetime`

The nanosecond accuracy TRF (Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this quote.

</TabItem>
</Tabs>



---

---
title: "Equity Ownership"
description: "Get data about major holders for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityOwnership` | `EquityOwnershipQueryParams` | `EquityOwnershipData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_ownership import (
EquityOwnershipData,
EquityOwnershipQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the data to fetch.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the data to fetch.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`filing_date`**: `date`

Filing date of the stock ownership.

**`investor_name`**: `str`

Investor name of the stock ownership.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`security_name`**: `str`

Security name of the stock ownership.

**`type_of_security`**: `str`

Type of security of the stock ownership.

**`security_cusip`**: `str`

Security cusip of the stock ownership.

**`shares_type`**: `str`

Shares type of the stock ownership.

**`put_call_share`**: `str`

Put call share of the stock ownership.

**`investment_discretion`**: `str`

Investment discretion of the stock ownership.

**`industry_title`**: `str`

Industry title of the stock ownership.

**`weight`**: `float`

Weight of the stock ownership.

**`last_weight`**: `float`

Last weight of the stock ownership.

**`change_in_weight`**: `float`

Change in weight of the stock ownership.

**`change_in_weight_percentage`**: `float`

Change in weight percentage of the stock ownership.

**`market_value`**: `int`

Market value of the stock ownership.

**`last_market_value`**: `int`

Last market value of the stock ownership.

**`change_in_market_value`**: `int`

Change in market value of the stock ownership.

**`change_in_market_value_percentage`**: `float`

Change in market value percentage of the stock ownership.

**`shares_number`**: `int`

Shares number of the stock ownership.

**`last_shares_number`**: `int`

Last shares number of the stock ownership.

**`change_in_shares_number`**: `float`

Change in shares number of the stock ownership.

**`change_in_shares_number_percentage`**: `float`

Change in shares number percentage of the stock ownership.

**`quarter_end_price`**: `float`

Quarter end price of the stock ownership.

**`avg_price_paid`**: `float`

Average price paid of the stock ownership.

**`is_new`**: `bool`

Is the stock ownership new.

**`is_sold_out`**: `bool`

Is the stock ownership sold out.

**`ownership`**: `float`

How much is the ownership.

**`last_ownership`**: `float`

Last ownership amount.

**`change_in_ownership`**: `float`

Change in ownership amount.

**`change_in_ownership_percentage`**: `float`

Change in ownership percentage.

**`holding_period`**: `int`

Holding period of the stock ownership.

**`first_added`**: `date`

First added date of the stock ownership.

**`performance`**: `float`

Performance of the stock ownership.

**`performance_percentage`**: `float`

Performance percentage of the stock ownership.

**`last_performance`**: `float`

Last performance of the stock ownership.

**`change_in_performance`**: `float`

Change in performance of the stock ownership.

**`is_counted_for_performance`**: `bool`

Is the stock ownership counted for performance.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`filing_date`**: `date`

Filing date of the stock ownership.

**`investor_name`**: `str`

Investor name of the stock ownership.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`security_name`**: `str`

Security name of the stock ownership.

**`type_of_security`**: `str`

Type of security of the stock ownership.

**`security_cusip`**: `str`

Security cusip of the stock ownership.

**`shares_type`**: `str`

Shares type of the stock ownership.

**`put_call_share`**: `str`

Put call share of the stock ownership.

**`investment_discretion`**: `str`

Investment discretion of the stock ownership.

**`industry_title`**: `str`

Industry title of the stock ownership.

**`weight`**: `float`

Weight of the stock ownership.

**`last_weight`**: `float`

Last weight of the stock ownership.

**`change_in_weight`**: `float`

Change in weight of the stock ownership.

**`change_in_weight_percentage`**: `float`

Change in weight percentage of the stock ownership.

**`market_value`**: `int`

Market value of the stock ownership.

**`last_market_value`**: `int`

Last market value of the stock ownership.

**`change_in_market_value`**: `int`

Change in market value of the stock ownership.

**`change_in_market_value_percentage`**: `float`

Change in market value percentage of the stock ownership.

**`shares_number`**: `int`

Shares number of the stock ownership.

**`last_shares_number`**: `int`

Last shares number of the stock ownership.

**`change_in_shares_number`**: `float`

Change in shares number of the stock ownership.

**`change_in_shares_number_percentage`**: `float`

Change in shares number percentage of the stock ownership.

**`quarter_end_price`**: `float`

Quarter end price of the stock ownership.

**`avg_price_paid`**: `float`

Average price paid of the stock ownership.

**`is_new`**: `bool`

Is the stock ownership new.

**`is_sold_out`**: `bool`

Is the stock ownership sold out.

**`ownership`**: `float`

How much is the ownership.

**`last_ownership`**: `float`

Last ownership amount.

**`change_in_ownership`**: `float`

Change in ownership amount.

**`change_in_ownership_percentage`**: `float`

Change in ownership percentage.

**`holding_period`**: `int`

Holding period of the stock ownership.

**`first_added`**: `date`

First added date of the stock ownership.

**`performance`**: `float`

Performance of the stock ownership.

**`performance_percentage`**: `float`

Performance percentage of the stock ownership.

**`last_performance`**: `float`

Last performance of the stock ownership.

**`change_in_performance`**: `float`

Change in performance of the stock ownership.

**`is_counted_for_performance`**: `bool`

Is the stock ownership counted for performance.

</TabItem>
</Tabs>



---

---
title: "Equity Peers"
description: "Get the closest peers for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityPeers` | `EquityPeersQueryParams` | `EquityPeersData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_peers import (
EquityPeersData,
EquityPeersQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`peers_list`**: `list[str]`

A list of equity peers based on sector, exchange and market cap.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`peers_list`**: `list[str]`

A list of equity peers based on sector, exchange and market cap.

</TabItem>
</Tabs>



---

---
title: "Equity Quote"
description: "Get the latest quote for a given stock"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityQuote` | `EquityQuoteQueryParams` | `EquityQuoteData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_quote import (
EquityQuoteData,
EquityQuoteQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`source`**: `Literal['iex', 'bats', 'bats_delayed', 'utp_delayed', 'cta_a_delayed', 'cta_b_delayed', 'intrinio_mx', 'intrinio_mx_plus', 'delayed_sip']`

Source of the data.

 • *Default:* `iex`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`iv30`**: `float`

The 30-day implied volatility of the stock.

**`iv30_change`**: `float`

Change in 30-day implied volatility of the stock.

**`iv30_change_percent`**: `float`

Change in 30-day implied volatility of the stock as a normalized percentage value.

**`iv30_annual_high`**: `float`

The 1-year high of 30-day implied volatility.

**`hv30_annual_high`**: `float`

The 1-year high of 30-day realized volatility.

**`iv30_annual_low`**: `float`

The 1-year low of 30-day implied volatility.

**`hv30_annual_low`**: `float`

The 1-year low of 30-dayrealized volatility.

**`iv60_annual_high`**: `float`

The 1-year high of 60-day implied volatility.

**`hv60_annual_high`**: `float`

The 1-year high of 60-day realized volatility.

**`iv60_annual_low`**: `float`

The 1-year low of 60-day implied volatility.

**`hv60_annual_low`**: `float`

The 1-year low of 60-day realized volatility.

**`iv90_annual_high`**: `float`

The 1-year high of 90-day implied volatility.

**`hv90_annual_high`**: `float`

The 1-year high of 90-day realized volatility.

**`iv90_annual_low`**: `float`

The 1-year low of 90-day implied volatility.

**`hv90_annual_low`**: `float`

The 1-year low of 90-day realized volatility.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`price_avg50`**: `float`

50 day moving average price.

**`price_avg200`**: `float`

200 day moving average price.

**`avg_volume`**: `int`

Average volume over the last 10 trading days.

**`market_cap`**: `float`

Market cap of the company.

**`shares_outstanding`**: `int`

Number of shares outstanding.

**`eps`**: `float`

Earnings per share.

**`pe`**: `float`

Price earnings ratio.

**`earnings_announcement`**: `datetime`

Upcoming earnings announcement date.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`is_darkpool`**: `bool`

Whether or not the current trade is from a darkpool.

**`source`**: `str`

Source of the Intrinio data.

**`updated_on`**: `datetime`

Date and Time when the data was last updated.

**`security`**: `IntrinioSecurity`

Security details related to the quote.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

The name of the asset.

**`exchange`**: `str`

The listing exchange code.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

The last price of the asset.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

None

**`volume`**: `int`

Volume Weighted Average Price over the period.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price.

**`change_percent`**: `float`

The change in price as a normalized percent.

**`year_high`**: `float`

Fifty-two week high.

**`year_low`**: `float`

Fifty-two week low.

**`security_type`**: `str`

The issuance type of the asset.

**`sector`**: `str`

The sector of the asset.

**`industry_category`**: `str`

The industry category of the asset.

**`industry_group`**: `str`

The industry group of the asset.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`ma_21`**: `float`

Twenty-one day moving average.

**`ma_50`**: `float`

Fifty day moving average.

**`ma_200`**: `float`

Two-hundred day moving average.

**`volume_avg_10d`**: `int`

Ten day average volume.

**`volume_avg_30d`**: `int`

Thirty day average volume.

**`volume_avg_50d`**: `int`

Fifty day average volume.

**`market_cap`**: `int`

Market capitalization.

**`market_cap_all_classes`**: `int`

Market capitalization of all share classes.

**`div_amount`**: `float`

The most recent dividend amount.

**`div_currency`**: `str`

The currency the dividend is paid in.

**`div_yield`**: `float`

The dividend yield as a normalized percentage.

**`div_freq`**: `str`

The frequency of dividend payments.

**`div_ex_date`**: `date`

The ex-dividend date.

**`div_pay_date`**: `date`

The next dividend ayment date.

**`div_growth_3y`**: `Union[str, float]`

The three year dividend growth as a normalized percentage.

**`div_growth_5y`**: `Union[str, float]`

The five year dividend growth as a normalized percentage.

**`pe`**: `Union[str, float]`

The price to earnings ratio.

**`eps`**: `Union[str, float]`

The earnings per share.

**`debt_to_equity`**: `Union[str, float]`

The debt to equity ratio.

**`price_to_book`**: `Union[str, float]`

The price to book ratio.

**`price_to_cf`**: `Union[str, float]`

The price to cash flow ratio.

**`return_on_equity`**: `Union[str, float]`

The return on equity, as a normalized percentage.

**`return_on_assets`**: `Union[str, float]`

The return on assets, as a normalized percentage.

**`beta`**: `Union[str, float]`

The beta relative to the TSX Composite.

**`alpha`**: `Union[str, float]`

The alpha relative to the TSX Composite.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_escrow`**: `int`

The number of shares held in escrow.

**`shares_total`**: `int`

The total number of shares outstanding from all classes.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`last_volume`**: `int`

The last trade volume.

**`volume_avg`**: `int`

The average daily trading volume.

**`bid_timestamp`**: `datetime`

Timestamp of the bid price.

**`ask_timestamp`**: `datetime`

Timestamp of the ask price.

**`greeks_timestamp`**: `datetime`

Timestamp of the greeks data.

**`underlying`**: `str`

The underlying symbol for the option.

**`root_symbol`**: `str`

The root symbol for the option.

**`option_type`**: `Literal['call', 'put']`

Type of option - call or put.

**`contract_size`**: `int`

The number of shares in a standard contract.

**`expiration_type`**: `str`

The expiration type of the option - i.e, standard, weekly, etc.

**`expiration_date`**: `date`

The expiration date of the option.

**`strike`**: `float`

The strike price of the option.

**`open_interest`**: `int`

The number of open contracts for the option.

**`bid_iv`**: `float`

Implied volatility of the bid price.

**`ask_iv`**: `float`

Implied volatility of the ask price.

**`mid_iv`**: `float`

Mid-point implied volatility of the option.

**`orats_final_iv`**: `float`

ORATS final implied volatility of the option.

**`delta`**: `float`

Delta of the option.

**`gamma`**: `float`

Gamma of the option.

**`theta`**: `float`

Theta of the option.

**`vega`**: `float`

Vega of the option.

**`rho`**: `float`

Rho of the option.

**`phi`**: `float`

Phi of the option.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`ma_50d`**: `float`

50-day moving average price.

**`ma_200d`**: `float`

200-day moving average price.

**`volume_average`**: `float`

Average daily trading volume.

**`volume_average_10d`**: `float`

Average daily trading volume in the last 10 days.

**`currency`**: `str`

Currency of the price.

</TabItem>
</Tabs>



---

---
title: "Equity Screener"
description: "Screen for companies meeting various criteria"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityScreener` | `EquityScreenerQueryParams` | `EquityScreenerData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_screener import (
EquityScreenerData,
EquityScreenerQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`metric`**: `Literal['overview', 'valuation', 'financial', 'ownership', 'performance', 'technical']`

The data group to return, default is 'overview'.

 • *Default:* `overview`

 • *Optional:* `True`

---

**`exchange`**: `Literal['all', 'amex', 'nasdaq', 'nyse']`

Filter by exchange.

 • *Default:* `all`

 • *Optional:* `True`

---

**`index`**: `Literal['all', 'dow', 'nasdaq', 'sp500', 'russell']`

Filter by index.

 • *Default:* `all`

 • *Optional:* `True`

---

**`sector`**: `Literal['all', 'energy', 'materials', 'industrials', 'consumer_cyclical', 'consumer_defensive', 'financial', 'healthcare', 'technology', 'communication_services', 'utilities', 'real_estate']`

Filter by sector.

 • *Default:* `all`

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `stocks_only`
- `etf`
- `advertising_agencies`
- `aerospace_defense`
- `agricultural_inputs`
- `airlines`
- `airports_airservices`
- `aluminum`
- `apparel_manufacturing`
- `apparel_retail`
- `asset_management`
- `auto_manufacturers`
- `auto_parts`
- `auto_dealerships`
- `banks_diversified`
- `banks_regional`
- `beverages_brewers`
- `beverages_nonalcoholic`
- `beverages_wineries_distilleries`
- `biotechnology`
- `broadcasting`
- `building_materials`
- `building_products_equipment`
- `business_equipment_supplies`
- `capital_markets`
- `chemicals`
- `closed_end_fund_debt`
- `closed_end_fund_equity`
- `closed_end_fund_foreign`
- `coking_coal`
- `communication_equipment`
- `computer_hardware`
- `confectioners`
- `conglomerates`
- `consulting_services`
- `consumer_electronics`
- `copper`
- `credit_services`
- `department_stores`
- `diagnostics_research`
- `discount_stores`
- `drug_manufacturers_general`
- `drug_manufacturers_specialty_generic`
- `education_training_services`
- `electrical_equipment_parts`
- `electronic_components`
- `electronic_gaming_multimedia`
- `electronics_computer_distribution`
- `engineering_construction`
- `entertainment`
- `farm_heavy_construction_machinery`
- `farm_products`
- `financial_conglomerates`
- `financial_data_stock_exchanges`
- `food_distribution`
- `footwear_accessories`
- `furnishings_fixtures_appliances`
- `gambling`
- `gold`
- `grocery_stores`
- `health_care_plans`
- `health_information_services`
- `home_improvement_retail`
- `household_personal_products`
- `industrial_distribution`
- `information_technology_services`
- `infrastructure_operations`
- `insurance_brokers`
- `insurance_diversified`
- `insurance_life`
- `insurance_property_casualty`
- `insurance_reinsurance`
- `insurance_specialty`
- `integrated_freight_logistics`
- `internet_content_information`
- `internet_retail`
- `leisure`
- `lodging`
- `lumber_wood_production`
- `luxury_goods`
- `marine_shipping`
- `medical_care_facilities`
- `medical_devices`
- `medical_distribution`
- `medical_instruments_supplies`
- `metal_fabrication`
- `mortgage_finance`
- `oil_gas_drilling`
- `oil_gas_ep`
- `oil_gas_equipment_services`
- `oil_gas_integrated`
- `oil_gas_midstream`
- `oil_gas_refining_marketing`
- `other_industrial_metals_mining`
- `other_precious_metals_mining`
- `packaged_foods`
- `packaging_containers`
- `paper_paper_products`
- `personal_services`
- `pharmaceutical_retailers`
- `pollution_treatment_controls`
- `publishing`
- `railroads`
- `real_estate_development`
- `real_estate_diversified`
- `real_estate_services`
- `recreational_vehicles`
- `reit_diversified`
- `reit_health_care_facilities`
- `reit_hotel_motel`
- `reit_industrial`
- `reit_mortgage`
- `reit_office`
- `reit_residential`
- `reit_retail`
- `reit_specialty`
- `rental_leasing_services`
- `residential_construction`
- `resorts_casinos`
- `restaurants`
- `scientific_technical_instruments`
- `security_protection_services`
- `semiconductor_equipment_materials`
- `semiconductors`
- `shell_companies`
- `silver`
- `software_application`
- `software_infrastructure`
- `solar`
- `specialty_business_services`
- `specialty_chemicals`
- `specialty_industrial_machinery`
- `specialty_retail`
- `staffing_employment_services`
- `steel`
- `telecom_services`
- `textile_manufacturing`
- `thermal_coal`
- `tobacco`
- `tools_accessories`
- `travel_services`
- `trucking`
- `uranium`
- `utilities_diversified`
- `utilities_independent_power_producers`
- `utilities_regulated_electric`
- `utilities_regulated_gas`
- `utilities_regulated_water`
- `utilities_renewable`
- `waste_management`
</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`mktcap`**: `Literal['all', 'mega', 'large', 'large_over', 'large_under', 'mid', 'mid_over', 'mid_under', 'small', 'small_over', 'small_under', 'micro', 'micro_over', 'micro_under', 'nano']`

<details>
<summary mdxType="summary">Description</summary>

Filter by market cap.<br/>
    Mega - > 200B<br/>
    Large - 10B - 200B<br/>
    Mid - 2B - 10B<br/>
    Small - 300M - 2B<br/>
    Micro - 50M - 300M<br/>
    Nano - < 50M

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`recommendation`**: `Literal['all', 'strong_buy', 'buy+', 'buy', 'hold+', 'hold', 'hold-', 'sell', 'sell-', 'strong_sell']`

Filter by analyst recommendation.

 • *Default:* `all`

 • *Optional:* `True`

---

**`signal`**: `str`

<details>
<summary mdxType="summary">Description</summary>

The Finviz screener signal to use. When no parameters are provided, the screener defaults to 'top_gainers'. Available signals are:<br/>
        channel: both support and resistance trendlines are horizontal<br/>
        channel_down: both support and resistance trendlines slope downward<br/>
        channel_up: both support and resistance trendlines slope upward<br/>
        double_bottom: stock with 'W' shape that indicates a bullish reversal in trend<br/>
        double_top: stock with 'M' shape that indicates a bearish reversal in trend<br/>
        downgrades: stocks downgraded by analysts today<br/>
        earnings_after: companies reporting earnings today, after market close<br/>
        earnings_before: companies reporting earnings today, before market open<br/>
        head_shoulders: chart formation that predicts a bullish-to-bearish trend reversal<br/>
        head_shoulders_inverse: chart formation that predicts a bearish-to-bullish trend reversal<br/>
        horizontal_sr: horizontal channel of price range between support and resistance trendlines<br/>
        major_news: stocks with the highest news coverage today<br/>
        most_active: stocks with the highest trading volume today<br/>
        most_volatile: stocks with the highest widest high/low trading range today<br/>
        multiple_bottom: same as double_bottom hitting more lows<br/>
        multiple_top: same as double_top hitting more highs<br/>
        new_high: stocks making 52-week high today<br/>
        new_low: stocks making 52-week low today<br/>
        overbought: stock is becoming overvalued and may experience a pullback.<br/>
        oversold: oversold stocks may represent a buying opportunity for investors<br/>
        recent_insider_buying: stocks with recent insider buying activity<br/>
        recent_insider_selling: stocks with recent insider selling activity<br/>
        tl_resistance: once a rising trendline is broken<br/>
        tl_support: once a falling trendline is broken<br/>
        top_gainers: stocks with the highest price gain percent today<br/>
        top_losers: stocks with the highest price percent loss today<br/>
        triangle_ascending: upward trendline support and horizontal trendline resistance<br/>
        triangle_descending: horizontal trendline support and downward trendline resistance<br/>
        unusual_volume: stocks with unusually high volume today - the highest relative volume ratio<br/>
        upgrades: stocks upgraded by analysts today<br/>
        wedge: upward trendline support, downward trendline resistance (contiunation)<br/>
        wedge_down: downward trendline support and downward trendline resistance (reversal)<br/>
        wedge_up: upward trendline support and upward trendline resistance (reversal)

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `channel`
- `channel_down`
- `channel_up`
- `double_bottom`
- `double_top`
- `downgrades`
- `earnings_after`
- `earnings_before`
- `head_shoulders`
- `head_shoulders_inverse`
- `horizontal_sr`
- `major_news`
- `most_active`
- `most_volatile`
- `multiple_bottom`
- `multiple_top`
- `new_high`
- `new_low`
- `overbought`
- `oversold`
- `recent_insider_buying`
- `recent_insider_selling`
- `tl_resistance`
- `tl_support`
- `top_gainers`
- `top_losers`
- `triangle_ascending`
- `triangle_descending`
- `unusual_volume`
- `upgrades`
- `wedge`
- `wedge_down`
- `wedge_up`
</details>

 • *Optional:* `True`

---

**`preset`**: `str`

<details>
<summary mdxType="summary">Description</summary>

A configured preset file to use for the query. This overrides all other query parameters except 'metric', and 'limit'. Presets (.ini text files) can be created and modified in the '~/OpenBBUserData/finviz/presets' directory. If the path does not exist, it will be created and populated with the default presets on the first run. Refer to the file, 'screener_template.ini', for the format and options.<br/>
<br/>
Note: Syntax of parameters in preset files must follow the template file exactly  - i.e, Analyst Recom. = Strong Buy (1)

</details>

 • *Optional:* `True`

---

**`filters_dict`**: `Union[Dict, str]`

A formatted dictionary, or serialized JSON string, of additional filters to apply to the query. This parameter can be used as an alternative to preset files, and is ignored when a preset is supplied. Invalid entries will raise an error. Syntax should follow the 'screener_template.ini' file.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`mktcap_min`**: `int`

Filter by market cap greater than this value.

 • *Optional:* `True`

---

**`mktcap_max`**: `int`

Filter by market cap less than this value.

 • *Optional:* `True`

---

**`price_min`**: `float`

Filter by price greater than this value.

 • *Optional:* `True`

---

**`price_max`**: `float`

Filter by price less than this value.

 • *Optional:* `True`

---

**`beta_min`**: `float`

Filter by a beta greater than this value.

 • *Optional:* `True`

---

**`beta_max`**: `float`

Filter by a beta less than this value.

 • *Optional:* `True`

---

**`volume_min`**: `int`

Filter by volume greater than this value.

 • *Optional:* `True`

---

**`volume_max`**: `int`

Filter by volume less than this value.

 • *Optional:* `True`

---

**`dividend_min`**: `float`

Filter by dividend amount greater than this value.

 • *Optional:* `True`

---

**`dividend_max`**: `float`

Filter by dividend amount less than this value.

 • *Optional:* `True`

---

**`is_etf`**: `bool`

If true, returns only ETFs.

 • *Default:* `False`

 • *Optional:* `True`

---

**`is_active`**: `bool`

If false, returns only inactive tickers.

 • *Default:* `True`

 • *Optional:* `True`

---

**`sector`**: `Literal['consumer_cyclical', 'energy', 'technology', 'industrials', 'financial_services', 'basic_materials', 'communication_services', 'consumer_defensive', 'healthcare', 'real_estate', 'utilities', 'industrial_goods', 'financial', 'services']`

Filter by sector.

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

 • *Optional:* `True`

---

**`country`**: `str`

Filter by country, as a two-letter country code.

 • *Optional:* `True`

---

**`exchange`**: `Literal['amex', 'ams', 'ase', 'asx', 'ath', 'bme', 'bru', 'bud', 'bue', 'cai', 'cnq', 'cph', 'dfm', 'doh', 'etf', 'euronext', 'hel', 'hkse', 'ice', 'iob', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'koe', 'ksc', 'kuw', 'lse', 'mex', 'mutual_fund', 'nasdaq', 'neo', 'nse', 'nyse', 'nze', 'osl', 'otc', 'pnk', 'pra', 'ris', 'sao', 'sau', 'set', 'sgo', 'shh', 'shz', 'six', 'sto', 'tai', 'tlv', 'tsx', 'two', 'vie', 'wse', 'xetra']`

Filter by exchange.

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results to return.

 • *Default:* `50000`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`exchange`**: `Union[Union[Literal['all', 'nasdaq', 'nyse', 'amex'], str], list[Union[Literal['all', 'nasdaq', 'nyse', 'amex'], str]]]`

Filter by exchange. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`exsubcategory`**: `Union[Union[Literal['all', 'ngs', 'ngm', 'ncm', 'adr'], str], list[Union[Literal['all', 'ngs', 'ngm', 'ncm', 'adr'], str]]]`

<details>
<summary mdxType="summary">Description</summary>

Filter by exchange subcategory.<br/>
    NGS - Nasdaq Global Select Market<br/>
    NGM - Nasdaq Global Market<br/>
    NCM - Nasdaq Capital Market<br/>
    ADR - American Depository Receipt Multiple items allowed for provider(s): nasdaq.

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`mktcap`**: `Union[Union[Literal['all', 'mega', 'large', 'mid', 'small', 'micro'], str], list[Union[Literal['all', 'mega', 'large', 'mid', 'small', 'micro'], str]]]`

<details>
<summary mdxType="summary">Description</summary>

Filter by market cap.<br/>
    Mega - > 200B<br/>
    Large - 10B - 200B<br/>
    Mid - 2B - 10B<br/>
    Small - 300M - 2B<br/>
    Micro - 50M - 300M Multiple items allowed for provider(s): nasdaq.

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`recommendation`**: `Union[Union[Literal['all', 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'], str], list[Union[Literal['all', 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'], str]]]`

Filter by consensus analyst action. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`sector`**: `Union[Union[Literal['all', 'energy', 'basic_materials', 'industrials', 'consumer_staples', 'consumer_discretionary', 'health_care', 'financial_services', 'technology', 'communication_services', 'utilities', 'real_estate'], str], list[Union[Literal['all', 'energy', 'basic_materials', 'industrials', 'consumer_staples', 'consumer_discretionary', 'health_care', 'financial_services', 'technology', 'communication_services', 'utilities', 'real_estate'], str]]]`

Filter by sector. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`region`**: `Union[Union[Literal['all', 'africa', 'asia', 'australia_and_south_pacific', 'caribbean', 'europe', 'middle_east', 'north_america', 'south_america'], str], list[Union[Literal['all', 'africa', 'asia', 'australia_and_south_pacific', 'caribbean', 'europe', 'middle_east', 'north_america', 'south_america'], str]]]`

Filter by region. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`country`**: `Union[Union[Literal['all', 'argentina', 'armenia', 'australia', 'austria', 'belgium', 'bermuda', 'brazil', 'canada', 'cayman_islands', 'chile', 'colombia', 'costa_rica', 'curacao', 'cyprus', 'denmark', 'finland', 'france', 'germany', 'greece', 'guernsey', 'hong_kong', 'india', 'indonesia', 'ireland', 'isle_of_man', 'israel', 'italy', 'japan', 'jersey', 'luxembourg', 'macau', 'mexico', 'monaco', 'netherlands', 'norway', 'panama', 'peru', 'philippines', 'puerto_rico', 'russia', 'singapore', 'south_africa', 'south_korea', 'spain', 'sweden', 'switzerland', 'taiwan', 'turkey', 'united_kingdom', 'united_states', 'usa'], str], list[Union[Literal['all', 'argentina', 'armenia', 'australia', 'austria', 'belgium', 'bermuda', 'brazil', 'canada', 'cayman_islands', 'chile', 'colombia', 'costa_rica', 'curacao', 'cyprus', 'denmark', 'finland', 'france', 'germany', 'greece', 'guernsey', 'hong_kong', 'india', 'indonesia', 'ireland', 'isle_of_man', 'israel', 'italy', 'japan', 'jersey', 'luxembourg', 'macau', 'mexico', 'monaco', 'netherlands', 'norway', 'panama', 'peru', 'philippines', 'puerto_rico', 'russia', 'singapore', 'south_africa', 'south_korea', 'spain', 'sweden', 'switzerland', 'taiwan', 'turkey', 'united_kingdom', 'united_states', 'usa'], str]]]`

Filter by country. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`country`**: `str`

Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `ar`
- `at`
- `au`
- `be`
- `br`
- `ca`
- `ch`
- `cl`
- `cn`
- `cz`
- `de`
- `dk`
- `ee`
- `eg`
- `es`
- `fi`
- `fr`
- `gb`
- `gr`
- `hk`
- `hu`
- `id`
- `ie`
- `il`
- `in`
- `is`
- `it`
- `jp`
- `kr`
- `kw`
- `lk`
- `lt`
- `lv`
- `mx`
- `my`
- `nl`
- `no`
- `nz`
- `pe`
- `ph`
- `pk`
- `pl`
- `pt`
- `qa`
- `ro`
- `ru`
- `sa`
- `se`
- `sg`
- `sr`
- `th`
- `tr`
- `tw`
- `us`
- `ve`
- `vn`
- `za`
</details>

 • *Default:* `us`

 • *Optional:* `True`

---

**`exchange`**: `Literal['ams', 'aqs', 'ase', 'asx', 'ath', 'ber', 'bru', 'bse', 'bts', 'bud', 'bue', 'bvb', 'bvc', 'ccs', 'cnq', 'cph', 'cxe', 'dfm', 'doh', 'dus', 'ebs', 'fka', 'fra', 'ger', 'ham', 'han', 'hel', 'hkg', 'ice', 'iob', 'ise', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'kuw', 'lis', 'lit', 'lse', 'mce', 'mex', 'mil', 'mun', 'ncm', 'neo', 'ngm', 'nms', 'nsi', 'nyq', 'nze', 'oem', 'oqb', 'oqx', 'osl', 'par', 'pnk', 'pra', 'ris', 'sau', 'ses', 'set', 'sgo', 'shh', 'shz', 'sto', 'stu', 'tai', 'tal', 'tlv', 'tor', 'two', 'van', 'vie', 'vse', 'wse']`

Filter by exchange.

 • *Optional:* `True`

---

**`sector`**: `Literal['basic_materials', 'communication_services', 'consumer_cyclical', 'consumer_defensive', 'energy', 'financial_services', 'healthcare', 'industrials', 'real_estate', 'technology', 'utilities']`

Filter by sector.

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

<details>
<summary mdxType="summary">Choices</summary>

- `advertising_agencies`
- `aerospace_defense`
- `agricultural_inputs`
- `airlines`
- `airports_air_services`
- `aluminum`
- `apparel_manufacturing`
- `apparel_retail`
- `asset_management`
- `auto_components`
- `auto_manufacturers`
- `auto_parts`
- `auto_truck_dealerships`
- `automobiles`
- `banks`
- `biotechnology`
- `broadcasting`
- `building_materials`
- `building_products`
- `building_products_equipment`
- `business_equipment_supplies`
- `capital_markets`
- `chemicals`
- `coking_coal`
- `commercial_services`
- `communication_equipment`
- `computer_hardware`
- `confectioners`
- `construction_engineering`
- `construction_materials`
- `consulting_services`
- `consumer_durables`
- `consumer_electronics`
- `consumer_services`
- `copper`
- `credit_services`
- `department_stores`
- `diagnostics_research`
- `discount_stores`
- `diversified_financials`
- `education_training_services`
- `electrical_equipment`
- `electrical_equipment_parts`
- `electronic_components`
- `electronic_gaming_multimedia`
- `electronics_computer_distribution`
- `energy_services`
- `engineering_construction`
- `entertainment`
- `farm_heavy_construction_machinery`
- `farm_products`
- `financial_conglomerates`
- `financial_data_stock_exchanges`
- `food_distribution`
- `footwear_accessories`
- `furnishings_fixtures_appliances`
- `gambling`
- `gold`
- `grocery_stores`
- `health_information_services`
- `healthcare_plans`
- `home_builders`
- `home_improvement_retail`
- `household_products`
- `household_personal_products`
- `industrial_conglomerates`
- `industrial_distribution`
- `information_technology_services`
- `infrastructure_operations`
- `insurance`
- `integrated_freight_logistics`
- `internet_content_information`
- `internet_retail`
- `leisure`
- `lodging`
- `lumber_wood_production`
- `luxury_goods`
- `machinery`
- `marine_shipping`
- `media`
- `medical_care_facilities`
- `medical_devices`
- `medical_distribution`
- `medical_instruments_supplies`
- `metal_fabrication`
- `mortgage_finance`
- `oil_gas_drilling`
- `oil_gas_e_p`
- `oil_gas_equipment_services`
- `oil_gas_integrated`
- `oil_gas_midstream`
- `oil_gas_producers`
- `oil_gas_refining_marketing`
- `other_industrial_metals_mining`
- `other_precious_metals_mining`
- `packaged_foods`
- `packaging_containers`
- `paper_forestry`
- `paper_paper_products`
- `personal_services`
- `pharmaceuticals`
- `pharmaceutical_retailers`
- `pollution_treatment_controls`
- `precious_metals`
- `publishing`
- `railroads`
- `real_estate`
- `recreational_vehicles`
- `refiners_pipelines`
- `rental_leasing_services`
- `residential_construction`
- `resorts_casinos`
- `restaurants`
- `retailing`
- `scientific_technical_instruments`
- `security_protection_services`
- `semiconductor_equipment_materials`
- `semiconductors`
- `shell_companies`
- `silver`
- `software_and_services`
- `solar`
- `specialty_business_services`
- `specialty_chemicals`
- `specialty_industrial_machinery`
- `specialty_retail`
- `staffing_employment_services`
- `steel`
- `technology_hardware`
- `telecom_services`
- `textiles_apparel`
- `textile_manufacturing`
- `thermal_coal`
- `tobacco`
- `tools_accessories`
- `traders_distributors`
- `transportation`
- `transportation_infrastructure`
- `travel_services`
- `trucking`
- `uranium`
- `utilities`
- `waste_management`
</details>

 • *Optional:* `True`

---

**`mktcap_min`**: `int`

Filter by market cap greater than this value. Default is 500M.

 • *Default:* `500000000`

 • *Optional:* `True`

---

**`mktcap_max`**: `int`

Filter by market cap less than this value.

 • *Optional:* `True`

---

**`price_min`**: `float`

Filter by price greater than this value. Default is, 5

 • *Default:* `5`

 • *Optional:* `True`

---

**`price_max`**: `float`

Filter by price less than this value.

 • *Optional:* `True`

---

**`volume_min`**: `int`

Filter by volume greater than this value. Default is, 10K

 • *Default:* `10000`

 • *Optional:* `True`

---

**`volume_max`**: `int`

Filter by volume less than this value.

 • *Optional:* `True`

---

**`beta_min`**: `float`

Filter by a beta greater than this value.

 • *Optional:* `True`

---

**`beta_max`**: `float`

Filter by a beta less than this value.

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results returned. Default is, 200. Set to, 0, for all results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`earnings_date`**: `str`

Earnings date, where 'a' and 'b' mean after and before market close, respectively.

**`country`**: `str`

Country of the company.

**`sector`**: `str`

Sector of the company.

**`industry`**: `str`

Industry of the company.

**`beta`**: `float`

Beta of the stock.

**`analyst_recommendation`**: `float`

Analyst's mean recommendation. (1=Buy 5=Sell).

**`market_cap`**: `float`

Market capitalization of the company.

**`price`**: `float`

Price of a share.

**`change_percent`**: `float`

Price change percentage.

**`change_from_open`**: `float`

Price change percentage, from the opening price.

**`gap`**: `float`

Price gap percentage, from the previous close.

**`volume`**: `Union[float, int]`

The trading volume.

**`volume_avg`**: `Union[float, int]`

3-month average daily volume.

**`volume_relative`**: `float`

Current volume relative to the average.

**`average_true_range`**: `float`

Average true range (14).

**`price_change_1w`**: `float`

One-week price return.

**`price_change_1m`**: `float`

One-month price return.

**`price_change_3m`**: `float`

Three-month price return.

**`price_change_6m`**: `float`

Six-month price return.

**`price_change_1y`**: `float`

One-year price return.

**`price_change_ytd`**: `float`

Year-to-date price return.

**`volatility_1w`**: `float`

One-week volatility.

**`volatility_1m`**: `float`

One-month volatility.

**`year_high_percent`**: `float`

Percent difference from current price to the 52-week high.

**`year_low_percent`**: `float`

Percent difference from current price to the 52-week low.

**`sma20_percent`**: `float`

Percent difference from current price to the 20-day simple moving average.

**`sma50_percent`**: `float`

Percent difference from current price to the 50-day simple moving average.

**`sma200_percent`**: `float`

Percent difference from current price to the 200-day simple moving average.

**`rsi`**: `float`

Relative strength index (14).

**`shares_outstanding`**: `Union[float, int]`

Number of shares outstanding.

**`shares_float`**: `Union[float, int]`

Number of shares available to trade.

**`short_interest`**: `float`

Percent of float reported as short.

**`short_ratio`**: `float`

Short interest ratio

**`insider_ownership`**: `float`

Insider ownership as a percentage.

**`insider_ownership_change`**: `float`

6-month change in insider ownership percentage.

**`institutional_ownership`**: `float`

Institutional ownership as a percentage.

**`institutional_ownership_change`**: `float`

3-month change in institutional ownership percentage.

**`price_to_earnings`**: `float`

Price to earnings ratio.

**`forward_pe`**: `float`

Forward price to earnings ratio.

**`peg_ratio`**: `float`

Price/Earnings-To-Growth (PEG) ratio.

**`price_to_sales`**: `float`

Price to sales ratio.

**`price_to_book`**: `float`

Price to book ratio.

**`price_to_cash`**: `float`

Price to cash ratio.

**`price_to_fcf`**: `float`

Price to free cash flow ratio.

**`eps_growth_past_1y`**: `float`

EPS growth for this year.

**`eps_growth_next_1y`**: `float`

EPS growth next year.

**`eps_growth_past_5y`**: `float`

EPS growth for the previous 5 years.

**`eps_growth_next_5y`**: `float`

EPS growth for the next 5 years.

**`sales_growth_past_5y`**: `float`

Sales growth for the previous 5 years.

**`dividend_yield`**: `float`

Annualized dividend yield.

**`return_on_assets`**: `float`

Return on assets.

**`return_on_equity`**: `float`

Return on equity.

**`return_on_investment`**: `float`

Return on investment.

**`current_ratio`**: `float`

Current ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`long_term_debt_to_equity`**: `float`

Long term debt to equity ratio.

**`debt_to_equity`**: `float`

Total debt to equity ratio.

**`gross_margin`**: `float`

Gross margin.

**`operating_margin`**: `float`

Operating margin.

**`profit_margin`**: `float`

Profit margin.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`market_cap`**: `int`

The market cap of ticker.

**`sector`**: `str`

The sector the ticker belongs to.

**`industry`**: `str`

The industry ticker belongs to.

**`beta`**: `float`

The beta of the ETF.

**`price`**: `float`

The current price.

**`last_annual_dividend`**: `float`

The last annual amount dividend paid.

**`volume`**: `int`

The current trading volume.

**`exchange`**: `str`

The exchange code the asset trades on.

**`exchange_name`**: `str`

The full name of the primary exchange.

**`country`**: `str`

The two-letter country abbreviation where the head office is located.

**`is_etf`**: `Literal[True, False]`

Whether the ticker is an ETF.

**`actively_trading`**: `Literal[True, False]`

Whether the ETF is actively trading.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`last_price`**: `float`

Last sale price.

**`change`**: `float`

1-day change in price.

**`change_percent`**: `float`

1-day percent change in price.

**`market_cap`**: `int`

Market cap.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity Search"
description: "Search for stock symbol, CIK, LEI, or company name"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquitySearch` | `EquitySearchQueryParams` | `EquitySearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_search import (
EquitySearchData,
EquitySearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use the cache or not.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`active`**: `bool`

When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded.

 • *Default:* `True`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10000`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`is_etf`**: `bool`

If True, returns ETFs.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use the cache or not.

 • *Default:* `True`

 • *Optional:* `True`

---

**`is_fund`**: `bool`

Whether to direct the search to the list of mutual funds and ETFs.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. The list of companies is cached for two days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether the query is a symbol. Defaults to False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`dpm_name`**: `str`

Name of the primary market maker.

**`post_station`**: `str`

Post and station location on the CBOE trading floor.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`



**`lei`**: `str`

The Legal Entity Identifier (LEI) of the company.

**`intrinio_id`**: `str`

The Intrinio ID of the company.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`nasdaq_traded`**: `str`

Is Nasdaq traded?

**`exchange`**: `str`

Primary Exchange

**`market_category`**: `str`

Market Category

**`etf`**: `str`

Is ETF?

**`round_lot_size`**: `float`

Round Lot Size

**`test_issue`**: `str`

Is test Issue?

**`financial_status`**: `str`

Financial Status

**`cqs_symbol`**: `str`

CQS Symbol

**`nasdaq_symbol`**: `str`

NASDAQ Symbol

**`next_shares`**: `str`

Is NextShares?

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`exchange`**: `str`

Exchange where the security is listed.

**`security_type`**: `Literal['stock', 'option', 'etf', 'index', 'mutual_fund']`

Type of security.

</TabItem>
</Tabs>



---

---
title: "Equity Short Interest"
description: "Get reported short volume and days to cover data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityShortInterest` | `EquityShortInterestQueryParams` | `EquityShortInterestData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityShortInterestData,
EquityShortInterestQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='finra' label='finra'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`settlement_date`**: `date`

The mid-month short interest report is based on short positions held by members on the settlement date of the 15th of each month. If the 15th falls on a weekend or another non-settlement date, the designated settlement date will be the previous business day on which transactions settled. The end-of-month short interest report is based on short positions held on the last business day of the month on which transactions settle. Once the short position reports are received, the short interest data is compiled for each equity security and provided for publication on the 7th business day after the reporting settlement date.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`issue_name`**: `str`

Unique identifier of the issue.

**`market_class`**: `str`

Primary listing market.

**`current_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the current cycle’s designated settlement date.

**`previous_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the previous cycle’s designated settlement date.

**`avg_daily_volume`**: `float`

Total Volume or Adjusted Volume in case of splits / Total trade days between (previous settlement date + 1) to (current settlement date). The NULL values are translated as zero.

**`days_to_cover`**: `float`

The number of days of average share volume it would require to buy all of the shares that were sold short during the reporting cycle. Formula: Short Interest / Average Daily Share Volume, Rounded to Hundredths. 1.00 will be displayed for any values equal or less than 1 (i.e., Average Daily Share is equal to or greater than Short Interest). N/A will be displayed If the days to cover is Zero (i.e., Average Daily Share Volume is Zero).

**`change`**: `float`

Change in Shares Short from Previous Cycle: Difference in short interest between the current cycle and the previous cycle.

**`change_pct`**: `float`

Change in Shares Short from Previous Cycle as a percent.

</TabItem>

<TabItem value='finra' label='finra'>

**`settlement_date`**: `date`

The mid-month short interest report is based on short positions held by members on the settlement date of the 15th of each month. If the 15th falls on a weekend or another non-settlement date, the designated settlement date will be the previous business day on which transactions settled. The end-of-month short interest report is based on short positions held on the last business day of the month on which transactions settle. Once the short position reports are received, the short interest data is compiled for each equity security and provided for publication on the 7th business day after the reporting settlement date.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`issue_name`**: `str`

Unique identifier of the issue.

**`market_class`**: `str`

Primary listing market.

**`current_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the current cycle’s designated settlement date.

**`previous_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the previous cycle’s designated settlement date.

**`avg_daily_volume`**: `float`

Total Volume or Adjusted Volume in case of splits / Total trade days between (previous settlement date + 1) to (current settlement date). The NULL values are translated as zero.

**`days_to_cover`**: `float`

The number of days of average share volume it would require to buy all of the shares that were sold short during the reporting cycle. Formula: Short Interest / Average Daily Share Volume, Rounded to Hundredths. 1.00 will be displayed for any values equal or less than 1 (i.e., Average Daily Share is equal to or greater than Short Interest). N/A will be displayed If the days to cover is Zero (i.e., Average Daily Share Volume is Zero).

**`change`**: `float`

Change in Shares Short from Previous Cycle: Difference in short interest between the current cycle and the previous cycle.

**`change_pct`**: `float`

Change in Shares Short from Previous Cycle as a percent.

</TabItem>
</Tabs>



---

---
title: "Equity Undervalued Growth"
description: "Get potentially undervalued growth stocks"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityUndervaluedGrowth` | `EquityUndervaluedGrowthQueryParams` | `EquityUndervaluedGrowthData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityUndervaluedGrowthData,
EquityUndervaluedGrowthQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity Undervalued Large Caps"
description: "Get potentially undervalued large cap stocks"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityUndervaluedLargeCaps` | `EquityUndervaluedLargeCapsQueryParams` | `EquityUndervaluedLargeCapsData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EquityUndervaluedLargeCapsData,
EquityUndervaluedLargeCapsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "Equity Valuation Multiples"
description: "Get equity valuation multiples for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EquityValuationMultiples` | `EquityValuationMultiplesQueryParams` | `EquityValuationMultiplesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.equity_valuation_multiples import (
EquityValuationMultiplesData,
EquityValuationMultiplesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`revenue_per_share_ttm`**: `float`

Revenue per share calculated as trailing twelve months.

**`net_income_per_share_ttm`**: `float`

Net income per share calculated as trailing twelve months.

**`operating_cash_flow_per_share_ttm`**: `float`

Operating cash flow per share calculated as trailing twelve months.

**`free_cash_flow_per_share_ttm`**: `float`

Free cash flow per share calculated as trailing twelve months.

**`cash_per_share_ttm`**: `float`

Cash per share calculated as trailing twelve months.

**`book_value_per_share_ttm`**: `float`

Book value per share calculated as trailing twelve months.

**`tangible_book_value_per_share_ttm`**: `float`

Tangible book value per share calculated as trailing twelve months.

**`shareholders_equity_per_share_ttm`**: `float`

Shareholders equity per share calculated as trailing twelve months.

**`interest_debt_per_share_ttm`**: `float`

Interest debt per share calculated as trailing twelve months.

**`market_cap_ttm`**: `float`

Market capitalization calculated as trailing twelve months.

**`enterprise_value_ttm`**: `float`

Enterprise value calculated as trailing twelve months.

**`pe_ratio_ttm`**: `float`

Price-to-earnings ratio (P/E ratio) calculated as trailing twelve months.

**`price_to_sales_ratio_ttm`**: `float`

Price-to-sales ratio calculated as trailing twelve months.

**`pocf_ratio_ttm`**: `float`

Price-to-operating cash flow ratio calculated as trailing twelve months.

**`pfcf_ratio_ttm`**: `float`

Price-to-free cash flow ratio calculated as trailing twelve months.

**`pb_ratio_ttm`**: `float`

Price-to-book ratio calculated as trailing twelve months.

**`ptb_ratio_ttm`**: `float`

Price-to-tangible book ratio calculated as trailing twelve months.

**`ev_to_sales_ttm`**: `float`

Enterprise value-to-sales ratio calculated as trailing twelve months.

**`enterprise_value_over_ebitda_ttm`**: `float`

Enterprise value-to-EBITDA ratio calculated as trailing twelve months.

**`ev_to_operating_cash_flow_ttm`**: `float`

Enterprise value-to-operating cash flow ratio calculated as trailing twelve months.

**`ev_to_free_cash_flow_ttm`**: `float`

Enterprise value-to-free cash flow ratio calculated as trailing twelve months.

**`earnings_yield_ttm`**: `float`

Earnings yield calculated as trailing twelve months.

**`free_cash_flow_yield_ttm`**: `float`

Free cash flow yield calculated as trailing twelve months.

**`debt_to_equity_ttm`**: `float`

Debt-to-equity ratio calculated as trailing twelve months.

**`debt_to_assets_ttm`**: `float`

Debt-to-assets ratio calculated as trailing twelve months.

**`net_debt_to_ebitda_ttm`**: `float`

Net debt-to-EBITDA ratio calculated as trailing twelve months.

**`current_ratio_ttm`**: `float`

Current ratio calculated as trailing twelve months.

**`interest_coverage_ttm`**: `float`

Interest coverage calculated as trailing twelve months.

**`income_quality_ttm`**: `float`

Income quality calculated as trailing twelve months.

**`dividend_yield_ttm`**: `float`

Dividend yield calculated as trailing twelve months.

**`dividend_yield_percentage_ttm`**: `float`

Dividend yield percentage calculated as trailing twelve months.

**`dividend_to_market_cap_ttm`**: `float`

Dividend to market capitalization ratio calculated as trailing twelve months.

**`dividend_per_share_ttm`**: `float`

Dividend per share calculated as trailing twelve months.

**`payout_ratio_ttm`**: `float`

Payout ratio calculated as trailing twelve months.

**`sales_general_and_administrative_to_revenue_ttm`**: `float`

Sales general and administrative expenses-to-revenue ratio calculated as trailing twelve months.

**`research_and_development_to_revenue_ttm`**: `float`

Research and development expenses-to-revenue ratio calculated as trailing twelve months.

**`intangibles_to_total_assets_ttm`**: `float`

Intangibles-to-total assets ratio calculated as trailing twelve months.

**`capex_to_operating_cash_flow_ttm`**: `float`

Capital expenditures-to-operating cash flow ratio calculated as trailing twelve months.

**`capex_to_revenue_ttm`**: `float`

Capital expenditures-to-revenue ratio calculated as trailing twelve months.

**`capex_to_depreciation_ttm`**: `float`

Capital expenditures-to-depreciation ratio calculated as trailing twelve months.

**`stock_based_compensation_to_revenue_ttm`**: `float`

Stock-based compensation-to-revenue ratio calculated as trailing twelve months.

**`graham_number_ttm`**: `float`

Graham number calculated as trailing twelve months.

**`roic_ttm`**: `float`

Return on invested capital calculated as trailing twelve months.

**`return_on_tangible_assets_ttm`**: `float`

Return on tangible assets calculated as trailing twelve months.

**`graham_net_net_ttm`**: `float`

Graham net-net working capital calculated as trailing twelve months.

**`working_capital_ttm`**: `float`

Working capital calculated as trailing twelve months.

**`tangible_asset_value_ttm`**: `float`

Tangible asset value calculated as trailing twelve months.

**`net_current_asset_value_ttm`**: `float`

Net current asset value calculated as trailing twelve months.

**`invested_capital_ttm`**: `float`

Invested capital calculated as trailing twelve months.

**`average_receivables_ttm`**: `float`

Average receivables calculated as trailing twelve months.

**`average_payables_ttm`**: `float`

Average payables calculated as trailing twelve months.

**`average_inventory_ttm`**: `float`

Average inventory calculated as trailing twelve months.

**`days_sales_outstanding_ttm`**: `float`

Days sales outstanding calculated as trailing twelve months.

**`days_payables_outstanding_ttm`**: `float`

Days payables outstanding calculated as trailing twelve months.

**`days_of_inventory_on_hand_ttm`**: `float`

Days of inventory on hand calculated as trailing twelve months.

**`receivables_turnover_ttm`**: `float`

Receivables turnover calculated as trailing twelve months.

**`payables_turnover_ttm`**: `float`

Payables turnover calculated as trailing twelve months.

**`inventory_turnover_ttm`**: `float`

Inventory turnover calculated as trailing twelve months.

**`roe_ttm`**: `float`

Return on equity calculated as trailing twelve months.

**`capex_per_share_ttm`**: `float`

Capital expenditures per share calculated as trailing twelve months.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`revenue_per_share_ttm`**: `float`

Revenue per share calculated as trailing twelve months.

**`net_income_per_share_ttm`**: `float`

Net income per share calculated as trailing twelve months.

**`operating_cash_flow_per_share_ttm`**: `float`

Operating cash flow per share calculated as trailing twelve months.

**`free_cash_flow_per_share_ttm`**: `float`

Free cash flow per share calculated as trailing twelve months.

**`cash_per_share_ttm`**: `float`

Cash per share calculated as trailing twelve months.

**`book_value_per_share_ttm`**: `float`

Book value per share calculated as trailing twelve months.

**`tangible_book_value_per_share_ttm`**: `float`

Tangible book value per share calculated as trailing twelve months.

**`shareholders_equity_per_share_ttm`**: `float`

Shareholders equity per share calculated as trailing twelve months.

**`interest_debt_per_share_ttm`**: `float`

Interest debt per share calculated as trailing twelve months.

**`market_cap_ttm`**: `float`

Market capitalization calculated as trailing twelve months.

**`enterprise_value_ttm`**: `float`

Enterprise value calculated as trailing twelve months.

**`pe_ratio_ttm`**: `float`

Price-to-earnings ratio (P/E ratio) calculated as trailing twelve months.

**`price_to_sales_ratio_ttm`**: `float`

Price-to-sales ratio calculated as trailing twelve months.

**`pocf_ratio_ttm`**: `float`

Price-to-operating cash flow ratio calculated as trailing twelve months.

**`pfcf_ratio_ttm`**: `float`

Price-to-free cash flow ratio calculated as trailing twelve months.

**`pb_ratio_ttm`**: `float`

Price-to-book ratio calculated as trailing twelve months.

**`ptb_ratio_ttm`**: `float`

Price-to-tangible book ratio calculated as trailing twelve months.

**`ev_to_sales_ttm`**: `float`

Enterprise value-to-sales ratio calculated as trailing twelve months.

**`enterprise_value_over_ebitda_ttm`**: `float`

Enterprise value-to-EBITDA ratio calculated as trailing twelve months.

**`ev_to_operating_cash_flow_ttm`**: `float`

Enterprise value-to-operating cash flow ratio calculated as trailing twelve months.

**`ev_to_free_cash_flow_ttm`**: `float`

Enterprise value-to-free cash flow ratio calculated as trailing twelve months.

**`earnings_yield_ttm`**: `float`

Earnings yield calculated as trailing twelve months.

**`free_cash_flow_yield_ttm`**: `float`

Free cash flow yield calculated as trailing twelve months.

**`debt_to_equity_ttm`**: `float`

Debt-to-equity ratio calculated as trailing twelve months.

**`debt_to_assets_ttm`**: `float`

Debt-to-assets ratio calculated as trailing twelve months.

**`net_debt_to_ebitda_ttm`**: `float`

Net debt-to-EBITDA ratio calculated as trailing twelve months.

**`current_ratio_ttm`**: `float`

Current ratio calculated as trailing twelve months.

**`interest_coverage_ttm`**: `float`

Interest coverage calculated as trailing twelve months.

**`income_quality_ttm`**: `float`

Income quality calculated as trailing twelve months.

**`dividend_yield_ttm`**: `float`

Dividend yield calculated as trailing twelve months.

**`dividend_yield_percentage_ttm`**: `float`

Dividend yield percentage calculated as trailing twelve months.

**`dividend_to_market_cap_ttm`**: `float`

Dividend to market capitalization ratio calculated as trailing twelve months.

**`dividend_per_share_ttm`**: `float`

Dividend per share calculated as trailing twelve months.

**`payout_ratio_ttm`**: `float`

Payout ratio calculated as trailing twelve months.

**`sales_general_and_administrative_to_revenue_ttm`**: `float`

Sales general and administrative expenses-to-revenue ratio calculated as trailing twelve months.

**`research_and_development_to_revenue_ttm`**: `float`

Research and development expenses-to-revenue ratio calculated as trailing twelve months.

**`intangibles_to_total_assets_ttm`**: `float`

Intangibles-to-total assets ratio calculated as trailing twelve months.

**`capex_to_operating_cash_flow_ttm`**: `float`

Capital expenditures-to-operating cash flow ratio calculated as trailing twelve months.

**`capex_to_revenue_ttm`**: `float`

Capital expenditures-to-revenue ratio calculated as trailing twelve months.

**`capex_to_depreciation_ttm`**: `float`

Capital expenditures-to-depreciation ratio calculated as trailing twelve months.

**`stock_based_compensation_to_revenue_ttm`**: `float`

Stock-based compensation-to-revenue ratio calculated as trailing twelve months.

**`graham_number_ttm`**: `float`

Graham number calculated as trailing twelve months.

**`roic_ttm`**: `float`

Return on invested capital calculated as trailing twelve months.

**`return_on_tangible_assets_ttm`**: `float`

Return on tangible assets calculated as trailing twelve months.

**`graham_net_net_ttm`**: `float`

Graham net-net working capital calculated as trailing twelve months.

**`working_capital_ttm`**: `float`

Working capital calculated as trailing twelve months.

**`tangible_asset_value_ttm`**: `float`

Tangible asset value calculated as trailing twelve months.

**`net_current_asset_value_ttm`**: `float`

Net current asset value calculated as trailing twelve months.

**`invested_capital_ttm`**: `float`

Invested capital calculated as trailing twelve months.

**`average_receivables_ttm`**: `float`

Average receivables calculated as trailing twelve months.

**`average_payables_ttm`**: `float`

Average payables calculated as trailing twelve months.

**`average_inventory_ttm`**: `float`

Average inventory calculated as trailing twelve months.

**`days_sales_outstanding_ttm`**: `float`

Days sales outstanding calculated as trailing twelve months.

**`days_payables_outstanding_ttm`**: `float`

Days payables outstanding calculated as trailing twelve months.

**`days_of_inventory_on_hand_ttm`**: `float`

Days of inventory on hand calculated as trailing twelve months.

**`receivables_turnover_ttm`**: `float`

Receivables turnover calculated as trailing twelve months.

**`payables_turnover_ttm`**: `float`

Payables turnover calculated as trailing twelve months.

**`inventory_turnover_ttm`**: `float`

Inventory turnover calculated as trailing twelve months.

**`roe_ttm`**: `float`

Return on equity calculated as trailing twelve months.

**`capex_per_share_ttm`**: `float`

Capital expenditures per share calculated as trailing twelve months.

</TabItem>
</Tabs>



---

---
title: "Etf Countries"
description: "ETF Country weighting"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfCountries` | `EtfCountriesQueryParams` | `EtfCountriesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_countries import (
EtfCountriesData,
EtfCountriesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>
</Tabs>



---

---
title: "Etf Equity Exposure"
description: "Get the exposure to ETFs for a specific stock"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfEquityExposure` | `EtfEquityExposureQueryParams` | `EtfEquityExposureData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_equity_exposure import (
EtfEquityExposureData,
EtfEquityExposureQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (Stock) Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (Stock) Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`equity_symbol`**: `str`

The symbol of the equity requested.

**`etf_symbol`**: `str`

The symbol of the ETF with exposure to the requested equity.

**`shares`**: `float`

The number of shares held in the ETF.

**`weight`**: `float`

The weight of the equity in the ETF, as a normalized percent.

**`market_value`**: `Union[float, int]`

The market value of the equity position in the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`equity_symbol`**: `str`

The symbol of the equity requested.

**`etf_symbol`**: `str`

The symbol of the ETF with exposure to the requested equity.

**`shares`**: `float`

The number of shares held in the ETF.

**`weight`**: `float`

The weight of the equity in the ETF, as a normalized percent.

**`market_value`**: `Union[float, int]`

The market value of the equity position in the ETF.

</TabItem>
</Tabs>



---

---
title: "Etf Historical"
description: "ETF Historical Market Price"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfHistorical` | `EtfHistoricalQueryParams` | `EtfHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_historical import (
EtfHistoricalData,
EtfHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '60m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. 'splits_only' is not supported for intraday data.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '10m', '15m', '30m', '60m', '1h', '1d', '1W', '1M', '1Q', '1Y']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`start_time`**: `datetime.time`

Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`end_time`**: `datetime.time`

Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`timezone`**: `str`

Timezone of the data, in the IANA format (Continent/City).

 • *Default:* `America/New_York`

 • *Optional:* `True`

---

**`source`**: `Literal['realtime', 'delayed', 'nasdaq_basic']`

The source of the data.

 • *Default:* `realtime`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'unadjusted']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '1W', '1M', '1Y'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '2m', '5m', '15m', '30m', '60m', '1h', '1d', '1W', '1M'], str, int]`

Time interval of the data to return. Or, any integer (entered as a string) representing the number of minutes. Default is daily data. There is no extended hours data, and intraday data is limited to after April 12 2022.

 • *Default:* `day`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. Only valid for daily data.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_actions`**: `bool`

Include dividends and stock splits in results.

 • *Default:* `True`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `Annotated[float, Gt(gt=0)]`

The adjusted close price.

**`dividend`**: `Annotated[float, Ge(ge=0)]`

Dividend amount, if a dividend was paid.

**`split_ratio`**: `Annotated[float, Ge(ge=0)]`

Split coefficient, if a split occurred.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`calls_volume`**: `int`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `int`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `int`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`unadjusted_volume`**: `float`

Unadjusted volume of the symbol.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`average`**: `float`

Average trade price of an individual equity during the interval.

**`change`**: `float`

Change in the price of the symbol from the previous day.

**`change_percent`**: `float`

Percent change in the price of the symbol from the previous day.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`fifty_two_week_high`**: `float`

52 week high price for the symbol.

**`fifty_two_week_low`**: `float`

52 week low price for the symbol.

**`factor`**: `float`

factor by which to multiply equity prices before this date, in order to calculate historically-adjusted equity prices.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

**`close_time`**: `datetime`

The timestamp that represents the end of the interval span.

**`interval`**: `str`

The data time frequency.

**`intra_period`**: `bool`

If true, the equity price represents an unfinished period (be it day, week, quarter, month, or year), meaning that the close price is the latest price available, not the official close price for the period

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume weighted average price for the day.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price, as a normalized percentage.

**`transactions`**: `int`

Total number of transactions recorded.

**`transactions_value`**: `float`

Nominal value of recorded transactions.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`last_price`**: `float`

The last price of the equity.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount (split-adjusted), if a dividend was paid.

</TabItem>
</Tabs>



---

---
title: "Etf Holdings"
description: "Get the holdings for an individual ETF"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfHoldings` | `EtfHoldingsQueryParams` | `EtfHoldingsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_holdings import (
EtfHoldingsData,
EtfHoldingsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], str]`

A specific date to get data for. Entering a date will attempt to return the NPORT-P filing for the entered date. This needs to be _exactly_ the date of the filing. Use the holdings_date command/endpoint to find available filing dates for the ETF.

 • *Optional:* `True`

---

**`cik`**: `str`

The CIK of the filing entity. Overrides symbol.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], str]`

A specific date to get data for.  The date represents the period ending. The date entered will return the closest filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

**`lei`**: `str`

The LEI of the holding.

**`title`**: `str`

The title of the holding.

**`cusip`**: `str`

The CUSIP of the holding.

**`isin`**: `str`

The ISIN of the holding.

**`balance`**: `int`

The balance of the holding, in shares or units.

**`units`**: `Union[float, str]`

The type of units.

**`currency`**: `str`

The currency of the holding.

**`value`**: `float`

The value of the holding, in dollars.

**`weight`**: `float`

The weight of the holding, as a normalized percent.

**`payoff_profile`**: `str`

The payoff profile of the holding.

**`asset_category`**: `str`

The asset category of the holding.

**`issuer_category`**: `str`

The issuer category of the holding.

**`country`**: `str`

The country of the holding.

**`is_restricted`**: `str`

Whether the holding is restricted.

**`fair_value_level`**: `int`

The fair value level of the holding.

**`is_cash_collateral`**: `str`

Whether the holding is cash collateral.

**`is_non_cash_collateral`**: `str`

Whether the holding is non-cash collateral.

**`is_loan_by_fund`**: `str`

Whether the holding is loan by fund.

**`cik`**: `str`

The CIK of the filing.

**`acceptance_datetime`**: `str`

The acceptance datetime of the filing.

**`updated`**: `Union[date, datetime]`

The date the data was updated.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

The common name for the holding.

**`security_type`**: `str`

The type of instrument for this holding. Examples(Bond='BOND', Equity='EQUI')

**`isin`**: `str`

The International Securities Identification Number.

**`ric`**: `str`

The Reuters Instrument Code.

**`sedol`**: `str`

The Stock Exchange Daily Official list.

**`share_class_figi`**: `str`

The OpenFIGI symbol for the holding.

**`country`**: `str`

The country or region of the holding.

**`maturity_date`**: `date`

The maturity date for the debt security, if available.

**`contract_expiry_date`**: `date`

Expiry date for the futures contract held, if available.

**`coupon`**: `float`

The coupon rate of the debt security, if available.

**`balance`**: `Union[float, int]`

The number of units of the security held, if available.

**`unit`**: `str`

The units of the 'balance' field.

**`units_per_share`**: `float`

Number of units of the security held per share outstanding of the ETF, if available.

**`face_value`**: `float`

The face value of the debt security, if available.

**`derivatives_value`**: `float`

The notional value of derivatives contracts held.

**`value`**: `float`

The market value of the holding, on the 'as_of' date.

**`weight`**: `float`

The weight of the holding, as a normalized percent.

**`updated`**: `date`

The 'as_of' date for the holding.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

**`lei`**: `str`

The LEI of the holding.

**`cusip`**: `str`

The CUSIP of the holding.

**`isin`**: `str`

The ISIN of the holding.

**`other_id`**: `str`

Internal identifier for the holding.

**`balance`**: `float`

The balance of the holding.

**`weight`**: `float`

The weight of the holding in ETF in %.

**`value`**: `float`

The value of the holding in USD.

**`payoff_profile`**: `str`

The payoff profile of the holding.

**`units`**: `Union[str, float]`

The units of the holding.

**`currency`**: `str`

The currency of the holding.

**`asset_category`**: `str`

The asset category of the holding.

**`issuer_category`**: `str`

The issuer category of the holding.

**`country`**: `str`

The country of the holding.

**`is_restricted`**: `str`

Whether the holding is restricted.

**`fair_value_level`**: `int`

The fair value level of the holding.

**`is_cash_collateral`**: `str`

Whether the holding is cash collateral.

**`is_non_cash_collateral`**: `str`

Whether the holding is non-cash collateral.

**`is_loan_by_fund`**: `str`

Whether the holding is loan by fund.

**`loan_value`**: `float`

The loan value of the holding.

**`issuer_conditional`**: `str`

The issuer conditions of the holding.

**`asset_conditional`**: `str`

The asset conditions of the holding.

**`maturity_date`**: `date`

The maturity date of the debt security.

**`coupon_kind`**: `str`

The type of coupon for the debt security.

**`rate_type`**: `str`

The type of rate for the debt security, floating or fixed.

**`annualized_return`**: `float`

The annualized return on the debt security.

**`is_default`**: `str`

If the debt security is defaulted.

**`in_arrears`**: `str`

If the debt security is in arrears.

**`is_paid_kind`**: `str`

If the debt security payments are paid in kind.

**`derivative_category`**: `str`

The derivative category of the holding.

**`counterparty`**: `str`

The counterparty of the derivative.

**`underlying_name`**: `str`

The name of the underlying asset associated with the derivative.

**`option_type`**: `str`

The type of option.

**`derivative_payoff`**: `str`

The payoff profile of the derivative.

**`expiry_date`**: `date`

The expiry or termination date of the derivative.

**`exercise_price`**: `float`

The exercise price of the option.

**`exercise_currency`**: `str`

The currency of the option exercise price.

**`shares_per_contract`**: `float`

The number of shares per contract.

**`delta`**: `Union[str, float]`

The delta of the option.

**`rate_type_rec`**: `str`

The type of rate for receivable portion of the swap.

**`receive_currency`**: `str`

The receive currency of the swap.

**`upfront_receive`**: `float`

The upfront amount received of the swap.

**`floating_rate_index_rec`**: `str`

The floating rate index for receivable portion of the swap.

**`floating_rate_spread_rec`**: `float`

The floating rate spread for reveivable portion of the swap.

**`rate_tenor_rec`**: `str`

The rate tenor for receivable portion of the swap.

**`rate_tenor_unit_rec`**: `Union[str, int]`

The rate tenor unit for receivable portion of the swap.

**`reset_date_rec`**: `str`

The reset date for receivable portion of the swap.

**`reset_date_unit_rec`**: `Union[str, int]`

The reset date unit for receivable portion of the swap.

**`rate_type_pmnt`**: `str`

The type of rate for payment portion of the swap.

**`payment_currency`**: `str`

The payment currency of the swap.

**`upfront_payment`**: `float`

The upfront amount received of the swap.

**`floating_rate_index_pmnt`**: `str`

The floating rate index for payment portion of the swap.

**`floating_rate_spread_pmnt`**: `float`

The floating rate spread for payment portion of the swap.

**`rate_tenor_pmnt`**: `str`

The rate tenor for payment portion of the swap.

**`rate_tenor_unit_pmnt`**: `Union[str, int]`

The rate tenor unit for payment portion of the swap.

**`reset_date_pmnt`**: `str`

The reset date for payment portion of the swap.

**`reset_date_unit_pmnt`**: `Union[str, int]`

The reset date unit for payment portion of the swap.

**`repo_type`**: `str`

The type of repo.

**`is_cleared`**: `str`

If the repo is cleared.

**`is_tri_party`**: `str`

If the repo is tri party.

**`principal_amount`**: `float`

The principal amount of the repo.

**`principal_currency`**: `str`

The currency of the principal amount.

**`collateral_type`**: `str`

The collateral type of the repo.

**`collateral_amount`**: `float`

The collateral amount of the repo.

**`collateral_currency`**: `str`

The currency of the collateral amount.

**`exchange_currency`**: `str`

The currency of the exchange rate.

**`exchange_rate`**: `float`

The exchange rate.

**`currency_sold`**: `str`

The currency sold in a Forward Derivative.

**`currency_amount_sold`**: `float`

The amount of currency sold in a Forward Derivative.

**`currency_bought`**: `str`

The currency bought in a Forward Derivative.

**`currency_amount_bought`**: `float`

The amount of currency bought in a Forward Derivative.

**`notional_amount`**: `float`

The notional amount of the derivative.

**`notional_currency`**: `str`

The currency of the derivative's notional amount.

**`unrealized_gain`**: `float`

The unrealized gain or loss on the derivative.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

The ticker symbol of the asset.

**`name`**: `str`

The name of the asset.

**`weight`**: `float`

The weight of the asset in the portfolio, as a normalized percentage.

**`shares`**: `Union[str, int]`

The value of the assets under management.

**`market_value`**: `Union[str, float]`

The market value of the holding.

**`currency`**: `str`

The currency of the holding.

**`share_percentage`**: `float`

The share percentage of the holding, as a normalized percentage.

**`share_change`**: `Union[str, float]`

The change in shares of the holding.

**`country`**: `str`

The country of the holding.

**`exchange`**: `str`

The exchange code of the holding.

**`type_id`**: `str`

The holding type ID of the asset.

**`fund_id`**: `str`

The fund ID of the asset.

</TabItem>
</Tabs>



---

---
title: "Etf Holdings Date"
description: "Use this function to get the holdings dates, if available"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfHoldingsDate` | `EtfHoldingsDateQueryParams` | `EtfHoldingsDateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_holdings_date import (
EtfHoldingsDateData,
EtfHoldingsDateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`cik`**: `str`

The CIK of the filing entity. Overrides symbol.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>
</Tabs>



---

---
title: "Etf Info"
description: "ETF Information Overview"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfInfo` | `EtfInfoQueryParams` | `EtfInfoData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_info import (
EtfInfoData,
EtfInfoQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`issuer`**: `str`

Company of the ETF.

**`cusip`**: `str`

CUSIP of the ETF.

**`isin`**: `str`

ISIN of the ETF.

**`domicile`**: `str`

Domicile of the ETF.

**`asset_class`**: `str`

Asset class of the ETF.

**`aum`**: `float`

Assets under management.

**`nav`**: `float`

Net asset value of the ETF.

**`nav_currency`**: `str`

Currency of the ETF's net asset value.

**`expense_ratio`**: `float`

The expense ratio, as a normalized percent.

**`holdings_count`**: `int`

Number of holdings.

**`avg_volume`**: `float`

Average daily trading volume.

**`website`**: `str`

Website of the issuer.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`fund_listing_date`**: `date`

The date on which the Exchange Traded Product (ETP) or share class of the ETP is listed on a specific exchange.

**`data_change_date`**: `date`

The last date on which there was a change in a classifications data field for this ETF.

**`etn_maturity_date`**: `date`

If the product is an ETN, this field identifies the maturity date for the ETN.

**`is_listed`**: `bool`

If true, the ETF is still listed on an exchange.

**`close_date`**: `date`

The date on which the ETF was de-listed if it is no longer listed.

**`exchange`**: `str`

The exchange Market Identifier Code (MIC).

**`isin`**: `str`

International Securities Identification Number (ISIN).

**`ric`**: `str`

Reuters Instrument Code (RIC).

**`sedol`**: `str`

Stock Exchange Daily Official list (SEDOL).

**`figi_symbol`**: `str`

Financial Instrument Global Identifier (FIGI) symbol.

**`share_class_figi`**: `str`

Financial Instrument Global Identifier (FIGI).

**`firstbridge_id`**: `str`

The FirstBridge unique identifier for the Exchange Traded Fund (ETF).

**`firstbridge_parent_id`**: `str`

The FirstBridge unique identifier for the parent Exchange Traded Fund (ETF), if applicable.

**`intrinio_id`**: `str`

Intrinio unique identifier for the security.

**`intraday_nav_symbol`**: `str`

Intraday Net Asset Value (NAV) symbol.

**`primary_symbol`**: `str`

The primary ticker field is used for Exchange Traded Products (ETPs) that have multiple listings and share classes. If an ETP has multiple listings or share classes, the same primary ticker is assigned to all the listings and share classes.

**`etp_structure_type`**: `str`

Classifies Exchange Traded Products (ETPs) into very broad categories based on its legal structure.

**`legal_structure`**: `str`

Legal structure of the fund.

**`issuer`**: `str`

Issuer of the ETF.

**`etn_issuing_bank`**: `str`

If the product is an Exchange Traded Note (ETN), this field identifies the issuing bank.

**`fund_family`**: `str`

This field identifies the fund family to which the ETF belongs, as categorized by the ETF Sponsor.

**`investment_style`**: `str`

Investment style of the ETF.

**`derivatives_based`**: `str`

This field is populated if the ETF holds either listed or over-the-counter derivatives in its portfolio.

**`income_category`**: `str`

Identifies if an Exchange Traded Fund (ETF) falls into a category that is specifically designed to provide a high yield or income

**`asset_class`**: `str`

Captures the underlying nature of the securities in the Exchanged Traded Product (ETP).

**`other_asset_types`**: `str`

If 'asset_class' field is classified as 'Other Asset Types' this field captures the specific category of the underlying assets.

**`single_category_designation`**: `str`

This categorization is created for those users who want every ETF to be 'forced' into a single bucket, so that the assets for all categories will always sum to the total market.

**`beta_type`**: `str`

This field identifies whether an ETF provides 'Traditional' beta exposure or 'Smart' beta exposure. ETFs that are active (i.e. non-indexed), leveraged / inverse or have a proprietary quant model (i.e. that don't provide indexed exposure to a targeted factor) are classified separately.

**`beta_details`**: `str`

This field provides further detail within the traditional and smart beta categories.

**`market_cap_range`**: `str`

Equity ETFs are classified as falling into categories based on the description of their investment strategy in the prospectus. Examples ('Mega Cap', 'Large Cap', 'Mid Cap', etc.)

**`market_cap_weighting_type`**: `str`

For ETFs that take the value 'Market Cap Weighted' in the 'index_weighting_scheme' field, this field provides detail on the market cap weighting type.

**`index_weighting_scheme`**: `str`

For ETFs that track an underlying index, this field provides detail on the index weighting type.

**`index_linked`**: `str`

This field identifies whether an ETF is index linked or active.

**`index_name`**: `str`

This field identifies the name of the underlying index tracked by the ETF, if applicable.

**`index_symbol`**: `str`

This field identifies the OpenFIGI ticker for the Index underlying the ETF.

**`parent_index`**: `str`

This field identifies the name of the parent index, which represents the broader universe from which the index underlying the ETF is created, if applicable.

**`index_family`**: `str`

This field identifies the index family to which the index underlying the ETF belongs. The index family is represented as categorized by the index provider.

**`broader_index_family`**: `str`

This field identifies the broader index family to which the index underlying the ETF belongs. The broader index family is represented as categorized by the index provider.

**`index_provider`**: `str`

This field identifies the Index provider for the index underlying the ETF, if applicable.

**`index_provider_code`**: `str`

This field provides the First Bridge code for each Index provider, corresponding to the index underlying the ETF if applicable.

**`replication_structure`**: `str`

The replication structure of the Exchange Traded Product (ETP).

**`growth_value_tilt`**: `str`

Classifies equity ETFs as either 'Growth' or Value' based on the stated style tilt in the ETF prospectus. Equity ETFs that do not have a stated style tilt are classified as 'Core / Blend'.

**`growth_type`**: `str`

For ETFs that are classified as 'Growth' in 'growth_value_tilt', this field further identifies those where the stocks in the ETF are both selected and weighted based on their growth (style factor) scores.

**`value_type`**: `str`

For ETFs that are classified as 'Value' in 'growth_value_tilt', this field further identifies those where the stocks in the ETF are both selected and weighted based on their value (style factor) scores.

**`sector`**: `str`

For equity ETFs that aim to provide targeted exposure to a sector or industry, this field identifies the Sector that it provides the exposure to.

**`industry`**: `str`

For equity ETFs that aim to provide targeted exposure to an industry, this field identifies the Industry that it provides the exposure to.

**`industry_group`**: `str`

For equity ETFs that aim to provide targeted exposure to a sub-industry, this field identifies the sub-Industry that it provides the exposure to.

**`cross_sector_theme`**: `str`

For equity ETFs that aim to provide targeted exposure to a specific investment theme that cuts across GICS sectors, this field identifies the specific cross-sector theme. Examples ('Agri-business', 'Natural Resources', 'Green Investing', etc.)

**`natural_resources_type`**: `str`

For ETFs that are classified as 'Natural Resources' in the 'cross_sector_theme' field, this field provides further detail on the type of Natural Resources exposure.

**`us_or_excludes_us`**: `str`

Takes the value of 'Domestic' for US exposure, 'International' for non-US exposure and 'Global' for exposure that includes all regions including the US.

**`developed_emerging`**: `str`

This field identifies the stage of development of the markets that the ETF provides exposure to.

**`specialized_region`**: `str`

This field is populated if the ETF provides targeted exposure to a specific type of geography-based grouping that does not fall into a specific country or continent grouping. Examples ('BRIC', 'Chindia', etc.)

**`continent`**: `str`

This field is populated if the ETF provides targeted exposure to a specific continent or country within that Continent.

**`latin_america_sub_group`**: `str`

For ETFs that are classified as 'Latin America' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`europe_sub_group`**: `str`

For ETFs that are classified as 'Europe' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`asia_sub_group`**: `str`

For ETFs that are classified as 'Asia' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`specific_country`**: `str`

This field is populated if the ETF provides targeted exposure to a specific country.

**`china_listing_location`**: `str`

For ETFs that are classified as 'China' in the 'country' field, this field provides further detail on the type of exposure in the underlying securities.

**`us_state`**: `str`

Takes the value of a US state if the ETF provides targeted exposure to the municipal bonds or equities of companies.

**`real_estate`**: `str`

For ETFs that provide targeted real estate exposure, this field is populated if the ETF provides targeted exposure to a specific segment of the real estate market.

**`fundamental_weighting_type`**: `str`

For ETFs that take the value 'Fundamental Weighted' in the 'index_weighting_scheme' field, this field provides detail on the fundamental weighting methodology.

**`dividend_weighting_type`**: `str`

For ETFs that take the value 'Dividend Weighted' in the 'index_weighting_scheme' field, this field provides detail on the dividend weighting methodology.

**`bond_type`**: `str`

For ETFs where 'asset_class_type' is 'Bonds', this field provides detail on the type of bonds held in the ETF.

**`government_bond_types`**: `str`

For bond ETFs that take the value 'Treasury & Government' in 'bond_type', this field provides detail on the exposure.

**`municipal_bond_region`**: `str`

For bond ETFs that take the value 'Municipal' in 'bond_type', this field provides additional detail on the geographic exposure.

**`municipal_vrdo`**: `bool`

For bond ETFs that take the value 'Municipal' in 'bond_type', this field identifies those ETFs that specifically provide exposure to Variable Rate Demand Obligations.

**`mortgage_bond_types`**: `str`

For bond ETFs that take the value 'Mortgage' in 'bond_type', this field provides additional detail on the type of underlying securities.

**`bond_tax_status`**: `str`

For all US bond ETFs, this field provides additional detail on the tax treatment of the underlying securities.

**`credit_quality`**: `str`

For all bond ETFs, this field helps to identify if the ETF provides targeted exposure to securities of a specific credit quality range.

**`average_maturity`**: `str`

For all bond ETFs, this field helps to identify if the ETF provides targeted exposure to securities of a specific maturity range.

**`specific_maturity_year`**: `int`

For all bond ETFs that take the value 'Specific Maturity Year' in the 'average_maturity' field, this field specifies the calendar year.

**`commodity_types`**: `str`

For ETFs where 'asset_class_type' is 'Commodities', this field provides detail on the type of commodities held in the ETF.

**`energy_type`**: `str`

For ETFs where 'commodity_type' is 'Energy', this field provides detail on the type of energy exposure provided by the ETF.

**`agricultural_type`**: `str`

For ETFs where 'commodity_type' is 'Agricultural', this field provides detail on the type of agricultural exposure provided by the ETF.

**`livestock_type`**: `str`

For ETFs where 'commodity_type' is 'Livestock', this field provides detail on the type of livestock exposure provided by the ETF.

**`metal_type`**: `str`

For ETFs where 'commodity_type' is 'Gold & Metals', this field provides detail on the type of exposure provided by the ETF.

**`inverse_leveraged`**: `str`

This field is populated if the ETF provides inverse or leveraged exposure.

**`target_date_multi_asset_type`**: `str`

For ETFs where 'asset_class_type' is 'Target Date / MultiAsset', this field provides detail on the type of commodities held in the ETF.

**`currency_pair`**: `str`

This field is populated if the ETF's strategy involves providing exposure to the movements of a currency or involves hedging currency exposure.

**`social_environmental_type`**: `str`

This field is populated if the ETF's strategy involves providing exposure to a specific social or environmental theme.

**`clean_energy_type`**: `str`

This field is populated if the ETF has a value of 'Clean Energy' in the 'social_environmental_type' field.

**`dividend_type`**: `str`

This field is populated if the ETF has an intended investment objective of holding dividend-oriented stocks as stated in the prospectus.

**`regular_dividend_payor_type`**: `str`

This field is populated if the ETF has a value of'Dividend - Regular Payors' in the 'dividend_type' field.

**`quant_strategies_type`**: `str`

This field is populated if the ETF has either an index-linked or active strategy that is based on a proprietary quantitative strategy.

**`other_quant_models`**: `str`

For ETFs where 'quant_strategies_type' is 'Other Quant Model', this field provides the name of the specific proprietary quant model used as the underlying strategy for the ETF.

**`hedge_fund_type`**: `str`

For ETFs where 'other_asset_types' is 'Hedge Fund Replication', this field provides detail on the type of hedge fund replication strategy.

**`excludes_financials`**: `bool`

For equity ETFs, identifies those ETFs where the underlying fund holdings will not hold financials stocks, based on the funds intended objective.

**`excludes_technology`**: `bool`

For equity ETFs, identifies those ETFs where the underlying fund holdings will not hold technology stocks, based on the funds intended objective.

**`holds_only_nyse_stocks`**: `bool`

If true, the ETF is an equity ETF and holds only stocks listed on NYSE.

**`holds_only_nasdaq_stocks`**: `bool`

If true, the ETF is an equity ETF and holds only stocks listed on Nasdaq.

**`holds_mlp`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds MLPs as an intended part of its investment strategy.

**`holds_preferred_stock`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds preferred stock as an intended part of its investment strategy.

**`holds_closed_end_funds`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds closed end funds as an intended part of its investment strategy.

**`holds_adr`**: `bool`

If true, he ETF's investment objective explicitly specifies that it holds American Depositary Receipts (ADRs) as an intended part of its investment strategy.

**`laddered`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold bonds in a laddered structure, where the bonds are scheduled to mature in an annual, sequential structure.

**`zero_coupon`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold zero coupon Treasury Bills.

**`floating_rate`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold floating rate bonds.

**`build_america_bonds`**: `bool`

For municipal bond ETFs, this field identifies those ETFs that specifically hold Build America Bonds.

**`dynamic_futures_roll`**: `bool`

If the product holds futures contracts, this field identifies those products where the roll strategy is dynamic (rather than entirely rules based), so as to minimize roll costs.

**`currency_hedged`**: `bool`

This field is populated if the ETF's strategy involves hedging currency exposure.

**`includes_short_exposure`**: `bool`

This field is populated if the ETF has short exposure in any of its holdings e.g. in a long/short or inverse ETF.

**`ucits`**: `bool`

If true, the Exchange Traded Product (ETP) is Undertakings for the Collective Investment in Transferable Securities (UCITS) compliant

**`registered_countries`**: `str`

The list of countries where the ETF is legally registered for sale. This may differ from where the ETF is domiciled or traded, particularly in Europe.

**`issuer_country`**: `str`

2 letter ISO country code for the country where the issuer is located.

**`domicile`**: `str`

2 letter ISO country code for the country where the ETP is domiciled.

**`listing_country`**: `str`

2 letter ISO country code for the country of the primary listing.

**`listing_region`**: `str`

Geographic region in the country of the primary listing falls.

**`bond_currency_denomination`**: `str`

For all bond ETFs, this field provides additional detail on the currency denomination of the underlying securities.

**`base_currency`**: `str`

Base currency in which NAV is reported.

**`listing_currency`**: `str`

listing currency of the Exchange Traded Product (ETP) in which it is traded. Reported using the 3-digit ISO currency code.

**`number_of_holdings`**: `int`

The number of holdings in the ETF.

**`month_end_assets`**: `float`

Net assets in millions of dollars as of the most recent month end.

**`net_expense_ratio`**: `float`

Gross expense net of Fee Waivers, as a percentage of net assets as published by the ETF issuer.

**`etf_portfolio_turnover`**: `float`

The percentage of positions turned over in the last 12 months.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

The description of the ETF.

**`inception_date`**: `str`

Inception date of the ETF.

**`issuer`**: `str`

The issuer of the ETF.

**`investment_style`**: `str`

The investment style of the ETF.

**`esg`**: `bool`

Whether the ETF qualifies as an ESG fund.

**`currency`**: `str`

The currency of the ETF.

**`unit_price`**: `float`

The unit price of the ETF.

**`close`**: `float`

The closing price of the ETF.

**`prev_close`**: `float`

The previous closing price of the ETF.

**`return_1m`**: `float`

The one-month return of the ETF, as a normalized percent

**`return_3m`**: `float`

The three-month return of the ETF, as a normalized percent.

**`return_6m`**: `float`

The six-month return of the ETF, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the ETF, as a normalized percent.

**`return_1y`**: `float`

The one-year return of the ETF, as a normalized percent.

**`return_3y`**: `float`

The three-year return of the ETF, as a normalized percent.

**`return_5y`**: `float`

The five-year return of the ETF, as a normalized percent.

**`return_10y`**: `float`

The ten-year return of the ETF, as a normalized percent.

**`return_from_inception`**: `float`

The return from inception of the ETF, as a normalized percent.

**`avg_volume`**: `int`

The average daily volume of the ETF.

**`avg_volume_30d`**: `int`

The 30-day average volume of the ETF.

**`aum`**: `float`

The AUM of the ETF.

**`pe_ratio`**: `float`

The price-to-earnings ratio of the ETF.

**`pb_ratio`**: `float`

The price-to-book ratio of the ETF.

**`management_fee`**: `float`

The management fee of the ETF, as a normalized percent.

**`mer`**: `float`

The management expense ratio of the ETF, as a normalized percent.

**`distribution_yield`**: `float`

The distribution yield of the ETF, as a normalized percent.

**`dividend_frequency`**: `str`

The dividend payment frequency of the ETF.

**`website`**: `str`

The website of the ETF.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`fund_type`**: `str`

The legal type of fund.

**`fund_family`**: `str`

The fund family.

**`category`**: `str`

The fund category.

**`exchange`**: `str`

The exchange the fund is listed on.

**`exchange_timezone`**: `str`

The timezone of the exchange.

**`currency`**: `str`

The currency in which the fund is listed.

**`nav_price`**: `float`

The net asset value per unit of the fund.

**`total_assets`**: `int`

The total value of assets held by the fund.

**`trailing_pe`**: `float`

The trailing twelve month P/E ratio of the fund's assets.

**`dividend_yield`**: `float`

The dividend yield of the fund, as a normalized percent.

**`dividend_rate_ttm`**: `float`

The trailing twelve month annual dividend rate of the fund, in currency units.

**`dividend_yield_ttm`**: `float`

The trailing twelve month annual dividend yield of the fund, as a normalized percent.

**`year_high`**: `float`

The fifty-two week high price.

**`year_low`**: `float`

The fifty-two week low price.

**`ma_50d`**: `float`

50-day moving average price.

**`ma_200d`**: `float`

200-day moving average price.

**`return_ytd`**: `float`

The year-to-date return of the fund, as a normalized percent.

**`return_3y_avg`**: `float`

The three year average return of the fund, as a normalized percent.

**`return_5y_avg`**: `float`

The five year average return of the fund, as a normalized percent.

**`beta_3y_avg`**: `float`

The three year average beta of the fund.

**`volume_avg`**: `float`

The average daily trading volume of the fund.

**`volume_avg_10d`**: `float`

The average daily trading volume of the fund over the past ten days.

**`bid`**: `float`

The current bid price.

**`bid_size`**: `float`

The current bid size.

**`ask`**: `float`

The current ask price.

**`ask_size`**: `float`

The current ask size.

**`open`**: `float`

The open price of the most recent trading session.

**`high`**: `float`

The highest price of the most recent trading session.

**`low`**: `float`

The lowest price of the most recent trading session.

**`volume`**: `int`

The trading volume of the most recent trading session.

**`prev_close`**: `float`

The previous closing price.

</TabItem>
</Tabs>



---

---
title: "Etf Price Performance"
description: "Price performance as a return, over different periods"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfPricePerformance` | `EtfPricePerformanceQueryParams` | `EtfPricePerformanceData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
EtfPricePerformanceData,
EtfPricePerformanceQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

---

**`return_type`**: `Literal['trailing', 'calendar']`

The type of returns to return, a trailing or calendar window.

 • *Default:* `trailing`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor, 'splits_only' will return pure price performance.

 • *Default:* `splits_and_dividends`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`volatility_week`**: `float`

One-week realized volatility, as a normalized percent.

**`volatility_month`**: `float`

One-month realized volatility, as a normalized percent.

**`price`**: `float`

Last Price.

**`volume`**: `float`

Current volume.

**`average_volume`**: `float`

Average daily volume.

**`relative_volume`**: `float`

Relative volume as a ratio of current volume to average volume.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`max_annualized`**: `float`

Annualized rate of return from inception.

**`volatility_one_year`**: `float`

Trailing one-year annualized volatility.

**`volatility_three_year`**: `float`

Trailing three-year annualized volatility.

**`volatility_five_year`**: `float`

Trailing five-year annualized volatility.

**`volume`**: `int`

The trading volume.

**`volume_avg_30`**: `float`

The one-month average daily volume.

**`volume_avg_90`**: `float`

The three-month average daily volume.

**`volume_avg_180`**: `float`

The six-month average daily volume.

**`beta`**: `float`

Beta compared to the S&P 500.

**`nav`**: `float`

Net asset value per share.

**`year_high`**: `float`

The 52-week high price.

**`year_low`**: `float`

The 52-week low price.

**`market_cap`**: `float`

The market capitalization.

**`shares_outstanding`**: `int`

The number of shares outstanding.

**`updated`**: `date`

The date of the data.

</TabItem>
</Tabs>



---

---
title: "Etf Search"
description: "Search for ETFs"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfSearch` | `EtfSearchQueryParams` | `EtfSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_search import (
EtfSearchData,
EtfSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`exchange`**: `Literal['AMEX', 'NYSE', 'NASDAQ', 'ETF', 'TSX', 'EURONEXT']`

The exchange code the ETF trades on.

 • *Optional:* `True`

---

**`is_active`**: `Literal[True, False]`

Whether the ETF is actively trading.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`exchange`**: `Literal['xnas', 'arcx', 'bats', 'xnys', 'bvmf', 'xshg', 'xshe', 'xhkg', 'xbom', 'xnse', 'xidx', 'tase', 'xkrx', 'xkls', 'xmex', 'xses', 'roco', 'xtai', 'xbkk', 'xist']`

Target a specific exchange by providing the MIC code.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`div_freq`**: `Literal['monthly', 'annually', 'quarterly']`

The dividend payment frequency.

 • *Optional:* `True`

---

**`sort_by`**: `Literal['aum', 'return_1m', 'return_3m', 'return_6m', 'return_1y', 'return_3y', 'return_ytd', 'beta_1y', 'volume_avg_daily', 'management_fee', 'distribution_yield', 'pb_ratio', 'pe_ratio']`

The column to sort by.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`market_cap`**: `float`

The market cap of the ETF.

**`sector`**: `str`

The sector of the ETF.

**`industry`**: `str`

The industry of the ETF.

**`beta`**: `float`

The beta of the ETF.

**`price`**: `float`

The current price of the ETF.

**`last_annual_dividend`**: `float`

The last annual dividend paid.

**`volume`**: `float`

The current trading volume of the ETF.

**`exchange`**: `str`

The exchange code the ETF trades on.

**`exchange_name`**: `str`

The full name of the exchange the ETF trades on.

**`country`**: `str`

The country the ETF is registered in.

**`actively_trading`**: `Literal[True, False]`

Whether the ETF is actively trading.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`exchange`**: `str`

The exchange MIC code.

**`figi_ticker`**: `str`

The OpenFIGI ticker.

**`ric`**: `str`

The Reuters Instrument Code.

**`isin`**: `str`

The International Securities Identification Number.

**`sedol`**: `str`

The Stock Exchange Daily Official list.

**`intrinio_id`**: `str`

The unique Intrinio ID for the security.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`short_name`**: `str`

The short name of the ETF.

**`inception_date`**: `str`

The inception date of the ETF.

**`issuer`**: `str`

The issuer of the ETF.

**`investment_style`**: `str`

The investment style of the ETF.

**`esg`**: `bool`

Whether the ETF qualifies as an ESG fund.

**`currency`**: `str`

The currency of the ETF.

**`unit_price`**: `float`

The unit price of the ETF.

**`close`**: `float`

The closing price of the ETF.

**`prev_close`**: `float`

The previous closing price of the ETF.

**`return_1m`**: `float`

The one-month return of the ETF, as a normalized percent.

**`return_3m`**: `float`

The three-month return of the ETF, as a normalized percent.

**`return_6m`**: `float`

The six-month return of the ETF, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the ETF, as a normalized percent.

**`return_1y`**: `float`

The one-year return of the ETF, as a normalized percent.

**`beta_1y`**: `float`

The one-year beta of the ETF, as a normalized percent.

**`return_3y`**: `float`

The three-year return of the ETF, as a normalized percent.

**`beta_3y`**: `float`

The three-year beta of the ETF, as a normalized percent.

**`return_5y`**: `float`

The five-year return of the ETF, as a normalized percent.

**`beta_5y`**: `float`

The five-year beta of the ETF, as a normalized percent.

**`return_10y`**: `float`

The ten-year return of the ETF, as a normalized percent.

**`beta_10y`**: `float`

The ten-year beta of the ETF.

**`beta_15y`**: `float`

The fifteen-year beta of the ETF.

**`return_from_inception`**: `float`

The return from inception of the ETF, as a normalized percent.

**`avg_volume`**: `int`

The average daily volume of the ETF.

**`avg_volume_30d`**: `int`

The 30-day average volume of the ETF.

**`aum`**: `float`

The AUM of the ETF.

**`pe_ratio`**: `float`

The price-to-earnings ratio of the ETF.

**`pb_ratio`**: `float`

The price-to-book ratio of the ETF.

**`management_fee`**: `float`

The management fee of the ETF, as a normalized percent.

**`mer`**: `float`

The management expense ratio of the ETF, as a normalized percent.

**`distribution_yield`**: `float`

The distribution yield of the ETF, as a normalized percent.

**`dividend_frequency`**: `str`

The dividend payment frequency of the ETF.

</TabItem>
</Tabs>



---

---
title: "Etf Sectors"
description: "ETF Sector weighting"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EtfSectors` | `EtfSectorsQueryParams` | `EtfSectorsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.etf_sectors import (
EtfSectorsData,
EtfSectorsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>
</Tabs>



---

---
title: "Euro Short Term Rate"
description: "Euro Short-Term Rate"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EuroShortTermRate` | `EuroShortTermRateQueryParams` | `EuroShortTermRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.euro_short_term_rate import (
EuroShortTermRateData,
EuroShortTermRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
        <br/>
    a = Annual<br/>
        <br/>
    q = Quarterly<br/>
        <br/>
    m = Monthly<br/>
        <br/>
    w = Weekly<br/>
        <br/>
    d = Daily<br/>
        <br/>
    wef = Weekly, Ending Friday<br/>
        <br/>
    weth = Weekly, Ending Thursday<br/>
        <br/>
    wew = Weekly, Ending Wednesday<br/>
        <br/>
    wetu = Weekly, Ending Tuesday<br/>
        <br/>
    wem = Weekly, Ending Monday<br/>
        <br/>
    wesu = Weekly, Ending Sunday<br/>
        <br/>
    wesa = Weekly, Ending Saturday<br/>
        <br/>
    bwew = Biweekly, Ending Wednesday<br/>
        <br/>
    bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Volume-weighted trimmed mean rate.

**`percentile_25`**: `float`

Rate at 25th percentile of volume.

**`percentile_75`**: `float`

Rate at 75th percentile of volume.

**`volume`**: `float`

The trading volume. (Millions of €EUR).

**`transactions`**: `int`

Number of transactions.

**`number_of_banks`**: `int`

Number of active banks.

**`large_bank_share_of_volume`**: `float`

The percent of volume attributable to the 5 largest active banks.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Volume-weighted trimmed mean rate.

**`percentile_25`**: `float`

Rate at 25th percentile of volume.

**`percentile_75`**: `float`

Rate at 75th percentile of volume.

**`volume`**: `float`

The trading volume. (Millions of €EUR).

**`transactions`**: `int`

Number of transactions.

**`number_of_banks`**: `int`

Number of active banks.

**`large_bank_share_of_volume`**: `float`

The percent of volume attributable to the 5 largest active banks.

</TabItem>
</Tabs>



---

---
title: "European Central Bank Interest Rates"
description: "European Central Bank Interest Rates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `EuropeanCentralBankInterestRates` | `EuropeanCentralBankInterestRatesQueryParams` | `EuropeanCentralBankInterestRatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.ecb_interest_rates import (
EuropeanCentralBankInterestRatesData,
EuropeanCentralBankInterestRatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interest_rate_type`**: `Literal['deposit', 'lending', 'refinancing']`

The type of interest rate.

 • *Default:* `lending`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interest_rate_type`**: `Literal['deposit', 'lending', 'refinancing']`

The type of interest rate.

 • *Default:* `lending`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

European Central Bank Interest Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

European Central Bank Interest Rate.

</TabItem>
</Tabs>



---

---
title: "Executive Compensation"
description: "Get executive management team compensation for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ExecutiveCompensation` | `ExecutiveCompensationQueryParams` | `ExecutiveCompensationData` |

### Import Statement

```python
from openbb_core.provider.standard_models.executive_compensation import (
ExecutiveCompensationData,
ExecutiveCompensationQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `int`

Year of the compensation.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`company_name`**: `str`

The name of the company.

**`industry`**: `str`

The industry of the company.

**`year`**: `int`

Year of the compensation.

**`name_and_position`**: `str`

Name and position.

**`salary`**: `Annotated[float, Ge(ge=0)]`

Salary.

**`bonus`**: `Annotated[float, Ge(ge=0)]`

Bonus payments.

**`stock_award`**: `Annotated[float, Ge(ge=0)]`

Stock awards.

**`incentive_plan_compensation`**: `Annotated[float, Ge(ge=0)]`

Incentive plan compensation.

**`all_other_compensation`**: `Annotated[float, Ge(ge=0)]`

All other compensation.

**`total`**: `Annotated[float, Ge(ge=0)]`

Total compensation.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`company_name`**: `str`

The name of the company.

**`industry`**: `str`

The industry of the company.

**`year`**: `int`

Year of the compensation.

**`name_and_position`**: `str`

Name and position.

**`salary`**: `Annotated[float, Ge(ge=0)]`

Salary.

**`bonus`**: `Annotated[float, Ge(ge=0)]`

Bonus payments.

**`stock_award`**: `Annotated[float, Ge(ge=0)]`

Stock awards.

**`incentive_plan_compensation`**: `Annotated[float, Ge(ge=0)]`

Incentive plan compensation.

**`all_other_compensation`**: `Annotated[float, Ge(ge=0)]`

All other compensation.

**`total`**: `Annotated[float, Ge(ge=0)]`

Total compensation.

**`filing_date`**: `date`

Date of the filing.

**`accepted_date`**: `datetime`

Date the filing was accepted.

**`url`**: `str`

URL to the filing data.

</TabItem>
</Tabs>



---

---
title: "Export Destinations"
description: "Get top export destinations by country from the UN Comtrade International Trade Statistics Database"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ExportDestinations` | `ExportDestinationsQueryParams` | `ExportDestinationsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.export_destinations import (
ExportDestinationsData,
ExportDestinationsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`origin_country`**: `str`

The country of origin.

**`destination_country`**: `str`

The destination country.

**`value`**: `Union[float, int]`

The value of the export.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`origin_country`**: `str`

The country of origin.

**`destination_country`**: `str`

The destination country.

**`value`**: `Union[float, int]`

The value of the export.

**`units`**: `str`

The units of measurement for the value.

**`title`**: `str`

The title of the data.

**`footnote`**: `str`

The footnote for the data.

</TabItem>
</Tabs>



---

---
title: "Federal Funds Rate"
description: "Fed Funds Rate"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FederalFundsRate` | `FederalFundsRateQueryParams` | `FederalFundsRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.federal_funds_rate import (
FederalFundsRateData,
FederalFundsRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

---

**`effr_only`**: `bool`

Return data without quantiles, target ranges, and volume.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`intraday_low`**: `float`

Intraday low. This field is only present for data before 2016.

**`intraday_high`**: `float`

Intraday high. This field is only present for data before 2016.

**`standard_deviation`**: `float`

Standard deviation. This field is only present for data before 2016.

**`revision_indicator`**: `str`

Indicates a revision of the data for that date.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>
</Tabs>



---

---
title: "Financial Ratios"
description: "Get an extensive set of financial and accounting ratios for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FinancialRatios` | `FinancialRatiosQueryParams` | `FinancialRatiosData` |

### Import Statement

```python
from openbb_core.provider.standard_models.financial_ratios import (
FinancialRatiosData,
FinancialRatiosQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

**`current_ratio`**: `float`

Current ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`cash_ratio`**: `float`

Cash ratio.

**`days_of_sales_outstanding`**: `float`

Days of sales outstanding.

**`days_of_inventory_outstanding`**: `float`

Days of inventory outstanding.

**`operating_cycle`**: `float`

Operating cycle.

**`days_of_payables_outstanding`**: `float`

Days of payables outstanding.

**`cash_conversion_cycle`**: `float`

Cash conversion cycle.

**`gross_profit_margin`**: `float`

Gross profit margin.

**`operating_profit_margin`**: `float`

Operating profit margin.

**`pretax_profit_margin`**: `float`

Pretax profit margin.

**`net_profit_margin`**: `float`

Net profit margin.

**`effective_tax_rate`**: `float`

Effective tax rate.

**`return_on_assets`**: `float`

Return on assets.

**`return_on_equity`**: `float`

Return on equity.

**`return_on_capital_employed`**: `float`

Return on capital employed.

**`net_income_per_ebt`**: `float`

Net income per EBT.

**`ebt_per_ebit`**: `float`

EBT per EBIT.

**`ebit_per_revenue`**: `float`

EBIT per revenue.

**`debt_ratio`**: `float`

Debt ratio.

**`debt_equity_ratio`**: `float`

Debt equity ratio.

**`long_term_debt_to_capitalization`**: `float`

Long term debt to capitalization.

**`total_debt_to_capitalization`**: `float`

Total debt to capitalization.

**`interest_coverage`**: `float`

Interest coverage.

**`cash_flow_to_debt_ratio`**: `float`

Cash flow to debt ratio.

**`company_equity_multiplier`**: `float`

Company equity multiplier.

**`receivables_turnover`**: `float`

Receivables turnover.

**`payables_turnover`**: `float`

Payables turnover.

**`inventory_turnover`**: `float`

Inventory turnover.

**`fixed_asset_turnover`**: `float`

Fixed asset turnover.

**`asset_turnover`**: `float`

Asset turnover.

**`operating_cash_flow_per_share`**: `float`

Operating cash flow per share.

**`free_cash_flow_per_share`**: `float`

Free cash flow per share.

**`cash_per_share`**: `float`

Cash per share.

**`payout_ratio`**: `float`

Payout ratio.

**`operating_cash_flow_sales_ratio`**: `float`

Operating cash flow sales ratio.

**`free_cash_flow_operating_cash_flow_ratio`**: `float`

Free cash flow operating cash flow ratio.

**`cash_flow_coverage_ratios`**: `float`

Cash flow coverage ratios.

**`short_term_coverage_ratios`**: `float`

Short term coverage ratios.

**`capital_expenditure_coverage_ratio`**: `float`

Capital expenditure coverage ratio.

**`dividend_paid_and_capex_coverage_ratio`**: `float`

Dividend paid and capex coverage ratio.

**`dividend_payout_ratio`**: `float`

Dividend payout ratio.

**`price_book_value_ratio`**: `float`

Price book value ratio.

**`price_to_book_ratio`**: `float`

Price to book ratio.

**`price_to_sales_ratio`**: `float`

Price to sales ratio.

**`price_earnings_ratio`**: `float`

Price earnings ratio.

**`price_to_free_cash_flows_ratio`**: `float`

Price to free cash flows ratio.

**`price_to_operating_cash_flows_ratio`**: `float`

Price to operating cash flows ratio.

**`price_cash_flow_ratio`**: `float`

Price cash flow ratio.

**`price_earnings_to_growth_ratio`**: `float`

Price earnings to growth ratio.

**`price_sales_ratio`**: `float`

Price sales ratio.

**`dividend_yield`**: `float`

Dividend yield.

**`dividend_yield_percentage`**: `float`

Dividend yield percentage.

**`dividend_per_share`**: `float`

Dividend per share.

**`enterprise_value_multiple`**: `float`

Enterprise value multiple.

**`price_fair_value`**: `float`

Price fair value.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

</TabItem>
</Tabs>



---

---
title: "Fomc Documents"
description: "Get FOMC documents by year and document type"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FomcDocuments` | `FomcDocumentsQueryParams` | `FomcDocumentsData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
FomcDocumentsData,
FomcDocumentsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`year`**: `int`

The year of FOMC documents to retrieve. If None, all years since 1959 are returned.

 • *Optional:* `True`

---

**`document_type`**: `str`

Filter by document type. Default is all. Choose from: all, monetary_policy, minutes, projections, materials, press_release, press_conference, conference_call, agenda, transcript, speaker_key, beige_book, teal_book, green_book, blue_book, red_book

 • *Optional:* `True`

---

**`pdf_only`**: `bool`

Whether to return as a list with only the PDF documents. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

---

**`as_choices`**: `bool`

Whether to return cast as a list of valid Workspace parameter choices. Leave as False for typical use.

 • *Default:* `False`

 • *Optional:* `True`

---

**`url`**: `str`

Download a document from the supplied URL. When provided, all other parameters are ignored. Content is returned as a base64 encoded string.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`content`**: `Any`

The content of request results. If `url` was provided, the content is a dictionary with keys `filename` and `content`. Otherwise, it is a list of dictionaries with a mapping of FOMC documents to URLs. The endpoint response will not be an OBBject.results object, but the content directly.

</TabItem>
</Tabs>



---

---
title: "Form 13FHR"
description: "Get the form 13F"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `Form13FHR` | `Form13FHRQueryParams` | `Form13FHRData` |

### Import Statement

```python
from openbb_core.provider.standard_models.form_13FHR import (
Form13FHRData,
Form13FHRQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. A CIK or Symbol can be used.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for. A CIK or Symbol can be used.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end-of-quarter date of the filing.

**`issuer`**: `str`

The name of the issuer.

**`cusip`**: `str`

The CUSIP of the security.

**`asset_class`**: `str`

The title of the asset class for the security.

**`security_type`**: `Literal['SH', 'PRN']`

Whether the principal amount represents the number of shares or the principal amount of such class. 'SH' for shares. 'PRN' for principal amount. Convertible debt securities are reported as 'PRN'.

**`option_type`**: `Literal['call', 'put']`

Defined when the holdings being reported are put or call options. Only long positions are reported.

**`investment_discretion`**: `str`

The investment discretion held by the Manager. Sole, shared-defined (DFN), or shared-other (OTR).

**`voting_authority_sole`**: `int`

The number of shares for which the Manager exercises sole voting authority.

**`voting_authority_shared`**: `int`

The number of shares for which the Manager exercises a defined shared voting authority.

**`voting_authority_none`**: `int`

The number of shares for which the Manager exercises no voting authority.

**`principal_amount`**: `int`

The total number of shares of the class of security or the principal amount of such class. Defined by the 'security_type'. Only long positions are reported

**`value`**: `int`

The fair market value of the holding of the particular class of security. The value reported for options is the fair market value of the underlying security with respect to the number of shares controlled. Values are rounded to the nearest US dollar and use the closing price of the last trading day of the calendar year or quarter.

</TabItem>

<TabItem value='sec' label='sec'>

**`period_ending`**: `date`

The end-of-quarter date of the filing.

**`issuer`**: `str`

The name of the issuer.

**`cusip`**: `str`

The CUSIP of the security.

**`asset_class`**: `str`

The title of the asset class for the security.

**`security_type`**: `Literal['SH', 'PRN']`

Whether the principal amount represents the number of shares or the principal amount of such class. 'SH' for shares. 'PRN' for principal amount. Convertible debt securities are reported as 'PRN'.

**`option_type`**: `Literal['call', 'put']`

Defined when the holdings being reported are put or call options. Only long positions are reported.

**`investment_discretion`**: `str`

The investment discretion held by the Manager. Sole, shared-defined (DFN), or shared-other (OTR).

**`voting_authority_sole`**: `int`

The number of shares for which the Manager exercises sole voting authority.

**`voting_authority_shared`**: `int`

The number of shares for which the Manager exercises a defined shared voting authority.

**`voting_authority_none`**: `int`

The number of shares for which the Manager exercises no voting authority.

**`principal_amount`**: `int`

The total number of shares of the class of security or the principal amount of such class. Defined by the 'security_type'. Only long positions are reported

**`value`**: `int`

The fair market value of the holding of the particular class of security. The value reported for options is the fair market value of the underlying security with respect to the number of shares controlled. Values are rounded to the nearest US dollar and use the closing price of the last trading day of the calendar year or quarter.

**`weight`**: `float`

The weight of the security relative to the market value of all securities in the filing , as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "Forward Ebitda Estimates"
description: "Get forward EBITDA estimates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ForwardEbitdaEstimates` | `ForwardEbitdaEstimatesQueryParams` | `ForwardEbitdaEstimatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.forward_ebitda_estimates import (
ForwardEbitdaEstimatesData,
ForwardEbitdaEstimatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['annual', 'quarter']`

The future fiscal period to retrieve estimates for.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`include_historical`**: `bool`

If True, the data will include all past data and the limit will be ignored.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['quarter', 'annual']`

Filter for only full-year or quarterly estimates.

 • *Optional:* `True`

---

**`estimate_type`**: `Literal['ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income']`

Limit the EBITDA estimates to this type.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`conensus_type`**: `Literal['ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income']`

The type of estimate.

</TabItem>
</Tabs>



---

---
title: "Forward Eps Estimates"
description: "Get forward EPS estimates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ForwardEpsEstimates` | `ForwardEpsEstimatesQueryParams` | `ForwardEpsEstimatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.forward_eps_estimates import (
ForwardEpsEstimatesData,
ForwardEpsEstimatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['annual', 'quarter']`

The future fiscal period to retrieve estimates for.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`include_historical`**: `bool`

If True, the data will include all past data and the limit will be ignored.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The future fiscal period to retrieve estimates for.

 • *Optional:* `True`

---

**`calendar_year`**: `int`

The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['q1', 'q2', 'q3', 'q4']`

The future calendar period to retrieve estimates for.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

The reporting period.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`revisions_change_percent`**: `float`

The earnings per share (EPS) percent change in estimate for the period.

**`mean_1w`**: `float`

The mean estimate for the period one week ago.

**`mean_1m`**: `float`

The mean estimate for the period one month ago.

**`mean_2m`**: `float`

The mean estimate for the period two months ago.

**`mean_3m`**: `float`

The mean estimate for the period three months ago.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`normalized_actual`**: `float`

Actual normalized EPS.

**`period_growth`**: `float`

Estimated (or actual if reported) EPS growth for the period.

**`low_estimate_gaap`**: `float`

Estimated GAAP EPS low for the period.

**`high_estimate_gaap`**: `float`

Estimated GAAP EPS high for the period.

**`mean_gaap`**: `float`

Estimated GAAP EPS mean for the period.

**`gaap_actual`**: `float`

Actual GAAP EPS.

</TabItem>
</Tabs>



---

---
title: "Forward Pe Estimates"
description: "Get forward PE estimates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ForwardPeEstimates` | `ForwardPeEstimatesQueryParams` | `ForwardPeEstimatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.forward_pe_estimates import (
ForwardPeEstimatesData,
ForwardPeEstimatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`year1`**: `float`

Estimated PE ratio for the next fiscal year.

**`year2`**: `float`

Estimated PE ratio two fiscal years from now.

**`year3`**: `float`

Estimated PE ratio three fiscal years from now.

**`year4`**: `float`

Estimated PE ratio four fiscal years from now.

**`year5`**: `float`

Estimated PE ratio five fiscal years from now.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`year1`**: `float`

Estimated PE ratio for the next fiscal year.

**`year2`**: `float`

Estimated PE ratio two fiscal years from now.

**`year3`**: `float`

Estimated PE ratio three fiscal years from now.

**`year4`**: `float`

Estimated PE ratio four fiscal years from now.

**`year5`**: `float`

Estimated PE ratio five fiscal years from now.

**`peg_ratio_year1`**: `float`

Estimated Forward PEG ratio for the next fiscal year.

**`eps_ttm`**: `float`

The latest trailing twelve months earnings per share.

**`last_updated`**: `date`

The date the data was last updated.

</TabItem>
</Tabs>



---

---
title: "Forward Sales Estimates"
description: "Get forward sales estimates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ForwardSalesEstimates` | `ForwardSalesEstimatesQueryParams` | `ForwardSalesEstimatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.forward_sales_estimates import (
ForwardSalesEstimatesData,
ForwardSalesEstimatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The future fiscal period to retrieve estimates for.

 • *Optional:* `True`

---

**`calendar_year`**: `int`

The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['q1', 'q2', 'q3', 'q4']`

The future calendar period to retrieve estimates for.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

The reporting period.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`revisions_1w_up`**: `int`

Number of revisions up in the last week.

**`revisions_1w_down`**: `int`

Number of revisions down in the last week.

**`revisions_1w_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 1 week.

**`revisions_1m_up`**: `int`

Number of revisions up in the last month.

**`revisions_1m_down`**: `int`

Number of revisions down in the last month.

**`revisions_1m_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 1 month.

**`revisions_3m_up`**: `int`

Number of revisions up in the last 3 months.

**`revisions_3m_down`**: `int`

Number of revisions down in the last 3 months.

**`revisions_3m_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 3 months.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`actual`**: `int`

Actual sales (revenue) for the period.

**`period_growth`**: `float`

Estimated (or actual if reported) EPS growth for the period.

</TabItem>
</Tabs>



---

---
title: "Fred Regional"
description: "Query the Geo Fred API for regional economic data by series group"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FredRegional` | `FredRegionalQueryParams` | `FredRegionalData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
FredRegionalData,
FredRegionalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`symbol`**: `str`

For this function, it is the series_group ID or series ID. If the symbol provided is for a series_group, set the `is_series_group` parameter to True. Not all series that are in FRED have geographical data.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`is_series_group`**: `bool`

When True, the symbol provided is for a series_group, else it is for a series ID.

 • *Default:* `False`

 • *Optional:* `True`

---

**`region_type`**: `Literal['bea', 'msa', 'frb', 'necta', 'state', 'country', 'county', 'censusregion']`

The type of regional data. Parameter is only valid when `is_series_group` is True.

 • *Optional:* `True`

---

**`season`**: `Literal['sa', 'nsa', 'ssa']`

The seasonal adjustments to the data. Parameter is only valid when `is_series_group` is True.

 • *Default:* `nsa`

 • *Optional:* `True`

---

**`units`**: `str`

The units of the data. This should match the units returned from searching by series ID. An incorrect field will not necessarily return an error. Parameter is only valid when `is_series_group` is True.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        <br/>
    None = No change<br/>
        <br/>
    a = Annual<br/>
        <br/>
    q = Quarterly<br/>
        <br/>
    m = Monthly<br/>
        <br/>
    w = Weekly<br/>
        <br/>
    d = Daily<br/>
        <br/>
    wef = Weekly, Ending Friday<br/>
        <br/>
    weth = Weekly, Ending Thursday<br/>
        <br/>
    wew = Weekly, Ending Wednesday<br/>
        <br/>
    wetu = Weekly, Ending Tuesday<br/>
        <br/>
    wem = Weekly, Ending Monday<br/>
        <br/>
    wesu = Weekly, Ending Sunday<br/>
        <br/>
    wesa = Weekly, Ending Saturday<br/>
        <br/>
    bwew = Biweekly, Ending Wednesday<br/>
        <br/>
    bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`region`**: `str`

The name of the region.

**`code`**: `Union[str, int]`

The code of the region.

**`value`**: `Union[float, int]`

The obersvation value. The units are defined in the search results by series ID.

**`series_id`**: `str`

The individual series ID for the region.

</TabItem>
</Tabs>



---

---
title: "Fred Release Table"
description: "Get economic release data by ID and/or element from FRED"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FredReleaseTable` | `FredReleaseTableQueryParams` | `FredReleaseTableData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
FredReleaseTableData,
FredReleaseTableQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`release_id`**: `str`

The ID of the release. Use `fred_search` to find releases.

 • *Optional:* `False`

---

**`element_id`**: `str`

The element ID of a specific table in the release.

 • *Optional:* `True`

---

**`date`**: `Union[Union[None, date, str], list[Union[None, date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`release_id`**: `str`

The ID of the release. Use `fred_search` to find releases.

 • *Optional:* `False`

---

**`element_id`**: `str`

The element ID of a specific table in the release.

 • *Optional:* `True`

---

**`date`**: `Union[Union[None, date, str], list[Union[None, date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`level`**: `int`

The indentation level of the element.

**`element_type`**: `str`

The type of the element.

**`line`**: `int`

The line number of the element.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The name of the series.

**`value`**: `float`

The reported value of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`level`**: `int`

The indentation level of the element.

**`element_type`**: `str`

The type of the element.

**`line`**: `int`

The line number of the element.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The name of the series.

**`value`**: `float`

The reported value of the series.

</TabItem>
</Tabs>



---

---
title: "Fred Search"
description: "Search for FRED series or economic releases by ID or string"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FredSearch` | `FredSearchQueryParams` | `FredSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
FredSearchData,
FredSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

The search word(s).

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`query`**: `str`

The search word(s).

 • *Optional:* `True`

---

**`search_type`**: `Literal['full_text', 'series_id', 'release']`

The type of search to perform. Automatically set to 'release' when a 'release_id' is provided.

 • *Default:* `full_text`

 • *Optional:* `True`

---

**`release_id`**: `Annotated[int, Ge(ge=0)]`

A specific release ID to target.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return. (1-1000)

 • *Optional:* `True`

---

**`offset`**: `Annotated[int, Ge(ge=0)]`

Offset the results in conjunction with limit. This parameter is ignored When search_type is 'release'.

 • *Default:* `0`

 • *Optional:* `True`

---

**`order_by`**: `Literal['search_rank', 'series_id', 'title', 'units', 'frequency', 'seasonal_adjustment', 'realtime_start', 'realtime_end', 'last_updated', 'observation_start', 'observation_end', 'popularity', 'group_popularity']`

Order the results by a specific attribute. The default is 'observation_end'.

 • *Default:* `observation_end`

 • *Optional:* `True`

---

**`sort_order`**: `Literal['asc', 'desc']`

Sort the 'order_by' item in ascending or descending order. The default is 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`filter_variable`**: `Literal['frequency', 'units', 'seasonal_adjustment']`

Filter by an attribute.

 • *Optional:* `True`

---

**`filter_value`**: `str`

String value to filter the variable by.  Used in conjunction with filter_variable. This parameter is ignored when search_type is 'release'.

 • *Optional:* `True`

---

**`tag_names`**: `Union[str, list[str]]`

A semicolon delimited list of tag names that series match all of.  Example: 'japan;imports' This parameter is ignored when search_type is 'release'. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`exclude_tag_names`**: `Union[str, list[str]]`

A semicolon delimited list of tag names that series match none of.  Example: 'imports;services'. Requires that variable tag_names also be set to limit the number of matching series. This parameter is ignored when search_type is 'release'. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`series_id`**: `str`

A FRED Series ID to return series group information for. This returns the required information to query for regional data. Not all series that are in FRED have geographical data. Entering a value for series_id will override all other parameters. Multiple series_ids can be separated by commas.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`release_id`**: `str`

The release ID for queries.

**`series_id`**: `str`

The series ID for the item in the release.

**`series_group`**: `str`

The series group ID of the series. This value is used to query for regional data.

**`region_type`**: `str`

The region type of the series.

**`name`**: `str`

The name of the release.

**`title`**: `str`

The title of the series.

**`observation_start`**: `date`

The date of the first observation in the series.

**`observation_end`**: `date`

The date of the last observation in the series.

**`frequency`**: `str`

The frequency of the data.

**`frequency_short`**: `str`

Short form of the data frequency.

**`units`**: `str`

The units of the data.

**`units_short`**: `str`

Short form of the data units.

**`seasonal_adjustment`**: `str`

The seasonal adjustment of the data.

**`seasonal_adjustment_short`**: `str`

Short form of the data seasonal adjustment.

**`last_updated`**: `datetime`

The datetime of the last update to the data.

**`popularity`**: `int`

Popularity of the series

**`group_popularity`**: `int`

Group popularity of the release

**`realtime_start`**: `date`

The realtime start date of the series.

**`realtime_end`**: `date`

The realtime end date of the series.

**`notes`**: `str`

Description of the release.

**`press_release`**: `bool`

If the release is a press release.

**`url`**: `str`

URL to the release.

</TabItem>

<TabItem value='fred' label='fred'>

**`release_id`**: `str`

The release ID for queries.

**`series_id`**: `str`

The series ID for the item in the release.

**`series_group`**: `str`

The series group ID of the series. This value is used to query for regional data.

**`region_type`**: `str`

The region type of the series.

**`name`**: `str`

The name of the release.

**`title`**: `str`

The title of the series.

**`observation_start`**: `date`

The date of the first observation in the series.

**`observation_end`**: `date`

The date of the last observation in the series.

**`frequency`**: `str`

The frequency of the data.

**`frequency_short`**: `str`

Short form of the data frequency.

**`units`**: `str`

The units of the data.

**`units_short`**: `str`

Short form of the data units.

**`seasonal_adjustment`**: `str`

The seasonal adjustment of the data.

**`seasonal_adjustment_short`**: `str`

Short form of the data seasonal adjustment.

**`last_updated`**: `datetime`

The datetime of the last update to the data.

**`popularity`**: `int`

Popularity of the series

**`group_popularity`**: `int`

Group popularity of the release

**`realtime_start`**: `date`

The realtime start date of the series.

**`realtime_end`**: `date`

The realtime end date of the series.

**`notes`**: `str`

Description of the release.

**`press_release`**: `bool`

If the release is a press release.

**`url`**: `str`

URL to the release.

</TabItem>
</Tabs>



---

---
title: "Fred Series"
description: "Get data by series ID from FRED"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FredSeries` | `FredSeriesQueryParams` | `FredSeriesData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
FredSeriesData,
FredSeriesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        None = No change<br/>
        a = Annual<br/>
        q = Quarterly<br/>
        m = Monthly<br/>
        w = Weekly<br/>
        d = Daily<br/>
        wef = Weekly, Ending Friday<br/>
        weth = Weekly, Ending Thursday<br/>
        wew = Weekly, Ending Wednesday<br/>
        wetu = Weekly, Ending Tuesday<br/>
        wem = Weekly, Ending Monday<br/>
        wesu = Weekly, Ending Sunday<br/>
        wesa = Weekly, Ending Saturday<br/>
        bwew = Biweekly, Ending Wednesday<br/>
        bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`all_pages`**: `bool`

Returns all pages of data from the API call at once.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sleep`**: `float`

Time to sleep between requests to avoid rate limiting.

 • *Default:* `1.0`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Value of the index.

</TabItem>
</Tabs>



---

---
title: "Futures Curve"
description: "Futures Term Structure, current or historical"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FuturesCurve` | `FuturesCurveQueryParams` | `FuturesCurveData` |

### Import Statement

```python
from openbb_core.provider.standard_models.futures_curve import (
FuturesCurveData,
FuturesCurveQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Literal['VX_AM', 'VX_EOD']`

<details>
<summary mdxType="summary">Description</summary>

Symbol to get data for.Default is 'VX_EOD'. Entered dates return the data nearest to the entered date.<br/>
    'VX_AM' = Mid-Morning TWAP Levels<br/>
    'VX_EOD' = 4PM Eastern Time Levels

</details>

 • *Default:* `VX_EOD`

 • *Optional:* `True`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Literal['BTC', 'ETH', 'PAXG']`

Symbol to get data for. Default is 'btc' Supported symbols are: ['btc', 'eth', 'paxg']

 • *Default:* `BTC`

 • *Optional:* `True`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

---

**`hours_ago`**: `Union[Union[int, list[int], str], list[Union[int, list[int], str]]]`

Compare the current curve with the specified number of hours ago. Default is None. Multiple items allowed for provider(s): deribit.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

**`hours_ago`**: `int`

The number of hours ago represented by the price. Only available when hours_ago is set in the query.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

</TabItem>
</Tabs>



---

---
title: "Futures Historical"
description: "Historical futures prices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FuturesHistorical` | `FuturesHistoricalQueryParams` | `FuturesHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.futures_historical import (
FuturesHistoricalData,
FuturesHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '3m', '5m', '10m', '15m', '30m', '1h', '2h', '3h', '6h', '12h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`volume_notional`**: `float`

Trading volume in quote currency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

</TabItem>
</Tabs>



---

---
title: "Futures Info"
description: "Get current trading statistics by futures contract symbol"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FuturesInfo` | `FuturesInfoQueryParams` | `FuturesInfoData` |

### Import Statement

```python
from openbb_core.provider.standard_models.futures_info import (
FuturesInfoData,
FuturesInfoQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Perpetual contracts can be referenced by their currency pair - i.e, SOLUSDC - or by their official Deribit symbol - i.e, SOL_USDC-PERPETUAL For a list of currently available instruments, use `derivatives.futures.instruments()` Multiple items allowed for provider(s): deribit.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`state`**: `Literal['open', 'closed']`

The state of the order book. Possible values are open and closed.

**`open_interest`**: `float`

The total amount of outstanding contracts in the corresponding amount units.

**`index_price`**: `float`

Current index (reference) price

**`best_ask_amount`**: `float`

It represents the requested order size of all best asks

**`best_ask_price`**: `float`

The current best ask price, null if there aren't any asks

**`best_bid_price`**: `float`

The current best bid price, null if there aren't any bids

**`best_bid_amount`**: `float`

It represents the requested order size of all best bids

**`last_price`**: `float`

The price for the last trade

**`high`**: `float`

Highest price during 24h

**`low`**: `float`

Lowest price during 24h

**`change_percent`**: `float`

24-hour price change expressed as a percentage, null if there weren't any trades

**`volume`**: `float`

Volume during last 24h in base currency

**`volume_usd`**: `float`

Volume in USD

**`mark_price`**: `float`

The mark price for the instrument

**`settlement_price`**: `float`

The settlement price for the instrument. Only when state = open

**`delivery_price`**: `float`

The settlement price for the instrument. Only when state = closed.

**`estimated_delivery_price`**: `float`

Estimated delivery price for the market.

**`current_funding`**: `float`

Current funding (perpetual only)

**`funding_8h`**: `float`

Funding 8h (perpetual only)

**`interest_value`**: `float`

Value used to calculate realized_funding in positions (perpetual only)

**`max_price`**: `float`

The maximum price for the future. Any buy orders submitted higher than this price, will be clamped to this maximum.

**`min_price`**: `float`

The minimum price for the future. Any sell orders submitted lower than this price will be clamped to this minimum.

**`timestamp`**: `datetime`

The timestamp of the data.

</TabItem>
</Tabs>



---

---
title: "Futures Instruments"
description: "Get reference data for available futures instruments by provider"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `FuturesInstruments` | `FuturesInstrumentsQueryParams` | `FuturesInstrumentsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.futures_instruments import (
FuturesInstrumentsData,
FuturesInstrumentsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

**`instrument_id`**: `int`

Deribit Instrument ID

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`base_currency`**: `str`

The underlying currency being traded.

**`counter_currency`**: `str`

Counter currency for the instrument.

**`quote_currency`**: `str`

The currency in which the instrument prices are quoted.

**`settlement_currency`**: `str`

Settlement currency for the instrument.

**`future_type`**: `str`

Type of the instrument. linear or reversed

**`settlement_period`**: `str`

The settlement period.

**`price_index`**: `str`

Name of price index that is used for this instrument

**`contract_size`**: `float`

Contract size for instrument.

**`is_active`**: `bool`

Indicates if the instrument can currently be traded.

**`creation_timestamp`**: `datetime`

The time when the instrument was first created (milliseconds since the UNIX epoch).

**`expiration_timestamp`**: `datetime`

The time when the instrument will expire (milliseconds since the UNIX epoch).

**`tick_size`**: `float`

Specifies minimal price change and, as follows, the number of decimal places for instrument prices.

**`min_trade_amount`**: `float`

Minimum amount for trading, in USD units.

**`max_leverage`**: `int`

Maximal leverage for instrument.

**`max_liquidation_commission`**: `float`

Maximal liquidation trade commission for instrument.

**`block_trade_commission`**: `float`

Block Trade commission for instrument.

**`block_trade_min_trade_amount`**: `float`

Minimum amount for block trading.

**`block_trade_tick_size`**: `float`

Specifies minimal price change for block trading.

**`maker_commission`**: `float`

Maker commission for instrument.

**`taker_commission`**: `float`

Taker commission for instrument.

</TabItem>
</Tabs>



---

---
title: "Gdp Forecast"
description: "Get Forecasted GDP Data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `GdpForecast` | `GdpForecastQueryParams` | `GdpForecastData` |

### Import Statement

```python
from openbb_core.provider.standard_models.gdp_forecast import (
GdpForecastData,
GdpForecastQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country, or countries, to get forward GDP projections for. Default is all. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `argentina`
- `asia`
- `australia`
- `austria`
- `belgium`
- `brazil`
- `bulgaria`
- `canada`
- `chile`
- `china`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `peru`
- `poland`
- `portugal`
- `romania`
- `russia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `other_major_oil_producers`
- `rest_of_the_world`
- `world`
- `all`
</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency of the data, default is annual.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`units`**: `Literal['current_prices', 'volume', 'capita', 'growth', 'deflator']`

<details>
<summary mdxType="summary">Description</summary>

Units of the data, default is volume (chain linked volume, 2015).<br/>
'current_prices', 'volume', and 'capita' are expressed in USD; 'growth' as a percent; 'deflator' as an index.

</details>

 • *Default:* `volume`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `Union[int, float]`

Forecasted GDP value for the country and date.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `Union[int, float]`

Forecasted GDP value for the country and date.

</TabItem>
</Tabs>



---

---
title: "Gdp Nominal"
description: "Get Nominal GDP Data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `GdpNominal` | `GdpNominalQueryParams` | `GdpNominalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.gdp_nominal import (
GdpNominalData,
GdpNominalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data.Use 'all' to get data for all available countries. Multiple items allowed for provider(s): econdb.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. Use 'all' to get data for all available countries. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `oecd`
- `oecd_26`
- `oecd_europe`
- `g7`
- `g20`
- `euro_area`
- `european_union_27`
- `european_union_15`
- `nafta`
- `argentina`
- `australia`
- `austria`
- `belgium`
- `bulgaria`
- `brazil`
- `canada`
- `chile`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `poland`
- `portugal`
- `romania`
- `russia`
- `saudi_arabia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`units`**: `Literal['level', 'index', 'capita']`

The unit of measurement for the data.Both 'level' and 'capita' (per) are measured in USD.

 • *Default:* `level`

 • *Optional:* `True`

---

**`price_base`**: `Literal['current_prices', 'volume']`

Price base for the data, volume is chain linked volume.

 • *Default:* `current_prices`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

Nominal GDP value for the country and date.

**`nominal_growth_qoq`**: `float`

Nominal GDP growth rate quarter over quarter.

**`nominal_growth_yoy`**: `float`

Nominal GDP growth rate year over year.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>
</Tabs>



---

---
title: "Gdp Real"
description: "Get Real GDP Data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `GdpReal` | `GdpRealQueryParams` | `GdpRealData` |

### Import Statement

```python
from openbb_core.provider.standard_models.gdp_real import (
GdpRealData,
GdpRealQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data.Use 'all' to get data for all available countries. Multiple items allowed for provider(s): econdb.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. Use 'all' to get data for all available countries. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `oecd`
- `oecd_26`
- `oecd_europe`
- `g7`
- `g20`
- `euro_area`
- `european_union_27`
- `european_union_15`
- `nafta`
- `argentina`
- `australia`
- `austria`
- `belgium`
- `bulgaria`
- `brazil`
- `canada`
- `chile`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `poland`
- `portugal`
- `romania`
- `russia`
- `saudi_arabia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

Real GDP value for the country and date.

**`real_growth_qoq`**: `float`

Real GDP growth rate quarter over quarter.

**`real_growth_yoy`**: `float`

Real GDP growth rate year over year.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>
</Tabs>



---

---
title: "Government Trades"
description: "Obtain government transaction data, including data from the Senate
and the House of Representatives"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `GovernmentTrades` | `GovernmentTradesQueryParams` | `GovernmentTradesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.government_trades import (
GovernmentTradesData,
GovernmentTradesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `True`

---

**`chamber`**: `Literal['house', 'senate', 'all']`

Government Chamber.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `True`

---

**`chamber`**: `Literal['house', 'senate', 'all']`

Government Chamber.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`transaction_date`**: `date`

Date of Transaction.

**`representative`**: `str`

Name of Representative.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`transaction_date`**: `date`

Date of Transaction.

**`representative`**: `str`

Name of Representative.

**`chamber`**: `Literal['house', 'senate']`

Government Chamber - House or Senate.

**`owner`**: `str`

Ownership status (e.g., Spouse, Joint).

**`asset_type`**: `str`

Type of asset involved in the transaction.

**`asset_description`**: `str`

Description of the asset.

**`transaction_type`**: `str`

Type of transaction (e.g., Sale, Purchase).

**`amount`**: `str`

Transaction amount range.

**`comment`**: `str`

Additional comments on the transaction.

**`url`**: `str`

Link to the transaction document.

</TabItem>
</Tabs>



---

---
title: "Growth Tech Equities"
description: "Get top tech stocks based on revenue and earnings growth"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `GrowthTechEquities` | `GrowthTechEquitiesQueryParams` | `GrowthTechEquitiesData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
GrowthTechEquitiesData,
GrowthTechEquitiesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "High Quality Market Corporate Bond"
description: "High Quality Market Corporate Bond"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HighQualityMarketCorporateBond` | `HighQualityMarketCorporateBondQueryParams` | `HighQualityMarketCorporateBondData` |

### Import Statement

```python
from openbb_core.provider.standard_models.high_quality_market import (
HighQualityMarketCorporateBondData,
HighQualityMarketCorporateBondQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`yield_curve`**: `Literal['spot', 'par']`

The yield curve type.

 • *Default:* `spot`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Interest rate.

**`maturity`**: `str`

Maturity.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Interest rate.

**`maturity`**: `str`

Maturity.

</TabItem>
</Tabs>



---

---
title: "Historical Attributes"
description: "Get the historical values of a data tag from Intrinio"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalAttributes` | `HistoricalAttributesQueryParams` | `HistoricalAttributesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_attributes import (
HistoricalAttributesData,
HistoricalAttributesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['daily', 'weekly', 'monthly', 'quarterly', 'yearly']`

The frequency of the data.

 • *Default:* `yearly`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

---

**`tag_type`**: `str`

Filter by type, when applicable.

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['daily', 'weekly', 'monthly', 'quarterly', 'yearly']`

The frequency of the data.

 • *Default:* `yearly`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

---

**`tag_type`**: `str`

Filter by type, when applicable.

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `float`

The value of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `float`

The value of the data.

</TabItem>
</Tabs>



---

---
title: "Historical Dividends"
description: "Get historical dividend data for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalDividends` | `HistoricalDividendsQueryParams` | `HistoricalDividendsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_dividends import (
HistoricalDividendsData,
HistoricalDividendsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`label`**: `str`

Label of the historical dividends.

**`adj_dividend`**: `float`

Adjusted dividend of the historical dividends.

**`record_date`**: `date`

Record date of the historical dividends.

**`payment_date`**: `date`

Payment date of the historical dividends.

**`declaration_date`**: `date`

Declaration date of the historical dividends.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`factor`**: `float`

factor by which to multiply stock prices before this date, in order to calculate historically-adjusted stock prices.

**`currency`**: `str`

The currency in which the dividend is paid.

**`split_ratio`**: `float`

The ratio of the stock split, if a stock split occurred.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`dividend_type`**: `str`

The type of dividend - i.e., cash, stock.

**`currency`**: `str`

The currency in which the dividend is paid.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`currency`**: `str`

The currency the dividend is paid in.

**`decalaration_date`**: `date`

The date of the announcement.

**`record_date`**: `date`

The record date of ownership for rights to the dividend.

**`payment_date`**: `date`

The date the dividend is paid.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

</TabItem>
</Tabs>



---

---
title: "Historical Employees"
description: "Get historical employee count data for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalEmployees` | `HistoricalEmployeesQueryParams` | `HistoricalEmployeesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_employees import (
HistoricalEmployeesData,
HistoricalEmployeesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`acceptance_time`**: `datetime`

Time of acceptance of the company employee.

**`period_of_report`**: `date`

Date of reporting of the company employee.

**`company_name`**: `str`

Registered name of the company to retrieve the historical employees of.

**`form_type`**: `str`

Form type of the company employee.

**`filing_date`**: `date`

Filing date of the company employee

**`employee_count`**: `int`

Count of employees of the company.

**`source`**: `str`

Source URL which retrieves this data for the company.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`acceptance_time`**: `datetime`

Time of acceptance of the company employee.

**`period_of_report`**: `date`

Date of reporting of the company employee.

**`company_name`**: `str`

Registered name of the company to retrieve the historical employees of.

**`form_type`**: `str`

Form type of the company employee.

**`filing_date`**: `date`

Filing date of the company employee

**`employee_count`**: `int`

Count of employees of the company.

**`source`**: `str`

Source URL which retrieves this data for the company.

</TabItem>
</Tabs>



---

---
title: "Historical Eps"
description: "Get historical earnings per share data for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalEps` | `HistoricalEpsQueryParams` | `HistoricalEpsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_eps import (
HistoricalEpsData,
HistoricalEpsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

**`surprise`**: `float`

Surprise in EPS (Actual - Estimated).

**`surprise_percent`**: `Union[float, str]`

EPS surprise as a normalized percent.

**`reported_date`**: `date`

Date of the earnings report.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

**`revenue_estimated`**: `float`

Estimated consensus revenue for the reporting period.

**`revenue_actual`**: `float`

The actual reported revenue.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`updated_at`**: `date`

The date when the data was last updated.

**`period_ending`**: `date`

The fiscal period end date.

</TabItem>
</Tabs>



---

---
title: "Historical Market Cap"
description: "Get the historical market cap of a ticker symbol"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalMarketCap` | `HistoricalMarketCapQueryParams` | `HistoricalMarketCapData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_market_cap import (
HistoricalMarketCapData,
HistoricalMarketCapQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['day', 'week', 'month', 'quarter', 'year']`

None

 • *Default:* `day`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>
</Tabs>



---

---
title: "Historical Splits"
description: "Get historical stock splits for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HistoricalSplits` | `HistoricalSplitsQueryParams` | `HistoricalSplitsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.historical_splits import (
HistoricalSplitsData,
HistoricalSplitsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`numerator`**: `float`

Numerator of the split.

**`denominator`**: `float`

Denominator of the split.

**`split_ratio`**: `str`

Split ratio.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`numerator`**: `float`

Numerator of the split.

**`denominator`**: `float`

Denominator of the split.

**`split_ratio`**: `str`

Split ratio.

</TabItem>
</Tabs>



---

---
title: "House Price Index"
description: "Get the House Price Index by country from the OECD Short-Term Economics Statistics"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `HousePriceIndex` | `HousePriceIndexQueryParams` | `HousePriceIndexData` |

### Import Statement

```python
from openbb_core.provider.standard_models.house_price_index import (
HousePriceIndexData,
HousePriceIndexQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `index`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `index`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>
</Tabs>



---

---
title: "ICE Bof A"
description: "ICE BofA US Corporate Bond Indices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ICEBofA` | `ICEBofAQueryParams` | `ICEBofAData` |

### Import Statement

```python
from openbb_core.provider.standard_models.ice_bofa import (
ICEBofAData,
ICEBofAQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'spread']`

The type of series.

 • *Default:* `yield`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'spread']`

The type of series.

 • *Default:* `yield`

 • *Optional:* `True`

---

**`category`**: `Literal['all', 'duration', 'eur', 'usd']`

The type of category.

 • *Default:* `all`

 • *Optional:* `True`

---

**`area`**: `Literal['asia', 'emea', 'eu', 'ex_g10', 'latin_america', 'us']`

The type of area.

 • *Default:* `us`

 • *Optional:* `True`

---

**`grade`**: `Literal['a', 'aa', 'aaa', 'b', 'bb', 'bbb', 'ccc', 'crossover', 'high_grade', 'high_yield', 'non_financial', 'non_sovereign', 'private_sector', 'public_sector']`

The type of grade.

 • *Default:* `non_sovereign`

 • *Optional:* `True`

---

**`options`**: `bool`

Whether to include options in the results.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

ICE BofA US Corporate Bond Indices Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

ICE BofA US Corporate Bond Indices Rate.

</TabItem>
</Tabs>



---

---
title: "IORB"
description: "Interest on Reserve Balances"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IORB` | `IORBQueryParams` | `IORBData` |

### Import Statement

```python
from openbb_core.provider.standard_models.iorb_rates import (
IORBData,
IORBQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

IORB rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

IORB rate.

</TabItem>
</Tabs>



---

---
title: "Immediate Interest Rate"
description: "Get immediate interest rates by country"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ImmediateInterestRate` | `ImmediateInterestRateQueryParams` | `ImmediateInterestRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.immediate_interest_rate import (
ImmediateInterestRateData,
ImmediateInterestRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which interest rate is given

**`value`**: `float`

Immediate interest rates, call money, interbank rate.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which interest rate is given

**`value`**: `float`

Immediate interest rates, call money, interbank rate.

</TabItem>
</Tabs>



---

---
title: "Income Statement"
description: "Get the income statement for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IncomeStatement` | `IncomeStatementQueryParams` | `IncomeStatementData` |

### Import Statement

```python
from openbb_core.provider.standard_models.income_statement import (
IncomeStatementData,
IncomeStatementQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date when the filing was made.

**`accepted_date`**: `datetime`

The date and time when the filing was accepted.

**`reported_currency`**: `str`

The currency in which the balance sheet was reported.

**`revenue`**: `float`

Total revenue.

**`cost_of_revenue`**: `float`

Cost of revenue.

**`gross_profit`**: `float`

Gross profit.

**`gross_profit_margin`**: `float`

Gross profit margin.

**`general_and_admin_expense`**: `float`

General and administrative expenses.

**`research_and_development_expense`**: `float`

Research and development expenses.

**`selling_and_marketing_expense`**: `float`

Selling and marketing expenses.

**`selling_general_and_admin_expense`**: `float`

Selling, general and administrative expenses.

**`other_expenses`**: `float`

Other expenses.

**`total_operating_expenses`**: `float`

Total operating expenses.

**`cost_and_expenses`**: `float`

Cost and expenses.

**`interest_income`**: `float`

Interest income.

**`total_interest_expense`**: `float`

Total interest expenses.

**`depreciation_and_amortization`**: `float`

Depreciation and amortization.

**`ebitda`**: `float`

EBITDA.

**`ebitda_margin`**: `float`

EBITDA margin.

**`total_operating_income`**: `float`

Total operating income.

**`operating_income_margin`**: `float`

Operating income margin.

**`total_other_income_expenses`**: `float`

Total other income and expenses.

**`total_pre_tax_income`**: `float`

Total pre-tax income.

**`pre_tax_income_margin`**: `float`

Pre-tax income margin.

**`income_tax_expense`**: `float`

Income tax expense.

**`consolidated_net_income`**: `float`

Consolidated net income.

**`net_income_margin`**: `float`

Net income margin.

**`basic_earnings_per_share`**: `float`

Basic earnings per share.

**`diluted_earnings_per_share`**: `float`

Diluted earnings per share.

**`weighted_average_basic_shares_outstanding`**: `float`

Weighted average basic shares outstanding.

**`weighted_average_diluted_shares_outstanding`**: `float`

Weighted average diluted shares outstanding.

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`revenue`**: `float`

Total revenue

**`operating_revenue`**: `float`

Total operating revenue

**`cost_of_revenue`**: `float`

Total cost of revenue

**`operating_cost_of_revenue`**: `float`

Total operating cost of revenue

**`gross_profit`**: `float`

Total gross profit

**`gross_profit_margin`**: `float`

Gross margin ratio.

**`provision_for_credit_losses`**: `float`

Provision for credit losses

**`research_and_development_expense`**: `float`

Research and development expense

**`selling_general_and_admin_expense`**: `float`

Selling, general, and admin expense

**`salaries_and_employee_benefits`**: `float`

Salaries and employee benefits

**`marketing_expense`**: `float`

Marketing expense

**`net_occupancy_and_equipment_expense`**: `float`

Net occupancy and equipment expense

**`other_operating_expenses`**: `float`

Other operating expenses

**`depreciation_expense`**: `float`

Depreciation expense

**`amortization_expense`**: `float`

Amortization expense

**`amortization_of_deferred_policy_acquisition_costs`**: `float`

Amortization of deferred policy acquisition costs

**`exploration_expense`**: `float`

Exploration expense

**`depletion_expense`**: `float`

Depletion expense

**`total_operating_expenses`**: `float`

Total operating expenses

**`total_operating_income`**: `float`

Total operating income

**`deposits_and_money_market_investments_interest_income`**: `float`

Deposits and money market investments interest income

**`federal_funds_sold_and_securities_borrowed_interest_income`**: `float`

Federal funds sold and securities borrowed interest income

**`investment_securities_interest_income`**: `float`

Investment securities interest income

**`loans_and_leases_interest_income`**: `float`

Loans and leases interest income

**`trading_account_interest_income`**: `float`

Trading account interest income

**`other_interest_income`**: `float`

Other interest income

**`total_non_interest_income`**: `float`

Total non-interest income

**`interest_and_investment_income`**: `float`

Interest and investment income

**`short_term_borrowings_interest_expense`**: `float`

Short-term borrowings interest expense

**`long_term_debt_interest_expense`**: `float`

Long-term debt interest expense

**`capitalized_lease_obligations_interest_expense`**: `float`

Capitalized lease obligations interest expense

**`deposits_interest_expense`**: `float`

Deposits interest expense

**`federal_funds_purchased_and_securities_sold_interest_expense`**: `float`

Federal funds purchased and securities sold interest expense

**`other_interest_expense`**: `float`

Other interest expense

**`total_interest_expense`**: `float`

Total interest expense

**`net_interest_income`**: `float`

Net interest income

**`other_non_interest_income`**: `float`

Other non-interest income

**`investment_banking_income`**: `float`

Investment banking income

**`trust_fees_by_commissions`**: `float`

Trust fees by commissions

**`premiums_earned`**: `float`

Premiums earned

**`insurance_policy_acquisition_costs`**: `float`

Insurance policy acquisition costs

**`current_and_future_benefits`**: `float`

Current and future benefits

**`property_and_liability_insurance_claims`**: `float`

Property and liability insurance claims

**`total_non_interest_expense`**: `float`

Total non-interest expense

**`net_realized_and_unrealized_capital_gains_on_investments`**: `float`

Net realized and unrealized capital gains on investments

**`other_gains`**: `float`

Other gains

**`non_operating_income`**: `float`

Non-operating income

**`other_income`**: `float`

Other income

**`other_revenue`**: `float`

Other revenue

**`extraordinary_income`**: `float`

Extraordinary income

**`total_other_income`**: `float`

Total other income

**`ebitda`**: `float`

Earnings Before Interest, Taxes, Depreciation and Amortization.

**`ebitda_margin`**: `float`

Margin on Earnings Before Interest, Taxes, Depreciation and Amortization.

**`total_pre_tax_income`**: `float`

Total pre-tax income

**`ebit`**: `float`

Earnings Before Interest and Taxes.

**`pre_tax_income_margin`**: `float`

Pre-Tax Income Margin.

**`income_tax_expense`**: `float`

Income tax expense

**`impairment_charge`**: `float`

Impairment charge

**`restructuring_charge`**: `float`

Restructuring charge

**`service_charges_on_deposit_accounts`**: `float`

Service charges on deposit accounts

**`other_service_charges`**: `float`

Other service charges

**`other_special_charges`**: `float`

Other special charges

**`other_cost_of_revenue`**: `float`

Other cost of revenue

**`net_income_continuing_operations`**: `float`

Net income (continuing operations)

**`net_income_discontinued_operations`**: `float`

Net income (discontinued operations)

**`consolidated_net_income`**: `float`

Consolidated net income

**`other_adjustments_to_consolidated_net_income`**: `float`

Other adjustments to consolidated net income

**`other_adjustment_to_net_income_attributable_to_common_shareholders`**: `float`

Other adjustment to net income attributable to common shareholders

**`net_income_attributable_to_noncontrolling_interest`**: `float`

Net income attributable to noncontrolling interest

**`net_income_attributable_to_common_shareholders`**: `float`

Net income attributable to common shareholders

**`basic_earnings_per_share`**: `float`

Basic earnings per share

**`diluted_earnings_per_share`**: `float`

Diluted earnings per share

**`basic_and_diluted_earnings_per_share`**: `float`

Basic and diluted earnings per share

**`cash_dividends_to_common_per_share`**: `float`

Cash dividends to common per share

**`preferred_stock_dividends_declared`**: `float`

Preferred stock dividends declared

**`weighted_average_basic_shares_outstanding`**: `float`

Weighted average basic shares outstanding

**`weighted_average_diluted_shares_outstanding`**: `float`

Weighted average diluted shares outstanding

**`weighted_average_basic_and_diluted_shares_outstanding`**: `float`

Weighted average basic and diluted shares outstanding

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`revenue`**: `float`

Total Revenue

**`cost_of_revenue_goods`**: `float`

Cost of Revenue - Goods

**`cost_of_revenue_services`**: `float`

Cost of Revenue - Services

**`cost_of_revenue`**: `float`

Cost of Revenue

**`gross_profit`**: `float`

Gross Profit

**`provisions_for_loan_lease_and_other_losses`**: `float`

Provisions for loan lease and other losses

**`depreciation_and_amortization`**: `float`

Depreciation and Amortization

**`income_tax_expense_benefit_current`**: `float`

Income tax expense benefit current

**`deferred_tax_benefit`**: `float`

Deferred tax benefit

**`benefits_costs_expenses`**: `float`

Benefits, costs and expenses

**`selling_general_and_administrative_expense`**: `float`

Selling, general and administrative expense

**`research_and_development`**: `float`

Research and development

**`costs_and_expenses`**: `float`

Costs and expenses

**`other_operating_expenses`**: `float`

Other Operating Expenses

**`operating_expenses`**: `float`

Operating expenses

**`operating_income`**: `float`

Operating Income/Loss

**`non_operating_income`**: `float`

Non Operating Income/Loss

**`interest_and_dividend_income`**: `float`

Interest and Dividend Income

**`total_interest_expense`**: `float`

Interest Expense

**`interest_and_debt_expense`**: `float`

Interest and Debt Expense

**`net_interest_income`**: `float`

Interest Income Net

**`interest_income_after_provision_for_losses`**: `float`

Interest Income After Provision for Losses

**`non_interest_expense`**: `float`

Non-Interest Expense

**`non_interest_income`**: `float`

Non-Interest Income

**`income_from_discontinued_operations_net_of_tax_on_disposal`**: `float`

Income From Discontinued Operations Net of Tax on Disposal

**`income_from_discontinued_operations_net_of_tax`**: `float`

Income From Discontinued Operations Net of Tax

**`income_before_equity_method_investments`**: `float`

Income Before Equity Method Investments

**`income_from_equity_method_investments`**: `float`

Income From Equity Method Investments

**`total_pre_tax_income`**: `float`

Income Before Tax

**`income_tax_expense`**: `float`

Income Tax Expense

**`income_after_tax`**: `float`

Income After Tax

**`consolidated_net_income`**: `float`

Net Income/Loss

**`net_income_attributable_noncontrolling_interest`**: `float`

Net income (loss) attributable to noncontrolling interest

**`net_income_attributable_to_parent`**: `float`

Net income (loss) attributable to parent

**`net_income_attributable_to_common_shareholders`**: `float`

Net Income/Loss Available To Common Stockholders Basic

**`participating_securities_earnings`**: `float`

Participating Securities Distributed And Undistributed Earnings Loss Basic

**`undistributed_earnings_allocated_to_participating_securities`**: `float`

Undistributed Earnings Allocated To Participating Securities

**`common_stock_dividends`**: `float`

Common Stock Dividends

**`preferred_stock_dividends_and_other_adjustments`**: `float`

Preferred stock dividends and other adjustments

**`basic_earnings_per_share`**: `float`

Earnings Per Share

**`diluted_earnings_per_share`**: `float`

Diluted Earnings Per Share

**`weighted_average_basic_shares_outstanding`**: `float`

Basic Average Shares

**`weighted_average_diluted_shares_outstanding`**: `float`

Diluted Average Shares

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "Income Statement Growth"
description: "Get the growth of a company's income statement items over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IncomeStatementGrowth` | `IncomeStatementGrowthQueryParams` | `IncomeStatementGrowthData` |

### Import Statement

```python
from openbb_core.provider.standard_models.income_statement_growth import (
IncomeStatementGrowthData,
IncomeStatementGrowthQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_revenue`**: `float`

Growth rate of total revenue.

**`growth_cost_of_revenue`**: `float`

Growth rate of cost of goods sold.

**`growth_gross_profit`**: `float`

Growth rate of gross profit.

**`growth_gross_profit_margin`**: `float`

Growth rate of gross profit as a percentage of revenue.

**`growth_general_and_admin_expense`**: `float`

Growth rate of general and administrative expenses.

**`growth_research_and_development_expense`**: `float`

Growth rate of expenses on research and development.

**`growth_selling_and_marketing_expense`**: `float`

Growth rate of expenses on selling and marketing activities.

**`growth_other_expenses`**: `float`

Growth rate of other operating expenses.

**`growth_operating_expenses`**: `float`

Growth rate of total operating expenses.

**`growth_cost_and_expenses`**: `float`

Growth rate of total costs and expenses.

**`growth_interest_expense`**: `float`

Growth rate of interest expenses.

**`growth_depreciation_and_amortization`**: `float`

Growth rate of depreciation and amortization expenses.

**`growth_ebitda`**: `float`

Growth rate of Earnings Before Interest, Taxes, Depreciation, and Amortization.

**`growth_ebitda_margin`**: `float`

Growth rate of EBITDA as a percentage of revenue.

**`growth_operating_income`**: `float`

Growth rate of operating income.

**`growth_operating_income_margin`**: `float`

Growth rate of operating income as a percentage of revenue.

**`growth_total_other_income_expenses_net`**: `float`

Growth rate of net total other income and expenses.

**`growth_income_before_tax`**: `float`

Growth rate of income before taxes.

**`growth_income_before_tax_margin`**: `float`

Growth rate of income before taxes as a percentage of revenue.

**`growth_income_tax_expense`**: `float`

Growth rate of income tax expenses.

**`growth_consolidated_net_income`**: `float`

Growth rate of net income.

**`growth_net_income_margin`**: `float`

Growth rate of net income as a percentage of revenue.

**`growth_basic_earings_per_share`**: `float`

Growth rate of Earnings Per Share (EPS).

**`growth_diluted_earnings_per_share`**: `float`

Growth rate of diluted Earnings Per Share (EPS).

**`growth_weighted_average_basic_shares_outstanding`**: `float`

Growth rate of weighted average shares outstanding.

**`growth_weighted_average_diluted_shares_outstanding`**: `float`

Growth rate of diluted weighted average shares outstanding.

</TabItem>
</Tabs>



---

---
title: "Index Constituents"
description: "Get Index Constituents"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IndexConstituents` | `IndexConstituentsQueryParams` | `IndexConstituentsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.index_constituents import (
IndexConstituentsData,
IndexConstituentsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Literal['BAT20P', 'BBE20P', 'BCH20P', 'BCHM30P', 'BDE40P', 'BDEM50P', 'BDES50P', 'BDK25P', 'BEP50P', 'BEPACP', 'BEPBUS', 'BEPCNC', 'BEPCONC', 'BEPCONS', 'BEPENGY', 'BEPFIN', 'BEPHLTH', 'BEPIND', 'BEPNEM', 'BEPTEC', 'BEPTEL', 'BEPUTL', 'BEPXUKP', 'BES35P', 'BEZ50P', 'BEZACP', 'BFI25P', 'BFR40P', 'BFRM20P', 'BIE20P', 'BIT40P', 'BNL25P', 'BNLM25P', 'BNO25G', 'BNORD40P', 'BPT20P', 'BSE30P', 'BUK100P', 'BUK250P', 'BUK350P', 'BUKAC', 'BUKBISP', 'BUKBUS', 'BUKCNC', 'BUKCONC', 'BUKCONS', 'BUKENGY', 'BUKFIN', 'BUKHI50P', 'BUKHLTH', 'BUKIND', 'BUKLO50P', 'BUKMINP', 'BUKNEM', 'BUKSC', 'BUKTEC', 'BUKTEL', 'BUKUTL']`

None

 • *Default:* `BUK100P`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Literal['dowjones', 'sp500', 'nasdaq']`

None

 • *Default:* `dowjones`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`security_type`**: `str`

The type of security represented.

**`last_price`**: `float`

Last price for the symbol.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`tick`**: `str`

Whether the last sale was an up or down tick.

**`last_trade_time`**: `datetime`

Last trade timestamp for the symbol.

**`asset_type`**: `str`

Type of asset.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`sector`**: `str`

Sector the constituent company in the index belongs to.

**`sub_sector`**: `str`

Sub-sector the constituent company in the index belongs to.

**`headquarter`**: `str`

Location of the headquarter of the constituent company in the index.

**`date_first_added`**: `Union[date, str]`

Date the constituent company was added to the index.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`founded`**: `Union[date, str]`

Founding year of the constituent company in the index.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`market_value`**: `float`

The quoted market value of the asset.

</TabItem>
</Tabs>



---

---
title: "Index Historical"
description: "Historical Index Levels"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IndexHistorical` | `IndexHistoricalQueryParams` | `IndexHistoricalData` |

### Import Statement

```python
from openbb_core.provider.standard_models.index_historical import (
IndexHistoricalData,
IndexHistoricalQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10000`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`calls_volume`**: `float`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `float`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `float`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>
</Tabs>



---

---
title: "Index Search"
description: "Filter indices for rows containing the query"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IndexSearch` | `IndexSearchQueryParams` | `IndexSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models.index_search import (
IndexSearchData,
IndexSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the Cboe Index directory will be cached for 24 hours. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`description`**: `str`

Description for the index.

**`data_delay`**: `int`

Data delay for the index. Valid only for US indices.

**`currency`**: `str`

Currency for the index.

**`time_zone`**: `str`

Time zone for the index. Valid only for US indices.

**`open_time`**: `datetime.time`

Opening time for the index. Valid only for US indices.

**`close_time`**: `datetime.time`

Closing time for the index. Valid only for US indices.

**`tick_days`**: `str`

The trading days for the index. Valid only for US indices.

**`tick_frequency`**: `str`

Tick frequency for the index. Valid only for US indices.

**`tick_period`**: `str`

Tick period for the index. Valid only for US indices.

</TabItem>
</Tabs>



---

---
title: "Index Sectors"
description: "Get Index Sectors"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IndexSectors` | `IndexSectorsQueryParams` | `IndexSectorsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.index_sectors import (
IndexSectorsData,
IndexSectorsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All Index data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 1 day.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`sector`**: `str`

The sector name.

**`weight`**: `float`

The weight of the sector in the index.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sector`**: `str`

The sector name.

**`weight`**: `float`

The weight of the sector in the index.

</TabItem>
</Tabs>



---

---
title: "Index Snapshots"
description: "Index Snapshots"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `IndexSnapshots` | `IndexSnapshotsQueryParams` | `IndexSnapshotsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.index_snapshots import (
IndexSnapshotsData,
IndexSnapshotsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`region`**: `str`

The region of focus for the data - i.e., us, eu.

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`region`**: `Literal['us', 'eu']`

None

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`region`**: `Literal['ca', 'us']`

None

 • *Default:* `ca`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in value of the index.

**`change_percent`**: `float`

Change, in normalized percentage points, of the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`bid`**: `float`

Current bid price.

**`ask`**: `float`

Current ask price.

**`last_trade_time`**: `datetime`

Last trade timestamp for the symbol.

**`status`**: `str`

Status of the market, open or closed.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in value of the index.

**`change_percent`**: `float`

Change, in normalized percentage points, of the index.

**`year_high`**: `float`

The 52-week high of the index.

**`year_low`**: `float`

The 52-week low of the index.

**`return_mtd`**: `float`

The month-to-date return of the index, as a normalized percent.

**`return_qtd`**: `float`

The quarter-to-date return of the index, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the index, as a normalized percent.

**`total_market_value`**: `float`

The total quoted market value of the index.

**`number_of_constituents`**: `int`

The number of constituents in the index.

**`constituent_average_market_value`**: `float`

The average quoted market value of the index constituents.

**`constituent_median_market_value`**: `float`

The median quoted market value of the index constituents.

**`constituent_top10_market_value`**: `float`

The sum of the top 10 quoted market values of the index constituents.

**`constituent_largest_market_value`**: `float`

The largest quoted market value of the index constituents.

**`constituent_largest_weight`**: `float`

The largest weight of the index constituents, as a normalized percent.

**`constituent_smallest_market_value`**: `float`

The smallest quoted market value of the index constituents.

**`constituent_smallest_weight`**: `float`

The smallest weight of the index constituents, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "Insider Trading"
description: "Get data about trading by a company's management team and board of directors"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `InsiderTrading` | `InsiderTradingQueryParams` | `InsiderTradingData` |

### Import Statement

```python
from openbb_core.provider.standard_models.insider_trading import (
InsiderTradingData,
InsiderTradingQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`transaction_type`**: `Literal['award', 'conversion', 'return', 'expire_short', 'in_kind', 'gift', 'expire_long', 'discretionary', 'other', 'small', 'exempt', 'otm', 'purchase', 'sale', 'tender', 'will', 'itm', 'trust']`

Type of the transaction.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `False`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `False`

---

**`ownership_type`**: `Literal['D', 'I']`

Type of ownership.

 • *Optional:* `True`

---

**`sort_by`**: `Literal['filing_date', 'updated_on']`

Field to sort by.

 • *Default:* `updated_on`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. Default is today.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`summary`**: `bool`

Return a summary of the insider activity instead of the individuals.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`form_type`**: `str`

Form type of the insider trading.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

URL of the filing.

**`company_name`**: `str`

Name of the company.

**`conversion_exercise_price`**: `float`

Conversion/Exercise price of the shares.

**`deemed_execution_date`**: `date`

Deemed execution date of the trade.

**`exercise_date`**: `date`

Exercise date of the trade.

**`expiration_date`**: `date`

Expiration date of the derivative.

**`underlying_security_title`**: `str`

Name of the underlying non-derivative security related to this derivative transaction.

**`underlying_shares`**: `Union[float, int]`

Number of underlying shares related to this derivative transaction.

**`nature_of_ownership`**: `str`

Nature of ownership of the insider trading.

**`director`**: `bool`

Whether the owner is a director.

**`officer`**: `bool`

Whether the owner is an officer.

**`ten_percent_owner`**: `bool`

Whether the owner is a 10% owner.

**`other_relation`**: `bool`

Whether the owner is having another relation.

**`derivative_transaction`**: `bool`

Whether the owner is having a derivative transaction.

**`report_line_number`**: `int`

Report line number of the insider trading.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`company_name`**: `str`

Name of the company.

**`form`**: `Union[str, int]`

Form type.

**`director`**: `bool`

Whether the owner is a director.

**`officer`**: `bool`

Whether the owner is an officer.

**`ten_percent_owner`**: `bool`

Whether the owner is a 10% owner.

**`other`**: `bool`

Whether the owner is classified as other.

**`other_text`**: `str`

Text for other classification.

**`transaction_timeliness`**: `str`

Timeliness of the transaction.

**`ownership_type`**: `str`

Type of ownership, direct or indirect.

**`nature_of_ownership`**: `str`

Nature of the ownership.

**`exercise_date`**: `date`

Date of exercise.

**`expiration_date`**: `date`

Date of expiration for the derivative.

**`deemed_execution_date`**: `date`

Deemed execution date.

**`underlying_security_title`**: `str`

Title of the underlying security.

**`underlying_security_shares`**: `float`

Number of underlying shares associated with the derivative.

**`underlying_security_value`**: `float`

Value of the underlying security.

**`conversion_exercise_price`**: `float`

Price of conversion or exercise of the securities.

**`transaction_value`**: `float`

Total value of the transaction.

**`value_owned`**: `float`

Value of the securities owned after the transaction.

**`footnote`**: `str`

Footnote for the transaction.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

The name of the insider.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `int`

The number of shares held by the insider.

**`securities_transacted`**: `int`

The total number of shares traded by the insider over the period.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`period`**: `str`

The period of the activity. Bucketed by three, six, and twelve months.

**`acquisition_or_deposition`**: `str`

Whether the insider bought or sold the shares.

**`number_of_trades`**: `int`

The number of shares traded over the period.

**`trade_value`**: `float`

The value of the shares traded by the insider.

**`securities_bought`**: `int`

The total number of shares bought by all insiders over the period.

**`securities_sold`**: `int`

The total number of shares sold by all insiders over the period.

**`net_activity`**: `int`

The total net activity by all insiders over the period.

</TabItem>
</Tabs>



---

---
title: "Institutional Ownership"
description: "Get data about institutional ownership for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `InstitutionalOwnership` | `InstitutionalOwnershipQueryParams` | `InstitutionalOwnershipData` |

### Import Statement

```python
from openbb_core.provider.standard_models.institutional_ownership import (
InstitutionalOwnershipData,
InstitutionalOwnershipQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`include_current_quarter`**: `bool`

Include current quarter data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`date`**: `Union[date, str]`

The date of the data.

**`investors_holding`**: `int`

Number of investors holding the stock.

**`last_investors_holding`**: `int`

Number of investors holding the stock in the last quarter.

**`investors_holding_change`**: `int`

Change in the number of investors holding the stock.

**`number_of_13f_shares`**: `int`

Number of 13F shares.

**`last_number_of_13f_shares`**: `int`

Number of 13F shares in the last quarter.

**`number_of_13f_shares_change`**: `int`

Change in the number of 13F shares.

**`total_invested`**: `float`

Total amount invested.

**`last_total_invested`**: `float`

Total amount invested in the last quarter.

**`total_invested_change`**: `float`

Change in the total amount invested.

**`ownership_percent`**: `float`

Ownership percent.

**`last_ownership_percent`**: `float`

Ownership percent in the last quarter.

**`ownership_percent_change`**: `float`

Change in the ownership percent.

**`new_positions`**: `int`

Number of new positions.

**`last_new_positions`**: `int`

Number of new positions in the last quarter.

**`new_positions_change`**: `int`

Change in the number of new positions.

**`increased_positions`**: `int`

Number of increased positions.

**`last_increased_positions`**: `int`

Number of increased positions in the last quarter.

**`increased_positions_change`**: `int`

Change in the number of increased positions.

**`closed_positions`**: `int`

Number of closed positions.

**`last_closed_positions`**: `int`

Number of closed positions in the last quarter.

**`closed_positions_change`**: `int`

Change in the number of closed positions.

**`reduced_positions`**: `int`

Number of reduced positions.

**`last_reduced_positions`**: `int`

Number of reduced positions in the last quarter.

**`reduced_positions_change`**: `int`

Change in the number of reduced positions.

**`total_calls`**: `int`

Total number of call options contracts traded for Apple Inc. on the specified date.

**`last_total_calls`**: `int`

Total number of call options contracts traded for Apple Inc. on the previous reporting date.

**`total_calls_change`**: `int`

Change in the total number of call options contracts traded between the current and previous reporting dates.

**`total_puts`**: `int`

Total number of put options contracts traded for Apple Inc. on the specified date.

**`last_total_puts`**: `int`

Total number of put options contracts traded for Apple Inc. on the previous reporting date.

**`total_puts_change`**: `int`

Change in the total number of put options contracts traded between the current and previous reporting dates.

**`put_call_ratio`**: `float`

Put-call ratio, which is the ratio of the total number of put options to call options traded on the specified date.

**`last_put_call_ratio`**: `float`

Put-call ratio on the previous reporting date.

**`put_call_ratio_change`**: `float`

Change in the put-call ratio between the current and previous reporting dates.

</TabItem>
</Tabs>



---

---
title: "Institutions Search"
description: "Search SEC-regulated institutions by name and return a list of results with CIK numbers"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `InstitutionsSearch` | `InstitutionsSearchQueryParams` | `InstitutionsSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
InstitutionsSearchData,
InstitutionsSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`name`**: `str`

The name of the institution.

**`cik`**: `Union[str, int]`

Central Index Key (CIK)

</TabItem>
</Tabs>



---

---
title: "Key Executives"
description: "Get executive management team data for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `KeyExecutives` | `KeyExecutivesQueryParams` | `KeyExecutivesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.key_executives import (
KeyExecutivesData,
KeyExecutivesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

**`exercised_value`**: `int`

Value of shares exercised.

**`unexercised_value`**: `int`

Value of shares not exercised.

**`fiscal_year`**: `int`

Fiscal year of the pay.

</TabItem>
</Tabs>



---

---
title: "Key Metrics"
description: "Get fundamental metrics for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `KeyMetrics` | `KeyMetricsQueryParams` | `KeyMetricsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.key_metrics import (
KeyMetricsData,
KeyMetricsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`with_ttm`**: `bool`

Include trailing twelve months (TTM) data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`foward_pe`**: `float`

Forward price-to-earnings ratio (forward P/E)

**`eps`**: `float`

Earnings per share (EPS)

**`price_to_sales`**: `float`

Price-to-sales ratio (P/S)

**`price_to_book`**: `float`

Price-to-book ratio (P/B)

**`book_value_per_share`**: `float`

Book value per share (Book/sh)

**`price_to_cash`**: `float`

Price-to-cash ratio (P/C)

**`cash_per_share`**: `float`

Cash per share (Cash/sh)

**`price_to_free_cash_flow`**: `float`

Price-to-free cash flow ratio (P/FCF)

**`debt_to_equity`**: `float`

Debt-to-equity ratio (Debt/Eq)

**`long_term_debt_to_equity`**: `float`

Long-term debt-to-equity ratio (LT Debt/Eq)

**`quick_ratio`**: `float`

Quick ratio

**`current_ratio`**: `float`

Current ratio

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`operating_margin`**: `float`

Operating margin, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets (ROA), as a normalized percent.

**`return_on_investment`**: `float`

Return on investment (ROI), as a normalized percent.

**`return_on_equity`**: `float`

Return on equity (ROE), as a normalized percent.

**`payout_ratio`**: `float`

Payout ratio, as a normalized percent.

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`period_ending`**: `date`

Period ending date.

**`fiscal_period`**: `str`

Period of the data.

**`calendar_year`**: `int`

Calendar year for the fiscal period.

**`revenue_per_share`**: `float`

Revenue per share

**`capex_per_share`**: `float`

Capital expenditures per share

**`net_income_per_share`**: `float`

Net income per share

**`operating_cash_flow_per_share`**: `float`

Operating cash flow per share

**`free_cash_flow_per_share`**: `float`

Free cash flow per share

**`cash_per_share`**: `float`

Cash per share

**`book_value_per_share`**: `float`

Book value per share

**`tangible_book_value_per_share`**: `float`

Tangible book value per share

**`shareholders_equity_per_share`**: `float`

Shareholders equity per share

**`interest_debt_per_share`**: `float`

Interest debt per share

**`price_to_sales`**: `float`

Price-to-sales ratio

**`price_to_operating_cash_flow`**: `float`

Price-to-operating cash flow ratio

**`price_to_free_cash_flow`**: `float`

Price-to-free cash flow ratio

**`price_to_book`**: `float`

Price-to-book ratio

**`price_to_tangible_book`**: `float`

Price-to-tangible book ratio

**`ev_to_sales`**: `float`

Enterprise value-to-sales ratio

**`ev_to_ebitda`**: `float`

Enterprise value-to-EBITDA ratio

**`ev_to_operating_cash_flow`**: `float`

Enterprise value-to-operating cash flow ratio

**`ev_to_free_cash_flow`**: `float`

Enterprise value-to-free cash flow ratio

**`earnings_yield`**: `float`

Earnings yield

**`free_cash_flow_yield`**: `float`

Free cash flow yield

**`debt_to_market_cap`**: `float`

Debt-to-market capitalization ratio

**`debt_to_equity`**: `float`

Debt-to-equity ratio

**`debt_to_assets`**: `float`

Debt-to-assets ratio

**`net_debt_to_ebitda`**: `float`

Net debt-to-EBITDA ratio

**`current_ratio`**: `float`

Current ratio

**`interest_coverage`**: `float`

Interest coverage

**`income_quality`**: `float`

Income quality

**`payout_ratio`**: `float`

Payout ratio

**`sales_general_and_administrative_to_revenue`**: `float`

Sales general and administrative expenses-to-revenue ratio

**`research_and_development_to_revenue`**: `float`

Research and development expenses-to-revenue ratio

**`intangibles_to_total_assets`**: `float`

Intangibles-to-total assets ratio

**`capex_to_operating_cash_flow`**: `float`

Capital expenditures-to-operating cash flow ratio

**`capex_to_revenue`**: `float`

Capital expenditures-to-revenue ratio

**`capex_to_depreciation`**: `float`

Capital expenditures-to-depreciation ratio

**`stock_based_compensation_to_revenue`**: `float`

Stock-based compensation-to-revenue ratio

**`working_capital`**: `float`

Working capital

**`tangible_asset_value`**: `float`

Tangible asset value

**`net_current_asset_value`**: `float`

Net current asset value

**`enterprise_value`**: `float`

Enterprise value

**`invested_capital`**: `float`

Invested capital

**`average_receivables`**: `float`

Average receivables

**`average_payables`**: `float`

Average payables

**`average_inventory`**: `float`

Average inventory

**`days_sales_outstanding`**: `float`

Days sales outstanding

**`days_payables_outstanding`**: `float`

Days payables outstanding

**`days_of_inventory_on_hand`**: `float`

Days of inventory on hand

**`receivables_turnover`**: `float`

Receivables turnover

**`payables_turnover`**: `float`

Payables turnover

**`inventory_turnover`**: `float`

Inventory turnover

**`return_on_equity`**: `float`

Return on equity

**`return_on_invested_capital`**: `float`

Return on invested capital

**`return_on_tangible_assets`**: `float`

Return on tangible assets

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`graham_number`**: `float`

Graham number

**`graham_net_net`**: `float`

Graham net-net working capital

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`price_to_book`**: `float`

Price to book ratio.

**`price_to_tangible_book`**: `float`

Price to tangible book ratio.

**`price_to_revenue`**: `float`

Price to revenue ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`ebit_margin`**: `float`

EBIT margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`eps`**: `float`

Basic earnings per share.

**`eps_growth`**: `float`

EPS growth, as a normalized percent.

**`revenue_growth`**: `float`

Revenue growth, as a normalized percent.

**`ebitda_growth`**: `float`

EBITDA growth, as a normalized percent.

**`ebit_growth`**: `float`

EBIT growth, as a normalized percent.

**`net_income_growth`**: `float`

Net income growth, as a normalized percent.

**`free_cash_flow_to_firm_growth`**: `float`

Free cash flow to firm growth, as a normalized percent.

**`invested_capital_growth`**: `float`

Invested capital growth, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets, as a normalized percent.

**`return_on_equity`**: `float`

Return on equity, as a normalized percent.

**`return_on_invested_capital`**: `float`

Return on invested capital, as a normalized percent.

**`ebitda`**: `int`

Earnings before interest, taxes, depreciation, and amortization.

**`ebit`**: `int`

Earnings before interest and taxes.

**`long_term_debt`**: `int`

Long-term debt.

**`total_debt`**: `int`

Total debt.

**`total_capital`**: `int`

The sum of long-term debt and total shareholder equity.

**`enterprise_value`**: `int`

Enterprise value.

**`free_cash_flow_to_firm`**: `int`

Free cash flow to firm.

**`altman_z_score`**: `float`

Altman Z-score.

**`beta`**: `float`

Beta relative to the broad market (rolling three-year).

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`earnings_yield`**: `float`

Earnings yield, as a normalized percent.

**`last_price`**: `float`

Last price of the stock.

**`year_high`**: `float`

52 week high

**`year_low`**: `float`

52 week low

**`volume_avg`**: `int`

Average daily volume.

**`short_interest`**: `int`

Number of shares reported as sold short.

**`shares_outstanding`**: `int`

Weighted average shares outstanding (TTM).

**`days_to_cover`**: `float`

Days to cover short interest, based on average daily volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`forward_pe`**: `float`

Forward price-to-earnings ratio.

**`peg_ratio`**: `float`

PEG ratio (5-year expected).

**`peg_ratio_ttm`**: `float`

PEG ratio (TTM).

**`eps_ttm`**: `float`

Earnings per share (TTM).

**`eps_forward`**: `float`

Forward earnings per share.

**`enterprise_to_ebitda`**: `float`

Enterprise value to EBITDA ratio.

**`earnings_growth`**: `float`

Earnings growth (Year Over Year), as a normalized percent.

**`earnings_growth_quarterly`**: `float`

Quarterly earnings growth (Year Over Year), as a normalized percent.

**`revenue_per_share`**: `float`

Revenue per share (TTM).

**`revenue_growth`**: `float`

Revenue growth (Year Over Year), as a normalized percent.

**`enterprise_to_revenue`**: `float`

Enterprise value to revenue ratio.

**`cash_per_share`**: `float`

Cash per share.

**`quick_ratio`**: `float`

Quick ratio.

**`current_ratio`**: `float`

Current ratio.

**`debt_to_equity`**: `float`

Debt-to-equity ratio.

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`operating_margin`**: `float`

Operating margin, as a normalized percent.

**`ebitda_margin`**: `float`

EBITDA margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets, as a normalized percent.

**`return_on_equity`**: `float`

Return on equity, as a normalized percent.

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`dividend_yield_5y_avg`**: `float`

5-year average dividend yield, as a normalized percent.

**`payout_ratio`**: `float`

Payout ratio.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price-to-book ratio.

**`enterprise_value`**: `int`

Enterprise value.

**`overall_risk`**: `float`

Overall risk score.

**`audit_risk`**: `float`

Audit risk score.

**`board_risk`**: `float`

Board risk score.

**`compensation_risk`**: `float`

Compensation risk score.

**`shareholder_rights_risk`**: `float`

Shareholder rights risk score.

**`beta`**: `float`

Beta relative to the broad market (5-year monthly).

**`price_return_1y`**: `float`

One-year price return, as a normalized percent.

**`currency`**: `str`

Currency in which the data is presented.

</TabItem>
</Tabs>



---

---
title: "LTIR"
description: "Get Long-term interest rates that refer to government bonds maturing in ten years"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `LTIR` | `LTIRQueryParams` | `LTIRData` |

### Import Statement

```python
from openbb_core.provider.standard_models.long_term_interest_rate import (
LTIRData,
LTIRQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['belgium', 'bulgaria', 'brazil', 'ireland', 'mexico', 'indonesia', 'new_zealand', 'japan', 'united_kingdom', 'france', 'chile', 'canada', 'netherlands', 'united_states', 'south_korea', 'norway', 'austria', 'south_africa', 'denmark', 'switzerland', 'hungary', 'luxembourg', 'australia', 'germany', 'sweden', 'iceland', 'turkey', 'greece', 'israel', 'czech_republic', 'latvia', 'slovenia', 'poland', 'estonia', 'lithuania', 'portugal', 'costa_rica', 'slovakia', 'finland', 'spain', 'romania', 'russia', 'euro_area19', 'colombia', 'italy', 'india', 'china', 'croatia', 'all']`

Country to get interest rate for.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>
</Tabs>



---

---
title: "Latest Attributes"
description: "Get the latest value of a data tag from Intrinio"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `LatestAttributes` | `LatestAttributesQueryParams` | `LatestAttributesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.latest_attributes import (
LatestAttributesData,
LatestAttributesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `Union[str, float]`

The value of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `Union[str, float]`

The value of the data.

</TabItem>
</Tabs>



---

---
title: "Latest Financial Reports"
description: "Get the newest quarterly, annual, and current reports for all companies"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `LatestFinancialReports` | `LatestFinancialReportsQueryParams` | `LatestFinancialReportsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.latest_financial_reports import (
LatestFinancialReportsData,
LatestFinancialReportsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to today.

 • *Optional:* `True`

---

**`report_type`**: `Union[str, list[str]]`

Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple items allowed for provider(s): sec.

<details>
<summary mdxType="summary">Choices</summary>

- `1-K`
- `1-SA`
- `1-U`
- `10-D`
- `10-K`
- `10-KT`
- `10-Q`
- `10-QT`
- `20-F`
- `40-F`
- `6-K`
- `8-K`
</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`filing_date`**: `date`

The date of the filing.

**`period_ending`**: `date`

Report for the period ending.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`sic`**: `str`

Standard Industrial Classification code.

**`report_type`**: `str`

Type of filing.

**`description`**: `str`

Description of the report.

**`url`**: `str`

URL to the filing page.

</TabItem>

<TabItem value='sec' label='sec'>

**`filing_date`**: `date`

The date of the filing.

**`period_ending`**: `date`

Report for the period ending.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`sic`**: `str`

Standard Industrial Classification code.

**`report_type`**: `str`

Type of filing.

**`description`**: `str`

Description of the report.

**`url`**: `str`

URL to the filing page.

**`items`**: `str`

Item codes associated with the filing.

**`index_headers`**: `str`

URL to the index headers file.

**`complete_submission`**: `str`

URL to the complete submission text file.

**`metadata`**: `str`

URL to the MetaLinks.json file, if available.

**`financial_report`**: `str`

URL to the Financial_Report.xlsx file, if available.

</TabItem>
</Tabs>



---

---
title: "Management Discussion Analysis"
description: "Get the Management Discussion & Analysis section from the financial statements for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ManagementDiscussionAnalysis` | `ManagementDiscussionAnalysisQueryParams` | `ManagementDiscussionAnalysisData` |

### Import Statement

```python
from openbb_core.provider.standard_models.management_discussion_analysis import (
ManagementDiscussionAnalysisData,
ManagementDiscussionAnalysisQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`calendar_year`**: `int`

Calendar year of the report. By default, is the current year. If the calendar period is not provided, but the calendar year is, it will return the annual report.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['Q1', 'Q2', 'Q3', 'Q4']`

Calendar period of the report. By default, is the most recent report available for the symbol. If no calendar year and no calendar period are provided, it will return the most recent report.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`calendar_year`**: `int`

Calendar year of the report. By default, is the current year. If the calendar period is not provided, but the calendar year is, it will return the annual report.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['Q1', 'Q2', 'Q3', 'Q4']`

Calendar period of the report. By default, is the most recent report available for the symbol. If no calendar year and no calendar period are provided, it will return the most recent report.

 • *Optional:* `True`

---

**`strategy`**: `Literal['inscriptis', 'trafilatura']`

The strategy to use for extracting the text. Default is 'trafilatura'.

 • *Default:* `trafilatura`

 • *Optional:* `True`

---

**`wrap_length`**: `int`

The length to wrap the extracted text, excluding tables. Default is 120.

 • *Default:* `120`

 • *Optional:* `True`

---

**`include_tables`**: `bool`

Return tables formatted as markdown in the text. Default is False. Tables may reveal 'missing' content, but will likely need some level of manual cleaning, post-request, to display properly. In some cases, tables may not be recoverable due to the nature of the document.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the file will be cached for use later. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

---

**`raw_html`**: `bool`

When True, the raw HTML content of the entire filing will be returned. Default is False. Use this option to parse the document manually.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`calendar_year`**: `int`

The calendar year of the report.

**`calendar_period`**: `int`

The calendar period of the report.

**`period_ending`**: `date`

The end date of the reporting period.

**`content`**: `str`

The content of the management discussion and analysis.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`calendar_year`**: `int`

The calendar year of the report.

**`calendar_period`**: `int`

The calendar period of the report.

**`period_ending`**: `date`

The end date of the reporting period.

**`content`**: `str`

The content of the management discussion and analysis.

**`url`**: `str`

The URL of the filing from which the data was extracted.

</TabItem>
</Tabs>



---

---
title: "Manufacturing Outlook NY"
description: "Get the Empire State Manufacturing Survey"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ManufacturingOutlookNY` | `ManufacturingOutlookNYQueryParams` | `ManufacturingOutlookNYData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
ManufacturingOutlookNYData,
ManufacturingOutlookNYQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`topic`**: `Union[Union[Literal['business_outlook', 'hours_worked', 'employment', 'inventories', 'prices_received', 'prices_paid', 'capex', 'unfilled_orders', 'new_orders', 'shipments', 'delivery_times'], str], list[Union[Literal['business_outlook', 'hours_worked', 'employment', 'inventories', 'prices_received', 'prices_paid', 'capex', 'unfilled_orders', 'new_orders', 'shipments', 'delivery_times'], str]]]`

The topic for the survey response. Multiple items allowed for provider(s): fred.

 • *Default:* `new_orders`

 • *Optional:* `True`

---

**`seasonally_adjusted`**: `bool`

Whether the data is seasonally adjusted, default is False

 • *Default:* `False`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>
</Tabs>



---

---
title: "Manufacturing Outlook Texas"
description: "Get The Manufacturing Outlook Survey For The Texas Region"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ManufacturingOutlookTexas` | `ManufacturingOutlookTexasQueryParams` | `ManufacturingOutlookTexasData` |

### Import Statement

```python
from openbb_core.provider.standard_models.manufacturing_outlook_texas import (
ManufacturingOutlookTexasData,
ManufacturingOutlookTexasQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`topic`**: `Union[Union[Literal['business_activity', 'business_outlook', 'capex', 'prices_paid', 'production', 'inventory', 'new_orders', 'new_orders_growth', 'unfilled_orders', 'shipments', 'delivery_time', 'employment', 'wages', 'hours_worked'], str], list[Union[Literal['business_activity', 'business_outlook', 'capex', 'prices_paid', 'production', 'inventory', 'new_orders', 'new_orders_growth', 'unfilled_orders', 'shipments', 'delivery_time', 'employment', 'wages', 'hours_worked'], str]]]`

The topic for the survey response. Multiple items allowed for provider(s): fred.

 • *Default:* `new_orders_growth`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>
</Tabs>



---

---
title: "Market Snapshots"
description: "Get an updated equity market snapshot"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `MarketSnapshots` | `MarketSnapshotsQueryParams` | `MarketSnapshotsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.market_snapshots import (
MarketSnapshotsData,
MarketSnapshotsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fmp' label='fmp'>

**`market`**: `Literal['amex', 'ams', 'ase', 'asx', 'ath', 'bme', 'bru', 'bud', 'bue', 'cai', 'cnq', 'cph', 'dfm', 'doh', 'etf', 'euronext', 'hel', 'hkse', 'ice', 'iob', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'koe', 'ksc', 'kuw', 'lse', 'mex', 'mutual_fund', 'nasdaq', 'neo', 'nse', 'nyse', 'nze', 'osl', 'otc', 'pnk', 'pra', 'ris', 'sao', 'sau', 'set', 'sgo', 'shh', 'shz', 'six', 'sto', 'tai', 'tlv', 'tsx', 'two', 'vie', 'wse', 'xetra']`

The market to fetch data for.

 • *Default:* `nasdaq`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime, str], str]`

The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400'

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`last_price`**: `float`

The last price of the stock.

**`last_price_timestamp`**: `Union[date, datetime]`

The timestamp of the last price.

**`ma50`**: `float`

The 50-day moving average.

**`ma200`**: `float`

The 200-day moving average.

**`year_high`**: `float`

The 52-week high.

**`year_low`**: `float`

The 52-week low.

**`volume_avg`**: `int`

Average daily trading volume.

**`market_cap`**: `int`

Market cap of the stock.

**`eps`**: `float`

Earnings per share.

**`pe`**: `float`

Price to earnings ratio.

**`shares_outstanding`**: `int`

Number of shares outstanding.

**`name`**: `str`

The company name associated with the symbol.

**`exchange`**: `str`

The exchange of the stock.

**`earnings_date`**: `Union[date, datetime]`

The upcoming earnings announcement date.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`last_price`**: `float`

The last trade price.

**`last_size`**: `int`

The last trade size.

**`last_volume`**: `int`

The last trade volume.

**`last_trade_timestamp`**: `datetime`

The timestamp of the last trade.

**`bid_size`**: `int`

The size of the last bid price. Bid price and size is not always available.

**`bid_price`**: `float`

The last bid price. Bid price and size is not always available.

**`ask_price`**: `float`

The last ask price. Ask price and size is not always available.

**`ask_size`**: `int`

The size of the last ask price. Ask price and size is not always available.

**`last_bid_timestamp`**: `datetime`

The timestamp of the last bid price. Bid price and size is not always available.

**`last_ask_timestamp`**: `datetime`

The timestamp of the last ask price. Ask price and size is not always available.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`vwap`**: `float`

The volume weighted average price of the stock on the current trading day.

**`prev_open`**: `float`

The previous trading session opening price.

**`prev_high`**: `float`

The previous trading session high price.

**`prev_low`**: `float`

The previous trading session low price.

**`prev_volume`**: `float`

The previous trading session volume.

**`prev_vwap`**: `float`

The previous trading session VWAP.

**`last_updated`**: `datetime`

The last time the data was updated.

**`bid`**: `float`

The current bid price.

**`bid_size`**: `int`

The current bid size.

**`ask_size`**: `int`

The current ask size.

**`ask`**: `float`

The current ask price.

**`quote_timestamp`**: `datetime`

The timestamp of the last quote.

**`last_trade_price`**: `float`

The last trade price.

**`last_trade_size`**: `int`

The last trade size.

**`last_trade_conditions`**: `list[int]`

The last trade condition codes.

**`last_trade_exchange`**: `int`

The last trade exchange ID code.

**`last_trade_timestamp`**: `datetime`

The last trade timestamp.

</TabItem>
</Tabs>



---

---
title: "Money Measures"
description: "Get Money Measures (M1/M2 and components)"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `MoneyMeasures` | `MoneyMeasuresQueryParams` | `MoneyMeasuresData` |

### Import Statement

```python
from openbb_core.provider.standard_models.money_measures import (
MoneyMeasuresData,
MoneyMeasuresQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`adjusted`**: `bool`

Whether to return seasonally adjusted data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`adjusted`**: `bool`

Whether to return seasonally adjusted data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`month`**: `date`

The date of the data.

**`M1`**: `float`

Value of the M1 money supply in billions.

**`M2`**: `float`

Value of the M2 money supply in billions.

**`currency`**: `float`

Value of currency in circulation in billions.

**`demand_deposits`**: `float`

Value of demand deposits in billions.

**`retail_money_market_funds`**: `float`

Value of retail money market funds in billions.

**`other_liquid_deposits`**: `float`

Value of other liquid deposits in billions.

**`small_denomination_time_deposits`**: `float`

Value of small denomination time deposits in billions.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`month`**: `date`

The date of the data.

**`M1`**: `float`

Value of the M1 money supply in billions.

**`M2`**: `float`

Value of the M2 money supply in billions.

**`currency`**: `float`

Value of currency in circulation in billions.

**`demand_deposits`**: `float`

Value of demand deposits in billions.

**`retail_money_market_funds`**: `float`

Value of retail money market funds in billions.

**`other_liquid_deposits`**: `float`

Value of other liquid deposits in billions.

**`small_denomination_time_deposits`**: `float`

Value of small denomination time deposits in billions.

</TabItem>
</Tabs>



---

---
title: "Moody Corporate Bond Index"
description: "Moody Corporate Bond Index"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `MoodyCorporateBondIndex` | `MoodyCorporateBondIndexQueryParams` | `MoodyCorporateBondIndexData` |

### Import Statement

```python
from openbb_core.provider.standard_models.moody import (
MoodyCorporateBondIndexData,
MoodyCorporateBondIndexQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['aaa', 'baa']`

The type of series.

 • *Default:* `aaa`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['aaa', 'baa']`

The type of series.

 • *Default:* `aaa`

 • *Optional:* `True`

---

**`spread`**: `Literal['treasury', 'fed_funds']`

The type of spread.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Moody Corporate Bond Index Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Moody Corporate Bond Index Rate.

</TabItem>
</Tabs>



---

---
title: "Mortgage Indices"
description: "Mortgage Indices"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `MortgageIndices` | `MortgageIndicesQueryParams` | `MortgageIndicesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.mortgage_indices import (
MortgageIndicesData,
MortgageIndicesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index`**: `Union[Union[Literal['primary', 'ltv_lte_80', 'ltv_gt_80', 'conforming_30y', 'conforming_30y_na', 'jumbo_30y', 'fha_30y', 'va_30y', 'usda_30y', 'conforming_15y', 'ltv_lte80_fico_ge740', 'ltv_lte80_fico_a720b739', 'ltv_lte80_fico_a700b719', 'ltv_lte80_fico_a680b699', 'ltv_lte80_fico_lt680', 'ltv_gt80_fico_ge740', 'ltv_gt80_fico_a720b739', 'ltv_gt80_fico_a700b719', 'ltv_gt80_fico_a680b699', 'ltv_gt80_fico_lt680'], str], list[Union[Literal['primary', 'ltv_lte_80', 'ltv_gt_80', 'conforming_30y', 'conforming_30y_na', 'jumbo_30y', 'fha_30y', 'va_30y', 'usda_30y', 'conforming_15y', 'ltv_lte80_fico_ge740', 'ltv_lte80_fico_a720b739', 'ltv_lte80_fico_a700b719', 'ltv_lte80_fico_a680b699', 'ltv_lte80_fico_lt680', 'ltv_gt80_fico_ge740', 'ltv_gt80_fico_a720b739', 'ltv_gt80_fico_a700b719', 'ltv_gt80_fico_a680b699', 'ltv_gt80_fico_lt680'], str]]]`

The specific index, or index group, to query. Default is the 'primary' group. Multiple items allowed for provider(s): fred.

 • *Default:* `primary`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set, default is 'avg'.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Default:* `avg`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`rate`**: `float`

Mortgage rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`rate`**: `float`

Mortgage rate.

</TabItem>
</Tabs>



---

---
title: "Non Farm Payrolls"
description: "Get Nonfarm Payrolls Survey"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `NonFarmPayrolls` | `NonFarmPayrollsQueryParams` | `NonFarmPayrollsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.non_farm_payrolls import (
NonFarmPayrollsData,
NonFarmPayrollsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`category`**: `Literal['employees_nsa', 'employees_sa', 'employees_production_and_nonsupervisory', 'employees_women', 'employees_women_percent', 'avg_hours', 'avg_hours_production_and_nonsupervisory', 'avg_hours_overtime', 'avg_hours_overtime_production_and_nonsupervisory', 'avg_earnings_hourly', 'avg_earnings_hourly_production_and_nonsupervisory', 'avg_earnings_weekly', 'avg_earnings_weekly_production_and_nonsupervisory', 'index_weekly_hours', 'index_weekly_hours_production_and_nonsupervisory', 'index_weekly_payrolls', 'index_weekly_payrolls_production_and_nonsupervisory']`

The category to query.

 • *Default:* `employees_nsa`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



**`name`**: `str`

The name of the series.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`level`**: `int`

The indentation level of the element.

</TabItem>
</Tabs>



---

---
title: "OTC Aggregate"
description: "Get the weekly aggregate trade data for Over The Counter deals"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `OTCAggregate` | `OTCAggregateQueryParams` | `OTCAggregateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.otc_aggregate import (
OTCAggregateData,
OTCAggregateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='finra' label='finra'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`tier`**: `Literal['T1', 'T2', 'OTCE']`

<details>
<summary mdxType="summary">Description</summary>

'T1 - Securities included in the S&P 500, Russell 1000 and selected exchange-traded products;<br/>
        T2 - All other NMS stocks; OTC - Over-the-Counter equity securities

</details>

 • *Default:* `T1`

 • *Optional:* `True`

---

**`is_ats`**: `bool`

ATS data if true, NON-ATS otherwise

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`update_date`**: `date`

Most recent date on which total trades is updated based on data received from each ATS/OTC.

**`share_quantity`**: `float`

Aggregate weekly total number of shares reported by each ATS for the Symbol.

**`trade_quantity`**: `float`

Aggregate weekly total number of trades reported by each ATS for the Symbol

</TabItem>

<TabItem value='finra' label='finra'>

**`update_date`**: `date`

Most recent date on which total trades is updated based on data received from each ATS/OTC.

**`share_quantity`**: `float`

Aggregate weekly total number of shares reported by each ATS for the Symbol.

**`trade_quantity`**: `float`

Aggregate weekly total number of trades reported by each ATS for the Symbol

</TabItem>
</Tabs>



---

---
title: "Options Chains"
description: "Get the complete options chain for a ticker"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `OptionsChains` | `OptionsChainsQueryParams` | `OptionsChainsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.options_chains import (
OptionsChainsData,
OptionsChainsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`delay`**: `Literal['eod', 'realtime', 'delayed']`

Whether to return delayed, realtime, or eod data.

 • *Default:* `eod`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

The end-of-day date for options chains data.

 • *Optional:* `True`

---

**`option_type`**: `Literal['call', 'put']`

The option type, call or put, 'None' is both (default).

 • *Optional:* `True`

---

**`moneyness`**: `Literal['otm', 'itm', 'all']`

Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied.

 • *Default:* `all`

 • *Optional:* `True`

---

**`strike_gt`**: `int`

Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`strike_lt`**: `int`

Return options with a strike price less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`volume_gt`**: `int`

Return options with a volume greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`volume_lt`**: `int`

Return options with a volume less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`oi_gt`**: `int`

Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`oi_lt`**: `int`

Return options with an open interest less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`model`**: `Literal['black_scholes', 'bjerk']`

The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied.

 • *Default:* `black_scholes`

 • *Optional:* `True`

---

**`show_extended_price`**: `bool`

Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied.

 • *Default:* `True`

 • *Optional:* `True`

---

**`include_related_symbols`**: `bool`

Include related symbols that end in a 1 or 2 because of a corporate action, default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Caching is used to validate the supplied ticker symbol, or if a historical EOD chain is requested. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`bid_iv`**: `list[float]`

The implied volatility of the bid price.

**`ask_iv`**: `list[float]`

The implied volatility of the ask price.

**`interest_rate`**: `list[float]`

The interest rate used by Deribit to calculate greeks.

**`underlying_spot_price`**: `list[float]`

The spot price of the underlying asset. The underlying asset is the specific future or index that the option is based on.

**`settlement_price`**: `list[float]`

The settlement price of the contract.

**`min_price`**: `list[float]`

The minimum price allowed.

**`max_price`**: `list[float]`

The maximum price allowed.

**`volume_notional`**: `list[float]`

The notional trading volume of the contract, as USD or USDC.

**`timestamp`**: `list[datetime]`

The datetime of the data, as America/New_York time.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`transactions`**: `list[int]`

Number of transactions for the contract.

**`total_value`**: `list[float]`

Total value of the transactions.

**`settlement_price`**: `list[float]`

Settlement price on that date.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[int]`

Size of the contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`phi`**: `list[float]`

Phi of the option. The sensitivity of the option relative to dividend yield.

**`bid_iv`**: `list[float]`

Implied volatility of the bid price.

**`ask_iv`**: `list[float]`

Implied volatility of the ask price.

**`orats_final_iv`**: `list[float]`

ORATS final implied volatility of the option, updated once per hour.

**`year_high`**: `list[float]`

52-week high price of the option.

**`year_low`**: `list[float]`

52-week low price of the option.

**`greeks_time`**: `list[datetime]`

Timestamp of the last greeks update. Greeks/IV data is updated once per hour.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`in_the_money`**: `list[bool]`

Whether the option is in the money.

**`currency`**: `list[str]`

Currency of the option.

</TabItem>
</Tabs>



---

---
title: "Options Snapshots"
description: "Get a snapshot of the options market universe"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `OptionsSnapshots` | `OptionsSnapshotsQueryParams` | `OptionsSnapshotsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.options_snapshots import (
OptionsSnapshotsData,
OptionsSnapshotsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime, str], str]`

The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400'

 • *Optional:* `True`

---

**`only_traded`**: `bool`

Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `list[str]`

Ticker symbol of the underlying asset.

**`contract_symbol`**: `list[str]`

Symbol of the options contract.

**`expiration`**: `list[date]`

Expiration date of the options contract.

**`dte`**: `list[int]`

Number of days to expiration of the options contract.

**`strike`**: `list[float]`

Strike price of the options contract.

**`option_type`**: `list[str]`

The type of option.

**`volume`**: `list[int]`

The trading volume.

**`open_interest`**: `list[int]`

Open interest at the time.

**`last_price`**: `list[float]`

Last trade price at the time.

**`last_size`**: `list[int]`

Lot size of the last trade.

**`last_timestamp`**: `list[datetime]`

Timestamp of the last price.

**`open`**: `list[float]`

The open price.

**`high`**: `list[float]`

The high price.

**`low`**: `list[float]`

The low price.

**`close`**: `list[float]`

The close price.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `list[str]`

Ticker symbol of the underlying asset.

**`contract_symbol`**: `list[str]`

Symbol of the options contract.

**`expiration`**: `list[date]`

Expiration date of the options contract.

**`dte`**: `list[int]`

Number of days to expiration of the options contract.

**`strike`**: `list[float]`

Strike price of the options contract.

**`option_type`**: `list[str]`

The type of option.

**`volume`**: `list[int]`

The trading volume.

**`open_interest`**: `list[int]`

Open interest at the time.

**`last_price`**: `list[float]`

Last trade price at the time.

**`last_size`**: `list[int]`

Lot size of the last trade.

**`last_timestamp`**: `list[datetime]`

Timestamp of the last price.

**`open`**: `list[float]`

The open price.

**`high`**: `list[float]`

The high price.

**`low`**: `list[float]`

The low price.

**`close`**: `list[float]`

The close price.

**`bid`**: `list[float]`

The last bid price at the time.

**`bid_size`**: `list[int]`

The size of the last bid price.

**`bid_timestamp`**: `list[datetime]`

The timestamp of the last bid price.

**`ask`**: `list[float]`

The last ask price at the time.

**`ask_size`**: `list[int]`

The size of the last ask price.

**`ask_timestamp`**: `list[datetime]`

The timestamp of the last ask price.

**`total_bid_volume`**: `list[int]`

Total volume of bids.

**`bid_high`**: `list[float]`

The highest bid price.

**`bid_low`**: `list[float]`

The lowest bid price.

**`total_ask_volume`**: `list[int]`

Total volume of asks.

**`ask_high`**: `list[float]`

The highest ask price.

**`ask_low`**: `list[float]`

The lowest ask price.

</TabItem>
</Tabs>



---

---
title: "Options Unusual"
description: "Get the complete options chain for a ticker"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `OptionsUnusual` | `OptionsUnusualQueryParams` | `OptionsUnusualData` |

### Import Statement

```python
from openbb_core.provider.standard_models.options_unusual import (
OptionsUnusualData,
OptionsUnusualQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (the underlying symbol)

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for. (the underlying symbol)

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date.

 • *Optional:* `True`

---

**`trade_type`**: `Literal['block', 'sweep', 'large']`

The type of unusual activity to query for.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['bullish', 'bearish', 'neutral']`

The sentiment type to query for.

 • *Optional:* `True`

---

**`min_value`**: `Union[float, int]`

The inclusive minimum total value for the unusual activity.

 • *Optional:* `True`

---

**`max_value`**: `Union[float, int]`

The inclusive maximum total value for the unusual activity.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`source`**: `Literal['delayed', 'realtime']`

The source of the data. Either realtime or delayed.

 • *Default:* `delayed`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `str`

Symbol representing the entity requested in the data. (the underlying symbol)

**`contract_symbol`**: `str`

Contract symbol for the option.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `str`

Symbol representing the entity requested in the data. (the underlying symbol)

**`contract_symbol`**: `str`

Contract symbol for the option.

**`trade_timestamp`**: `datetime`

The datetime of order placement.

**`trade_type`**: `Literal['block', 'sweep', 'large']`

The type of unusual trade.

**`sentiment`**: `Literal['bullish', 'bearish', 'neutral']`

Bullish, Bearish, or Neutral Sentiment is estimated based on whether the trade was executed at the bid, ask, or mark price.

**`bid_at_execution`**: `float`

Bid price at execution.

**`ask_at_execution`**: `float`

Ask price at execution.

**`average_price`**: `float`

The average premium paid per option contract.

**`underlying_price_at_execution`**: `float`

Price of the underlying security at execution of trade.

**`total_size`**: `int`

The total number of contracts involved in a single transaction.

**`total_value`**: `Union[int, float]`

The aggregated value of all option contract premiums included in the trade.

</TabItem>
</Tabs>



---

---
title: "Overnight Bank Funding Rate"
description: "Overnight Bank Funding"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `OvernightBankFundingRate` | `OvernightBankFundingRateQueryParams` | `OvernightBankFundingRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.overnight_bank_funding_rate import (
OvernightBankFundingRateData,
OvernightBankFundingRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`revision_indicator`**: `str`

Indicates a revision of the data for that date.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>
</Tabs>



---

---
title: "Projections"
description: "Fed Funds Rate Projections"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PROJECTIONS` | `PROJECTIONSQueryParams` | `PROJECTIONSData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
PROJECTIONSData,
PROJECTIONSQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fred' label='fred'>

**`long_run`**: `bool`

Flag to show long run projections

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`range_high`**: `float`

High projection of rates.

**`central_tendency_high`**: `float`

Central tendency of high projection of rates.

**`median`**: `float`

Median projection of rates.

**`range_midpoint`**: `float`

Midpoint projection of rates.

**`central_tendency_midpoint`**: `float`

Central tendency of midpoint projection of rates.

**`range_low`**: `float`

Low projection of rates.

**`central_tendency_low`**: `float`

Central tendency of low projection of rates.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`range_high`**: `float`

High projection of rates.

**`central_tendency_high`**: `float`

Central tendency of high projection of rates.

**`median`**: `float`

Median projection of rates.

**`range_midpoint`**: `float`

Midpoint projection of rates.

**`central_tendency_midpoint`**: `float`

Central tendency of midpoint projection of rates.

**`range_low`**: `float`

Low projection of rates.

**`central_tendency_low`**: `float`

Central tendency of low projection of rates.

</TabItem>
</Tabs>



---

---
title: "Personal Consumption Expenditures"
description: "Get Personal Consumption Expenditures (PCE) reports"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PersonalConsumptionExpenditures` | `PersonalConsumptionExpendituresQueryParams` | `PersonalConsumptionExpendituresData` |

### Import Statement

```python
from openbb_core.provider.standard_models.personal_consumption_expenditures import (
PersonalConsumptionExpendituresData,
PersonalConsumptionExpendituresQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`category`**: `Literal['personal_income', 'wages_by_industry', 'real_pce_percent_change', 'real_pce_quantity_index', 'pce_price_index', 'pce_dollars', 'real_pce_chained_dollars', 'pce_price_percent_change']`

The category to query.

 • *Default:* `personal_income`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



**`name`**: `str`

The name of the series.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`level`**: `int`

The indentation level of the element.

**`line`**: `int`

The line number of the series in the table.

</TabItem>
</Tabs>



---

---
title: "Petroleum Status Report"
description: "EIA Weekly Petroleum Status Report"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PetroleumStatusReport` | `PetroleumStatusReportQueryParams` | `PetroleumStatusReportData` |

### Import Statement

```python
from openbb_core.provider.standard_models.petroleum_status_report import (
PetroleumStatusReportData,
PetroleumStatusReportQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='eia' label='eia'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['balance_sheet', 'inputs_and_production', 'refiner_blender_net_production', 'crude_petroleum_stocks', 'gasoline_fuel_stocks', 'total_gasoline_by_sub_padd', 'distillate_fuel_oil_stocks', 'imports', 'imports_by_country', 'weekly_estimates', 'spot_prices_crude_gas_heating', 'spot_prices_diesel_jet_fuel_propane', 'retail_prices']`

The group of data to be returned. The default is the balance sheet.

 • *Default:* `balance_sheet`

 • *Optional:* `True`

---

**`table`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.<br/>
    Note: Choices represent all available tables from the entire collection and are not all available for every category.<br/>
    Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.<br/>
    Choices are:<br/>
        all<br/>
        conventional_gas<br/>
        crude<br/>
        crude_production<br/>
        crude_production_avg<br/>
        diesel<br/>
        ethanol_plant_production<br/>
        ethanol_plant_production_avg<br/>
        exports<br/>
        exports_avg<br/>
        heating_oil<br/>
        imports<br/>
        imports_avg<br/>
        imports_by_country<br/>
        imports_by_country_avg<br/>
        inputs_and_utilization<br/>
        inputs_and_utilization_avg<br/>
        jet_fuel<br/>
        monthly<br/>
        net_imports_inc_spr_avg<br/>
        net_imports_incl_spr<br/>
        net_production<br/>
        net_production_avg<br/>
        net_production_by_product<br/>
        net_production_by_production_avg<br/>
        product_by_region<br/>
        product_by_region_avg<br/>
        product_supplied<br/>
        product_supplied_avg<br/>
        propane<br/>
        rbob<br/>
        refiner_blender_net_production<br/>
        refiner_blender_net_production_avg<br/>
        stocks<br/>
        supply<br/>
        supply_avg<br/>
        ulta_low_sulfur_distillate_reclassification<br/>
        ulta_low_sulfur_distillate_reclassification_avg<br/>
        weekly Multiple items allowed for provider(s): eia.

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `conventional_gas`
- `crude`
- `crude_production`
- `crude_production_avg`
- `diesel`
- `ethanol_plant_production`
- `ethanol_plant_production_avg`
- `exports`
- `exports_avg`
- `heating_oil`
- `imports`
- `imports_avg`
- `imports_by_country`
- `imports_by_country_avg`
- `inputs_and_utilization`
- `inputs_and_utilization_avg`
- `jet_fuel`
- `monthly`
- `net_imports_inc_spr_avg`
- `net_imports_incl_spr`
- `net_production`
- `net_production_avg`
- `net_production_by_product`
- `net_production_by_production_avg`
- `product_by_region`
- `product_by_region_avg`
- `product_supplied`
- `product_supplied_avg`
- `propane`
- `rbob`
- `refiner_blender_net_production`
- `refiner_blender_net_production_avg`
- `stocks`
- `supply`
- `supply_avg`
- `ulta_low_sulfur_distillate_reclassification`
- `ulta_low_sulfur_distillate_reclassification_avg`
- `weekly`
</details>

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Subsequent requests for the same source data are cached for the session using ALRU cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>

<TabItem value='eia' label='eia'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>
</Tabs>



---

---
title: "Port Volume"
description: "Get average dwelling times and TEU volumes from the top ports"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PortVolume` | `PortVolumeQueryParams` | `PortVolumeData` |

### Import Statement

```python
from openbb_core.provider.standard_models.port_volume import (
PortVolumeData,
PortVolumeQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`port_code`**: `str`

Port code.

**`port_name`**: `str`

Port name.

**`country`**: `str`

Country where the port is located.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`port_code`**: `str`

Port code.

**`port_name`**: `str`

Port name.

**`country`**: `str`

Country where the port is located.

**`export_dwell_time`**: `float`

EconDB model estimate for the average number of days from when a container enters the terminal gates until it is loaded on a vessel. High dwelling times can indicate vessel delays.

**`import_dwell_time`**: `float`

EconDB model estimate for the average number of days from when a container is discharged from a vessel until it exits the terminal gates. High dwelling times can indicate trucking or port congestion.

**`import_teu`**: `int`

EconDB model estimate for the number of twenty-foot equivalent units (TEUs) of containers imported through the port.

**`export_teu`**: `int`

EconDB model estimate for the number of twenty-foot equivalent units (TEUs) of containers exported through the port.

</TabItem>
</Tabs>



---

---
title: "Price Performance"
description: "Get price performance data for a given stock"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PricePerformance` | `PricePerformanceQueryParams` | `PricePerformanceData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
PricePerformanceData,
PricePerformanceQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`volatility_week`**: `float`

One-week realized volatility, as a normalized percent.

**`volatility_month`**: `float`

One-month realized volatility, as a normalized percent.

**`price`**: `float`

Last Price.

**`volume`**: `float`

Current volume.

**`average_volume`**: `float`

Average daily volume.

**`relative_volume`**: `float`

Relative volume as a ratio of current volume to average volume.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>
</Tabs>



---

---
title: "Price Target"
description: "Get analyst price targets by company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PriceTarget` | `PriceTargetQueryParams` | `PriceTargetData` |

### Import Statement

```python
from openbb_core.provider.standard_models.price_target import (
PriceTargetData,
PriceTargetQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

---

**`page`**: `int`

Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters.

 • *Default:* `0`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

Date for calendar data, shorthand for date_from and date_to.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`updated`**: `Union[date, int]`

Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD.

 • *Optional:* `True`

---

**`importance`**: `int`

Importance level to filter by. Uses Greater Than or Equal To the importance indicated

 • *Optional:* `True`

---

**`action`**: `Literal['downgrades', 'maintains', 'reinstates', 'reiterates', 'upgrades', 'assumes', 'initiates', 'terminates', 'removes', 'suspends', 'firm_dissolved']`

Filter by a specific action_company.

 • *Optional:* `True`

---

**`analyst_ids`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_ids`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of firm IDs. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`fields`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

---

**`with_grade`**: `bool`

Include upgrades and downgrades in the response.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `Literal['Downgrades', 'Maintains', 'Reinstates', 'Reiterates', 'Upgrades', 'Assumes', 'Initiates Coverage On', 'Terminates Coverage On', 'Removes', 'Suspends', 'Firm Dissolved']`

Description of the change in rating from firm's last rating.Note that all of these terms are precisely defined.

**`action_change`**: `Literal['Announces', 'Maintains', 'Lowers', 'Raises', 'Removes', 'Adjusts']`

Description of the change in price target from firm's last price target.

**`importance`**: `Literal[0, 1, 2, 3, 4, 5]`

Subjective Basis of How Important Event is to Market. 5 = High

**`notes`**: `str`

Notes of the price target.

**`analyst_id`**: `str`

Id of the analyst.

**`url_news`**: `str`

URL for analyst ratings news articles for this ticker on Benzinga.com.

**`url_analyst`**: `str`

URL for analyst ratings page for this ticker on Benzinga.com.

**`id`**: `str`

Unique ID of this entry.

**`last_updated`**: `datetime`

Last updated timestamp, UTC.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

**`status`**: `str`

The action taken by the firm. This could be 'Upgrade', 'Downgrade', 'Reiterated', etc.

**`rating_change`**: `str`

The rating given by the analyst. This could be 'Buy', 'Sell', 'Underweight', etc. If the rating is a revision, the change is indicated by '->'

</TabItem>

<TabItem value='fmp' label='fmp'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

**`news_url`**: `str`

News URL of the price target.

**`news_title`**: `str`

News title of the price target.

**`news_publisher`**: `str`

News publisher of the price target.

**`news_base_url`**: `str`

News base URL of the price target.

</TabItem>
</Tabs>



---

---
title: "Price Target Consensus"
description: "Get consensus price target and recommendation"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PriceTargetConsensus` | `PriceTargetConsensusQueryParams` | `PriceTargetConsensusData` |

### Import Statement

```python
from openbb_core.provider.standard_models.price_target_consensus import (
PriceTargetConsensusData,
PriceTargetConsensusQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

---

**`industry_group_number`**: `int`

The Zacks industry group number.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`standard_deviation`**: `float`

The standard deviation of target price estimates.

**`total_anaylsts`**: `int`

The total number of target price estimates in consensus.

**`raised`**: `int`

The number of analysts that have raised their target price estimates.

**`lowered`**: `int`

The number of analysts that have lowered their target price estimates.

**`most_recent_date`**: `date`

The date of the most recent estimate.

**`industry_group_number`**: `int`

The Zacks industry group number.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`target_upside`**: `float`

Percent of upside, as a normalized percent.

**`total_analysts`**: `int`

Total number of analyst.

**`buy_ratings`**: `int`

Number of buy ratings.

**`sell_ratings`**: `int`

Number of sell ratings.

**`hold_ratings`**: `int`

Number of hold ratings.

**`consensus_action`**: `str`

Consensus action.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`recommendation`**: `str`

Recommendation - buy, sell, etc.

**`recommendation_mean`**: `float`

Mean recommendation score where 1 is strong buy and 5 is strong sell.

**`number_of_analysts`**: `int`

Number of analysts providing opinions.

**`current_price`**: `float`

Current price of the stock.

**`currency`**: `str`

Currency the stock is priced in.

</TabItem>
</Tabs>



---

---
title: "Primary Dealer Fails"
description: "Primary Dealer Statistics for Fails to Deliver and Fails to Receive"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PrimaryDealerFails` | `PrimaryDealerFailsQueryParams` | `PrimaryDealerFailsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.primary_dealer_fails import (
PrimaryDealerFailsData,
PrimaryDealerFailsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`asset_class`**: `Literal['all', 'treasuries', 'tips', 'agency', 'mbs', 'corporate']`

Asset class to return, default is 'all'.

 • *Default:* `all`

 • *Optional:* `True`

---

**`unit`**: `Literal['value', 'percent']`

Unit of the data returned to the 'value' field. Default is 'value', which represents millions of USD. 'percent' returns data as the percentage of the total fails-to-receive and fails-to-deliver, by asset class.

 • *Default:* `value`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series' symbol.

**`value`**: `Union[int, float]`

Value of the data returned, in millions of USD if the `unit` parameter is 'value' else a normalized percent.

</TabItem>
</Tabs>



---

---
title: "Primary Dealer Positioning"
description: "Get Primary dealer positioning statistics"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `PrimaryDealerPositioning` | `PrimaryDealerPositioningQueryParams` | `PrimaryDealerPositioningData` |

### Import Statement

```python
from openbb_core.provider.standard_models.primary_dealer_positioning import (
PrimaryDealerPositioningData,
PrimaryDealerPositioningQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['treasuries', 'bills', 'coupons', 'notes', 'tips', 'mbs', 'cmbs', 'municipal', 'corporate', 'commercial_paper', 'corporate_ig', 'corporate_junk', 'abs']`

The category of asset to return, defaults to 'treasuries'.

 • *Default:* `treasuries`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `int`

The reported value of the net position (long - short), in millions of $USD.

**`name`**: `str`

Short name for the series.

**`title`**: `str`

Title of the series.

</TabItem>
</Tabs>



---

---
title: "Reported Financials"
description: "Get financial statements as reported by the company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ReportedFinancials` | `ReportedFinancialsQueryParams` | `ReportedFinancialsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.reported_financials import (
ReportedFinancialsData,
ReportedFinancialsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `str`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`statement_type`**: `str`

The type of financial statement - i.e, balance, income, cash.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['annual', 'quarter']`

None

 • *Default:* `annual`

 • *Optional:* `True`

---

**`statement_type`**: `Literal['balance', 'income', 'cash']`

Cash flow statements are reported as YTD, Q4 is the same as FY.

 • *Default:* `income`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.

 • *Default:* `100`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The ending date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report (e.g. FY, Q1, etc.).

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The ending date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report (e.g. FY, Q1, etc.).

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "Retail Prices"
description: "Get retail prices for common items"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `RetailPrices` | `RetailPricesQueryParams` | `RetailPricesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.retail_prices import (
RetailPricesData,
RetailPricesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`item`**: `str`

The item or basket of items to query.

 • *Optional:* `True`

---

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`item`**: `Literal['beverages', 'cereals', 'dairy', 'fuel', 'produce', 'meats', 'bacon', 'bananas', 'beans', 'beef', 'beer', 'bread', 'butter', 'cheese', 'chicken', 'chops', 'coffee', 'cookies', 'corn', 'diesel', 'eggs', 'electricity', 'flour', 'gas', 'gasoline', 'grapefruit', 'ground_beef', 'ham', 'ice_cream', 'lemons', 'lettuce', 'malt_beverages', 'milk', 'oil', 'orange_juice', 'oranges', 'pork', 'potato_chips', 'potatoes', 'rice', 'soft_drinks', 'spaghetti', 'steak', 'strawberries', 'sugar', 'tomatoes', 'unleaded', 'usda', 'vodka', 'wine', 'yogurt']`

The item or basket of items to query.

 • *Default:* `fuel`

 • *Optional:* `True`

---

**`country`**: `Literal['united_states']`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`region`**: `Literal['all_city', 'northeast', 'midwest', 'south', 'west']`

The region to get average price levels for.

 • *Default:* `all_city`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`description`**: `str`

Description of the item.

**`value`**: `float`

Price, or change in price, per unit.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`description`**: `str`

Description of the item.

**`value`**: `float`

Price, or change in price, per unit.

</TabItem>
</Tabs>



---

---
title: "Revenue Business Line"
description: "Get the revenue breakdown by business segment for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `RevenueBusinessLine` | `RevenueBusinessLineQueryParams` | `RevenueBusinessLineData` |

### Import Statement

```python
from openbb_core.provider.standard_models.revenue_business_line import (
RevenueBusinessLineData,
RevenueBusinessLineQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`business_line`**: `str`

The business line represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the business line.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`business_line`**: `str`

The business line represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the business line.

</TabItem>
</Tabs>



---

---
title: "Revenue Geographic"
description: "Get the geographic breakdown of revenue for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `RevenueGeographic` | `RevenueGeographicQueryParams` | `RevenueGeographicData` |

### Import Statement

```python
from openbb_core.provider.standard_models.revenue_geographic import (
RevenueGeographicData,
RevenueGeographicQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`region`**: `str`

The region represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the region.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`region`**: `str`

The region represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the region.

</TabItem>
</Tabs>



---

---
title: "Risk Premium"
description: "Get Market Risk Premium by country"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `RiskPremium` | `RiskPremiumQueryParams` | `RiskPremiumData` |

### Import Statement

```python
from openbb_core.provider.standard_models.risk_premium import (
RiskPremiumData,
RiskPremiumQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fmp' label='fmp'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

Market country.

**`continent`**: `str`

Continent of the country.

**`total_equity_risk_premium`**: `Annotated[float, Gt(gt=0)]`

Total equity risk premium for the country.

**`country_risk_premium`**: `Annotated[float, Ge(ge=0)]`

Country-specific risk premium.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`country`**: `str`

Market country.

**`continent`**: `str`

Continent of the country.

**`total_equity_risk_premium`**: `Annotated[float, Gt(gt=0)]`

Total equity risk premium for the country.

**`country_risk_premium`**: `Annotated[float, Ge(ge=0)]`

Country-specific risk premium.

</TabItem>
</Tabs>



---

---
title: "Rss Litigation"
description: "Get the RSS feed that provides links to litigation releases concerning civil lawsuits brought by the Commission in federal court"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `RssLitigation` | `RssLitigationQueryParams` | `RssLitigationData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
RssLitigationData,
RssLitigationQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`published`**: `datetime`

The date of publication.

**`title`**: `str`

The title of the release.

**`summary`**: `str`

Short summary of the release.

**`id`**: `str`

The identifier associated with the release.

**`link`**: `str`

URL to the release.

</TabItem>
</Tabs>



---

---
title: "SOFR"
description: "Secured Overnight Financing Rate"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SOFR` | `SOFRQueryParams` | `SOFRData` |

### Import Statement

```python
from openbb_core.provider.standard_models.sofr import (
SOFRData,
SOFRQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`average_30d`**: `float`

30-Day Average SOFR

**`average_90d`**: `float`

90-Day Average SOFR

**`average_180d`**: `float`

180-Day Average SOFR

**`index`**: `float`

SOFR index as 2018-04-02 = 1

</TabItem>
</Tabs>



---

---
title: "Sonia"
description: "Sterling Overnight Index Average"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SONIA` | `SONIAQueryParams` | `SONIAData` |

### Import Statement

```python
from openbb_core.provider.standard_models.sonia_rates import (
SONIAData,
SONIAQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`parameter`**: `Literal['rate', 'index', '10th_percentile', '25th_percentile', '75th_percentile', '90th_percentile', 'total_nominal_value']`

Period of SONIA rate.

 • *Default:* `rate`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SONIA rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SONIA rate.

</TabItem>
</Tabs>



---

---
title: "SP500 Multiples"
description: "Get historical S&P 500 multiples and Shiller PE ratios"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SP500Multiples` | `SP500MultiplesQueryParams` | `SP500MultiplesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.sp500_multiples import (
SP500MultiplesData,
SP500MultiplesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`series_name`**: `Union[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str], list[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str]]]`

The name of the series. Defaults to 'pe_month'. Multiple items allowed for provider(s): multpl.

 • *Default:* `pe_month`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='multpl' label='multpl'>

**`series_name`**: `Union[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str], list[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str]]]`

The name of the series. Defaults to 'pe_month'. Multiple items allowed for provider(s): multpl.

 • *Default:* `pe_month`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`name`**: `str`

Name of the series.

**`value`**: `Union[int, float]`

Value of the series.

</TabItem>

<TabItem value='multpl' label='multpl'>

**`date`**: `Union[date, str]`

The date of the data.

**`name`**: `str`

Name of the series.

**`value`**: `Union[int, float]`

Value of the series.

</TabItem>
</Tabs>



---

---
title: "STIR"
description: "Get Short-term interest rates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `STIR` | `STIRQueryParams` | `STIRData` |

### Import Statement

```python
from openbb_core.provider.standard_models.short_term_interest_rate import (
STIRData,
STIRQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['belgium', 'bulgaria', 'brazil', 'ireland', 'mexico', 'indonesia', 'new_zealand', 'japan', 'united_kingdom', 'france', 'chile', 'canada', 'netherlands', 'united_states', 'south_korea', 'norway', 'austria', 'south_africa', 'denmark', 'switzerland', 'hungary', 'luxembourg', 'australia', 'germany', 'sweden', 'iceland', 'turkey', 'greece', 'israel', 'czech_republic', 'latvia', 'slovenia', 'poland', 'estonia', 'lithuania', 'portugal', 'costa_rica', 'slovakia', 'finland', 'spain', 'romania', 'russia', 'euro_area19', 'colombia', 'italy', 'india', 'china', 'croatia', 'all']`

Country to get interest rate for.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>
</Tabs>



---

---
title: "Schema Files"
description: "Use tool for navigating the directory of SEC XML schema files by year"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SchemaFiles` | `SchemaFilesQueryParams` | `SchemaFilesData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
SchemaFilesData,
SchemaFilesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`url`**: `str`

Enter an optional URL path to fetch the next level.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`files`**: `list[str]`

Dictionary of URLs to SEC Schema Files

</TabItem>
</Tabs>



---

---
title: "Search Attributes"
description: "Search Intrinio data tags to search in latest or historical attributes"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SearchAttributes` | `SearchAttributesQueryParams` | `SearchAttributesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.search_attributes import (
SearchAttributesData,
SearchAttributesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Query to search for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Query to search for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`id`**: `str`

ID of the financial attribute.

**`name`**: `str`

Name of the financial attribute.

**`tag`**: `str`

Tag of the financial attribute.

**`statement_code`**: `str`

Code of the financial statement.

**`statement_type`**: `str`

Type of the financial statement.

**`parent_name`**: `str`

Parent's name of the financial attribute.

**`sequence`**: `int`

Sequence of the financial statement.

**`factor`**: `str`

Unit of the financial attribute.

**`transaction`**: `str`

Transaction type (credit/debit) of the financial attribute.

**`type`**: `str`

Type of the financial attribute.

**`unit`**: `str`

Unit of the financial attribute.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`id`**: `str`

ID of the financial attribute.

**`name`**: `str`

Name of the financial attribute.

**`tag`**: `str`

Tag of the financial attribute.

**`statement_code`**: `str`

Code of the financial statement.

**`statement_type`**: `str`

Type of the financial statement.

**`parent_name`**: `str`

Parent's name of the financial attribute.

**`sequence`**: `int`

Sequence of the financial statement.

**`factor`**: `str`

Unit of the financial attribute.

**`transaction`**: `str`

Transaction type (credit/debit) of the financial attribute.

**`type`**: `str`

Type of the financial attribute.

**`unit`**: `str`

Unit of the financial attribute.

</TabItem>
</Tabs>



---

---
title: "Sec Filing"
description: "Download the index headers, and cover page if available, for any SEC filing"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SecFiling` | `SecFilingQueryParams` | `SecFilingData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
SecFilingData,
SecFilingQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL for the SEC filing. The specific URL is not directly used or downloaded, but is used to generate the base URL for the filing. e.g. https://www.sec.gov/Archives/edgar/data/317540/000031754024000045/coke-20240731.htm and https://www.sec.gov/Archives/edgar/data/317540/000031754024000045/ are both valid URLs for the same filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Use cache for the index headers and cover page. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`base_url`**: `str`

Base URL of the filing.

**`name`**: `str`

Name of the entity filing.

**`cik`**: `str`

Central Index Key.

**`trading_symbols`**: `list`

Trading symbols, if available.

**`sic`**: `str`

Standard Industrial Classification.

**`sic_organization_name`**: `str`

SIC Organization Name.

**`filing_date`**: `date`

Filing date.

**`period_ending`**: `date`

Date of the ending period for the filing, if available.

**`fiscal_year_end`**: `str`

Fiscal year end of the entity, if available. Format: MM-DD

**`document_type`**: `str`

Specific SEC filing type.

**`has_cover_page`**: `bool`

True if the filing has a cover page.

**`description`**: `str`

Description of attached content, mostly applicable to 8-K filings.

**`cover_page`**: `dict`

Cover page information, if available.

**`document_urls`**: `list`

list of files associated with the filing.

</TabItem>
</Tabs>



---

---
title: "Sec Htm File"
description: "Download a raw HTML object from the SEC website"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SecHtmFile` | `SecHtmFileQueryParams` | `SecHtmFileData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
SecHtmFileData,
SecHtmFileQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL for the SEC filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Cache the file for use later. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL of the downloaded file.

**`content`**: `str`

Raw content of the HTM/HTML file.

</TabItem>
</Tabs>



---

---
title: "Selected Treasury Bill"
description: "Select Treasury Bill"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SelectedTreasuryBill` | `SelectedTreasuryBillQueryParams` | `SelectedTreasuryBillData` |

### Import Statement

```python
from openbb_core.provider.standard_models.tbffr import (
SelectedTreasuryBillData,
SelectedTreasuryBillQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '6m']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '6m']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SelectedTreasuryBill Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SelectedTreasuryBill Rate.

</TabItem>
</Tabs>



---

---
title: "Selected Treasury Constant Maturity"
description: "Select Treasury Constant Maturity"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SelectedTreasuryConstantMaturity` | `SelectedTreasuryConstantMaturityQueryParams` | `SelectedTreasuryConstantMaturityData` |

### Import Statement

```python
from openbb_core.provider.standard_models.ffrmc import (
SelectedTreasuryConstantMaturityData,
SelectedTreasuryConstantMaturityQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['10y', '5y', '1y', '6m', '3m']`

The maturity

 • *Default:* `10y`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['10y', '5y', '1y', '6m', '3m']`

The maturity

 • *Default:* `10y`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Selected Treasury Constant Maturity Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Selected Treasury Constant Maturity Rate.

</TabItem>
</Tabs>



---

---
title: "Senior Loan Officer Survey"
description: "Get Senior Loan Officers Opinion Survey"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SeniorLoanOfficerSurvey` | `SeniorLoanOfficerSurveyQueryParams` | `SeniorLoanOfficerSurveyData` |

### Import Statement

```python
from openbb_core.provider.standard_models.senior_loan_officer_survey import (
SeniorLoanOfficerSurveyData,
SeniorLoanOfficerSurveyQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['spreads', 'consumer', 'auto', 'credit_card', 'firms', 'mortgage', 'commercial_real_estate', 'standards', 'demand', 'foreign_banks']`

Category of survey response.

 • *Default:* `spreads`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Survey value.

**`title`**: `str`

Survey title.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Survey value.

**`title`**: `str`

Survey title.

</TabItem>
</Tabs>



---

---
title: "Share Price Index"
description: "Get the Share Price Index by country from the OECD Short-Term Economics Statistics"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SharePriceIndex` | `SharePriceIndexQueryParams` | `SharePriceIndexData` |

### Import Statement

```python
from openbb_core.provider.standard_models.share_price_index import (
SharePriceIndexData,
SharePriceIndexQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>
</Tabs>



---

---
title: "Share Statistics"
description: "Get data about share float for a given company"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ShareStatistics` | `ShareStatisticsQueryParams` | `ShareStatisticsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.share_statistics import (
ShareStatisticsData,
ShareStatisticsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

**`adjusted_outstanding_shares`**: `float`

Total number of shares of a publicly-traded company, adjusted for splits.

**`public_float`**: `float`

Aggregate market value of the shares of a publicly-traded company.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

**`implied_shares_outstanding`**: `int`

Implied Shares Outstanding of common equity, assuming the conversion of all convertible subsidiary equity into common.

**`short_interest`**: `int`

Number of shares that are reported short.

**`short_percent_of_float`**: `float`

Percentage of shares that are reported short, as a normalized percent.

**`days_to_cover`**: `float`

Number of days to repurchase the shares as a ratio of average daily volume

**`short_interest_prev_month`**: `int`

Number of shares that were reported short in the previous month.

**`short_interest_prev_date`**: `date`

Date of the previous month's report.

**`insider_ownership`**: `float`

Percentage of shares held by insiders, as a normalized percent.

**`institution_ownership`**: `float`

Percentage of shares held by institutions, as a normalized percent.

**`institution_float_ownership`**: `float`

Percentage of float held by institutions, as a normalized percent.

**`institutions_count`**: `int`

Number of institutions holding shares.

</TabItem>
</Tabs>



---

---
title: "Short Term Energy Outlook"
description: "Monthly short term (18 month) projections using EIA's STEO model"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ShortTermEnergyOutlook` | `ShortTermEnergyOutlookQueryParams` | `ShortTermEnergyOutlookData` |

### Import Statement

```python
from openbb_core.provider.standard_models.short_term_energy_outlook import (
ShortTermEnergyOutlookData,
ShortTermEnergyOutlookQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='eia' label='eia'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple items allowed for provider(s): eia.

 • *Optional:* `True`

---

**`table`**: `Literal['01', '02', '03a', '03b', '03c', '03d', '03e', '04a', '04b', '04c', '04d', '05a', '05b', '06', '07a', '07b', '07c', '07d1', '07d2', '07e', '08', '09a', '09b', '09c', '10a', '10b']`

<details>
<summary mdxType="summary">Description</summary>

The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.<br/>
        01: US Energy Markets Summary<br/>
        02: Nominal Energy Prices<br/>
        03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories<br/>
        03b: Non-OPEC Petroleum and Other Liquid Fuels Production<br/>
        03c: World Petroleum and Other Liquid Fuels Production<br/>
        03d: World Crude Oil Production<br/>
        03e: World Petroleum and Other Liquid Fuels Consumption<br/>
        04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories<br/>
        04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances<br/>
        04c: US Regional Motor Gasoline Prices and Inventories<br/>
        04d: US Biofuel Supply, Consumption, and Inventories<br/>
        05a: US Natural Gas Supply, Consumption, and Inventories<br/>
        05b: US Regional Natural Gas Prices<br/>
        06: US Coal Supply, Consumption, and Inventories<br/>
        07a: US Electricity Industry Overview<br/>
        07b: US Regional Electricity Retail Sales<br/>
        07c: US Regional Electricity Prices<br/>
        07d1: US Regional Electricity Generation, Electric Power Sector<br/>
        07d2: US Regional Electricity Generation, Electric Power Sector, continued<br/>
        07e: US Electricity Generating Capacity<br/>
        08: US Renewable Energy Consumption<br/>
        09a: US Macroeconomic Indicators and CO2 Emissions<br/>
        09b: US Regional Macroeconomic Data<br/>
        09c: US Regional Weather Data<br/>
        10a: Drilling Productivity Metrics<br/>
        10b: Crude Oil and Natural Gas Production from Shale and Tight Formations

</details>

 • *Default:* `01`

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data. Default is 'month'.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>

<TabItem value='eia' label='eia'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>
</Tabs>



---

---
title: "Short Volume"
description: "Get reported Fail-to-deliver (FTD) data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `ShortVolume` | `ShortVolumeQueryParams` | `ShortVolumeData` |

### Import Statement

```python
from openbb_core.provider.standard_models.short_volume import (
ShortVolumeData,
ShortVolumeQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='stockgrid' label='stockgrid'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`market`**: `str`

Reporting Facility ID. N=NYSE TRF, Q=NASDAQ TRF Carteret, B=NASDAQ TRY Chicago, D=FINRA ADF

**`short_volume`**: `int`

Aggregate reported share volume of executed short sale and short sale exempt trades during regular trading hours

**`short_exempt_volume`**: `int`

Aggregate reported share volume of executed short sale exempt trades during regular trading hours

**`total_volume`**: `int`

Aggregate reported share volume of executed trades during regular trading hours

</TabItem>

<TabItem value='stockgrid' label='stockgrid'>

**`date`**: `Union[date, str]`

The date of the data.

**`market`**: `str`

Reporting Facility ID. N=NYSE TRF, Q=NASDAQ TRF Carteret, B=NASDAQ TRY Chicago, D=FINRA ADF

**`short_volume`**: `int`

Aggregate reported share volume of executed short sale and short sale exempt trades during regular trading hours

**`short_exempt_volume`**: `int`

Aggregate reported share volume of executed short sale exempt trades during regular trading hours

**`total_volume`**: `int`

Aggregate reported share volume of executed trades during regular trading hours

**`close`**: `float`

Closing price of the stock on the date.

**`short_volume_percent`**: `float`

Percentage of the total volume that was short volume.

</TabItem>
</Tabs>



---

---
title: "Sic Search"
description: "Search for Industry Titles, Reporting Office, and SIC Codes"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SicSearch` | `SicSearchQueryParams` | `SicSearchData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
SicSearchData,
SicSearchQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`sic`**: `int`

Sector Industrial Code (SIC)

**`industry`**: `str`

Industry title.

**`office`**: `str`

Reporting office within the Corporate Finance Office

</TabItem>
</Tabs>



---

---
title: "Spot Rate"
description: "Spot Rates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SpotRate` | `SpotRateQueryParams` | `SpotRateData` |

### Import Statement

```python
from openbb_core.provider.standard_models.spot import (
SpotRateData,
SpotRateQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[float, str], list[Union[float, str]]]`

Maturities in years. Multiple items allowed for provider(s): fred.

 • *Default:* `10.0`

 • *Optional:* `True`

---

**`category`**: `Union[str, list[str]]`

Rate category. Options: spot_rate, par_yield. Multiple items allowed for provider(s): fred.

<details>
<summary mdxType="summary">Choices</summary>

- `par_yield`
- `spot_rate`
</details>

 • *Default:* `spot_rate`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[float, str], list[Union[float, str]]]`

Maturities in years. Multiple items allowed for provider(s): fred.

 • *Default:* `10.0`

 • *Optional:* `True`

---

**`category`**: `Union[str, list[str]]`

Rate category. Options: spot_rate, par_yield. Multiple items allowed for provider(s): fred.

<details>
<summary mdxType="summary">Choices</summary>

- `par_yield`
- `spot_rate`
</details>

 • *Default:* `spot_rate`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Spot Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Spot Rate.

</TabItem>
</Tabs>



---

---
title: "Survey Of Economic Conditions Chicago"
description: "Get The Survey Of Economic Conditions For The Chicago Region"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SurveyOfEconomicConditionsChicago` | `SurveyOfEconomicConditionsChicagoQueryParams` | `SurveyOfEconomicConditionsChicagoData` |

### Import Statement

```python
from openbb_core.provider.standard_models.survey_of_economic_conditions_chicago import (
SurveyOfEconomicConditionsChicagoData,
SurveyOfEconomicConditionsChicagoQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`activity_index`**: `float`

Activity Index.

**`one_year_outlook`**: `float`

One Year Outlook Index.

**`manufacturing_activity`**: `float`

Manufacturing Activity Index.

**`non_manufacturing_activity`**: `float`

Non-Manufacturing Activity Index.

**`capital_expenditures_expectations`**: `float`

Capital Expenditures Expectations Index.

**`hiring_expectations`**: `float`

Hiring Expectations Index.

**`current_hiring`**: `float`

Current Hiring Index.

**`labor_costs`**: `float`

Labor Costs Index.

**`non_labor_costs`**: `float`

Non-Labor Costs Index.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`activity_index`**: `float`

Activity Index.

**`one_year_outlook`**: `float`

One Year Outlook Index.

**`manufacturing_activity`**: `float`

Manufacturing Activity Index.

**`non_manufacturing_activity`**: `float`

Non-Manufacturing Activity Index.

**`capital_expenditures_expectations`**: `float`

Capital Expenditures Expectations Index.

**`hiring_expectations`**: `float`

Hiring Expectations Index.

**`current_hiring`**: `float`

Current Hiring Index.

**`labor_costs`**: `float`

Labor Costs Index.

**`non_labor_costs`**: `float`

Non-Labor Costs Index.

</TabItem>
</Tabs>



---

---
title: "Symbol Map"
description: "Map a CIK number to a ticker symbol, leading 0s can be omitted or included"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `SymbolMap` | `SymbolMapQueryParams` | `SymbolMapData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
SymbolMapData,
SymbolMapQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache. If True, cache will store for seven days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache. If True, cache will store for seven days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>
</Tabs>



---

---
title: "Tips Yields"
description: "Get current Treasury inflation-protected securities yields"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TipsYields` | `TipsYieldsQueryParams` | `TipsYieldsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.tips_yields import (
TipsYieldsData,
TipsYieldsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['5', '10', '20', '30']`

The maturity of the security in years - 5, 10, 20, 30 - defaults to all. Note that the maturity is the tenor of the security, not the time to maturity.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`due`**: `date`

The due date (maturation date) of the security.

**`name`**: `str`

The name of the security.

**`value`**: `float`

The yield value.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`due`**: `date`

The due date (maturation date) of the security.

**`name`**: `str`

The name of the security.

**`value`**: `float`

The yield value.

</TabItem>
</Tabs>



---

---
title: "Top Retail"
description: "Track over $30B USD/day of individual investors trades"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TopRetail` | `TopRetailQueryParams` | `TopRetailData` |

### Import Statement

```python
from openbb_core.provider.standard_models.top_retail import (
TopRetailData,
TopRetailQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`activity`**: `float`

Activity of the symbol.

**`sentiment`**: `float`

Sentiment of the symbol. 1 is bullish, -1 is bearish.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`activity`**: `float`

Activity of the symbol.

**`sentiment`**: `float`

Sentiment of the symbol. 1 is bullish, -1 is bearish.

</TabItem>
</Tabs>



---

---
title: "Trailing Dividend Yield"
description: "Get the 1 year trailing dividend yield for a given company over time"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TrailingDividendYield` | `TrailingDividendYieldQueryParams` | `TrailingDividendYieldData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
TrailingDividendYieldData,
TrailingDividendYieldQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Default is 252, the number of trading days in a year.

 • *Default:* `252`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Default is 252, the number of trading days in a year.

 • *Default:* `252`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`trailing_dividend_yield`**: `float`

Trailing dividend yield.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[date, str]`

The date of the data.

**`trailing_dividend_yield`**: `float`

Trailing dividend yield.

</TabItem>
</Tabs>



---

---
title: "Treasury Auctions"
description: "Government Treasury Auctions"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TreasuryAuctions` | `TreasuryAuctionsQueryParams` | `TreasuryAuctionsData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
TreasuryAuctionsData,
TreasuryAuctionsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`security_type`**: `Literal['bill', 'note', 'bond', 'cmb', 'tips', 'frn']`

Used to only return securities of a particular type.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter securities by CUSIP.

 • *Optional:* `True`

---

**`page_size`**: `int`

Maximum number of results to return; you must also include pagenum when using pagesize.

 • *Optional:* `True`

---

**`page_num`**: `int`

The first page number to display results for; used in combination with page size.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. The default is 90 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. The default is today.

 • *Optional:* `True`

</TabItem>

<TabItem value='government_us' label='government_us'>

**`security_type`**: `Literal['bill', 'note', 'bond', 'cmb', 'tips', 'frn']`

Used to only return securities of a particular type.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter securities by CUSIP.

 • *Optional:* `True`

---

**`page_size`**: `int`

Maximum number of results to return; you must also include pagenum when using pagesize.

 • *Optional:* `True`

---

**`page_num`**: `int`

The first page number to display results for; used in combination with page size.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. The default is 90 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. The default is today.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`cusip`**: `str`

CUSIP of the Security.

**`issue_date`**: `date`

The issue date of the security.

**`security_type`**: `Literal['Bill', 'Note', 'Bond', 'CMB', 'TIPS', 'FRN']`

The type of security.

**`security_term`**: `str`

The term of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`interest_rate`**: `float`

The interest rate of the security.

**`cpi_on_issue_date`**: `float`

Reference CPI rate on the issue date of the security.

**`cpi_on_dated_date`**: `float`

Reference CPI rate on the dated date of the security.

**`announcement_date`**: `date`

The announcement date of the security.

**`auction_date`**: `date`

The auction date of the security.

**`auction_date_year`**: `int`

The auction date year of the security.

**`dated_date`**: `date`

The dated date of the security.

**`first_payment_date`**: `date`

The first payment date of the security.

**`accrued_interest_per_100`**: `float`

Accrued interest per $100.

**`accrued_interest_per_1000`**: `float`

Accrued interest per $1000.

**`adjusted_accrued_interest_per_100`**: `float`

Adjusted accrued interest per $100.

**`adjusted_accrued_interest_per_1000`**: `float`

Adjusted accrued interest per $1000.

**`adjusted_price`**: `float`

Adjusted price.

**`allocation_percentage`**: `float`

Allocation percentage, as normalized percentage points.

**`allocation_percentage_decimals`**: `float`

The number of decimals in the Allocation percentage.

**`announced_cusip`**: `str`

The announced CUSIP of the security.

**`auction_format`**: `str`

The auction format of the security.

**`avg_median_discount_rate`**: `float`

The average median discount rate of the security.

**`avg_median_investment_rate`**: `float`

The average median investment rate of the security.

**`avg_median_price`**: `float`

The average median price paid for the security.

**`avg_median_discount_margin`**: `float`

The average median discount margin of the security.

**`avg_median_yield`**: `float`

The average median yield of the security.

**`back_dated`**: `Literal['Yes', 'No']`

Whether the security is back dated.

**`back_dated_date`**: `date`

The back dated date of the security.

**`bid_to_cover_ratio`**: `float`

The bid to cover ratio of the security.

**`call_date`**: `date`

The call date of the security.

**`callable`**: `Literal['Yes', 'No']`

Whether the security is callable.

**`called_date`**: `date`

The called date of the security.

**`cash_management_bill`**: `Literal['Yes', 'No']`

Whether the security is a cash management bill.

**`closing_time_competitive`**: `str`

The closing time for competitive bids on the security.

**`closing_time_non_competitive`**: `str`

The closing time for non-competitive bids on the security.

**`competitive_accepted`**: `int`

The accepted value for competitive bids on the security.

**`competitive_accepted_decimals`**: `int`

The number of decimals in the Competitive Accepted.

**`competitive_tendered`**: `int`

The tendered value for competitive bids on the security.

**`competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether competitive tenders are accepted on the security.

**`corp_us_cusip`**: `str`

The CUSIP of the security.

**`cpi_base_reference_period`**: `str`

The CPI base reference period of the security.

**`currently_outstanding`**: `int`

The currently outstanding value on the security.

**`direct_bidder_accepted`**: `int`

The accepted value from direct bidders on the security.

**`direct_bidder_tendered`**: `int`

The tendered value from direct bidders on the security.

**`est_amount_of_publicly_held_maturing_security`**: `int`

The estimated amount of publicly held maturing securities on the security.

**`fima_included`**: `Literal['Yes', 'No']`

Whether the security is included in the FIMA (Foreign and International Money Authorities).

**`fima_non_competitive_accepted`**: `int`

The non-competitive accepted value on the security from FIMAs.

**`fima_non_competitive_tendered`**: `int`

The non-competitive tendered value on the security from FIMAs.

**`first_interest_period`**: `str`

The first interest period of the security.

**`first_interest_payment_date`**: `date`

The first interest payment date of the security.

**`floating_rate`**: `Literal['Yes', 'No']`

Whether the security is a floating rate.

**`frn_index_determination_date`**: `date`

The FRN index determination date of the security.

**`frn_index_determination_rate`**: `float`

The FRN index determination rate of the security.

**`high_discount_rate`**: `float`

The high discount rate of the security.

**`high_investment_rate`**: `float`

The high investment rate of the security.

**`high_price`**: `float`

The high price of the security at auction.

**`high_discount_margin`**: `float`

The high discount margin of the security.

**`high_yield`**: `float`

The high yield of the security at auction.

**`index_ratio_on_issue_date`**: `float`

The index ratio on the issue date of the security.

**`indirect_bidder_accepted`**: `int`

The accepted value from indirect bidders on the security.

**`indirect_bidder_tendered`**: `int`

The tendered value from indirect bidders on the security.

**`interest_payment_frequency`**: `str`

The interest payment frequency of the security.

**`low_discount_rate`**: `float`

The low discount rate of the security.

**`low_investment_rate`**: `float`

The low investment rate of the security.

**`low_price`**: `float`

The low price of the security at auction.

**`low_discount_margin`**: `float`

The low discount margin of the security.

**`low_yield`**: `float`

The low yield of the security at auction.

**`maturing_date`**: `date`

The maturing date of the security.

**`max_competitive_award`**: `int`

The maximum competitive award at auction.

**`max_non_competitive_award`**: `int`

The maximum non-competitive award at auction.

**`max_single_bid`**: `int`

The maximum single bid at auction.

**`min_bid_amount`**: `int`

The minimum bid amount at auction.

**`min_strip_amount`**: `int`

The minimum strip amount at auction.

**`min_to_issue`**: `int`

The minimum to issue at auction.

**`multiples_to_bid`**: `int`

The multiples to bid at auction.

**`multiples_to_issue`**: `int`

The multiples to issue at auction.

**`nlp_exclusion_amount`**: `int`

The NLP exclusion amount at auction.

**`nlp_reporting_threshold`**: `int`

The NLP reporting threshold at auction.

**`non_competitive_accepted`**: `int`

The accepted value from non-competitive bidders on the security.

**`non_competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the auction accepted non-competitive tenders.

**`offering_amount`**: `int`

The offering amount at auction.

**`original_cusip`**: `str`

The original CUSIP of the security.

**`original_dated_date`**: `date`

The original dated date of the security.

**`original_issue_date`**: `date`

The original issue date of the security.

**`original_security_term`**: `str`

The original term of the security.

**`pdf_announcement`**: `str`

The PDF filename for the announcement of the security.

**`pdf_competitive_results`**: `str`

The PDF filename for the competitive results of the security.

**`pdf_non_competitive_results`**: `str`

The PDF filename for the non-competitive results of the security.

**`pdf_special_announcement`**: `str`

The PDF filename for the special announcements.

**`price_per_100`**: `float`

The price per 100 of the security.

**`primary_dealer_accepted`**: `int`

The primary dealer accepted value on the security.

**`primary_dealer_tendered`**: `int`

The primary dealer tendered value on the security.

**`reopening`**: `Literal['Yes', 'No']`

Whether or not the auction was reopened.

**`security_term_day_month`**: `str`

The security term in days or months.

**`security_term_week_year`**: `str`

The security term in weeks or years.

**`series`**: `str`

The series name of the security.

**`soma_accepted`**: `int`

The SOMA accepted value on the security.

**`soma_holdings`**: `int`

The SOMA holdings on the security.

**`soma_included`**: `Literal['Yes', 'No']`

Whether or not the SOMA (System Open Market Account) was included on the security.

**`soma_tendered`**: `int`

The SOMA tendered value on the security.

**`spread`**: `float`

The spread on the security.

**`standard_payment_per_1000`**: `float`

The standard payment per 1000 of the security.

**`strippable`**: `Literal['Yes', 'No']`

Whether or not the security is strippable.

**`term`**: `str`

The term of the security.

**`tiin_conversion_factor_per_1000`**: `float`

The TIIN conversion factor per 1000 of the security.

**`tips`**: `Literal['Yes', 'No']`

Whether or not the security is TIPS.

**`total_accepted`**: `int`

The total accepted value at auction.

**`total_tendered`**: `int`

The total tendered value at auction.

**`treasury_retail_accepted`**: `int`

The accepted value on the security from retail.

**`treasury_retail_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the tender offers from retail are accepted

**`type`**: `str`

The type of issuance.  This might be different than the security type.

**`unadjusted_accrued_interest_per_1000`**: `float`

The unadjusted accrued interest per 1000 of the security.

**`unadjusted_price`**: `float`

The unadjusted price of the security.

**`updated_timestamp`**: `datetime`

The updated timestamp of the security.

**`xml_announcement`**: `str`

The XML filename for the announcement of the security.

**`xml_competitive_results`**: `str`

The XML filename for the competitive results of the security.

**`xml_special_announcement`**: `str`

The XML filename for special announcements.

**`tint_cusip1`**: `str`

Tint CUSIP 1.

**`tint_cusip2`**: `str`

Tint CUSIP 2.

</TabItem>

<TabItem value='government_us' label='government_us'>

**`cusip`**: `str`

CUSIP of the Security.

**`issue_date`**: `date`

The issue date of the security.

**`security_type`**: `Literal['Bill', 'Note', 'Bond', 'CMB', 'TIPS', 'FRN']`

The type of security.

**`security_term`**: `str`

The term of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`interest_rate`**: `float`

The interest rate of the security.

**`cpi_on_issue_date`**: `float`

Reference CPI rate on the issue date of the security.

**`cpi_on_dated_date`**: `float`

Reference CPI rate on the dated date of the security.

**`announcement_date`**: `date`

The announcement date of the security.

**`auction_date`**: `date`

The auction date of the security.

**`auction_date_year`**: `int`

The auction date year of the security.

**`dated_date`**: `date`

The dated date of the security.

**`first_payment_date`**: `date`

The first payment date of the security.

**`accrued_interest_per_100`**: `float`

Accrued interest per $100.

**`accrued_interest_per_1000`**: `float`

Accrued interest per $1000.

**`adjusted_accrued_interest_per_100`**: `float`

Adjusted accrued interest per $100.

**`adjusted_accrued_interest_per_1000`**: `float`

Adjusted accrued interest per $1000.

**`adjusted_price`**: `float`

Adjusted price.

**`allocation_percentage`**: `float`

Allocation percentage, as normalized percentage points.

**`allocation_percentage_decimals`**: `float`

The number of decimals in the Allocation percentage.

**`announced_cusip`**: `str`

The announced CUSIP of the security.

**`auction_format`**: `str`

The auction format of the security.

**`avg_median_discount_rate`**: `float`

The average median discount rate of the security.

**`avg_median_investment_rate`**: `float`

The average median investment rate of the security.

**`avg_median_price`**: `float`

The average median price paid for the security.

**`avg_median_discount_margin`**: `float`

The average median discount margin of the security.

**`avg_median_yield`**: `float`

The average median yield of the security.

**`back_dated`**: `Literal['Yes', 'No']`

Whether the security is back dated.

**`back_dated_date`**: `date`

The back dated date of the security.

**`bid_to_cover_ratio`**: `float`

The bid to cover ratio of the security.

**`call_date`**: `date`

The call date of the security.

**`callable`**: `Literal['Yes', 'No']`

Whether the security is callable.

**`called_date`**: `date`

The called date of the security.

**`cash_management_bill`**: `Literal['Yes', 'No']`

Whether the security is a cash management bill.

**`closing_time_competitive`**: `str`

The closing time for competitive bids on the security.

**`closing_time_non_competitive`**: `str`

The closing time for non-competitive bids on the security.

**`competitive_accepted`**: `int`

The accepted value for competitive bids on the security.

**`competitive_accepted_decimals`**: `int`

The number of decimals in the Competitive Accepted.

**`competitive_tendered`**: `int`

The tendered value for competitive bids on the security.

**`competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether competitive tenders are accepted on the security.

**`corp_us_cusip`**: `str`

The CUSIP of the security.

**`cpi_base_reference_period`**: `str`

The CPI base reference period of the security.

**`currently_outstanding`**: `int`

The currently outstanding value on the security.

**`direct_bidder_accepted`**: `int`

The accepted value from direct bidders on the security.

**`direct_bidder_tendered`**: `int`

The tendered value from direct bidders on the security.

**`est_amount_of_publicly_held_maturing_security`**: `int`

The estimated amount of publicly held maturing securities on the security.

**`fima_included`**: `Literal['Yes', 'No']`

Whether the security is included in the FIMA (Foreign and International Money Authorities).

**`fima_non_competitive_accepted`**: `int`

The non-competitive accepted value on the security from FIMAs.

**`fima_non_competitive_tendered`**: `int`

The non-competitive tendered value on the security from FIMAs.

**`first_interest_period`**: `str`

The first interest period of the security.

**`first_interest_payment_date`**: `date`

The first interest payment date of the security.

**`floating_rate`**: `Literal['Yes', 'No']`

Whether the security is a floating rate.

**`frn_index_determination_date`**: `date`

The FRN index determination date of the security.

**`frn_index_determination_rate`**: `float`

The FRN index determination rate of the security.

**`high_discount_rate`**: `float`

The high discount rate of the security.

**`high_investment_rate`**: `float`

The high investment rate of the security.

**`high_price`**: `float`

The high price of the security at auction.

**`high_discount_margin`**: `float`

The high discount margin of the security.

**`high_yield`**: `float`

The high yield of the security at auction.

**`index_ratio_on_issue_date`**: `float`

The index ratio on the issue date of the security.

**`indirect_bidder_accepted`**: `int`

The accepted value from indirect bidders on the security.

**`indirect_bidder_tendered`**: `int`

The tendered value from indirect bidders on the security.

**`interest_payment_frequency`**: `str`

The interest payment frequency of the security.

**`low_discount_rate`**: `float`

The low discount rate of the security.

**`low_investment_rate`**: `float`

The low investment rate of the security.

**`low_price`**: `float`

The low price of the security at auction.

**`low_discount_margin`**: `float`

The low discount margin of the security.

**`low_yield`**: `float`

The low yield of the security at auction.

**`maturing_date`**: `date`

The maturing date of the security.

**`max_competitive_award`**: `int`

The maximum competitive award at auction.

**`max_non_competitive_award`**: `int`

The maximum non-competitive award at auction.

**`max_single_bid`**: `int`

The maximum single bid at auction.

**`min_bid_amount`**: `int`

The minimum bid amount at auction.

**`min_strip_amount`**: `int`

The minimum strip amount at auction.

**`min_to_issue`**: `int`

The minimum to issue at auction.

**`multiples_to_bid`**: `int`

The multiples to bid at auction.

**`multiples_to_issue`**: `int`

The multiples to issue at auction.

**`nlp_exclusion_amount`**: `int`

The NLP exclusion amount at auction.

**`nlp_reporting_threshold`**: `int`

The NLP reporting threshold at auction.

**`non_competitive_accepted`**: `int`

The accepted value from non-competitive bidders on the security.

**`non_competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the auction accepted non-competitive tenders.

**`offering_amount`**: `int`

The offering amount at auction.

**`original_cusip`**: `str`

The original CUSIP of the security.

**`original_dated_date`**: `date`

The original dated date of the security.

**`original_issue_date`**: `date`

The original issue date of the security.

**`original_security_term`**: `str`

The original term of the security.

**`pdf_announcement`**: `str`

The PDF filename for the announcement of the security.

**`pdf_competitive_results`**: `str`

The PDF filename for the competitive results of the security.

**`pdf_non_competitive_results`**: `str`

The PDF filename for the non-competitive results of the security.

**`pdf_special_announcement`**: `str`

The PDF filename for the special announcements.

**`price_per_100`**: `float`

The price per 100 of the security.

**`primary_dealer_accepted`**: `int`

The primary dealer accepted value on the security.

**`primary_dealer_tendered`**: `int`

The primary dealer tendered value on the security.

**`reopening`**: `Literal['Yes', 'No']`

Whether or not the auction was reopened.

**`security_term_day_month`**: `str`

The security term in days or months.

**`security_term_week_year`**: `str`

The security term in weeks or years.

**`series`**: `str`

The series name of the security.

**`soma_accepted`**: `int`

The SOMA accepted value on the security.

**`soma_holdings`**: `int`

The SOMA holdings on the security.

**`soma_included`**: `Literal['Yes', 'No']`

Whether or not the SOMA (System Open Market Account) was included on the security.

**`soma_tendered`**: `int`

The SOMA tendered value on the security.

**`spread`**: `float`

The spread on the security.

**`standard_payment_per_1000`**: `float`

The standard payment per 1000 of the security.

**`strippable`**: `Literal['Yes', 'No']`

Whether or not the security is strippable.

**`term`**: `str`

The term of the security.

**`tiin_conversion_factor_per_1000`**: `float`

The TIIN conversion factor per 1000 of the security.

**`tips`**: `Literal['Yes', 'No']`

Whether or not the security is TIPS.

**`total_accepted`**: `int`

The total accepted value at auction.

**`total_tendered`**: `int`

The total tendered value at auction.

**`treasury_retail_accepted`**: `int`

The accepted value on the security from retail.

**`treasury_retail_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the tender offers from retail are accepted

**`type`**: `str`

The type of issuance.  This might be different than the security type.

**`unadjusted_accrued_interest_per_1000`**: `float`

The unadjusted accrued interest per 1000 of the security.

**`unadjusted_price`**: `float`

The unadjusted price of the security.

**`updated_timestamp`**: `datetime`

The updated timestamp of the security.

**`xml_announcement`**: `str`

The XML filename for the announcement of the security.

**`xml_competitive_results`**: `str`

The XML filename for the competitive results of the security.

**`xml_special_announcement`**: `str`

The XML filename for special announcements.

**`tint_cusip1`**: `str`

Tint CUSIP 1.

**`tint_cusip2`**: `str`

Tint CUSIP 2.

</TabItem>
</Tabs>



---

---
title: "Treasury Constant Maturity"
description: "Treasury Constant Maturity"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TreasuryConstantMaturity` | `TreasuryConstantMaturityQueryParams` | `TreasuryConstantMaturityData` |

### Import Statement

```python
from openbb_core.provider.standard_models.tmc import (
TreasuryConstantMaturityData,
TreasuryConstantMaturityQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '2y']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '2y']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

TreasuryConstantMaturity Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

TreasuryConstantMaturity Rate.

</TabItem>
</Tabs>



---

---
title: "Treasury Prices"
description: "Government Treasury Prices by date"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TreasuryPrices` | `TreasuryPricesQueryParams` | `TreasuryPricesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.treasury_prices import (
TreasuryPricesData,
TreasuryPricesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

</TabItem>

<TabItem value='government_us' label='government_us'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter by CUSIP.

 • *Optional:* `True`

---

**`security_type`**: `Literal['bill', 'note', 'bond', 'tips', 'frn']`

Filter by security type.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

---

**`govt_type`**: `Literal['federal', 'provincial', 'municipal']`

The level of government issuer.

 • *Default:* `federal`

 • *Optional:* `True`

---

**`issue_date_min`**: `date`

Filter by the minimum original issue date.

 • *Optional:* `True`

---

**`issue_date_max`**: `date`

Filter by the maximum original issue date.

 • *Optional:* `True`

---

**`last_traded_min`**: `date`

Filter by the minimum last trade date.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Filter by the minimum maturity date.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Filter by the maximum maturity date.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

All bond data is sourced from a single JSON file that is updated daily. The file is cached for one day to eliminate downloading more than once. Caching will significantly speed up subsequent queries. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>

<TabItem value='government_us' label='government_us'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>
</Tabs>



---

---
title: "Treasury Rates"
description: "Government Treasury Rates"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `TreasuryRates` | `TreasuryRatesQueryParams` | `TreasuryRatesData` |

### Import Statement

```python
from openbb_core.provider.standard_models.treasury_rates import (
TreasuryRatesData,
TreasuryRatesQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>
</Tabs>



---

---
title: "Unemployment"
description: "Get global unemployment data"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `Unemployment` | `UnemploymentQueryParams` | `UnemploymentData` |

### Import Statement

```python
from openbb_core.provider.standard_models.unemployment import (
UnemploymentData,
UnemploymentQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`sex`**: `Literal['total', 'male', 'female']`

Sex to get unemployment for.

 • *Default:* `total`

 • *Optional:* `True`

---

**`age`**: `Literal['total', '15-24', '25+']`

Age group to get unemployment for. Total indicates 15 years or over

 • *Default:* `total`

 • *Optional:* `True`

---

**`seasonal_adjustment`**: `bool`

Whether to get seasonally adjusted unemployment. Defaults to False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which unemployment rate is given

**`value`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which unemployment rate is given

**`value`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "University Of Michigan"
description: "Get University of Michigan Consumer Sentiment and Inflation Expectations Surveys"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `UniversityOfMichigan` | `UniversityOfMichiganQueryParams` | `UniversityOfMichiganData` |

### Import Statement

```python
from openbb_core.provider.standard_models. import (
UniversityOfMichiganData,
UniversityOfMichiganQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`consumer_sentiment`**: `float`

Index of the results of the University of Michigan's monthly Survey of Consumers, which is used to estimate future spending and saving.  (1966:Q1=100).

**`inflation_expectation`**: `float`

Median expected price change next 12 months, Surveys of Consumers.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`consumer_sentiment`**: `float`

Index of the results of the University of Michigan's monthly Survey of Consumers, which is used to estimate future spending and saving.  (1966:Q1=100).

**`inflation_expectation`**: `float`

Median expected price change next 12 months, Surveys of Consumers.

</TabItem>
</Tabs>



---

---
title: "World News"
description: "World News"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `WorldNews` | `WorldNewsQueryParams` | `WorldNewsData` |

### Import Statement

```python
from openbb_core.provider.standard_models.world_news import (
WorldNewsData,
WorldNewsQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`display`**: `Literal['headline', 'abstract', 'full']`

Specify headline only (headline), headline + teaser (abstract), or headline + full body (full).

 • *Default:* `full`

 • *Optional:* `True`

---

**`updated_since`**: `int`

Number of seconds since the news was updated.

 • *Optional:* `True`

---

**`published_since`**: `int`

Number of seconds since the news was published.

 • *Optional:* `True`

---

**`sort`**: `Literal['id', 'created', 'updated']`

Key to sort the news by.

 • *Default:* `created`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order to sort the news by.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`isin`**: `str`

The ISIN of the news to retrieve.

 • *Optional:* `True`

---

**`cusip`**: `str`

The CUSIP of the news to retrieve.

 • *Optional:* `True`

---

**`channels`**: `str`

Channels of the news to retrieve.

 • *Optional:* `True`

---

**`topics`**: `str`

Topics of the news to retrieve.

 • *Optional:* `True`

---

**`authors`**: `str`

Authors of the news to retrieve.

 • *Optional:* `True`

---

**`content_types`**: `str`

Content types of the news to retrieve.

 • *Optional:* `True`

</TabItem>

<TabItem value='biztoc' label='biztoc'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`term`**: `str`

Search term to filter articles by. This overrides all other filters.

 • *Optional:* `True`

---

**`source`**: `str`

Filter by a specific publisher. Only valid when filter is set to source.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`source`**: `Literal['yahoo', 'moody', 'moody_us_news', 'moody_us_press_releases']`

The source of the news article.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['positive', 'neutral', 'negative']`

Return news only from this source.

 • *Optional:* `True`

---

**`language`**: `str`

Filter by language. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`topic`**: `str`

Filter by topic. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_greater_than`**: `int`

News stories will have a word count greater than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_less_than`**: `int`

News stories will have a word count less than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`is_spam`**: `bool`

Filter whether it is marked as spam or not. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`business_relevance_greater_than`**: `float`

News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

---

**`business_relevance_less_than`**: `float`

News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`offset`**: `int`

Page offset, used in conjunction with limit.

 • *Default:* `0`

 • *Optional:* `True`

---

**`source`**: `Union[str, list[str]]`

A comma-separated list of the domains requested. Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`id`**: `str`

Article ID.

**`author`**: `str`

Author of the news.

**`teaser`**: `str`

Teaser of the news.

**`channels`**: `str`

Channels associated with the news.

**`stocks`**: `str`

Stocks associated with the news.

**`tags`**: `str`

Tags associated with the news.

**`updated`**: `datetime`

Updated date of the news.

</TabItem>

<TabItem value='biztoc' label='biztoc'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[dict[str, str]]`

Images for the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`tags`**: `list[str]`

Tags for the article.

**`score`**: `float`

Search relevance score for the article.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`site`**: `str`

News source.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`source`**: `str`

The source of the news article.

**`summary`**: `str`

The summary of the news article.

**`topics`**: `str`

The topics related to the news article.

**`word_count`**: `int`

The word count of the news article.

**`business_relevance`**: `float`

How strongly correlated the news article is to the business

**`sentiment`**: `str`

The sentiment of the news article - i.e, negative, positive.

**`sentiment_confidence`**: `float`

The confidence score of the sentiment rating.

**`language`**: `str`

The language of the news article.

**`spam`**: `bool`

Whether the news article is spam.

**`copyright`**: `str`

The copyright notice of the news article.

**`id`**: `str`

Article ID.

**`company`**: `IntrinioCompany`

The Intrinio Company object. Contains details company reference data.

**`security`**: `IntrinioSecurity`

The Intrinio Security object. Contains the security details related to the news article.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Ticker tagged in the fetched news.

**`article_id`**: `int`

Unique ID of the news article.

**`site`**: `str`

News source.

**`tags`**: `str`

Tags associated with the news article.

**`crawl_date`**: `datetime`

Date the news article was crawled.

</TabItem>
</Tabs>



---

---
title: "Yield Curve"
description: "Get yield curve data by country and date"
---

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

---

## Implementation details

### Class names

| Model name | Parameters class | Data class |
| ---------- | ---------------- | ---------- |
| `YieldCurve` | `YieldCurveQueryParams` | `YieldCurveData` |

### Import Statement

```python
from openbb_core.provider.standard_models.yield_curve import (
YieldCurveData,
YieldCurveQueryParams,
)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`rating`**: `Literal['aaa', 'all_ratings']`

The rating type, either 'aaa' or 'all_ratings'.

 • *Default:* `aaa`

 • *Optional:* `True`

---

**`yield_curve_type`**: `Literal['spot_rate', 'instantaneous_forward', 'par_yield']`

The yield curve type.

 • *Default:* `spot_rate`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If true, cache the request for four hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. New Zealand, Mexico, Singapore, and Thailand have only monthly data. The nearest date to the requested one will be used. Multiple items allowed for provider(s): econdb.

<details>
<summary mdxType="summary">Choices</summary>

- `australia`
- `canada`
- `china`
- `ecb_instantaneous_forward`
- `ecb_par_yield`
- `ecb_spot_rate`
- `hong_kong`
- `india`
- `japan`
- `mexico`
- `new_zealand`
- `russia`
- `saudi_arabia`
- `singapore`
- `south_africa`
- `south_korea`
- `taiwan`
- `thailand`
- `united_kingdom`
- `united_states`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If true, cache the request for four hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`yield_curve_type`**: `Literal['nominal', 'real', 'breakeven', 'treasury_minus_fed_funds', 'corporate_spot', 'corporate_par']`

Yield curve type. Nominal and Real Rates are available daily, others are monthly. The closest date to the requested date will be returned.

 • *Default:* `nominal`

 • *Optional:* `True`

</TabItem>
</Tabs>



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>
</Tabs>



---

# Data Models

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

<ul className="grid grid-cols-1 gap-4 -ml-6">
<ReferenceCard
    title="Ameribor"
    description="AMERIBOR"
    url="/platform/data_models/Ameribor"
/>
<ReferenceCard
    title="Analyst Estimates"
    description="Get historical analyst estimates for earnings and revenue"
    url="/platform/data_models/AnalystEstimates"
/>
<ReferenceCard
    title="Analyst Search"
    description="Search for specific analysts and get their forecast track record"
    url="/platform/data_models/AnalystSearch"
/>
<ReferenceCard
    title="Available Indicators"
    description="Get the available economic indicators for a provider"
    url="/platform/data_models/AvailableIndicators"
/>
<ReferenceCard
    title="Available Indices"
    description="All indices available from a given provider"
    url="/platform/data_models/AvailableIndices"
/>
<ReferenceCard
    title="Balance Of Payments"
    description="Balance of Payments Reports"
    url="/platform/data_models/BalanceOfPayments"
/>
<ReferenceCard
    title="Balance Sheet Growth"
    description="Get the growth of a company's balance sheet items over time"
    url="/platform/data_models/BalanceSheetGrowth"
/>
<ReferenceCard
    title="Balance Sheet"
    description="Get the balance sheet for a given company"
    url="/platform/data_models/BalanceSheet"
/>
<ReferenceCard
    title="Bls Search"
    description="Search BLS surveys by category and keyword or phrase to identify BLS series IDs"
    url="/platform/data_models/BlsSearch"
/>
<ReferenceCard
    title="Bls Series"
    description="Get time series data for one, or more, BLS series IDs"
    url="/platform/data_models/BlsSeries"
/>
<ReferenceCard
    title="Bond Indices"
    description="Bond Indices"
    url="/platform/data_models/BondIndices"
/>
<ReferenceCard
    title="Bond Prices"
    description="Corporate Bond Prices"
    url="/platform/data_models/BondPrices"
/>
<ReferenceCard
    title="COT Search"
    description="Get the current Commitment of Traders Reports"
    url="/platform/data_models/COTSearch"
/>
<ReferenceCard
    title="COT"
    description="Get Commitment of Traders Reports"
    url="/platform/data_models/COT"
/>
<ReferenceCard
    title="Calendar Dividend"
    description="Get historical and upcoming dividend payments"
    url="/platform/data_models/CalendarDividend"
/>
<ReferenceCard
    title="Calendar Earnings"
    description="Get historical and upcoming company earnings releases"
    url="/platform/data_models/CalendarEarnings"
/>
<ReferenceCard
    title="Calendar Events"
    description="Get historical and upcoming company events, such as Investor Day, Conference Call, Earnings Release"
    url="/platform/data_models/CalendarEvents"
/>
<ReferenceCard
    title="Calendar Ipo"
    description="Get historical and upcoming initial public offerings (IPOs)"
    url="/platform/data_models/CalendarIpo"
/>
<ReferenceCard
    title="Calendar Splits"
    description="Get historical and upcoming stock split operations"
    url="/platform/data_models/CalendarSplits"
/>
<ReferenceCard
    title="Cash Flow Statement Growth"
    description="Get the growth of a company's cash flow statement items over time"
    url="/platform/data_models/CashFlowStatementGrowth"
/>
<ReferenceCard
    title="Cash Flow Statement"
    description="Get the cash flow statement for a given company"
    url="/platform/data_models/CashFlowStatement"
/>
<ReferenceCard
    title="Central Bank Holdings"
    description="Get the balance sheet holdings of a central bank"
    url="/platform/data_models/CentralBankHoldings"
/>
<ReferenceCard
    title="Cik Map"
    description="Map a ticker symbol to a CIK number"
    url="/platform/data_models/CikMap"
/>
<ReferenceCard
    title="Commercial Paper"
    description="Commercial Paper"
    url="/platform/data_models/CommercialPaper"
/>
<ReferenceCard
    title="Commodity Spot Prices"
    description="Commodity Spot Prices"
    url="/platform/data_models/CommoditySpotPrices"
/>
<ReferenceCard
    title="Company Filings"
    description="Get public company filings"
    url="/platform/data_models/CompanyFilings"
/>
<ReferenceCard
    title="Company News"
    description="Company News"
    url="/platform/data_models/CompanyNews"
/>
<ReferenceCard
    title="Compare Company Facts"
    description="Compare reported company facts and fundamental data points"
    url="/platform/data_models/CompareCompanyFacts"
/>
<ReferenceCard
    title="Compare Groups"
    description="Get company data grouped by sector, industry or country and display either performance or valuation metrics"
    url="/platform/data_models/CompareGroups"
/>
<ReferenceCard
    title="Composite Leading Indicator"
    description="Get the composite leading indicator (CLI)"
    url="/platform/data_models/CompositeLeadingIndicator"
/>
<ReferenceCard
    title="Consumer Price Index"
    description="Get Consumer Price Index (CPI)"
    url="/platform/data_models/ConsumerPriceIndex"
/>
<ReferenceCard
    title="Country Interest Rates"
    description="Get interest rates by country(s) and duration"
    url="/platform/data_models/CountryInterestRates"
/>
<ReferenceCard
    title="Country Profile"
    description="Get a profile of country statistics and economic indicators"
    url="/platform/data_models/CountryProfile"
/>
<ReferenceCard
    title="Crypto Historical"
    description="Get historical price data for cryptocurrency pair(s) within a provider"
    url="/platform/data_models/CryptoHistorical"
/>
<ReferenceCard
    title="Crypto Search"
    description="Search available cryptocurrency pairs within a provider"
    url="/platform/data_models/CryptoSearch"
/>
<ReferenceCard
    title="Currency Historical"
    description="Currency Historical Price"
    url="/platform/data_models/CurrencyHistorical"
/>
<ReferenceCard
    title="Currency Pairs"
    description="Currency Search"
    url="/platform/data_models/CurrencyPairs"
/>
<ReferenceCard
    title="Currency Reference Rates"
    description="Get current, official, currency reference rates"
    url="/platform/data_models/CurrencyReferenceRates"
/>
<ReferenceCard
    title="Currency Snapshots"
    description="Snapshots of currency exchange rates from an indirect or direct perspective of a base currency"
    url="/platform/data_models/CurrencySnapshots"
/>
<ReferenceCard
    title="Direction Of Trade"
    description="Get Direction Of Trade Statistics from the IMF database"
    url="/platform/data_models/DirectionOfTrade"
/>
<ReferenceCard
    title="Discount Window Primary Credit Rate"
    description="Discount Window Primary Credit Rate"
    url="/platform/data_models/DiscountWindowPrimaryCreditRate"
/>
<ReferenceCard
    title="Discovery Filings"
    description="Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more"
    url="/platform/data_models/DiscoveryFilings"
/>
<ReferenceCard
    title="ETF Active"
    description="Get the most active ETFs"
    url="/platform/data_models/ETFActive"
/>
<ReferenceCard
    title="ETF Gainers"
    description="Get the top ETF gainers"
    url="/platform/data_models/ETFGainers"
/>
<ReferenceCard
    title="ETF Losers"
    description="Get the top ETF losers"
    url="/platform/data_models/ETFLosers"
/>
<ReferenceCard
    title="Earnings Call Transcript"
    description="Get earnings call transcripts for a given company"
    url="/platform/data_models/EarningsCallTranscript"
/>
<ReferenceCard
    title="Economic Calendar"
    description="Get the upcoming, or historical, economic calendar of global events"
    url="/platform/data_models/EconomicCalendar"
/>
<ReferenceCard
    title="Economic Indicators"
    description="Get economic indicators by country and indicator"
    url="/platform/data_models/EconomicIndicators"
/>
<ReferenceCard
    title="Equity Active"
    description="Get the most actively traded stocks based on volume"
    url="/platform/data_models/EquityActive"
/>
<ReferenceCard
    title="Equity Aggressive Small Caps"
    description="Get top small cap stocks based on earnings growth"
    url="/platform/data_models/EquityAggressiveSmallCaps"
/>
<ReferenceCard
    title="Equity FTD"
    description="Get reported Fail-to-deliver (FTD) data"
    url="/platform/data_models/EquityFTD"
/>
<ReferenceCard
    title="Equity Gainers"
    description="Get the top price gainers in the stock market"
    url="/platform/data_models/EquityGainers"
/>
<ReferenceCard
    title="Equity Historical"
    description="Get historical price data for a given stock"
    url="/platform/data_models/EquityHistorical"
/>
<ReferenceCard
    title="Equity Info"
    description="Get general information about a company"
    url="/platform/data_models/EquityInfo"
/>
<ReferenceCard
    title="Equity Losers"
    description="Get the top price losers in the stock market"
    url="/platform/data_models/EquityLosers"
/>
<ReferenceCard
    title="Equity NBBO"
    description="Get the National Best Bid and Offer for a given stock"
    url="/platform/data_models/EquityNBBO"
/>
<ReferenceCard
    title="Equity Ownership"
    description="Get data about major holders for a given company over time"
    url="/platform/data_models/EquityOwnership"
/>
<ReferenceCard
    title="Equity Peers"
    description="Get the closest peers for a given company"
    url="/platform/data_models/EquityPeers"
/>
<ReferenceCard
    title="Equity Quote"
    description="Get the latest quote for a given stock"
    url="/platform/data_models/EquityQuote"
/>
<ReferenceCard
    title="Equity Screener"
    description="Screen for companies meeting various criteria"
    url="/platform/data_models/EquityScreener"
/>
<ReferenceCard
    title="Equity Search"
    description="Search for stock symbol, CIK, LEI, or company name"
    url="/platform/data_models/EquitySearch"
/>
<ReferenceCard
    title="Equity Short Interest"
    description="Get reported short volume and days to cover data"
    url="/platform/data_models/EquityShortInterest"
/>
<ReferenceCard
    title="Equity Undervalued Growth"
    description="Get potentially undervalued growth stocks"
    url="/platform/data_models/EquityUndervaluedGrowth"
/>
<ReferenceCard
    title="Equity Undervalued Large Caps"
    description="Get potentially undervalued large cap stocks"
    url="/platform/data_models/EquityUndervaluedLargeCaps"
/>
<ReferenceCard
    title="Equity Valuation Multiples"
    description="Get equity valuation multiples for a given company"
    url="/platform/data_models/EquityValuationMultiples"
/>
<ReferenceCard
    title="Etf Countries"
    description="ETF Country weighting"
    url="/platform/data_models/EtfCountries"
/>
<ReferenceCard
    title="Etf Equity Exposure"
    description="Get the exposure to ETFs for a specific stock"
    url="/platform/data_models/EtfEquityExposure"
/>
<ReferenceCard
    title="Etf Historical"
    description="ETF Historical Market Price"
    url="/platform/data_models/EtfHistorical"
/>
<ReferenceCard
    title="Etf Holdings Date"
    description="Use this function to get the holdings dates, if available"
    url="/platform/data_models/EtfHoldingsDate"
/>
<ReferenceCard
    title="Etf Holdings"
    description="Get the holdings for an individual ETF"
    url="/platform/data_models/EtfHoldings"
/>
<ReferenceCard
    title="Etf Info"
    description="ETF Information Overview"
    url="/platform/data_models/EtfInfo"
/>
<ReferenceCard
    title="Etf Price Performance"
    description="Price performance as a return, over different periods"
    url="/platform/data_models/EtfPricePerformance"
/>
<ReferenceCard
    title="Etf Search"
    description="Search for ETFs"
    url="/platform/data_models/EtfSearch"
/>
<ReferenceCard
    title="Etf Sectors"
    description="ETF Sector weighting"
    url="/platform/data_models/EtfSectors"
/>
<ReferenceCard
    title="Euro Short Term Rate"
    description="Euro Short-Term Rate"
    url="/platform/data_models/EuroShortTermRate"
/>
<ReferenceCard
    title="European Central Bank Interest Rates"
    description="European Central Bank Interest Rates"
    url="/platform/data_models/EuropeanCentralBankInterestRates"
/>
<ReferenceCard
    title="Executive Compensation"
    description="Get executive management team compensation for a given company over time"
    url="/platform/data_models/ExecutiveCompensation"
/>
<ReferenceCard
    title="Export Destinations"
    description="Get top export destinations by country from the UN Comtrade International Trade Statistics Database"
    url="/platform/data_models/ExportDestinations"
/>
<ReferenceCard
    title="Federal Funds Rate"
    description="Fed Funds Rate"
    url="/platform/data_models/FederalFundsRate"
/>
<ReferenceCard
    title="Financial Ratios"
    description="Get an extensive set of financial and accounting ratios for a given company over time"
    url="/platform/data_models/FinancialRatios"
/>
<ReferenceCard
    title="Fomc Documents"
    description="Get FOMC documents by year and document type"
    url="/platform/data_models/FomcDocuments"
/>
<ReferenceCard
    title="Form 13FHR"
    description="Get the form 13F"
    url="/platform/data_models/Form13FHR"
/>
<ReferenceCard
    title="Forward Ebitda Estimates"
    description="Get forward EBITDA estimates"
    url="/platform/data_models/ForwardEbitdaEstimates"
/>
<ReferenceCard
    title="Forward Eps Estimates"
    description="Get forward EPS estimates"
    url="/platform/data_models/ForwardEpsEstimates"
/>
<ReferenceCard
    title="Forward Pe Estimates"
    description="Get forward PE estimates"
    url="/platform/data_models/ForwardPeEstimates"
/>
<ReferenceCard
    title="Forward Sales Estimates"
    description="Get forward sales estimates"
    url="/platform/data_models/ForwardSalesEstimates"
/>
<ReferenceCard
    title="Fred Regional"
    description="Query the Geo Fred API for regional economic data by series group"
    url="/platform/data_models/FredRegional"
/>
<ReferenceCard
    title="Fred Release Table"
    description="Get economic release data by ID and/or element from FRED"
    url="/platform/data_models/FredReleaseTable"
/>
<ReferenceCard
    title="Fred Search"
    description="Search for FRED series or economic releases by ID or string"
    url="/platform/data_models/FredSearch"
/>
<ReferenceCard
    title="Fred Series"
    description="Get data by series ID from FRED"
    url="/platform/data_models/FredSeries"
/>
<ReferenceCard
    title="Futures Curve"
    description="Futures Term Structure, current or historical"
    url="/platform/data_models/FuturesCurve"
/>
<ReferenceCard
    title="Futures Historical"
    description="Historical futures prices"
    url="/platform/data_models/FuturesHistorical"
/>
<ReferenceCard
    title="Futures Info"
    description="Get current trading statistics by futures contract symbol"
    url="/platform/data_models/FuturesInfo"
/>
<ReferenceCard
    title="Futures Instruments"
    description="Get reference data for available futures instruments by provider"
    url="/platform/data_models/FuturesInstruments"
/>
<ReferenceCard
    title="Gdp Forecast"
    description="Get Forecasted GDP Data"
    url="/platform/data_models/GdpForecast"
/>
<ReferenceCard
    title="Gdp Nominal"
    description="Get Nominal GDP Data"
    url="/platform/data_models/GdpNominal"
/>
<ReferenceCard
    title="Gdp Real"
    description="Get Real GDP Data"
    url="/platform/data_models/GdpReal"
/>
<ReferenceCard
    title="Government Trades"
    description="Obtain government transaction data, including data from the Senate
and the House of Representatives"
    url="/platform/data_models/GovernmentTrades"
/>
<ReferenceCard
    title="Growth Tech Equities"
    description="Get top tech stocks based on revenue and earnings growth"
    url="/platform/data_models/GrowthTechEquities"
/>
<ReferenceCard
    title="High Quality Market Corporate Bond"
    description="High Quality Market Corporate Bond"
    url="/platform/data_models/HighQualityMarketCorporateBond"
/>
<ReferenceCard
    title="Historical Attributes"
    description="Get the historical values of a data tag from Intrinio"
    url="/platform/data_models/HistoricalAttributes"
/>
<ReferenceCard
    title="Historical Dividends"
    description="Get historical dividend data for a given company"
    url="/platform/data_models/HistoricalDividends"
/>
<ReferenceCard
    title="Historical Employees"
    description="Get historical employee count data for a given company"
    url="/platform/data_models/HistoricalEmployees"
/>
<ReferenceCard
    title="Historical Eps"
    description="Get historical earnings per share data for a given company"
    url="/platform/data_models/HistoricalEps"
/>
<ReferenceCard
    title="Historical Market Cap"
    description="Get the historical market cap of a ticker symbol"
    url="/platform/data_models/HistoricalMarketCap"
/>
<ReferenceCard
    title="Historical Splits"
    description="Get historical stock splits for a given company"
    url="/platform/data_models/HistoricalSplits"
/>
<ReferenceCard
    title="House Price Index"
    description="Get the House Price Index by country from the OECD Short-Term Economics Statistics"
    url="/platform/data_models/HousePriceIndex"
/>
<ReferenceCard
    title="ICE Bof A"
    description="ICE BofA US Corporate Bond Indices"
    url="/platform/data_models/ICEBofA"
/>
<ReferenceCard
    title="IORB"
    description="Interest on Reserve Balances"
    url="/platform/data_models/IORB"
/>
<ReferenceCard
    title="Immediate Interest Rate"
    description="Get immediate interest rates by country"
    url="/platform/data_models/ImmediateInterestRate"
/>
<ReferenceCard
    title="Income Statement Growth"
    description="Get the growth of a company's income statement items over time"
    url="/platform/data_models/IncomeStatementGrowth"
/>
<ReferenceCard
    title="Income Statement"
    description="Get the income statement for a given company"
    url="/platform/data_models/IncomeStatement"
/>
<ReferenceCard
    title="Index Constituents"
    description="Get Index Constituents"
    url="/platform/data_models/IndexConstituents"
/>
<ReferenceCard
    title="Index Historical"
    description="Historical Index Levels"
    url="/platform/data_models/IndexHistorical"
/>
<ReferenceCard
    title="Index Search"
    description="Filter indices for rows containing the query"
    url="/platform/data_models/IndexSearch"
/>
<ReferenceCard
    title="Index Sectors"
    description="Get Index Sectors"
    url="/platform/data_models/IndexSectors"
/>
<ReferenceCard
    title="Index Snapshots"
    description="Index Snapshots"
    url="/platform/data_models/IndexSnapshots"
/>
<ReferenceCard
    title="Insider Trading"
    description="Get data about trading by a company's management team and board of directors"
    url="/platform/data_models/InsiderTrading"
/>
<ReferenceCard
    title="Institutional Ownership"
    description="Get data about institutional ownership for a given company over time"
    url="/platform/data_models/InstitutionalOwnership"
/>
<ReferenceCard
    title="Institutions Search"
    description="Search SEC-regulated institutions by name and return a list of results with CIK numbers"
    url="/platform/data_models/InstitutionsSearch"
/>
<ReferenceCard
    title="Key Executives"
    description="Get executive management team data for a given company"
    url="/platform/data_models/KeyExecutives"
/>
<ReferenceCard
    title="Key Metrics"
    description="Get fundamental metrics for a given company"
    url="/platform/data_models/KeyMetrics"
/>
<ReferenceCard
    title="LTIR"
    description="Get Long-term interest rates that refer to government bonds maturing in ten years"
    url="/platform/data_models/LTIR"
/>
<ReferenceCard
    title="Latest Attributes"
    description="Get the latest value of a data tag from Intrinio"
    url="/platform/data_models/LatestAttributes"
/>
<ReferenceCard
    title="Latest Financial Reports"
    description="Get the newest quarterly, annual, and current reports for all companies"
    url="/platform/data_models/LatestFinancialReports"
/>
<ReferenceCard
    title="Management Discussion Analysis"
    description="Get the Management Discussion & Analysis section from the financial statements for a given company"
    url="/platform/data_models/ManagementDiscussionAnalysis"
/>
<ReferenceCard
    title="Manufacturing Outlook NY"
    description="Get the Empire State Manufacturing Survey"
    url="/platform/data_models/ManufacturingOutlookNY"
/>
<ReferenceCard
    title="Manufacturing Outlook Texas"
    description="Get The Manufacturing Outlook Survey For The Texas Region"
    url="/platform/data_models/ManufacturingOutlookTexas"
/>
<ReferenceCard
    title="Market Snapshots"
    description="Get an updated equity market snapshot"
    url="/platform/data_models/MarketSnapshots"
/>
<ReferenceCard
    title="Money Measures"
    description="Get Money Measures (M1/M2 and components)"
    url="/platform/data_models/MoneyMeasures"
/>
<ReferenceCard
    title="Moody Corporate Bond Index"
    description="Moody Corporate Bond Index"
    url="/platform/data_models/MoodyCorporateBondIndex"
/>
<ReferenceCard
    title="Mortgage Indices"
    description="Mortgage Indices"
    url="/platform/data_models/MortgageIndices"
/>
<ReferenceCard
    title="Non Farm Payrolls"
    description="Get Nonfarm Payrolls Survey"
    url="/platform/data_models/NonFarmPayrolls"
/>
<ReferenceCard
    title="OTC Aggregate"
    description="Get the weekly aggregate trade data for Over The Counter deals"
    url="/platform/data_models/OTCAggregate"
/>
<ReferenceCard
    title="Options Chains"
    description="Get the complete options chain for a ticker"
    url="/platform/data_models/OptionsChains"
/>
<ReferenceCard
    title="Options Snapshots"
    description="Get a snapshot of the options market universe"
    url="/platform/data_models/OptionsSnapshots"
/>
<ReferenceCard
    title="Options Unusual"
    description="Get the complete options chain for a ticker"
    url="/platform/data_models/OptionsUnusual"
/>
<ReferenceCard
    title="Overnight Bank Funding Rate"
    description="Overnight Bank Funding"
    url="/platform/data_models/OvernightBankFundingRate"
/>
<ReferenceCard
    title="Personal Consumption Expenditures"
    description="Get Personal Consumption Expenditures (PCE) reports"
    url="/platform/data_models/PersonalConsumptionExpenditures"
/>
<ReferenceCard
    title="Petroleum Status Report"
    description="EIA Weekly Petroleum Status Report"
    url="/platform/data_models/PetroleumStatusReport"
/>
<ReferenceCard
    title="Port Volume"
    description="Get average dwelling times and TEU volumes from the top ports"
    url="/platform/data_models/PortVolume"
/>
<ReferenceCard
    title="Price Performance"
    description="Get price performance data for a given stock"
    url="/platform/data_models/PricePerformance"
/>
<ReferenceCard
    title="Price Target Consensus"
    description="Get consensus price target and recommendation"
    url="/platform/data_models/PriceTargetConsensus"
/>
<ReferenceCard
    title="Price Target"
    description="Get analyst price targets by company"
    url="/platform/data_models/PriceTarget"
/>
<ReferenceCard
    title="Primary Dealer Fails"
    description="Primary Dealer Statistics for Fails to Deliver and Fails to Receive"
    url="/platform/data_models/PrimaryDealerFails"
/>
<ReferenceCard
    title="Primary Dealer Positioning"
    description="Get Primary dealer positioning statistics"
    url="/platform/data_models/PrimaryDealerPositioning"
/>
<ReferenceCard
    title="Projections"
    description="Fed Funds Rate Projections"
    url="/platform/data_models/PROJECTIONS"
/>
<ReferenceCard
    title="Reported Financials"
    description="Get financial statements as reported by the company"
    url="/platform/data_models/ReportedFinancials"
/>
<ReferenceCard
    title="Retail Prices"
    description="Get retail prices for common items"
    url="/platform/data_models/RetailPrices"
/>
<ReferenceCard
    title="Revenue Business Line"
    description="Get the revenue breakdown by business segment for a given company over time"
    url="/platform/data_models/RevenueBusinessLine"
/>
<ReferenceCard
    title="Revenue Geographic"
    description="Get the geographic breakdown of revenue for a given company over time"
    url="/platform/data_models/RevenueGeographic"
/>
<ReferenceCard
    title="Risk Premium"
    description="Get Market Risk Premium by country"
    url="/platform/data_models/RiskPremium"
/>
<ReferenceCard
    title="Rss Litigation"
    description="Get the RSS feed that provides links to litigation releases concerning civil lawsuits brought by the Commission in federal court"
    url="/platform/data_models/RssLitigation"
/>
<ReferenceCard
    title="SOFR"
    description="Secured Overnight Financing Rate"
    url="/platform/data_models/SOFR"
/>
<ReferenceCard
    title="SOFR"
    description="Secured Overnight Financing Rate"
    url="/platform/data_models/SOFR"
/>
<ReferenceCard
    title="SP500 Multiples"
    description="Get historical S&P 500 multiples and Shiller PE ratios"
    url="/platform/data_models/SP500Multiples"
/>
<ReferenceCard
    title="STIR"
    description="Get Short-term interest rates"
    url="/platform/data_models/STIR"
/>
<ReferenceCard
    title="Schema Files"
    description="Use tool for navigating the directory of SEC XML schema files by year"
    url="/platform/data_models/SchemaFiles"
/>
<ReferenceCard
    title="Search Attributes"
    description="Search Intrinio data tags to search in latest or historical attributes"
    url="/platform/data_models/SearchAttributes"
/>
<ReferenceCard
    title="Sec Filing"
    description="Download the index headers, and cover page if available, for any SEC filing"
    url="/platform/data_models/SecFiling"
/>
<ReferenceCard
    title="Sec Htm File"
    description="Download a raw HTML object from the SEC website"
    url="/platform/data_models/SecHtmFile"
/>
<ReferenceCard
    title="Selected Treasury Bill"
    description="Select Treasury Bill"
    url="/platform/data_models/SelectedTreasuryBill"
/>
<ReferenceCard
    title="Selected Treasury Constant Maturity"
    description="Select Treasury Constant Maturity"
    url="/platform/data_models/SelectedTreasuryConstantMaturity"
/>
<ReferenceCard
    title="Senior Loan Officer Survey"
    description="Get Senior Loan Officers Opinion Survey"
    url="/platform/data_models/SeniorLoanOfficerSurvey"
/>
<ReferenceCard
    title="Share Price Index"
    description="Get the Share Price Index by country from the OECD Short-Term Economics Statistics"
    url="/platform/data_models/SharePriceIndex"
/>
<ReferenceCard
    title="Share Statistics"
    description="Get data about share float for a given company"
    url="/platform/data_models/ShareStatistics"
/>
<ReferenceCard
    title="Short Term Energy Outlook"
    description="Monthly short term (18 month) projections using EIA's STEO model"
    url="/platform/data_models/ShortTermEnergyOutlook"
/>
<ReferenceCard
    title="Short Volume"
    description="Get reported Fail-to-deliver (FTD) data"
    url="/platform/data_models/ShortVolume"
/>
<ReferenceCard
    title="Sic Search"
    description="Search for Industry Titles, Reporting Office, and SIC Codes"
    url="/platform/data_models/SicSearch"
/>
<ReferenceCard
    title="Sonia"
    description="Sterling Overnight Index Average"
    url="/platform/data_models/SONIA"
/>
<ReferenceCard
    title="Spot Rate"
    description="Spot Rates"
    url="/platform/data_models/SpotRate"
/>
<ReferenceCard
    title="Survey Of Economic Conditions Chicago"
    description="Get The Survey Of Economic Conditions For The Chicago Region"
    url="/platform/data_models/SurveyOfEconomicConditionsChicago"
/>
<ReferenceCard
    title="Symbol Map"
    description="Map a CIK number to a ticker symbol, leading 0s can be omitted or included"
    url="/platform/data_models/SymbolMap"
/>
<ReferenceCard
    title="Tips Yields"
    description="Get current Treasury inflation-protected securities yields"
    url="/platform/data_models/TipsYields"
/>
<ReferenceCard
    title="Top Retail"
    description="Track over $30B USD/day of individual investors trades"
    url="/platform/data_models/TopRetail"
/>
<ReferenceCard
    title="Trailing Dividend Yield"
    description="Get the 1 year trailing dividend yield for a given company over time"
    url="/platform/data_models/TrailingDividendYield"
/>
<ReferenceCard
    title="Treasury Auctions"
    description="Government Treasury Auctions"
    url="/platform/data_models/TreasuryAuctions"
/>
<ReferenceCard
    title="Treasury Constant Maturity"
    description="Treasury Constant Maturity"
    url="/platform/data_models/TreasuryConstantMaturity"
/>
<ReferenceCard
    title="Treasury Prices"
    description="Government Treasury Prices by date"
    url="/platform/data_models/TreasuryPrices"
/>
<ReferenceCard
    title="Treasury Rates"
    description="Government Treasury Rates"
    url="/platform/data_models/TreasuryRates"
/>
<ReferenceCard
    title="Unemployment"
    description="Get global unemployment data"
    url="/platform/data_models/Unemployment"
/>
<ReferenceCard
    title="University Of Michigan"
    description="Get University of Michigan Consumer Sentiment and Inflation Expectations Surveys"
    url="/platform/data_models/UniversityOfMichigan"
/>
<ReferenceCard
    title="World News"
    description="World News"
    url="/platform/data_models/WorldNews"
/>
<ReferenceCard
    title="Yield Curve"
    description="Get yield curve data by country and date"
    url="/platform/data_models/YieldCurve"
/>

</ul>


---

---
title: Architecture Overview
sidebar_position: 1
description: This guide provides insights into the architecture and components of the OpenBB Platform. It covers the key classes, import statements, and the TET pattern used in building the Fetcher classes.
keywords:
  - OpenBB Platform Architecture
  - Python Interface
  - Build script
  - FastAPI
  - API
  - Key Classes
  - Import Statements
  - TET Pattern
  - Fetcher Classes
  - Core Dependencies
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Architecture Overview - Developer Guidelines - Development | OpenBB Platform Docs" />

This page provides a general overview of the OpenBB Platform architecture and the key Python classes most processes interact with.

<img
  src="https://openbb-cms.directus.app/assets/67ec2d35-b194-4ce2-8403-bfe274ac54b2.png"
  alt="Overview"
  width="100%"
/>

## Overview

The `openbb-core` package relies on a set of carefully selected Python libraries, including:

- FastAPI for building the API.
- Uvicorn as the ASGI server.
- Pandas for data manipulation and analysis.
- Pydantic for data validation and serialization using Python type annotations.
- Requests/AIOHTTP for making HTTP requests.
- WebSockets for handling WebSocket connections.

The current specifications can be found in the `pyproject.toml` [file](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/refs/heads/develop/openbb_platform/core/pyproject.toml) of the GitHub repository.

:::info Deploying Custom Applications
Keeping the application as lean as possible is crucial for maintaining its performance, and to eliminate bloat. Install only the components required to get the job(s) done.
:::

With just the Core, there are no routers or endpoints. Users and developers are free to create their own combinations of extensions, tailored to suit specific requirements.

The `openbb-core` package comes with the ability to operate two, independent, interfaces.

- Python Interface
  - Python application wrapping the installed routers.
  - A build script writes static files to create the application, which includes all installed extensions.
    - Docstrings and function signatures are generated by this process.
  - Configurable, and extendable, response object handling data validation, timestamping, and more.
- REST API
  - An instance of FastAPI

The application - both Python Interface and REST API - share core logic and models. It is the product of all installed [extensions](/platform/usage/extensions/overview).

All routes are a subclass of the Router class.

### Python Interface

:::important Key Information

The build script requires write access to the site-packages folder, post-installation, for generating static assets.

When a new extension is installed, or removed, the static assets must be regenerated in order to reflect the changes.

Remote deployments utilizing the interface should invoke the `openbb-build` command line script from the shell script establishing the environment, packages, and file system.
:::

Using the import below initializes the application instance from static files generated by the build script.

```python
from openbb import obb
```

The build script is not part of the `openbb-core` package. It is in the main package (`pip install openbb`), and it can be installed without any other components.

If `openbb` is not an installed package, but `openbb-core` is:

```sh
pip install openbb --no-deps
```

To build the assets:

```python
import openbb

openbb.build()
```

Restart the Python interpreter to begin using the application with:

```python
from openbb import obb
```

Alternatively, the process above can be run from the command line shell:

```sh
openbb-build
```

The bare interface includes:

- /account: This module contains methods for logging in to, and updating, an [OpenBB Hub](https://my.openbb.co) account.
- /user: The [`user_settings.json`](/platform/settings/environment_variables) object.
- /system: The [`system_settings.json`](/platform/settings/system_settings) object.
- /coverage: Information and metadata about the data provider extensions and their definitions (providers, commands, command_model, command_schemas, reference)

:::tip Python Settings
See [`system_settings.json`](/platform/settings/system_settings) for configuring runtime parameters.
:::

### API Interface

Items described immediately above will be included as routers by setting the [environment variable](/platform/settings/environment_variables), `OPENBB_DEV_MODE='1'`

The FastAPI instance, with all installed routers and extensions, can be imported with:

```python
from openbb_core.rest_api import app
```

Launched via Uvicorn:

```sh
uvicorn openbb_core.rest_api:app
```

:::tip API Settings
See [`system_settings.json`](/platform/settings/system_settings) for configuring runtime parameters.
:::

## Providers

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/cc978d76-269b-4793-a0bf-fe892b757e89.png"
    alt="Providers"
    width="60%"
  />
</div>

### QueryParams Class

The QueryParams class is a standardized model for handling query input parameters. Similar to `Data`, it is a subclass of `pydantic.BaseModel`.

Behaviour described here is mostly applicable to endpoints utilizing the `ProviderInterface`.

The class is used by the `ProviderInterface` to validate, merge, and discriminate endpoint parameters shared by multiple provider extensions.

Along with `__alias_dict__`, `QueryParams` uses `__json_schema_extra__` to constrict parameter inputs, and to deterimine when more than one entry should be accepted as a list.

```python
from openbb_core.provider.abstract.query_params import QueryParams
```

<details>
<summary mdxType="summary">Example</summary>

```python
"""Some Query Model."""

from datetime import date as dateType
from typing import Optional
from warnings import warn

from openbb_core.provider.abstract.query_params import QueryParams
from pydantic import Field, field_validator


class SomeQueryParams(QueryParams):
    """Some Query Parameters."""

    __alias_dict__ = {
        "symbol": "ticker",
        "start_date": "begin",
        # "input_field": "output_alias"
    }
    __json_schema_extra__ = {
        "symbol": {"multiple_items_allowed": True, "choices": SOME_SYMBOL_LIST},
        "interval": {"multiple_items_allowed": False},  # No need to define this, it is the default behaviour.
    }

    symbol: str = Field(description="The ticker symbol.")
    interval: Literal["1d", "1w", "1m"] = Field(
        default="1d",
        description="The interval of the timeseries. Choices: ["1d", "1w", "1m"]",
    )
    start_date: Optional[dateType] = Field(
        default=None,
        description="The start date, as YYYY-MM-SS, or datetime.date object",
    )
    end_date: Optional[dateType] = Field(
        default=None,
        description="The end date, as YYYY-MM-SS, or datetime.date object",
    )

    @field_validator("symbol", mode="before", check_fields=False)
    @classmethod
    def _validate_symbol(cls, v) -> str:
        """Validate the symbol."""
        if not v:
            raise ValueError("Please enter a symbol.")
        symbol = v if isinstance(v, list) else v.upper().split(",")

        new_symbols: list = []

        for s in symbol:
            if s not in SOME_SYMBOL_LIST:
                msg = f"Invalid symbol provided {s}"
                warn(msg)
                continue
            new_symbols.append(s)

        if not new_symbols:
            raise ValueError(f"No valid symbols supplied. Choices are: {SOME_SYMBOL_LIST}")

        return ",".join(new_symbols)
```

</details>

### Data Class

The OpenBB Standardized Data Model, and is a subclass of `pydantic.BaseModel`.

This is the base class for all data returned via the `ProviderInterface`, and is used for `POST` requests to the `data` field.

```python
from openbb_core.provider.abstract.data import Data
```

Key Features:

- Dynamic field support: Dynamically handles fields that are not pre-defined in the model,
- Alias handling: Maintain compatibility with different naming conventions across various data formats.
- Datetime/string interoperability.

<details>
<summary mdxType="summary">Example</summary>

```python
# Direct instantiation
data_record = Data(name="OpenBB", value=42)

# Conversion from a dictionary
data_dict = {"name": "OpenBB", "value": 42}
data_record = Data(**data_dict)

# __alias_dict__
class SomeData(Data):
    """Some Data Model."""

    __alias_dict__ = {
        "output_field": "someWhackyInputName",
    }
    output_field: str = Field(description="My Output")

SomeData(someWhackyInputName="Some Output")
```

Output:

```sh
SomeData(output_field=Some Output)
```

</details>

Using  as a function

The `Fetcher` class imposes a standardized structure, namely:

- Transform the query: output of this method should be `QueryParams` child.
- Extract the data: output of this method can be `Any` but it's recommended to be a `dict`.
- Transform the data: output of this method should be a `List[Data]` or `Data` (or a child of it - i.e. SomeData).
- Built-in test for verifying basic operation at each stage.

#### The TET Pattern

Each `Fetcher` follows this pattern. It stands for **Transform, Extract, Transform**.

The workflow divides data collection into three, seperate, tasks.

![Diagram](https://github.com/OpenBB-finance/OpenBB/assets/48914296/ae9908be-00c0-40af-8acb-afeeb9629f2b)

```python
from openbb_core.provider.abstract.fetcher import Fetcher
```

The generic methods are meant to be overwritten with the implementation.

```python

class SomeFetcher(Fetcher[SomeQueryParams, list[SomeData]]):
    """Some Fetcher."""

    # Tell query executor if credentials are required. Can be overridden by subclasses.
    # Useful if a provider has some endpoints requiring API keys, but not all.
    require_credentials = False

    @staticmethod
    def transform_query(params: dict[str, Any]) -> SomeQueryParams:
        """Transform the params to the provider-specific query."""
        raise NotImplementedError

    @staticmethod
    async def aextract_data(query: SomeQueryParams, credentials: Optional[dict[str, str]], **kwargs: Any) -> dict:
        """Asynchronously extract the data from the provider."""
        raise NotImplementedError

    @staticmethod
    def extract_data(query: SomeQueryParams, credentials: Optional[dict[str, str]], **kwargs: Any) -> dict:
        """Extract the data from the provider."""
        raise NotImplementedError

    @staticmethod
    def transform_data(query: SomeQueryParams, data: dict, **kwargs: Any) -> list[SomeData]:
        """Transform the provider-specific data."""
        raise NotImplementedError
```

:::note Notes

- One of, `extract_data`, or, `aextract_data`, must be implemented.
- All parameters for these methods are positional and should be defined as described above.
  :::

## Extensions

<div
  style={{ display: "flex", justifyContent: "center", alignItems: "center" }}
>
  <img
    src="https://openbb-cms.directus.app/assets/a25f6c03-19a8-4775-9e52-180aff8bf186.png"
    alt="Extensions"
    width="60%"
  />
</div>

### Routers

Router extensions are registered in the `pyproject.toml` file, and installed as a Python package.

```toml
[tool.poetry.plugins."openbb_core_extension"]
my_router = "my_router.my_router:router"
```

The `Router` class is a subclass of `fastapi.APIRouter`, helping validate and complete function signatures, ensuring that the functions registered as API endpoints have the correct parameters and return types.

```python
from openbb_core.provider.app.router import Router
```

Initialize the class with a prefix and description.

```python
some_router = Router(prefix="", description="Some description of this router.")
some_router.include_router(some_sub_router)
```

The `api_router` property provides access to the underlying APIRouter instance, allowing for direct interaction with the FastAPI routing system, if needed.

### @router.command

A `@router.command` decorator is exposed upon initialization, extending the functionality of `FastAPI().add_api_route()` to include additional parameters:

- `model`
  - A model name shared by all Provider extensions feeding the same input - i.e, "EquityHistorical"
- `examples`
  - Examples for use to include in documentation and Python docstring - see the page [here](extensions) for an explanation.
- `no_validate`
  - A flag to disable response validation for the endpoint.
    - The output type is assigned as `Any`
- All other arguments and keyword arguments are passed to `APIRouter.add_api_route` - i.e, `openapi_extra=dict(some_key=some_value)`

#### Response Model

Define the response model as part of the function's definition.

```python
@router.command(
    methods=["POST"],
    examples=[
        PythonEx(
            description="Calculate HMA with historical stock data.",
            code=[
                "stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')",
                "hma_data = obb.technical.hma(data=stock_data.results, target='close', length=50, offset=0)",
            ],
        ),
    ],
)
def hma(
    data: list[Data],
    target: str = "close",
    index: str = "date",
    length: int = 50,
    offset: int = 0,
) -> list[Data]: ...
```

### OBBject Class

The `OBBject` class is the standard response object from output functions, and has the following attributes:

- `results`: Serializable data that was returned by the command.
- `provider`: The name of the provider that was used to obtain the data, if any.
- `warnings`: Warnings generated by the command execution.
- `extra`: Additional metadata about the command run, including any arguments, the route, the timestamp, etc.

It is extendable, similar to a Pandas extension, and has methods for converting the results to different formats.

```python
from openbb_core.app.model.obbject import OBBject
```

A bare instance can be created by defining `results` as None.

```python
obbject = OBBject(results=None)
```

#### Output Conversion

Various formats and filtering can be applied to the function's output.

- `model_dump()`: Pydantic method for converting the complete object to a Python dictionary.
- `model_dump_json()`: Pydantic method for converting the complete object to a serialized JSON string.
- `to_df()`: Alias for `to_dataframe()`, and converts the contents of `obbject.results` to a Pandas DataFrame.
- `to_dict()`: Converts the contents of `obbject.results` to a Python dictionary object with a given `orientation`.
- `to_numpy()`: Convert the contents of `obbject.results` to a NumPy array.
- `to_polars()`: Converts the contents of `obbject.results` to a Polars DataFrame.

:::note
Polars is not included with OpenBB packages and must be installed.
:::

#### OBBject Extensions

An OBBject extension is created by defining `pyproject.toml` and installing the package.

```toml
[tool.poetry.plugins."openbb_obbject_extension"]
some_extension = "some_extension:ext"
```

The module's `__init__.py` file creates an instance of the extension object, and is attached to the output of every command.

```python
from openbb_core.app.model.extension import Extension

ext = Extension(name="some_extension")

@ext.obbject_accessor
class SomeExtension:
    def __init__(self, obbject):
        self._obbject = obbject

    def hello(self):
        print(f"Say Hello!")
```

An example of this type of extension is, [`openbb-charting`](https://pypi.org/project/openbb-charting/).

## Provider to Extension

<img
  src="https://openbb-cms.directus.app/assets/67ec2d35-b194-4ce2-8403-bfe274ac54b2.png"
  alt="Overview"
  width="100%"
/>

### ProviderInterface

The `ProviderInterface` is the map of all installed provider extensions to their respective callables, and is a Singleton accepting no initialization parameters.

It is responsible for handling the `provider` parameter - i.e, `provider="yfinance"` at execution, and is called by internal processes.

There is not a general need to interact with this class directly; however, it is useful to know that it exists.

```python
from openbb_core.app.provider_interface import ProviderInterface
```

Each item in the `ProviderInterface` maps to a `Fetcher`, which executes the TET pattern.

#### Provider Extensions

A provider extension is created by defining `pyproject.toml` and installing the package.

```toml
[tool.poetry.plugins."openbb_provider_extension"]
some_provider = "some_provider:some_provider"
```

It is a collection of data-collecting Fetchers that should be added to the application via the `provider` parameter.

### Provider Class

The `Provider` class is initialized in the `__init__.py` file of a provider extension module.

```python
from openbb_core.provider.abstract.provider import Provider
```

It maps the `Router` to the `Provider`, and defines other key metadata for the extension. The example below is from `openbb-bls`.

This is how the `ProviderInterface` maps any `@router.command(model="SomeModel")` function to all known instances.

<details>
<summary mdxType="summary">Example</summary>

```python
"""BLS Provider Module."""

from openbb_bls.models.search import BlsSearchFetcher
from openbb_bls.models.series import BlsSeriesFetcher
from openbb_core.provider.abstract.provider import Provider

bls_provider = Provider(
    name="bls",
    website="https://www.bls.gov/developers/api_signature_v2.htm",
    description="The Bureau of Labor Statistics' (BLS) Public Data Application Programming Interface (API)"
    + " gives the public access to economic data from all BLS programs."
    + " It is the Bureau's hope that talented developers and programmers will use the BLS Public Data API to create"
    + " original, inventive applications with published BLS data.",
    credentials=["api_key"],
    fetcher_dict={
        "BlsSearch": BlsSearchFetcher,
        "BlsSeries": BlsSeriesFetcher,
    },
    repr_name="Bureau of Labor Statistics' (BLS) Public Data API",
    instructions="Sign up for a free API key here: https://data.bls.gov/registrationEngine/",
)
```

</details>

### Using Fetcher Class as a function

A `Fetcher` can be executed without initialization, as an async function. It requires two positional arguments as dictionaries:

- `query` - a dictionary to be converted into the QueryParams class.
- `credentials` - a dictionary of credentials required for the provider and endpoint.
  - Pass as an empty dictionary when no credentials are required.

```python
results = await SomeFetcher.fetch_data({"symbol": "btcusd"}, {})
```

The return is the output of `SomeFetcher.tranform_data`

To implement the `ProviderInterface` as a `Router` endpoint, follow the pattern below in the extension's `router` file.

<details>
<summary mdxType="summary">Example</summary>

```python

from openbb_core.app.model.command_context import CommandContext  # A FastAPI Depends injection with the initialized user and system preferences
from openbb_core.app.model.obbject import OBBject  # The OpenBB standard response object with output validation.
from openbb_core.app.provider_interface import (
    ExtraParams, # All provider-specific parameters.
    ProviderChoices, # All providers feeding the endpoint.
    StandardParams,  # Parameters defined in the common 'Standard' model, if any.
)
from openbb_core.app.query import Query  # The query executor.
from openbb_core.app.router import Router


router = Router(prefix="", description="Some Router.")


@router.command(
    model="SomeModel",
    examples=[
        APIEx(parameters={"symbol": "btcusd", "interval": "1d", "provider": "some_provider"}),
    ],
)
async def some_function(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Use the `SomeModel` Fetcher."""
    return await OBBject.from_query(Query(**locals()))
```

</details>


---

---
title: Data Provider
sidebar_position: 7
description: This guide outlines the process for adding a new data provider extension to the OpenBB Platform.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - data
  - endpoint
  - existing
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - provider model
  - how to
  - new
  - template
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New Provider Extension - How-To | OpenBB Platform Docs" />

This page will walk through adding a new data provider extension to the OpenBB Platform.

<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
  <img src="https://openbb-cms.directus.app/assets/cc978d76-269b-4793-a0bf-fe892b757e89.png" alt="Provider" width="60%" />
</div>

## Getting Started

An easy way to get started is to copy and paste something existing. In the OpenBB GitHub repository, provider extensions are located [here](https://github.com/OpenBB-finance/OpenBB/tree/develop/openbb_platform/providers).

For convenience's sake, download this template [zip file](https://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip). It contains the basic folder structure and everything required to get started creating new data models.

For demonstration purposes, we'll assume this is from the perspective of somebody who will open a pull request and contribute the code to the OpenBB repository. The process, however, also applies to publishing directly via PyPI. Anyone can make an OpenBB extension.

The structure of the folder will look something like this:

```md
template/
├── openbb_template/
│ ├── models/
│ │ ├── __init__.py
│ │ └── some_model.py
│ ├── utils/
│ │ ├── __init__.py
│ │ └── helpers.py
│ ├── tests/
│ │ ├── record/
│ │ ├── __init__.py
│ │ └── test_template_fetchers.py
│ ├── __init__.py
├── __init__.py
├── pyproject.toml
└── README.md
```

The `__init__.py` file where models are mapped to the router is under, `/openbb_template`.

To get started:

- Unpack the downloaded [zip](ttps://github.com/OpenBB-finance/OpenBB/files/14519701/provider_extension_template.zip) file.

  - If working with a cloned GitHub repo, the folder is:

  ```console
  ~/OpenBB/openbb_platform/providers
  ```

- Rename everything, "template", to suit. File names, models, import statements, docstrings.
- Add any provider-specific package requirements in the `pyproject.toml` file.
- Update the Provider information in the `__init__.py` file.
  - If credentials are required, add a line to the Provider class initialization.

  ```python
  credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"
  ```

- From a terminal command line, navigate into the folder where the extension is, then install the empty blank package in "editable" mode.

  ```console
  poetry lock
  pip install -e .
  ```

- Start creating data models using the steps outlined [here](/platform/developer_guide/tutorials/add_new_provider_to_existing_extension)

### Cookiecutter

In order to speed up the process of building an extension, we have created a [**Cookiecutter**](https://github.com/OpenBB-finance/openbb-cookiecutter) template.

It serves as a jumpstart for your extension development, and can be used instead of the template ZIP referenced earlier. Instructions are located on the [GitHub page](https://github.com/OpenBB-finance/openbb-cookiecutter).

:::note
The cookiecutter tool will get you most of the way there, but it still requires some tweaks to the file names and initializations.
:::

ver are typically included as, XAU and XAG, respectively.


## Provider module


Below is the contents from the template's `__init__.py` file, modified to create a provider extension for [Tradier](https://documentation.tradier.com/brokerage-api/overview/endpoints).

```python
"""Tradier Provider Module."""

from openbb_core.provider.abstract.provider import Provider
from openbb_tradier.models.options_chains import TradierOptionsChainsFetcher

tradier_provider = Provider(
    name="tradier",
    website="https://tradier.com",
    description= "Tradier provides a full range of services in a scalable, secure,"
        + " and easy-to-use REST-based API for businesses and individual developers."
        + " Fast, secure, simple. Start in minutes."
        + " Get access to trading, account management, and market-data for"
        + " Tradier Brokerage accounts through our APIs.",
    credentials=["api_key", "account_type"], # account_type is either "sandbox" or "live"
    fetcher_dict={
        "OptionsChains": TradierOptionsChainsFetcher,
    },
)
```

Note: Access to most data sources is authorized with an API key, issued by the source. Sometimes there are multiple authorization fields, and other times there may be a need to change the base URL depending on the type of account.

> If no authorization is required, leave out the 'credentials' parameter.

### Rebuild python interface and assets

The application will need to rebuild the static files in order to recognize any changes to the `fetcher_dict` in the `__init__.py` file.

This is also required to reflect any changes to parameters, docstrings and function signatures.

Open a terminal, start a new Python session, then enter:

```python
import openbb

openbb.build()

exit()
```

The updated endpoint's function signature will now display the additional provider.

```python
Signature:
obb.derivatives.options.chains(
    symbol: typing.Annotated[str, OpenBBField(description='Symbol to get data for.')],
    provider: Optional[Literal['cboe', 'intrinio', 'tmx', 'tradier']] = None,
    **kwargs,
) -> openbb_core.app.model.obbject.OBBject
```


## Dependencies

The `pyproject.toml` file defines the package itself.

:::tip

- Before adding any dependency, ensure it aligns with the Platform's existing dependencies.
- If possible, use loose versioning.

  :::

```toml
[tool.poetry]
name = "openbb-template"
version = "1.0.0"
description = "Template Provider Extension for the OpenBB Platform"
authors = ["Name <my@emailaddress.com>"]
readme = "README.md"
packages = [{ include = "openbb_template" }]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
openbb = "^4.1.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."openbb_provider_extension"]
template = "openbb_template:template_provider"
```

The last line (poetry.plugins) maps to the provider defined in the `__init__.py` file.

Additionally, for local extensions, you can add this line in the `LOCAL_DEPS` variable in the `dev_install.py` file, located in `~/OpenBB/openbb_platform/`:

```toml
# If this is a community dependency, add this under "Community dependencies",
# with additional argument optional = true
openbb-extension = { path = "<relative-path-to-the-extension>", develop = true }
```

Now you can use the `python dev_install.py [-e]` command to install the local extension.


## Standard Model

The essence of a standard model is to be a shared resource with common ground between all sources.
It should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence.

Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform. If in doubbt, contact the OpenBB team.

### File Structure

We're going to map this new endpoint in the interface to, `obb.currency.snapshots()`. We'll name the model accordingly, `CurrencySnapshots`, and create a file, `currency_snapshots.py`. The file should be created here:

```console
~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/
```

The first line of the file should be a docstring, the second line should be empty, and the import statements follow.

The code block below are the typical imports in a standard model file, modify to suit the specific requirements.

:::tip

Constrained types can be imported from the Pydantic library, i.e. `PositiveInt`, `NonNegativeFloat`, etc.

:::

<details>
<summary mdxType="summary">File imports</summary>

```python
"""Currency Snapshots Standard Model."""

from typing import Literal, Optional

from pydantic import Field, field_validator

from openbb_core.provider.abstract.data import Data
from openbb_core.provider.abstract.query_params import QueryParams
from openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS
```
</details>

### Standard QueryParams

Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.
The same applies to `Literal` types, set as a generic `str` or `int` type and redefine it within the provider model as a `Literal["choice1", "choice2"]`.
We don't want a standard model parameter to provide invalid choices for individual providers.

Our `CurrencySnapshotsQueryParams` model is going to be very similar to `MarketSnapshotsQueryParams`, with the only difference being the field name "base".

:::important

If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - `Union[str, List[str]]`.
Instead, define it for the single value, `str`, and then add the property below to the provider's QueryParams model.

```python
__json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

:::

<details>
<summary mdxType="summary">Code example</summary>

The code block below is a continuation of the section above.

```python
class CurrencySnapshotsQueryParams(QueryParams):
    """Currency Snapshots Query Params."""

    base: str = Field(description="The base currency symbol.", default="usd")
    quote_type: Literal["direct", "indirect"] = Field(
        description="Whether the quote is direct or indirect."
        + " Selecting 'direct' will return the exchange rate"
        + " as the amount of domestic currency required to buy one unit"
        + " of the foreign currency."
        + " Selecting 'indirect' (default) will return the exchange rate"
        + " as the amount of foreign currency required to buy one unit"
        + " of the domestic currency.",
        default="indirect",
    )
    counter_currencies: Optional[Union[str, List[str]]] = Field(
        description="An optional list of counter currency symbols to filter for."
        + " None returns all.",
        default=None,
    )

    @field_validator("base", mode="before", check_fields=False)
    @classmethod
    def to_upper(cls, v):
        """Convert the base currency to uppercase."""
        return v.upper()

    @field_validator("counter_currencies", mode="before", check_fields=False)
    @classmethod
    def convert_string(cls, v):
        """Convert the counter currencies to an upper case string list."""
        if v is not None:
            return ",".join(v).upper() if isinstance(v, list) else v.upper()
        return None
```

</details>

It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.
This can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations.

### Standard Data

Like `QueryParams`, we don't want to attempt to define every potential future field. We want a core foundation for others to build on.
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
data parsing requirements for this endpoint:

- Split the six-letter symbol as two symbols.
- If the provider only returns `{"symbol": "price"}`, it will need to coerced accordingly within the `transform_data` static method of the `Fetcher` class.

<details>
<summary mdxType="summary">Code example</summary>

```python
class CurrencySnapshotsData(Data):
    """Currency Snapshots Data."""

    base_currency: str = Field(description="The base, or domestic, currency.")
    counter_currency: str = Field(description="The counter, or foreign, currency.")
    last_rate: float = Field(
        description="The exchange rate, relative to the base currency."
        + " By default, rates are expressed as the amount of foreign currency"
        + " received from selling one unit of the base currency,"
        + " or the quantity of foreign currency required to purchase"
        + " one unit of the domestic currency."
        + " To inverse the perspective, set the 'quote_type' parameter as 'direct'.
    )
    open: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("open", ""),
        default=None,
    )
    high: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("high", ""),
        default=None,
    )
    low: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("low", ""),
        default=None,
    )
    close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("close", ""),
        default=None,
    )
    volume: Optional[int] = Field(
        description=DATA_DESCRIPTIONS.get("volume", ""), default=None
    )
    prev_close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("prev_close", ""),
        default=None,
    )
```

</details>

## Provider Model

### File structure

We need to create a new file for our data provider.

:::note

If we created a standard model previously, the name will be the same.

```console
~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py
```

:::

The first line in the file will always be a docstring, with the import statements beginning below an empty line.

```python
"""FMP Currency Snapshots Model."""

# pylint: disable=unused-argument

from datetime import datetime
from typing import Any, Dict, List, Optional

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.currency_snapshots import (
    CurrencySnapshotsData,
    CurrencySnapshotsQueryParams,
)
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import amake_request
from pandas import DataFrame, concat
from pydantic import Field, field_validator
```

### Provider QueryParams

If we have defined a Standard Model for this provider, then our life is simplified as that base model already exists that we will inherit.

#### Iheritance

All that's added is a URL to the endpoint's documentation, and then the `__json_schema_extra__` dictionary which will allow multiple base symbols to be accepted by this provider.

```python
class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):
    """
    FMP Currency Snapshots Query.

    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote
    """

    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

#### One off

```python
from openbb_core.provider.abstract.query_params import QueryParams


class CongressBillsQueryParams(QueryParams):
    """Congress Bills Query Parameters."""

    __json_schema_extra__ = {
        "format": {
            "x-widget_config": {
                "exclude": True,
            },
        },
        "offset": {
            "x-widget_config": {
                "exclude": True,
            },
        },
    }

    format: Literal["json", "xml"] = Field(
        default="json", description="The data format. Value can be xml or json."
    )
    limit: int = Field(
        default=100,
        description="The number of records returned. The maximum limit is 250.",
    )
    offset: Optional[int] = Field(
        default=None, description="The starting record returned. 0 is the first record."
    )
    ...
```

### Provider Data

If we have defined a Standard Model we'll need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining. If there isn't a standard model, then we just need to define all the fields here.

For instance, if the sample output data from the source looks like this:

```json
[
  {
    "symbol": "AEDAUD",
    "name": "AED/AUD",
    "price": 0.40401,
    "changesPercentage": 0.3901,
    "change": 0.0016,
    "dayLow": 0.40211,
    "dayHigh": 0.40535,
    "yearHigh": 0.440948,
    "yearLow": 0.356628,
    "marketCap": null,
    "priceAvg50": 0.39494148,
    "priceAvg200": 0.40097216,
    "volume": 0,
    "avgVolume": 0,
    "exchange": "FOREX",
    "open": 0.40223,
    "previousClose": 0.40244,
    "eps": null,
    "pe": null,
    "earningsAnnouncement": null,
    "sharesOutstanding": null,
    "timestamp": 1677792573
  }
]
```

We can see that there are some fields which don't have anything to do with currencies. Those will be added here so the user still has access to them, since they aren't inherited from the standard model.

```python
class FMPCurrencySnapshotsData(CurrencySnapshotsData):
    """FMP Currency Snapshots Data."""

    __alias_dict__ = {
        "last_rate": "price",
        "high": "dayHigh",
        "low": "dayLow",
        "ma50": "priceAvg50",
        "ma200": "priceAvg200",
        "year_high": "yearHigh",
        "year_low": "yearLow",
        "prev_close": "previousClose",
        "change_percent": "changesPercentage",
        "last_rate_timestamp": "timestamp",
    }

    change: Optional[float] = Field(
        description="The change in the price from the previous close.", default=None
    )
    change_percent: Optional[float] = Field(
        description="The change in the price from the previous close, as a normalized percent.",
        default=None,
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    ma50: Optional[float] = Field(
        description="The 50-day moving average.", default=None
    )
    ma200: Optional[float] = Field(
        description="The 200-day moving average.", default=None
    )
    year_high: Optional[float] = Field(description="The 52-week high.", default=None)
    year_low: Optional[float] = Field(description="The 52-week low.", default=None)
    last_rate_timestamp: Optional[datetime] = Field(
        description="The timestamp of the last rate.", default=None
    )

    @field_validator("change_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize the percent."""
        return v / 100 if v is not None else None
```

A validator is setup to convert the percentage to a normalized value (1% -> 0.01).

### Provider Fetcher

The Fetcher class will always have the same general construction, in this instance we will use the `transform_data` stage to parse and filter the returned data before validating the model on output.

This is where the TET (transform-extract-transform) pattern is applied.

```python
class FMPCurrencySnapshotsFetcher(
    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]
):
    """FMP Currency Snapshots Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:
        """Transform the query parameters."""
        return FMPCurrencySnapshotsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: FMPCurrencySnapshotsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Extract the data from the FMP endpoint."""

        api_key = credentials.get("fmp_api_key") if credentials else ""

        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"

        return await amake_request(url, **kwargs)  # type: ignore

    @staticmethod
    def transform_data(
        query: FMPCurrencySnapshotsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[FMPCurrencySnapshotsData]:
        """Filter by the query parameters and validate the model."""

        if not data:
            raise EmptyDataError("No data was returned from the FMP endpoint.")

        # Drop all the zombie columns FMP returns.
        df = (
            DataFrame(data)
            .dropna(how="all", axis=1)
            .drop(columns=["exchange", "avgVolume"])
        )

        new_df = DataFrame()

        # Filter for the base currencies requested and the quote_type.
        for symbol in query.base.split(","):
            temp = (
                df.query("`symbol`.str.startswith(@symbol)")
                if query.quote_type == "indirect"
                else df.query("`symbol`.str.endswith(@symbol)")
            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})
            temp["base_currency"] = symbol
            temp["counter_currency"] = (
                [d.split("/")[1] for d in temp["counter_currency"]]
                if query.quote_type == "indirect"
                else [d.split("/")[0] for d in temp["counter_currency"]]
            )
            # Filter for the counter currencies, if requested.
            if query.counter_currencies is not None:
                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable
                    query.counter_currencies
                    if isinstance(query.counter_currencies, list)
                    else query.counter_currencies.split(",")
                )
                temp = (
                    temp.query("`counter_currency`.isin(@counter_currencies)")
                    .set_index("counter_currency")
                    # Sets the counter currencies in the order they were requested.
                    .filter(items=counter_currencies, axis=0)
                    .reset_index()
                )
            # If there are no records, don't concatenate.
            if len(temp) > 0:
                # Convert the Unix timestamp to a datetime.
                temp.timestamp = temp.timestamp.apply(
                    lambda x: datetime.fromtimestamp(x)
                )
                new_df = concat([new_df, temp])
            if len(new_df) == 0:
                raise EmptyDataError(
                    "No data was found using the applied filters. Check the parameters."
                )
            # Fill and replace any NaN values with NoneType.
            new_df = new_df.fillna("N/A").replace("N/A", None)
        return [
            FMPCurrencySnapshotsData.model_validate(d)
            for d in new_df.reset_index(drop=True).to_dict(orient="records")
        ]
```

If there are functions or constants that are required for the fetcher - these are typically added in a `/utils` folder with naming `helpers.py` and `constants.py` accordingly.

## Tests

### Testing the Fetcher

```python
"""Unit tests for FMP provider modules."""

from openbb_fmp.models.currency_snapshots import FMPCurrencySnapshotsFetcher

import pytest

test_credentials = UserService().default_user_settings.credentials.model_dump(
    mode="json"
)


def response_filter(response):
    """Filter the response."""
    if "Location" in response["headers"]:
        response["headers"]["Location"] = [
            re.sub(r"apikey=[^&]+", "apikey=MOCK_API_KEY", x)
            for x in response["headers"]["Location"]
        ]
    return response


@pytest.fixture(scope="module")
def vcr_config():
    """VCR configuration."""
    return {
        "filter_headers": [("User-Agent", None)],
        "filter_query_parameters": [
            ("apikey", "MOCK_API_KEY"),
        ],
        "before_record_response": response_filter,
    }


@pytest.mark.record_http
def test_fmp_currency_snapshots_fetcher(credentials=test_credentials):
    """Test FMP currency snapshots fetcher."""
    params = {
        "base": "XAU",
        "quote_type": "indirect",
        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",
    }

    fetcher = FMPCurrencySnapshotsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None

```

The filters might need to be updated for the specific provider, to ensure that API key or any authorization is sent correctly, and not logged. Particularly in the cassetes that are used for the CI.

### Records

The folder `/records` will contain the recordings of the data seen when running the test.

In order to get that you will need to run:

```sh
pytest test_fmp_fetchers.py --record http --record-no-overwrite
```

This will generate a file such as:

```sh
~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml
```

Make sure that it doesn't contain any of your API keys or credentials.


---

---
title: Extensions
sidebar_position: 12
description: This guide provides detailed instructions for including command examples in the router endpoints of the OpenBB Platform.
keywords:
  - OpenBB community
  - OpenBB Platform
  - Custom commands
  - API
  - Python Interface
  - Examples
  - Usage
  - Parameters
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Extensions | OpenBB Platform Docs" />

<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
    <img src="https://openbb-cms.directus.app/assets/a25f6c03-19a8-4775-9e52-180aff8bf186.png" alt="Extensions" width="60%" />
</div>


## Getting Started

The structure of the folder should look something like this:

```md
category/
├── openbb_category/
│ ├── subcategory1/
│ │ ├── __init__.py
│ │ └── subcategory1_router.py
│ │
│ ├── subcategory2/
│ │ ├── __init__.py
│ │ └── subcategory2_router.py
│ │
│ ├── category_router.py
│ ├── category_views.py
│ │
│ └── helpers.py
│
│── integration/
│ ├── test_category_api.py
│ └── test_category_python.py
│
│── tests/
│ └── test_helpers.py
│
├─- __init__.py
├── pyproject.toml
└── README.md
```

## Router implementation

The router implementation corresponds to the `subcategory1_router.py`, `subcategory2_router.py` and even `category_router.py`.

This is where you add the router commands. Here is an example for `openbb_category/economy_router.py`:

```python
"""Economy Router."""

# pylint: disable=unused-argument

from typing import Union

from openbb_core.app.deprecation import OpenBBDeprecationWarning
from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router

from openbb_economy.gdp.gdp_router import router as gdp_router
from openbb_economy.shipping.shipping_router import router as shipping_router
from openbb_economy.survey.survey_router import router as survey_router

router = Router(prefix="", description="Economic data.")
router.include_router(gdp_router)
router.include_router(shipping_router)
router.include_router(survey_router)


@router.command(
    model="EconomicCalendar",
    examples=[
        APIEx(
            parameters={"provider": "fmp"},
            description="By default, the calendar will be forward-looking.",
        ),
        APIEx(
            parameters={
                "provider": "fmp",
                "start_date": "2020-03-01",
                "end_date": "2020-03-31",
            }
        ),
        APIEx(
            description="By default, the calendar will be forward-looking.",
            parameters={"provider": "nasdaq"},
        ),
    ],
)
async def calendar(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get the upcoming, or historical, economic calendar of global events."""
    return await OBBject.from_query(Query(**locals()))
```

### Nested router

There can be a nested router in order to highlight hierarchy. We typically stope at hierarchy 2, i.e. `obb.category.subcategory.function`.

The subcategory routers are equivalent, at the exception that they don't include other routers.

<details>
<summary mdxType="summary">`openbb_category/gdp/gdp_router.py`</summary>

```python
"""Economy GDP Router."""

from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router

router = Router(prefix="/gdp")

# pylint: disable=unused-argument


@router.command(
    model="GdpForecast",
    examples=[
        APIEx(parameters={"provider": "oecd"}),
        APIEx(
            parameters={
                "country": "united_states,germany,france",
                "frequency": "annual",
                "units": "capita",
                "provider": "oecd",
            }
        ),
    ],
)
async def forecast(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get Forecasted GDP Data."""
    return await OBBject.from_query(Query(**locals()))
```

</details>

### Smoke test

Save the file, start a new Python session in a Terminal window, rebuild the app, and test it.

```console
import openbb

openbb.build()

exit()
```

Then run:

```python
from openbb import obb

obb.economy.calendar(
    "provider": "fmp",
    "start_date": "2020-03-01",
    "end_date": "2020-03-31",
).to_df()

obb.economy.gdp.forecast(
    "country": "united_states,germany,france",
    "frequency": "annual",
    "units": "capita",
    "provider": "oecd",
).to_df()
```

This should allow you to understand whether the command has been implemented correctly.

### Model Examples

Usage examples are defined in the router and are expected to provide working syntax, with descriptions for complex functions requiring many parameters. It is encouraged to include examples for every endpoint.

There are two models for defining examples, `APIEx` and `PythonEx`.

```python
from openbb_core.app.model.example import APIEx, PythonEx
```

:::info

When a provider is not installed, its example will be excluded from `openapi.json` and Python docstrings.

Submissions to our repository require:

- If any endpoint is excluded from the schema it only needs to contain a Python example.
- POST method examples should have both API and Python examples, unless they are excluded from the schema.

:::

#### APIEx

`APIEx` is more structured (and has less freedom) aiming to be language agnostic.

Requirements:
- At least one example using all required parameters. It cannot use any provider-specific parameters here. It should not specify the provider field.
- If there are more than three parameters, a description must be supplied in the example.

```python
@router.command(
    model="WorldNews",
    examples=[
        APIEx(parameters={}),
        APIEx(parameters={"limit": 100}),
        APIEx(
            description="Get news on the specified dates.",
            parameters={"start_date": "2024-02-01", "end_date": "2024-02-07"},
        ),
        APIEx(
            description="Display the headlines of the news.",
            parameters={"display": "headline", "provider": "benzinga"},
        ),
        APIEx(
            description="Get news by topics.",
            parameters={"topics": "finance", "provider": "benzinga"},
        ),
        APIEx(
            description="Get news by source using 'tingo' as provider.",
            parameters={"provider": "tiingo", "source": "bloomberg"},
        ),
        APIEx(
            description="Filter aticles by term using 'biztoc' as provider.",
            parameters={"provider": "biztoc", "term": "apple"},
        ),
    ],
)
```

#### PythonEx

`PythonEx` gives more freedom to create complex examples.

Requirements:
- Descriptions are mandatory.

```python
@router.command(
    methods=["POST"],
    include_in_schema=False,
    examples=[
        PythonEx(
            description="Perform Ordinary Least Squares (OLS) regression.",
            code=[
                "stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()",
                'obb.econometrics.ols_regression(data=stock_data, y_column="close", x_columns=["open", "high", "low"])',
            ],
        )
    ],
)
```

## Views implementation

This `category_views.py` file only exists, if we want to display a specific chart from that dataset.

This expects the user to utilize the `openbb-charting` extension. Here's what it looks like.

![FRED Chart](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00)

In terms of implementation, these files can be quite large due to inherent customizability associated with charting.

Here's an example for port information.

```python
"""Views for the Economy Extension."""

# flake8: noqa: PLR0912
# pylint: disable=too-many-branches

from typing import TYPE_CHECKING, Any, Optional
from warnings import warn

if TYPE_CHECKING:
    from openbb_charting.core.openbb_figure import (
        OpenBBFigure,
    )


class EconomyViews:
    """economy Views."""

    @staticmethod
    def economy_shipping_port_info(
        **kwargs,
    ) -> tuple["OpenBBFigure", dict[str, Any]]:
        """Port Info Chart."""
        # pylint: disable=import-outside-toplevel

        provider = kwargs.get("provider")

        if provider != "imf":
            raise RuntimeError(
                f"This charting method does not support {provider}. Supported providers: imf."
            )

        try:
            from openbb_imf.views.port_info import (
                plot_port_info_map,
            )
        except Exception as e:
            raise RuntimeError("Unable to import the required module.") from e

        data = (
            kwargs.pop("data", None)
            if "data" in kwargs and kwargs["data"] is not None
            else kwargs.get("obbject_item")
        )
        fig = plot_port_info_map(data)  # type: ignore
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
        )
        content = fig.to_plotly_json()

        content["config"] = dict(
            responsive=False,
            displayModeBar=False,
            dragMode="pan",
            doubleClick="reset",
        )

        return fig, content
```

## Helpers implementation

This file in general doesn't exist, particularly if we are building a data extension.

However, for a toolkit extension, this may be helpful to add helper functions or others.

Example for `openbb_quantitative/helpers.py`:

```python
"""Helper functions for Quantitative Analysis."""

from typing import TYPE_CHECKING, Union

if TYPE_CHECKING:
    from pandas import DataFrame, Series


def validate_window(input_data: Union["Series", "DataFrame"], window: int) -> None:
    """Validate the window input.

    Parameters
    ----------
    input_data : Union[Series, DataFrame]
        The input data to be validated.
    window : int
        The window to be validated.

    Raises
    ------
    ValueError
        If the window is greater than the input data length.
    """
    if window > len(input_data):
        raise ValueError(
            f"Window '{window}' is greater than the input data length '{len(input_data)}'"
        )

```

## Tests

This folder is usually empty for data extensions. With a `.gitkeep` file so the folder is recognized by git, even if empty.

Unless we are doing a toolkit extension and the user wants to add additional tests to the `helpers.py` file created.

In that case we may have something like `tests/test_quantitative_helpers.py`:

```python
"""Test the quantitative helpers."""

import pandas as pd
from extensions.quantitative.openbb_quantitative.helpers import (
    validate_window,
)


def test_validate_window():
    """Test the validate_window function."""
    input_data = pd.Series(range(1, 100))
    validate_window(
        input_data=input_data,
        window=20,
    )
```

## Integration Tests

The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider.

### API

Here's an example of our `integration/test_economy_api.py`:

```python
"""Test Economy API."""

import base64

import pytest
import requests
from extensions.tests.conftest import parametrize
from openbb_core.env import Env
from openbb_core.provider.utils.helpers import get_querystring


@pytest.fixture(scope="session")
def headers():
    """Get the headers for the API request."""
    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"
    userpass_bytes = userpass.encode("ascii")
    base64_bytes = base64.b64encode(userpass_bytes)

    return {"Authorization": f"Basic {base64_bytes.decode('ascii')}"}


# pylint: disable=redefined-outer-name


@parametrize(
    "params",
    [
        (
            {
                "provider": "nasdaq",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
                "country": "united_states,japan",
            }
        ),
        (
            {
                "provider": "tradingeconomics",
                "start_date": "2023-01-01",
                "end_date": "2023-06-06",
                "country": "mexico,sweden",
                "importance": "low",
                "group": "gdp",
                "calendar_id": None,
            }
        ),
        (
            {
                "provider": "fmp",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
            }
        ),
    ],
)
@pytest.mark.integration
def test_economy_calendar(params, headers):
    """Test the economy calendar endpoint."""
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/economy/calendar?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

To run this test, we will need to open a second terminal and start the server.

```console
uvicorn openbb_core.api.rest_api:app
```

Go back to the first terminal and run the test by entering:

```console
pytest test_economy_api.py
```

### Python

Here's an example of our `integration/test_economy_python.py`:


```python
"""Test economy extension."""

import pytest
from extensions.tests.conftest import parametrize
from openbb_core.app.model.obbject import OBBject


@pytest.fixture(scope="session")
def obb(pytestconfig):  # pylint: disable=inconsistent-return-statements
    """Fixture to setup obb."""

    if pytestconfig.getoption("markexpr") != "not integration":
        import openbb  # pylint: disable=import-outside-toplevel

        return openbb.obb


# pylint: disable=redefined-outer-name


@parametrize(
    "params",
    [
        (
            {
                "provider": "nasdaq",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
                "country": "united_states,japan",
            }
        ),
        (
            {
                "provider": "tradingeconomics",
                "start_date": "2023-01-01",
                "end_date": "2023-06-06",
                "country": "mexico,sweden",
                "importance": "low",
                "group": "gdp",
                "calendar_id": None,
            }
        ),
        (
            {
                "provider": "fmp",
                "start_date": "2023-10-24",
                "end_date": "2023-11-03",
            }
        ),
    ],
)
@pytest.mark.integration
def test_economy_calendar(params, obb):
    """Test economy calendar."""
    params = {p: v for p, v in params.items() if v}

    result = obb.economy.calendar(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

You can run the test by running:

```console
pytest test_economy_python.py
```


---

---
title: Contributing
sidebar_position: 8
description: This guide outlines the expectations for contributors to the OpenBB Platform. It covers aspects such as use cases, documentation, code quality, testing, performance, and collaboration. Whether you're enhancing functionality, building extensions, or contributing code.
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Code contribution
- Documentation
- Code quality
- Testing
- Performance optimization
- Collaboration
- Use cases
- OpenBB extensions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Contributing - Developer Guide | OpenBB Platform Docs" />

Thank you for taking the time to engage as a contributor. There is no contribution that is too small.
whether it is a spelling error in the documentation, or contributing code and participating in the
standardization of data, we appreciate all of you.

We hope your contributing experience is a good one, and if there's anything we can do to improve, please send us your feedback.
The list below is intended to provide some guidance on what the general expectations are.

1. Use Cases:
   - Ensure that your contributions directly enhance the OpenBB Platform's functionality or extension ecosystem.

2. Documentation:
   - All code contributions should come with relevant documentation, including the purpose of the contribution, how it works, and any changes it makes to existing functionalities.
   - Update any existing documentation if your contribution alters the behavior of the OpenBB Platform.
   - New router functions must have usage [examples](/platform/usage/extensions/overview) defined.

3. Code Quality:
   - Your code should adhere strictly to the OpenBB Platform's coding standards and [conventions](/platform/developer_guide/architecture_overview).
   - Ensure clarity, maintainability, and proper organization in your code.

4. [Testing](tests):
   - All contributions must be thoroughly tested to avoid introducing bugs to the OpenBB Platform.
   - Contributions should include relevant automated tests (unit and integration), and any new feature should come with its test cases.
   - See the page [here](tests) for details on the testing and QA infrastructure.

5. Performance:
   - Your contributions should be optimized for performance and should not degrade the overall efficiency of the OpenBB Platform.
   - Address any potential bottlenecks and ensure scalability.

6. Collaboration:
   - Engage actively with the OpenBB development team to ensure that your contributions align with the project's goals and standards.
   - Welcome feedback and be open to making revisions based on reviews and suggestions from the community.


---

---
title: Dependency Management
sidebar_position: 4
description: Dealing with dependencies when developing with the OpenBB Platform. Learn how to add new dependencies to the OpenBB Platform and how to add new dependencies to your custom extension.
keywords:
- OpenBB Platform
- Open source
- Python interface
- Dependency Management
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dependency Management - Development | OpenBB Platform Docs" />

- **Core**: Serves as the main infrastructure. All extensions and providers have `openbb-core` as a dependency.
- **Extensions**: Utility packages that leverage Core's infrastructure. Each extension is its own package.
- **Providers**: Utility packages extending functionality to different providers, where each provider is its own package.

> This page assumes that the OpenBB GitHub repo has been cloned.


## Core installation

:::warning
Do not run these commands in an already-installed OpenBB Platform environment. Do not run both `pip` and `poetry`.
:::

- **pip**: `pip install -e OpenBB/openbb_platform/platform/core`

or

- **poetry**: `poetry install OpenBB/openbb_platform/platform/core`

### Add dependencies

Ensure you're in a fresh conda environment before adjusting dependencies.

- **Add a Dependency**: `poetry add <my-dependency>`
- **Update Dependencies**:
  - All: `poetry update`
  - Specific: `poetry update <my-dependency>`
- **Remove a Dependency**: `poetry remove <my-dependency>`

## Development setup

For development setup, use the provided script to install all extensions and their dependencies:

- `python dev_install.py [-e|--extras]`

> **Note**: If developing an extension, avoid installing all extensions to prevent unnecessary overhead.

## Dependency Management

Utilizing Poetry.

- **Add Platform Extension**: `poetry add openbb-extension-name [--dev]`
- **Resolve Conflicts**: Adjust versions in `pyproject.toml` if notified by Poetry.
- **Lock Dependencies**: `poetry lock`
- **Update Platform**: `poetry update openbb-platform`
- **Documentation**: Maintain `pyproject.toml` and `poetry.lock` for a clear record of dependencies.


---

---
title: Deprecating Endpoints
sidebar_position: 6
description: This guide provides detailed instructions on how to deprecate an endpoint in the OpenBB Platform.
keywords:
- OpenBB community
- OpenBB Platform
- Custom commands
- API
- Python Interface
- Deprecation
- Deprecated
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Deprecating Endpoints - How-To | OpenBB Platform Docs" />

Deprecating commands is essential to maintaining the OpenBB Platform. This guide outlines the process for deprecating an endpoint.

1. Add the new endpoint that will replace the deprecated one.

2. Add the deprecation warning

    Navigate to the **router** where the endpoint to be deprecated exists. Set the `deprecated` flag to `True` and add `deprecation=OpenBBDeprecationWarning(…)` argument to the decorator. Refer to the example below:

    ```python

    from openbb_core.app.deprecation import OpenBBDeprecationWarning

        @router.command(
            model="MarketIndices",
            deprecated=True,
            deprecation=OpenBBDeprecationWarning(
                message="This endpoint is deprecated; use `/index/price/historical` instead.",
                since=(4, 1),
                expected_removal=(4, 5),
            ),
        )
        async def market(
            cc: CommandContext,
            provider_choices: ProviderChoices,
            standard_params: StandardParams,
            extra_params: ExtraParams,
        ) -> OBBject:
            """Historical Market Indices."""
        return await OBBject.from_query(Query(**locals()))
    ```

3. Get approval from a OpenBB Platform maintainer: We will help you determine the appropriate version for the deprecation warning, and communicate the change(s) to the relevant personnel that might depend on the endpoint you are deprecating.

4. Remove as we say - the endpoint will be removed in the version specified in the deprecation warning.


---

---
title: Disabling Output Validation
sidebar_position: 3
description: This page provides instructions for disabling output validation, when defining a new router function.
keywords:
- Validation
- Pydantic
- Python
- Development
- OpenBB Platform
- Provider Interface
- Router
- Custom
- Commands
- FastAPI
- extensions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Disabling Output Validation - Developer Guides | OpenBB Platform Docs" />

In some cases, it may be desirable to disable output validation for a custom router endpoint.
The example below demonstrates how to do it within your own custom router path.

:::important
This section refers to settings available beginning OpenBB v4.4.0
:::

In boths functions, the output will be typed as "Any", regardless of what the `return` definition states.

Within the `@router.command` decorator, add the keyword argument:

```python
no_validate = True
```

## Example

This example assumes that ficticious extensions have been defined and installed.

```python
from datetime import datetime

from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.example import APIEx, PythonEx
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router
from openbb_core.provider.abstract.data import Data

router = Router(prefix="", description="Some OpenBB Router Extension.")

# This uses the Provider Interface.
@router.command(
    model="SomeModel",
    no_validate=True,
    examples=[
        APIEx(parameters={"provider": "some_provider"}),
        PythonEx(
            description="Say Hello.",
            code=[
                "result = obb.some_extension.some_provider_function()",
            ],
        ),
    ],
)
async def some_provider_function(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject[Data]:
    """Some function using the Provider Interface."""
    obbject = await OBBject.from_query(Query(**locals()))

    new_output = []
    results = obbject.results

    # Do something with results and append to `new_output` list.

    return new_output


# This is a standard router "get" command.
@router.command(
    methods=["GET"],
    no_validate=True
    examples=[
        PythonEx(
            description="Say Hello.",
            code=[
                "result = obb.some_extension.hello()",
            ],
        ),
    ],
)
async def hello() -> (
    Any
):
    """Hello World."""
    return {
        datetime.now().strftime(
            "%Y-%m-%d"
        ): "Hello from the Empty Router extension!"
    }
```


---

---
title: Dynamic Command Execution
sidebar_position: 5
description: This guide provides detailed instructions on how to execute commands dynamically in the OpenBB Platform.
keywords:
- OpenBB community
- OpenBB Platform
- Custom commands
- API
- Python Interface
- Dynamic Execution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Dynamic Command Execution | OpenBB Platform Docs" />


Dynamic execution provides an alternate entry point to functions. This method requires formatting the query as demonstrated below.

```python
from openbb_core.app.command_runner import CommandRunner
runner = CommandRunner()
output = await runner.run(
    "/equity/fundamental/ratios",
    provider_choices={
        "provider": "fmp",
    },
    standard_params={
        "symbol" : "TSLA",
        "period" : "quarter",
    },
    extra_params={}
)
```

```console
>>> output
OBBject

id: 065241b7-bd9d-7313-8000-9406d8afab75
results: [{'symbol': 'TSLA', 'date': '2023-06-30', 'period': 'Q2', 'current_ratio':...
provider: fmp
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'fmp'}, 'standa...
```


---

---
title: HTTP Requests
sidebar_position: 1
description: This guide outlines OpenBB processes for making HTTP requests synchronously and asynchronously. Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Code contribution
- Requests
- HTTP
- Async
- Synchronous
- provider
- extension
- data
- fetch
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="HTTP Requests - Contributor Guidelines - Development | OpenBB Platform Docs" />

Any function fetching data requires making an outbound HTTP request. Utility functions within the `openbb-core` simplify the procedure for making both asynchronous and synchronous requests. These cover the majority of typical requests and should be imported for use instead of creating a new client from scratch.

Using the helpers will keep the codebase leaner and easier to maintain by eliminating duplicate processes. Anyone can build effective and efficient data fetchers, this guide outlines how to import and implement either type of request into any fetcher.

:::info
See [Environment Variables](/platform/settings/environment_variables) and [System Settings](/platform/settings/system_settings) for information on configuring global settings and the session object.
:::

## Generate Query String

To pass parameters to a URL, they need to be formatted as a query string. The helper function, `get_querystring()`, converts a dictionary of parameters to a standard query URL string.

```python
from openbb_core.provider.utils.helpers import get_querystring
```

```python
    Parameters
    ----------
    items: dict
        The dictionary to be turned into a querystring.

    exclude: List[str]
        The keys to be excluded from the querystring.

    Returns
    -------
    str
        The querystring.
```

Within the context of the Fetcher, the "query" object is a Pydantic model. To pass the query parameters to the helper function, apply `model_dump()` to the query object. This removes any key:values where the value is `None`.

There may be parameters that are not intended to be included in the parameters portion of the URL string. Pass those as a `List` to the `exclude` parameter of `get_querystring()`.

```python
query_string = get_querystring(query.model_dump(), ["interval"])
```

In the example above, the "base url" is dedicated to the "interval" of the OHLC data. We want to exclude `&interval=1d` from the parameters portion of the final URL. Or, daily/monthly/intraday levels are all different end points from the provider's API.

## Asynchronous vs Synchronous

Every function in the router is asynchronous. This is the only place an asynchronous function *must* be used. Data-fetching router functions all follow the same format.

```python
@router.command(model="MarketSnapshots")
async def market_snapshots(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Get a current, complete, market snapshot."""
    return await OBBject.from_query(Query(**locals()))
```

The code above executes the endpoint consumed by the user. Each data provider model mapped to the model name in the router decorator could be asynchronous or synchronous.

### Why Async?

An asynchronous fetcher is suitable for data sources demanding multiple queries per command. Options chains, for example, could be served as only a single expiration date, but others will provide the complete chain as a single request.

In the case of the former, dozens of requests, an asynchronous fetcher will dramatically improve performance. The latter is only one request and the code can be simplified as a synchronous process.

Some data providers allow for bulk downloading from a list of symbols, while many do not. It might be desirable to enhance a data source by adding support for bulk downloading. Wrapping it as list of asynchronous tasks makes it an efficient process. The time to download one item should be the same as two because the tasks are carried out concurrently.

Ultimately, the choice is at the discretion of the developer. OpenBB has made the implementation of both methods easy and fast, the next sections will elaborate.


### Synchronous - Requests

```python
from openbb_core.provider.utils import make_request
```

This function is an abstract helper to make requests from a URL with potential headers and parameters. It accepts `**kwargs` and returns a `requests.Response` object. If no headers are supplied, it will attempt to use a generic user-agent. Add headers as a dictionary to the `headers` parameter of the query.

All parameters of `requests.get` or `requests.post`are accessible and passed through as `**kwargs`.

```python

    Parameters
    ----------
    url : str
        Url to make the request to
    method : str, optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout

    Returns
    -------
    requests.Response
        Request response object

    Raises
    ------
    ValueError
        If invalid method is passed
```


### Asynchronous - AIOHTTP

Single-URL requests can be made asynchronously. The name of the function now starts with, `a`.

```python
from openbb_core.provider.utils.helpers import amake_request
```

This function uses the `aiohttp` client and accepts `kwargs`. It has a default callback function that assumes the content is `json`. No post-request object parsing is required, but this behaviour is overridden with the `response_callback` parameter.

```python
    Parameters
    ----------
    url : str
        Url to make the request to
    method : str, optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout
    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional
        Async callback with response and session as arguments that returns the json, by default None
    session : ClientSession, optional
        Custom session to use for requests, by default None


    Returns
    -------
    Union[dict, List[dict]]
        Response json
```

:::tip
Don't forget to `await`!

```python
url = "https://someurlwithdata.profit"
response_json = await amake_requests(url)
```

Absent `await`, the response is a coroutine - a task waiting to be executed.

:::

### Multi-URL Requests

The helper function becomes plural, `amake_requests`, when fetching for a list of URLs. Under the hood, it is using `asyncio.gather` to perform the tasks concurrently. The same default callback function from `amake_request` exists, only here it appends the expected `json` output to a `List[Dict]`.

```python
from openbb_core.provider.utils.helpers import amake_requests
```

```python
    Parameters
    ----------
    urls : Union[str, List[str]]
        List of urls to make requests to
    method : Literal["GET", "POST"], optional
        HTTP method to use.  Can be "GET" or "POST", by default "GET"
    timeout : int, optional
        Timeout in seconds, by default 10.  Can be overwritten by user setting, request_timeout
    response_callback : Callable[[ClientResponse, ClientSession], Awaitable[Union[dict, List[dict]]]], optional
        Async callback with response and session as arguments that returns the json, by default None
    session : ClientSession, optional
        Custom session to use for requests, by default None

    Returns
    -------
    Union[dict, List[dict]]
        Response json
```

### Custom Callback

Customize the response parsing by creating a specific callback function. The example below is a method for converting CSV data to a dictionary and appending it to a list.

```python
from io import StringIO
from typing import Any
from pandas import DataFrame

results = []

async def response_callback(response, _: Any):
    """Callback for HTTP Client Response."""
    response = await response.text()
    data = DataFrame(StringIO(response), skiprows=2)
    results.append(data.to_dict("records"))
```


### Asynchronous Fetchers

When a Fetcher is asynchronous, the `extract_data` static method needs to be defined accordingly - `aextract_data` instead of `extract_data`.

```python
    @staticmethod
    async def aextract_data(
        query: SourceModelQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
```

These helper functions simplify and standardize the majority of HTTP requests.

They are starting points for building or modifying data provider extensions, and they can also be imported as a standalone utility within any Python session.


---

---
title: Standardization
sidebar_position: 5
description: Learn about the OpenBB Platform, an open-source solution built by the community. Understand its use via Python interface and REST API, and acquaint yourself with how to build a custom extension or contribute directly to the platform
keywords:
- OpenBB Platform
- Open source
- Python interface
- REST API
- Data integration
- Data standardization
- OpenBB extensions
- openbb-core
- Python package
- High-Level Architecture
- Custom extension
- Contribution
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Standardization - Development | OpenBB Platform Docs" />

The Standardization Framework is a set of tools and guidelines that enable the user to query and obtain data in a consistent way across multiple providers.

Each provider data model should inherit from an already defined [standard](https://docs.openbb.co/platform/data_models) model. All standard models are created and maintained by the OpenBB team.

If a standard model needs to be created, please open a pull request and detail its use.

Standardizing provider query parameters and response data enhances the user experience by overcoming things like:

- Consistent query parameters across all data sources for a function, or type of function.
- Output data that has conformed types, is validated, and will be JSON serializable.
  - `NaN`, `NaT`, `"None"`, empty strings, are always returned as `NoneType` (null).
- Transparently defined schemas for the data and query parameters.
- Outputs from multiple sources are comparable with each other and easily interchanged.

The standard models are all defined in the `/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/` [directory](https://github.com/OpenBB-finance/OpenBB/tree/main/openbb_platform/core/openbb_core/provider/standard_models).

Every standard model consists of two classes, with each being a Pydantic model.

- [`QueryParams`](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/query_params.py)
- [`Data`](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/main/openbb_platform/core/openbb_core/provider/abstract/data.py)

Any parameter or field can be assigned a custom `field_validator`, or the entire model can be passed through a `model_validator` on creation.

## Caveats

The standardization framework is a very powerful tool, but it has some caveats that you should be aware of:

- We standardize fields and parameters that are shared between multiple providers.
  - In some cases, it can be undesirable to define common items in the standard model. In this event, we still want consistent names and descriptions.
- When mapping the column names from a provider-specific model to the standard model, the CamelCase to snake_case conversion is done automatically. If the column names are not the same, you'll need to manually map them.
  - e.g., `__alias_dict__ = {"o": "open"}`
- The standard models are created and maintained by the OpenBB team. If you want to add or modify a field within a standard model, you'll need to open a PR to the OpenBB Platform.


---

---
title: Tests
sidebar_position: 7
description: This section provides an in-depth look at the Quality Assurance (QA) process in the OpenBB Platform. It covers the use of QA tools for testing extensions, creation of unit and integration tests, and the importance of maintaining a short import time for the package.
keywords:
  - OpenBB QA process
  - Unit and integration tests
  - QA tools
  - Extension testing
  - Import time optimization
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Tests - Contributor Guidelines - Development | OpenBB Platform Docs" />

We are strong believers in the Quality Assurance (QA) process and we want to make sure that all the extensions that are added to the OpenBB Platform are of high quality.

To ensure this, we have a set of QA tools that you can use to test your work.

Primarily, we have tools that semi-automate the creation of unit and integration tests.

> The QA tools are still in development and we are constantly improving them.

## Unit tests

Each `Fetcher` comes equipped with a `test` method that will ensure it is implemented correctly, that it is returning the expected data, that all types are correct, and that the data is valid.

To create unit tests for your Fetchers, you can run the following command:

```bash
python openbb_platform/providers/tests/utils/unit_tests_generator.py
```

> Run this file from the root of the repository, and the `tests` folder must exist, in order to generate the tests.

The automatic unit test generation will add unit tests for all the fetchers available in a given provider.

To record the unit tests, you can run the following command:

```bash
pytest <path_to_the_unit_test_file> --record=all
```

:::note
Sometimes manual intervention is needed. For example, adjusting out-of-top level imports or adding specific arguments for a given fetcher.
:::

## Integration tests

The integration tests are a bit more complex than the unit tests, as we want to test both the Python interface and the API interface. For this, we have two scripts that will help you generate the integration tests.

To generate the integration tests for the Python interface, you can run the following command:

```bash
python openbb_platform/extensions/tests/utils/integration_tests_generator.py
```

To generate the integration tests for the API interface, you can run the following command:

```bash
python openbb_platform/extensions/tests/utils/integration_tests_api_generator.py
```

When testing the API interface, you'll need to run the OpenBB Platform locally before running the tests. To do so, you can run the following command:

```bash
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

These automated tests are a great way to reduce the amount of code you need to write, but they are not a replacement for manual testing and might require tweaking. That's why we have unit tests that test the generated integration tests to ensure they cover all providers and parameters.

To run the tests we can do:

- Unit tests only:

```bash
pytest openbb_platform -m "not integration"
```

- Integration tests only:

```bash
pytest openbb_platform -m integration
```

- Both integration and unit tests:

```bash
pytest openbb_platform
```

## Import time

We aim to have a short import time for the package. To measure that we use `tuna`.

- [https://pypi.org/project/tuna/](https://pypi.org/project/tuna/)

To visualize the import time breakdown by module and find potential bottlenecks, run the
following commands from `openbb_platform` directory:

```bash
pip install tuna
python -X importtime openbb/__init__.py 2> import.log
tuna import.log
```

## Known caveats

When using the OpenBB QA Framework it is important to be aware of the following caveats:

- The tests are semi-automated and might require manual intervention. For example, adjusting out-of-top level imports or changing specific arguments for a given payload.

- The integration tests are more complex and if your newly added provider integration is already covered by the
  integration tests from previous commands or providers, you will need to manually inject the payload for the new
  provider.

- In the integration test parametrized payload, the first item is always the set of standard parameters. Every
  consecutive item is a set of parameters for a specific provider with the standard parameters included.

- The integration tests require you to be explicit, by using all of the standard parameters and provider-specific
  parameters in the payload. If you want to exclude a parameter, you can use `None` as its value.

- The integration tests require you to be explicit by specifying the `provider` parameter in provider-specific
  payloads.

- When recording unit tests, you might run into issues with the cache that is tied to your specific provider and present
  on your local machine. You will know that this is the case if your tests pass locally, but fail on the CI. To fix this,
  you can delete the cache file from your local machine and re-record the tests.

      > Note that the cache is likely located here:
      > Windows: `C:\Users\user\AppData\Local\`
      > Linux: `/home/user/.cache/`
      > Mac: `/Users/user/Library/Caches`

- Some providers (we are aware only of YFinance so far) do an additional request when used from the US region. As our CI
  is running from the US region, this might cause the tests to fail. A workaround for this is to use a VPN to record the
  tests from a different region.


---

---
title: Using OpenBB With FastAPI and Depends
sidebar_position: 9
description: This page demonstrates how to efficiently import the OpenBB Python package into a FastAPI application, for use in any endpoint.
keywords:
  - OBB
  - Python
  - Development
  - OpenBB Platform
  - FastAPI
  - Depends
  - Router
  - Custom
  - Application
  - API
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Using OpenBB With FastAPI and Depends - Developer Guides | OpenBB Platform Docs" />

This page demonstrates how to efficiently import the OpenBB Python package into a FastAPI application,
for use in any endpoint.

The code below is a complete example for wrapping the Python interface in an API that calls `obb.equity.price.quote`.

Best practice would be to create, `OpenBBApp`, as a separate file and import directly in each router file requiring it.

## Example

```python
"""Example of using the OpenBB Python Interface as a FastAPI Dependency."""

from typing import Annotated
from openbb_core.app.model.abstract.singleton import SingletonMeta
from fastapi import (
    Depends,
    FastAPI,
)

app = FastAPI()


class OpenBB(metaclass=SingletonMeta):
    def __init__(self):
        import openbb

        self._obb = openbb.sdk

    @property
    def obb(self):
        return self._obb


def get_openbb():
    return OpenBB().obb


OpenBBApp = Annotated[OpenBB, Depends(get_openbb)]


@app.get("/quote")
async def quote(obb: OpenBBApp, symbol: str = "AAPL", provider: str = "yfinance"):
    return obb.equity.price.quote(symbol, provider=provider).model_dump()["results"]


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app)
```

:::info
Launch the server by copying the code block above into a new file, then run it as a script from the command line.
:::


---

---
title: Validators
sidebar_position: 2
description: This guide provides detailed instructions on how and where validators should be used.
keywords:
- OpenBB Platform
- Data point addition
- Provider creation
- Query parameters
- Data output models
- Fetcher class
- validator
- field
- param
- Fast API
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Validators - Developer Guidelines - Development | OpenBB Platform Docs" />

Both QueryParams and Data models can benefit from the tactical use of Pydantic validators.
This page will outline some of the key scenarios where they are deployed.

Overall, they assist with enforcing Fast API compliance for both inputs and outputs,
and they work in the final stage of transformation immediately before output.

Some situations where they are used include:

- Transform, conform, or otherwise alter the entered query parameter or returned data value.
- A query parameter or data field is a date.
- A query parameter requires a dynamic default state.
- Normalizing percent values.
- Cleaning NaN values.

## Examples

The items to import from the Pydantic library are:

```python
from pydantic import field_validator, model_validator
```

### Parsing Dates

Providers will format dates in a number of ways. OpenBB uses YYYY-MM-DD as the standard convention, for both inputs and outputs.

Outputs are a `datetime` object or JSON serialized string. Validators are used to parse the date from the specific format.
This example is used within a provider's `Data` model.

```python
@field_validator("last_trade_timestamp", mode="before", check_fields=False)
@classmethod
def parse_timestamp(cls, v):
    """Parse a Unix timestamp."""
    return datetime.fromtimestamp(v)
```

### Normalize Percent Values

At the provider level, we want to standardize the way values representing a percent are returned.

It is our intention to ensure those values are ready-to-consume by formulas without conversion.
This example would be used within a provider's `Data` model.

```python
@field_validator("change_percent", mode="before", check_fields=False)
@classmethod
def normalize_percent(cls, v):
    """Normalize the percent."""
    return v / 100 if v else None
```

### Dynamic Default Date

It might be desirable to have a default date parameter that is not static. To allow this, we must set the default parameter value as `None`, and use the `model_validator`. This example is for the `QueryParams`.

```python
@model_validator(mode="before")
@classmethod
def validate_dates(cls, values) -> dict:
    """Validate the query parameters."""
    if values.get("start_date") is None:
        values["start_date"] = (datetime.now() - timedelta(days=90)).date()
    if values.get("end_date") is None:
        values["end_date"] = datetime.now().date()
    return values
```

### Replace 0s With None

Sometimes values are returned as a `0` when they should really be a `null`.
This example looks at the entire `Data` model, but could easily be adapted to use on individual fields.

```python
@model_validator(mode="before")
@classmethod
def replace_zero(cls, values):
    """Check for zero values and replace with None."""
    return (
        {k: None if v == 0 else v for k, v in values.items()}
        if isinstance(values, dict)
        else values
    )
```


---

---
title: Create extension from scratch
sidebar_position: 1
description: This guide outlines the process for adding a new endpoint to an existing data provider, that does not yet have a standard model.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - new endpoint
  - fmp
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - data model
  - currency
  - snapshot
  - router
  - how to
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Add Command To An Existing Provider - How-To | OpenBB Platform Docs" />

This page will walk through adding a new router endpoint to an existing data provider, and how to go about creating a new standard model.

To demonstrate, we will be extending the `openbb-currency` router. The objective is to add a snapshot of currencies relative to a base currency.

The process will be very similar to adding a data provider to an existing endpoint - but here, we need to create a new standard model and add an extension.

It's about the same amount of work, but effort should be placed in consideration of others inheriting from this model in the future.

At a high level, the workflow is going to look something like:

1. With clear objectives, define the requirements for inputs and outputs of this function.
2. Create a standard model that will be suitable for any provider to inherit from.
3. Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher.
4. Create a new router endpoint in the `openbb-currency` module.
5. Rebuild the Python interface and static assets.
6. Create unit tests.
7. Create integration tests.
8. Submit a pull request.

## Getting started

Clone the GitHub repo and navigate into the project's folder.

If you have already done this, update your local branch:
    - `git fetch`
    - `git pull origin develop`

Install the OpenBB Platform in "editable" mode.
  - `cd openbb_platform`
  - `python dev_install.py -e`

Rebuild the Python interface and static assets.
  - `import openbb`
  - `openbb.build()`

Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with `feature/`.
  - `git checkout -b feature/currency-snapshots`

## Background information

Currencies, as an asset class, have different data properties than securities. For this exercise, we're really only concerned about the differences within the market data we are working with.
Things to keep in mind are:

- Market trading hours are relative to three major centers: Hong Kong, London, New York.
- Between the active global trading sessions, FX markets are 24/5.
- The data returned from a source could be time-indexed to any of the three market centers, localized as UTC, or make you guess.
- OHLC time series data will not always have volume.
- Not all sources will provide bid/ask, and/or, lot sizes.
- Perspective for the data is a relative relationship, there are always two "symbols".
  - Similar to index benchmarking, but with a layer of interest rate expectations.
- Gold and silver are typically included as, XAU and XAG, respectively.

## Build Standard Model

The essence of a standard model is to be a shared resource with common ground between all sources.

It should not be so specific that it is relevant only to one provider, and it needs to have defining characteristics that warrant its existence.

Mandatory fields and parameters should be minimal, and names need to be consistent with similar ones across the OpenBB Platform.

### Requirements

Our objective in this exercise has similar endpoints in the Equity and Index modules, `obb.equity.market_snapshots()` and `obb.index.snapshots()`;
however, there are differences between currency data and stocks.

The normal parameter for most asset classes, "symbol", fits our requirement; but, it is not the correct description. Instead, we want to name it, "base".
We need data providers to have an option to "allow" querying multiple base symbols.

We want to view the universe relative to a base currency, but we also want the option for comparative analysis between multiple bases.

In the data model, we'll need to split the typical "symbol" field into two: "base" and "currency".

It's quite likely that a large portion of users will not desire the entire universe, but maybe 20-30 of them.
It would be a good idea to have a parameter that filters for a list of desired currencies.

For this purpose, we want to express the view as an "[indirect quote](https://www.investopedia.com/terms/i/indirectquote.asp)" from the perspective of the "base currency".
How many units of "currency" X are received by selling one unit of the "base".
Compared against the USD, EUR should be less than 1, AUD should be greater than 1, and gold is a large decimal.

We can easily apply an inverse that allows users to decide for themselves which perspective they want to view
the exchange rate from. This is something that will need to be applied at the provider level, and it should be a requirement.

We will add a parameter, "quote_type", with choices ["indirect", "direct"].

There is one major monkey wrench in all of this. Is it, EUR/USD or USD/EUR? Do all providers return the same conventions?
It's a known-unknown, and we can't assume blindly that all follow the norm - or are even consistent with themselves.
We'll need to check a variety of response data from each source to find out.

The output needs to be usable as a conversion table, and this will likely need to be manually enforced.

:::important

The rule must be clearly communicated and each provider's output should be verified for compliance, else coerced to be.

:::

### Create a new file

We're going to map this new endpoint in the interface to, `obb.currency.snapshots()`. We'll name the model accordingly, `CurrencySnapshots`, and create a file, `currency_snapshots.py`. The file should be created here:

```console
~/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/
```

The first line of the file should be a docstring, the second line should be empty, and the import statements follow.

The code block below are the typical imports in a standard model file, modify to suit the specific requirements.

:::tip

Constrained types can be imported from the Pydantic library, i.e. `PositiveInt`, `NonNegativeFloat`, etc.

:::

```python
"""Currency Snapshots Standard Model."""

from typing import Literal, Optional

from pydantic import Field, field_validator

from openbb_core.provider.abstract.data import Data
from openbb_core.provider.abstract.query_params import QueryParams
from openbb_core.provider.utils.descriptions import DATA_DESCRIPTIONS
```

### QueryParams

Don't try to add every possible parameter unless it is certain that the majority of providers will have this available from their API.
The same applies to `Literal` types, set as a generic `str` or `int` type and redefine it within the provider model as a `Literal["choice1", "choice2"]`.
We don't want a standard model parameter to provide invalid choices for individual providers.

Our `CurrencySnapshotsQueryParams` model is going to be very similar to `MarketSnapshotsQueryParams`, with the only difference being the field name "base".

:::important

If the field will only sometimes accept a list of values, DO NOT define it in the standard model as a Union - `Union[str, List[str]]`.
Instead, define it for the single value, `str`, and then add the property below to the provider's QueryParams model.

```python
__json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

:::

The code block below is a continuation of the section above.

```python
class CurrencySnapshotsQueryParams(QueryParams):
    """Currency Snapshots Query Params."""

    base: str = Field(description="The base currency symbol.", default="usd")
    quote_type: Literal["direct", "indirect"] = Field(
        description="Whether the quote is direct or indirect."
        + " Selecting 'direct' will return the exchange rate"
        + " as the amount of domestic currency required to buy one unit"
        + " of the foreign currency."
        + " Selecting 'indirect' (default) will return the exchange rate"
        + " as the amount of foreign currency required to buy one unit"
        + " of the domestic currency.",
        default="indirect",
    )
    counter_currencies: Optional[Union[str, List[str]]] = Field(
        description="An optional list of counter currency symbols to filter for."
        + " None returns all.",
        default=None,
    )

    @field_validator("base", mode="before", check_fields=False)
    @classmethod
    def to_upper(cls, v):
        """Convert the base currency to uppercase."""
        return v.upper()

    @field_validator("counter_currencies", mode="before", check_fields=False)
    @classmethod
    def convert_string(cls, v):
        """Convert the counter currencies to an upper case string list."""
        if v is not None:
            return ",".join(v).upper() if isinstance(v, list) else v.upper()
        return None
```

It would be nice to have a list of valid choices, but each source may not have data for all currencies. Or, we could miss choices by only consulting one provider.
This can be a consideration for the data provider models to handle, and country codes for currencies are widely known ISO three-letter abbreviations.

### Data

Like `QueryParams`, we don't want to attempt to define every potential future field. We want a core foundation for others to build on.
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
We will define three fields as mandatory, "base_currency", "counter_currency", and "last_rate". This is enough to communicate our
data parsing requirements for this endpoint:

- Split the six-letter symbol as two symbols.
- If the provider only returns `{"symbol": "price"}`, it will need to coerced accordingly within the `transform_data` static method of the `Fetcher` class.

```python
class CurrencySnapshotsData(Data):
    """Currency Snapshots Data."""

    base_currency: str = Field(description="The base, or domestic, currency.")
    counter_currency: str = Field(description="The counter, or foreign, currency.")
    last_rate: float = Field(
        description="The exchange rate, relative to the base currency."
        + " By default, rates are expressed as the amount of foreign currency"
        + " received from selling one unit of the base currency,"
        + " or the quantity of foreign currency required to purchase"
        + " one unit of the domestic currency."
        + " To inverse the perspective, set the 'quote_type' parameter as 'direct'.
    )
    open: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("open", ""),
        default=None,
    )
    high: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("high", ""),
        default=None,
    )
    low: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("low", ""),
        default=None,
    )
    close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("close", ""),
        default=None,
    )
    volume: Optional[int] = Field(
        description=DATA_DESCRIPTIONS.get("volume", ""), default=None
    )
    prev_close: Optional[float] = Field(
        description=DATA_DESCRIPTIONS.get("prev_close", ""),
        default=None,
    )
```

Combine the three code blocks above to make a complete standard model file, and then we have completed the first two tasks.

- [x] With clear objectives, define the requirements for inputs and outputs of this function.
- [x] Create a standard model that will be suitable for any provider to inherit from.

## Build Provider Models

We're going to start with one provider, [FMP](https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote), and this section will look a lot like the process outlined [here](/platform/developer_guide/tutorials/add_new_provider_to_existing_extension).

### Create File For Provider

We need to create a new file in the FMP provider extension. This will have the same name as our standard model.

```console
~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py
```

The first line in the file will always be a docstring, with the import statements beginning below an empty line.

```python
"""FMP Currency Snapshots Model."""

# pylint: disable=unused-argument

from datetime import datetime
from typing import Any, Dict, List, Optional

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.currency_snapshots import (
    CurrencySnapshotsData,
    CurrencySnapshotsQueryParams,
)
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import amake_request
from pandas import DataFrame, concat
from pydantic import Field, field_validator
```

### Define QueryParams

Here, we won't need to define any new parameters. All that's added is a URL to the endpoint's documentation,
and then the `__json_schema_extra__` dictionary which will allow multiple base symbols to be accepted by this provider.

```python
class FMPCurrencySnapshotsQueryParams(CurrencySnapshotsQueryParams):
    """
    FMP Currency Snapshots Query.

    Source: https://site.financialmodelingprep.com/developer/docs#exchange-prices-quote
    """

    __json_schema_extra__ = {"base": ["multiple_items_allowed"]}
```

### Define Data

Sample output data from the source is pasted below, and we can see that there are some fields which don't have anything to do with currencies. Those will be dropped.

```json
[
  {
    "symbol": "AEDAUD",
    "name": "AED/AUD",
    "price": 0.40401,
    "changesPercentage": 0.3901,
    "change": 0.0016,
    "dayLow": 0.40211,
    "dayHigh": 0.40535,
    "yearHigh": 0.440948,
    "yearLow": 0.356628,
    "marketCap": null,
    "priceAvg50": 0.39494148,
    "priceAvg200": 0.40097216,
    "volume": 0,
    "avgVolume": 0,
    "exchange": "FOREX",
    "open": 0.40223,
    "previousClose": 0.40244,
    "eps": null,
    "pe": null,
    "earningsAnnouncement": null,
    "sharesOutstanding": null,
    "timestamp": 1677792573
  }
]
```

We'll then need to map the fields in the sample output data to the corresponding ones in the standard model, and then define the remaining.

```python
class FMPCurrencySnapshotsData(CurrencySnapshotsData):
    """FMP Currency Snapshots Data."""

    __alias_dict__ = {
        "last_rate": "price",
        "high": "dayHigh",
        "low": "dayLow",
        "ma50": "priceAvg50",
        "ma200": "priceAvg200",
        "year_high": "yearHigh",
        "year_low": "yearLow",
        "prev_close": "previousClose",
        "change_percent": "changesPercentage",
        "last_rate_timestamp": "timestamp",
    }

    change: Optional[float] = Field(
        description="The change in the price from the previous close.", default=None
    )
    change_percent: Optional[float] = Field(
        description="The change in the price from the previous close, as a normalized percent.",
        default=None,
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    ma50: Optional[float] = Field(
        description="The 50-day moving average.", default=None
    )
    ma200: Optional[float] = Field(
        description="The 200-day moving average.", default=None
    )
    year_high: Optional[float] = Field(description="The 52-week high.", default=None)
    year_low: Optional[float] = Field(description="The 52-week low.", default=None)
    last_rate_timestamp: Optional[datetime] = Field(
        description="The timestamp of the last rate.", default=None
    )

    @field_validator("change_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize the percent."""
        return v / 100 if v is not None else None
```

A validator is setup to convert the percentage to a normalized value (1% -> 0.01).

### Define Fetcher

The Fetcher class will always have the same general construction, in this instance we will use the `transform_data` stage to parse and filter the returned data before validating the model on output.

```python
class FMPCurrencySnapshotsFetcher(
    Fetcher[FMPCurrencySnapshotsQueryParams, List[FMPCurrencySnapshotsData]]
):
    """FMP Currency Snapshots Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> FMPCurrencySnapshotsQueryParams:
        """Transform the query parameters."""
        return FMPCurrencySnapshotsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: FMPCurrencySnapshotsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Extract the data from the FMP endpoint."""

        api_key = credentials.get("fmp_api_key") if credentials else ""

        url = f"https://financialmodelingprep.com/api/v3/quotes/forex?apikey={api_key}"

        return await amake_request(url, **kwargs)  # type: ignore

    @staticmethod
    def transform_data(
        query: FMPCurrencySnapshotsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[FMPCurrencySnapshotsData]:
        """Filter by the query parameters and validate the model."""

        if not data:
            raise EmptyDataError("No data was returned from the FMP endpoint.")

        # Drop all the zombie columns FMP returns.
        df = (
            DataFrame(data)
            .dropna(how="all", axis=1)
            .drop(columns=["exchange", "avgVolume"])
        )

        new_df = DataFrame()

        # Filter for the base currencies requested and the quote_type.
        for symbol in query.base.split(","):
            temp = (
                df.query("`symbol`.str.startswith(@symbol)")
                if query.quote_type == "indirect"
                else df.query("`symbol`.str.endswith(@symbol)")
            ).rename(columns={"symbol": "base_currency", "name": "counter_currency"})
            temp["base_currency"] = symbol
            temp["counter_currency"] = (
                [d.split("/")[1] for d in temp["counter_currency"]]
                if query.quote_type == "indirect"
                else [d.split("/")[0] for d in temp["counter_currency"]]
            )
            # Filter for the counter currencies, if requested.
            if query.counter_currencies is not None:
                counter_currencies = (  # noqa: F841  # pylint: disable=unused-variable
                    query.counter_currencies
                    if isinstance(query.counter_currencies, list)
                    else query.counter_currencies.split(",")
                )
                temp = (
                    temp.query("`counter_currency`.isin(@counter_currencies)")
                    .set_index("counter_currency")
                    # Sets the counter currencies in the order they were requested.
                    .filter(items=counter_currencies, axis=0)
                    .reset_index()
                )
            # If there are no records, don't concatenate.
            if len(temp) > 0:
                # Convert the Unix timestamp to a datetime.
                temp.timestamp = temp.timestamp.apply(
                    lambda x: datetime.fromtimestamp(x)
                )
                new_df = concat([new_df, temp])
            if len(new_df) == 0:
                raise EmptyDataError(
                    "No data was found using the applied filters. Check the parameters."
                )
            # Fill and replace any NaN values with NoneType.
            new_df = new_df.fillna("N/A").replace("N/A", None)
        return [
            FMPCurrencySnapshotsData.model_validate(d)
            for d in new_df.reset_index(drop=True).to_dict(orient="records")
        ]
```

The last four code blocks combined are the entire contents of the new provider model file.

Next, open `~/OpenBB/openbb_platform/providers/fmp/openbb_fmp/__init__.py`, import the new model, and map it in the Provider class.

Step 3 is now done.

- [x] Catalogue parameters and returned fields from the specific source of data, then build the models and fetcher.

## Add router endpoint to extension

To use our new function, we need to create a router command. The currency router is located here:

```python
~/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py
```

It's as simple as copying and pasting the function above and modifying details to suit.

The examples will be included in the docstring of the endpoint.

```python
@router.command(
    model="CurrencySnapshots",
    examples=[
        APIEx(parameters={}),
        APIEx(
            description="Get exchange rates from USD and XAU to EUR, JPY, and GBP using 'fmp' as provider.",
            parameters={
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            },
        ),
    ],
)
async def snapshots(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject:
    """Snapshots of currency exchange rates from an indirect or direct perspective of a base currency."""
    return await OBBject.from_query(Query(**locals()))
```

Steps 4 is done:
- [x] Create a new router endpoint in the `openbb-currency` module.

### Smoke test

Save the file, start a new Python session in a Terminal window, rebuild the app, and test it.

```console
import openbb

openbb.build()

exit()
```

Then run:

```python
from openbb import obb

obb.currency.snapshots(base="xau,xag", counter_currencies=["usd", "gbp", "eur", "hkd"],quote_type="indirect").to_df()
```

| base_currency | counter_currency | last_rate |    open |    high |     low | volume | prev_close | change | change_percent |    ma50 |   ma200 | year_high | year_low | last_rate_timestamp |
| :------------ | :--------------- | --------: | ------: | ------: | ------: | -----: | ---------: | -----: | -------------: | ------: | ------: | --------: | -------: | :------------------ |
| XAU           | USD              |   2092.76 | 2083.17 |  2092.8 |  2079.4 |   2246 |       2083 |   9.76 |      0.0046855 | 2030.83 | 1976.63 |   2084.35 |  1813.82 | 2024-03-04 06:16:12 |
| XAU           | GBP              |   1645.45 |  1644.1 |  1645.6 |    1640 |    643 |       1644 |   1.45 |    0.000881995 | 1603.92 | 1573.46 |   1652.15 |   1482.2 | 2024-03-04 05:45:11 |
| XAU           | EUR              |      1924 |  1921.5 |    1924 | 1917.15 |   1517 |       1921 |      3 |      0.0015617 | 1874.69 |  1826.4 |    1921.6 |  1719.35 | 2024-03-04 05:51:11 |
| XAU           | HKD              |   16341.8 |   16310 | 16341.9 | 16276.4 |   1665 |      16307 |  34.75 |       0.002131 | 15891.1 | 15452.8 |   16306.3 |    14238 | 2024-03-04 05:57:11 |
| XAG           | USD              |    23.299 | 23.1091 | 23.3062 | 23.0172 |   2074 |         23 |  0.299 |          0.013 | 22.7862 | 23.4349 |    26.035 |   20.005 | 2024-03-04 05:56:41 |
| XAG           | GBP              |     18.26 |   18.21 |   18.26 |   18.14 |    413 |         18 |   0.26 |      0.0144444 | 17.9988 | 18.5021 |     20.67 |    16.81 | 2024-03-04 05:24:10 |
| XAG           | EUR              |     21.36 |   21.32 |   21.37 | 21.2087 |   1079 |         21 |   0.36 |      0.0171429 | 21.0393 | 21.4906 |     23.64 |    18.97 | 2024-03-04 05:30:10 |
| XAG           | HKD              |   181.237 | 180.881 | 181.399 | 180.124 |   1596 |        180 |  1.237 |      0.0068722 | 178.342 | 181.815 |   204.411 |  157.209 | 2024-03-04 05:30:10 |


Steps 5 is done:
- [x] Create a new router endpoint in the `openbb-currency` module.

## Tests

We'll need to create a unit test for the FMP provider, and then integration tests for the Python interface and Fast API. It's as simple as creating a new router function was, copying and pasting.

### Unit test for provider

This is located in the `openbb-fmp` extension:

```console
~/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py
```

- Import the new fetcher with the rest of the imports (keep them alphabetically sorted).
- Copy and paste the last test function in the file.

```python
@pytest.mark.record_http
def test_fmp_currency_snapshots_fetcher(credentials=test_credentials):
    params = {
        "base": "XAU",
        "quote_type": "indirect",
        "counter_currencies": "USD,EUR,GBP,JPY,HKD,AUD,CAD,CHF,SEK,NZD,SGD",
    }

    fetcher = FMPCurrencySnapshotsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None
```

- Navigate to the path above and enter: `pytest test_fmp_fetchers.py --record http --record-no-overwrite`

This will generate a new file:

```console
~/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml
```

Check the file for any obvious errors, like a bad HTTP request status code.

Step 6 is done:
- [x] Add integration tests.

### Integration tests for router endpoint

The Python interface and Fast API each require a new integration test. Again, emulate an existing test and make sure to declare all parameters available to each provider.

#### API

Open the file below, and go to the last test in the file.

```console
~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py
```

We can copy this one:

```python
@parametrize(
    "params",
    [({"provider": "ecb"})],
)
@pytest.mark.integration
def test_currency_reference_rates(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/currency/reference_rates?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

Converting it for our new endpoint:

```python
@parametrize(
    "params",
    [
        (
            {
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            }
        ),
    ],
)
@pytest.mark.integration
def test_currency_snapshots(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/currency/snapshots?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

#### Python

The `@parameterize` section can be copied directly to the Python integration test.

```console
~/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py
```

```python
@parametrize(
    "params",
    [
        (
            {
                "provider": "fmp",
                "base": "USD,XAU",
                "counter_currencies": "EUR,JPY,GBP",
                "quote_type": "indirect",
            }
        ),
    ],
)
@pytest.mark.integration
def test_currency_snapshots(params, obb):
    result = obb.currency.snapshots(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

Now run `pytest` for both of these files.

Step 7 is done:
- [x] Add integration tests.

## Submit A Pull Request

We're already on the correct branch, `feature/currency-snapshots`, but it may be out-of-sync with the `develop` branch. Let's update it just to be sure.

```console
git fetch
git pull origin develop
```

#### Linters

Before opening a pull request, run the linters over all files that were touched.

- black
- ruff
- mypy
- pylint

Fix all items, and valid fixes for `pylint` can be disabling on that line. It won't always know what is contextually correct.

Here are all the files we touched in this process:

- `/OpenBB/openbb_platform/core/openbb_core/provider/standard_models/currency_snapshots.py`
- `/OpenBB/openbb_platform/providers/fmp/openbb_fmp/models/currency_snapshots.py`
- `/OpenBB/openbb_platform/providers/fmp/tests/test_fmp_fetchers.py`
- `/OpenBB/openbb_platform/providers/fmp/tests/record/test_fmp_currency_snapshots_fetcher.yaml`
- `/OpenBB/openbb_platform/extensions/currency/openbb_currency/currency_router.py`
- `/OpenBB/openbb_platform/extensions/currency/integration/test_currency_api.py`
- `/OpenBB/openbb_platform/extensions/currency/integration/test_currency_python.py`
- `/OpenBB/openbb_platform/openbb/assets/module_map.json`
- `/OpenBB/openbb_platform/openbb/package/currency.py`

#### Install Pre-Commit Hooks

The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, `OpenBB`.

```console
pre-commit install
```

#### Commit Changes

Add all the files then commit the results to the local branch.

```console
git commit -m "add obb.currency.snapshots() endpoint and create new standard model"
```

#### Push Changes

Assuming the commit is successful, push the changes to the remote branch.

```console
git push --set-upstream origin feature/currency-snapshots
```

#### Open a Pull Request

A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider.

1. **Why**?:

   - This PR is the result of creating a piece of contributor documentation (not included in this PR) for creating a new router endpoint and standard model.
   - Endpoint was requested by @minhhoang1023.

2. **What**?:

   - `obb.currency.snapshots()`

   - This endpoint provides a similar data set to `obb.equity.market_snapshots()` or `obb.index.snapshots()`, with minor twists:
     - Set one, or multiple, 'base' currencies.
     - Filter results for a list of supplied counter currencies.
     - A `quote_type` parameter for the perspective on the exchange rate, "direct" or "indirect".

3. **Impact**:

   - Not a breaking change.

   - Future providers to this endpoint will require parsing symbols and filtering as part of the `transform_data` stage, as well as ensure the `quote_type` is correctly applied.

4. **Testing Done**:

   - A variety of `base` and `counter_currencies`, checking both `quote_type` settings.

   - `obb.currency.snapshots(base="usd,xau,xag", counter_currencies="usd,eur,gbp,chf,aud,jpy,cny,cad", quote_type="indirect"`

5. **Any other information**:

![Screenshot 2024-03-04 at 10 05 00 AM](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/7943d2ef-05b9-4a25-9d17-32618e2c57cf)

With this final step, we have completed all the tasks outlined at the top of the page.

This guide was based on [this pull request](https://github.com/OpenBB-finance/OpenBBTerminal/pull/6162).


---

---
title: Add provider to existing extension
sidebar_position: 2
description: This guide outlines the process for adding an endpoint to an existing data provider and router endpoint.
keywords:
  - OpenBB Platform
  - Open source
  - Python interface
  - REST API
  - contribution
  - contributing
  - documentation
  - code
  - provider
  - data
  - endpoint
  - existing
  - OpenBB extensions
  - OpenBB provider
  - standard model
  - provider model
  - how to
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Add Provider To An Existing Command - How-To | OpenBB Platform Docs" />

This page will walk through adding a data provider to an existing endpoint, using a standard model. At a high level, the process will look something like:

1. Document the parameters and returned fields from the chosen data provider.
2. Find the existing standard model that is mapped to the router endpoint.
3. Identify any common parameters and fields to map.
4. Build the provider models and Fetcher class by inheriting from the standard models.
5. Map the new provider model to the router.
6. Rebuild the Python interface and static assets.
7. Add unit tests.
8. Add integration tests.
9. Submit a pull request.

## Getting started

Clone the GitHub repo and navigate into the project's folder.

If you have already done this, update your local branch:
    - `git fetch`
    - `git pull origin develop`

Install the OpenBB Platform in "editable" mode.
  - `cd openbb_platform`
  - `python dev_install.py -e`

Rebuild the Python interface and static assets.
  - `import openbb`
  - `openbb.build()`

Create a new local branch (pick a relevant name and use dashes for multiple words), always beginning with `feature/`.
  - `git checkout -b feature/av-historical-eps`

## Provider Endpoint

For this example, we will be adding a user-requested data set from AlphaVantage, historical EPS. There is an existing [GitHub issue](https://github.com/OpenBB-finance/OpenBBTerminal/issues/6104) that we will link to in the submitted pull request. By linking the issue, it will be closed automatically on merge.

Here's what we know about this AlphaVantage API endpoint:

:::info
This API returns the annual and quarterly earnings (EPS) for the company of interest.
Quarterly data also includes analyst estimates and surprise metrics.
:::

The documentation for this endpoint is, [https://www.alphavantage.co/documentation/#earnings](https://www.alphavantage.co/documentation/#earnings). This link will be added to the query parameters model docstring.

#### Base URL

The base URL structure will be different for each provider, AlphaVantage identifies a `function` for each request as the first parameter.

```python
BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"
```

#### Source Parameters

Ignoring `function` and `api_key`, there is only one parameter for this function.

```python
symbol: str = "IBM"
```

#### Source Response

They provide a sample JSON output, returning both annual and quarterly data in the same response.

```json
{
  "symbol": "IBM",
  "annualEarnings": [
    {
      "fiscalDateEnding": "2023-12-31",
      "reportedEPS": "9.61"
    },
    {
      "fiscalDateEnding": "2022-12-31",
      "reportedEPS": "9.12"
    }
  ],
  "quarterlyEarnings": [
    {
      "fiscalDateEnding": "2023-12-31",
      "reportedDate": "2024-01-24",
      "reportedEPS": "3.87",
      "estimatedEPS": "3.78",
      "surprise": "0.09",
      "surprisePercentage": "2.381"
    },
    {
      "fiscalDateEnding": "2023-09-30",
      "reportedDate": "2023-10-25",
      "reportedEPS": "2.2",
      "estimatedEPS": "2.13",
      "surprise": "0.07",
      "surprisePercentage": "3.2864"
    }
  ]
}
```

## OpenBB Endpoint

Here's what we know about the existing router endpoint.

The function we are adding AlphaVantage as a source to is:

```python
from openbb import obb

obb.equity.fundamental.historical_eps(symbol = "IBM", limit=5, provider="fmp")
```

| date       | symbol | eps_actual | eps_estimated | revenue_estimated | revenue_actual | reporting_time | updated_at | period_ending |
| :--------- | :----- | ---------: | ------------: | ----------------: | -------------: | :------------- | :--------- | :------------ |
| 2024-01-24 | IBM    |       3.87 |          3.78 |       17298500000 |    17381000000 | amc            | 2024-02-29 | 2023-12-31    |
| 2024-04-17 | IBM    |          - |          1.59 |       14572800000 |              - | bmo            | 2024-02-29 | 2024-03-30    |
| 2024-07-24 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-06-30    |
| 2024-10-23 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-09-30    |
| 2025-01-22 | IBM    |          - |             - |                 - |              - | amc            | 2024-02-29 | 2024-12-31    |

FMP is currently the only source for this endpoint. There are only two parameters, `symbol` and `limit`. The `limit` argument determines how many quarters to go back.

Tasks done:

- [x] Catalogue the parameters and returned fields from the chosen data provider.

## Look for Standard Model

The standard model is defined by, [HistoricalEps](https://docs.openbb.co/platform/data_models/HistoricalEps).

```python
from openbb_core.provider.standard_models.historical_eps import HistoricalEpsData, HistoricalEpsQueryParams
```

Each standard model consists of two classes, `QueryParams` and `Data`. The name of each model begins with a CamelCase representation of the endpoint, `HistoricalEps`, with some instances warranting abbreviations. Files are always named with lower snake_case.

`HistoricalEps` is what we will reference in the router when we get there.

### Standard QueryParams

The `HistoricalEpsQueryParams` model defines only one parameter, `symbol`. It includes a validation method for converting the symbol to upper case.

```python
class HistoricalEpsQueryParams(QueryParams):
    """Historical EPS Query."""

    symbol: str = Field(description=QUERY_DESCRIPTIONS.get("symbol", ""))

    @field_validator("symbol", mode="before", check_fields=False)
    @classmethod
    def upper_symbol(cls, v: str) -> str:
        """Convert symbol to uppercase."""
        return v.upper()
```

We will inherit from this class to create our QueryParams model, specific to AlphaVantage. The model will be named, `AlphaVantageHistoricalEpsQueryParams`. Don't worry about it being too long.

### Standard Data

The `HistoricalEpsData` model defines some fields, with two being mandatory: `date` and `symbol`. It includes a validation method for converting the date from an ISO string to a datetime object.

```python
class HistoricalEpsData(Data):
    """Historical EPS Data."""

    date: dateType = Field(default=None, description=DATA_DESCRIPTIONS.get("date", ""))
    symbol: str = Field(description=DATA_DESCRIPTIONS.get("symbol", ""))
    announce_time: Optional[str] = Field(
        default=None, description="Timing of the earnings announcement."
    )
    eps_actual: Optional[float] = Field(
        default=None, description="Actual EPS from the earnings date."
    )
    eps_estimated: Optional[float] = Field(
        default=None, description="Estimated EPS for the earnings date."
    )

    @field_validator("date", mode="before", check_fields=False)
    def date_validate(cls, v):  # pylint: disable=E0213
        """Return formatted datetime."""
        return parser.isoparse(str(v))
```

Now we know exactly what is going to be added, and how we should structure our query to fetch the data. This endpoint is not overly complex but harmonizing many input parameters, and the potentially endless data fields, across many providers is a challenge.

Tasks done:

- [x] Find the existing standard model that is mapped to the router endpoint.
- [x] Identify common parameters and fields to map.

## Build the Provider Model

We are going to build the provider-specific model.

### Create a new file

The first step is to create a new file in the provider extension folder:

```console
~/OpenBB/openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models
```

We will call this file: `historical_eps.py`

The first line of the file should be a docstring, followed by the import statements.

Every model will be different, but most items below will be typical of nearly every data provider model. Variations will come from design choices for [HTTP requests](/platform/developer_guide/misc/http_requests), or other requirements. We won't get into that here though.

```python
"""AlphaVantage Historical EPS Model."""

# pylint: disable=unused-argument

from datetime import date as dateType
from typing import Any, Dict, List, Literal, Optional
from warnings import warn

from openbb_core.provider.abstract.fetcher import Fetcher
from openbb_core.provider.standard_models.historical_eps import (
    HistoricalEpsData,
    HistoricalEpsQueryParams,
)
from openbb_core.provider.utils.descriptions import QUERY_DESCRIPTIONS
from openbb_core.provider.utils.errors import EmptyDataError
from openbb_core.provider.utils.helpers import (
    ClientResponse,
    ClientSession,
    amake_requests
)
from pydantic import Field, field_validator
```

### Define QueryParams

Define a class that inherits from the standard model's `QueryParams` and put a link to the source documentation, if it exists, in the docstring.

We'll define a field to return either, `annualEarnings` or `quarterlyEarnings`. Other endpoints call this parameter `period`, so we will do the same here. Adding a `limit` parameter will provide more flexibility, even though we can't control that from the source.

If a parameter is common, like `date` or `period` are, they will have a standardized description. The `description` will display in the function's signature and Fast API Swagger docs.

To allow multiple items in a query parameters field - i.e, a list of tickers - we can add the `__json_schema_extra__` dictionary to the top of the model. If there are any fields to map on output, define them with the `__alias_dict__` dictionary.

```python
class AlphaVantageHistoricalEpsQueryParams(HistoricalEpsQueryParams):
    """
    AlphaVantage Historical EPS Query Params.

    Source: https://www.alphavantage.co/documentation/#earnings
    """

    __json_schema_extra__ = {"symbol": ["multiple_items_allowed"]}

    period: Literal["annual", "quarter"] = Field(
        default="quarter", description=QUERY_DESCRIPTIONS.get("period", "")
    )
    limit: Optional[int] = Field(
        default=None, description=QUERY_DESCRIPTIONS.get("limit", "")
    )
```

### Define Data

In the sample output data from AlphaVantage, we know that there are two date fields; however, only 'fiscalDateEnding' is returned in both time intervals. This makes it the right candidate to map to the `date` field in the standard model.

Mapping is done via `__alias_dict__`, a dictionary defined at the top of the class before any fields. Leave it out if there's nothing to map.

:::tip
If a field represents a percent, we want to always return it as a normalized decimal value - i.e, 1% is 0.01 - so that downstream processes can use values directly in formulas without needing to figure out if 1 means 1% or 100%.

If the data source returns the numbers (or null values) as a string (maybe with a % character), we will clean it using a `field_validator`.

We communicate this to the frontend, via `json_schema_extra`, in the field definition so the values can be correctly displayed.

By ensuring this small detail, we contribute to the overall standardization of data.
:::

```python
class AlphaVantageHistoricalEpsData(HistoricalEpsData):
    """AlphaVantage Historical EPS Data."""

    __alias_dict__ = {
        "date": "fiscalDateEnding",
        "eps_actual": "reportedEPS",
        "eps_estimated": "estimatedEPS",
        "surprise_percent": "surprisePercentage",
        "reported_date": "reportedDate",
    }

    surprise: Optional[float] = Field(
        default=None,
        description="Surprise in EPS (Actual - Estimated).",
    )
    surprise_percent: Optional[float] = Field(
        default=None,
        description="EPS surprise as a normalized percent.",
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )
    reported_date: Optional[dateType] = Field(
        default=None,
        description="Date of the earnings report.",
    )

    @field_validator(
        "eps_estimated",
        "eps_actual",
        "surprise",
        mode="before",
        check_fields=False,
    )
    @classmethod
    def validate_null(cls, v):
        """Clean None returned as a string."""
        return None if str(v).strip() == "None" or str(v) == "0" else v

    @field_validator("surprise_percent", mode="before", check_fields=False)
    @classmethod
    def normalize_percent(cls, v):
        """Normalize percent values."""
        if isinstance(v, str) and v == "None" or str(v) == "0":
            return None
        return float(v) / 100
```

### Define the Fetcher

Provider models have a total of three classes, `QueryParams`, `Data`, and `Fetcher`.

The `Fetcher` is what gets executed by the router and divides the request into three distinct processes that can be serviced individually. We define it as a Transform-Extract-Transform (TET) process because we:

- Transform the query from the user input into the specific format required for each provider.
- Extract the data from the provider endpoint.
- Transform the data into a standard format (the model or a list of models).

Each process is a static method, and breaking it down makes it easier to debug any points of failure.

```python
class AVHistoricalEpsFetcher(
    Fetcher[
        AlphaVantageHistoricalEpsQueryParams,
        List[AlphaVantageHistoricalEpsData]
    ]
):
    """AlphaVantage Historical EPS Fetcher."""

    @staticmethod
    def transform_query(params: Dict[str, Any]) -> AlphaVantageHistoricalEpsQueryParams:
        """Transform the query params."""
        # If no transformations are required, simply return the validated model.
        return AlphaVantageHistoricalEpsQueryParams(**params)

    @staticmethod
    async def aextract_data(
        query: AlphaVantageHistoricalEpsQueryParams,
        credentials: Optional[Dict[str, str]],
        **kwargs: Any,
    ) -> List[Dict]:
        """Return the raw data from the AlphaVantage endpoint."""

        api_key = credentials.get("alpha_vantage_api_key") if credentials else "DEMO"

        BASE_URL = "https://www.alphavantage.co/query?function=EARNINGS&"

        # We are allowing multiple symbols to be passed in the query, so we need to handle that.
        symbols = query.symbol.split(",")

        urls = [
            f"{BASE_URL}symbol={symbol}&apikey={api_key}" for symbol in symbols
        ]

        results = []

        # We need to make a custom callback function for this async request.
        async def response_callback(response: ClientResponse, _: ClientSession):
            """Response callback function."""
            symbol = response.url.query.get("symbol", None)
            data = await response.json()
            target = "annualEarnings" if query.period == "annual" else "quarterlyEarnings"
            result = []
            # If data is returned, append it to the results list.
            if data:
                result = [
                    {
                        "symbol": symbol,
                        **d,
                    }
                    for d in data.get(target, [])  # type: ignore
                ]
                if query.limit is not None:
                    results.extend(result[:query.limit])
                else:
                    results.extend(result)

            # If no data is returned, raise a warning and move on to the next symbol.
            if not data:
                warn(f"Symbol Error: No data found for {symbol}")

        await amake_requests(urls, response_callback, **kwargs)  # type: ignore

        return results

    @staticmethod
    def transform_data(
        query: AlphaVantageHistoricalEpsQueryParams,
        data: List[Dict],
        **kwargs: Any,
    ) -> List[AlphaVantageHistoricalEpsData]:
        """Transform the raw data into the standard model."""
        if not data:
            raise EmptyDataError("No data found.")
        return [AlphaVantageHistoricalEpsData.model_validate(d) for d in data]
```

Combining all of the code blocks above, beginning with the import statements section, makes a complete file and we have finished step 4.

- [x] Build the provider models and Fetcher class by inheriting from the standard models.

## Map To Router

Mapping to the router is done in the `__init__.py` file, one folder back from the `models` folder where we created the `historical_eps.py` file.

We import the `Fetcher` that was created, and then map it in the `fetcher_dict` property of the Provider class.

```python
"""Alpha Vantage Provider module."""

from openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher
from openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher
from openbb_core.provider.abstract.provider import Provider

alpha_vantage_provider = Provider(
    name="alpha_vantage",
    website="https://www.alphavantage.co/documentation/",
    description="""Alpha Vantage provides realtime and historical
    financial market data through a set of powerful and developer-friendly data APIs
    and spreadsheets. From traditional asset classes (e.g., stocks, ETFs, mutual funds)
    to economic indicators, from foreign exchange rates to commodities,
    from fundamental data to technical indicators, Alpha Vantage
    is your one-stop-shop for enterprise-grade global market data delivered through
    cloud-based APIs, Excel, and Google Sheets. """,
    credentials=["api_key"],
    fetcher_dict={
        "EquityHistorical": AVEquityHistoricalFetcher,
        "HistoricalEps": AVHistoricalEpsFetcher,
    },
)
```

Step 5 is complete.

- [x] Map the new provider model to the router.

## Rebuild Static Assets

When modifying router components or model definitions, the Python interface needs to be rebuilt before use. Open a terminal, with the `obb` environment active, start a new Python session, and enter:

```python
import openbb

openbb.build()

exit()
```

:::note

If changes are only made to the static methods within the Fetcher, rebuilding is not required. Restart the Python interpreter to apply the edits.

:::

Step 6 is done.

- [x] Rebuild the Python interface and static assets.

We can now run the function and test our work.

```python
from openbb import obb

obb.equity.fundamental.historical_eps(
    symbol=["IBM","GOOG","AAPL","MSFT"],
    period="quarter",
    provider="alpha_vantage",
    limit=1
).to_df()
```

| date       | symbol | eps_actual | eps_estimated | surprise | surprise_percent | reported_date |
| :--------- | :----- | ---------: | ------------: | -------: | ---------------: | :------------ |
| 2023-12-31 | GOOG   |       1.64 |          1.59 |     0.05 |         0.031447 | 2024-01-30    |
| 2023-12-31 | AAPL   |       2.18 |           2.1 |     0.08 |         0.038095 | 2024-02-01    |
| 2023-12-31 | MSFT   |       2.93 |          2.78 |     0.15 |         0.053957 | 2024-01-30    |
| 2023-12-31 | IBM    |       3.87 |          3.78 |     0.09 |          0.02381 | 2024-01-24    |

Checking the `annual` setting:

```python
obb.equity.fundamental.historical_eps(
    symbol="AAPL,
    period="annual",
    provider="alpha_vantage",
    limit=4
).to_df()
```

| date       | symbol | eps_actual |
| :--------- | :----- | ---------: |
| 2021-09-30 | AAPL   |       5.62 |
| 2022-09-30 | AAPL   |       6.11 |
| 2023-09-30 | AAPL   |       6.12 |
| 2023-12-31 | AAPL   |       2.18 |

We can see that the most recent `annual` data point only represent the first quarter of Apple's fiscal year, and this is something to keep in mind while working with the data.

To check that the warning is being transmitted, enter a bad symbol in the list.

```python
obb.equity.fundamental.historical_eps(symbol="AAPL,BAD_SYMBOL", provider="alpha_vantage").warnings
```

```console
[Warning_(category='UserWarning', message='Symbol Error: No data found for BAD_SYMBOL')]
```

With confidence that the endpoint is working as expected, let's move on to unit and integration tests.

## Create Tests

Adding tests doesn't take a lot of effort. In most cases, copying and pasting from an existing one will do the job.

### Unit Tests for Provider

Unit tests are located in the provider extension folder.

```console
~/OpenBB/openbb_platform/providers/alpha_vantage/tests
```

There will be one test file dedicated to testing each fetcher in the provider extension. Our file is:

```console
test_alpha_vantage_fetchers.py
```

The unit tests leverage the Fetcher class' built-in testing methods. It checks that the data is being returned, that types are conformed to their definitions, and that the model validates. It relies on `pytest` and captures a HTTP cassette. Here's what our test file will look like:

```python
from datetime import date

import pytest
from openbb_alpha_vantage.models.equity_historical import AVEquityHistoricalFetcher
from openbb_alpha_vantage.models.historical_eps import AVHistoricalEpsFetcher
from openbb_core.app.service.user_service import UserService

test_credentials = UserService().default_user_settings.credentials.model_dump(
    mode="json"
)


@pytest.fixture(scope="module")
def vcr_config():
    return {
        "filter_headers": [("User-Agent", None)],
        "filter_query_parameters": [
            ("apikey", "MOCK_API_KEY"),
        ],
    }


@pytest.mark.record_http
def test_av_equity_historical_fetcher(credentials=test_credentials):
    params = {
        "symbol": "AAPL",
        "start_date": date(2023, 1, 1),
        "end_date": date(2023, 1, 10),
        "interval": "15m",
    }

    fetcher = AVEquityHistoricalFetcher()
    result = fetcher.test(params, credentials)
    assert result is None


@pytest.mark.record_http
def test_av_historical_eps_fetcher(credentials=test_credentials):
    params = {
        "symbol": "AAPL,MSFT",
        "period": "quarter",
        "limit": 4
    }

    fetcher = AVHistoricalEpsFetcher()
    result = fetcher.test(params, credentials)
    assert result is None
```

That's all there is to it, we can capture the cassette now. Open a terminal, navigate into the `tests` folder from above, with the `obb` environment active, and enter:

```console
pytest test_alpha_vantage_fetchers.py --record http --record-no-overwrite
```

A successful test will result in a file being created in the `record` subfolder. Check the file for any obvious errors.

Step 7 is done.

- [x] Add unit tests.

### Integration Tests for Extension

Integration tests are even easier to add here, we just need to add a set of parameters for the new provider to the existing test. These tests are located in the `extensions` folder, where the routers are, under `integration`.

```console
~/OpenBB/openbb_platform/extensions/equity/integration
```

There are two files here, one for the Python interface, and the other for the Fast API.

- `test_equity_python.py`
- `test_equity_api.py`

There will be at least one test for every router endpoint, which expects all providers and parameters to be supplied. The structure will be the same for all functions. Snippets below will include the import statements, setup, and our function - `historical_eps`.

#### Python Test

```python
"""Python interface integration tests for the equity extension."""

from datetime import time

import pytest
from extensions.tests.conftest import parametrize
from openbb_core.app.model.obbject import OBBject

# pylint: disable=too-many-lines,redefined-outer-name


# pylint: disable=import-outside-toplevel,inconsistent-return-statements
@pytest.fixture(scope="session")
def obb(pytestconfig):
    """Fixture to setup obb."""
    if pytestconfig.getoption("markexpr") != "not integration":
        import openbb

        return openbb.obb

@parametrize(
    "params",
    [
        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),
        (
            {
                "symbol": "AAPL",
                "period": "quarter",
                "limit": 5,
                "provider": "alpha_vantage"
            }
        ),
    ],
)
@pytest.mark.integration
def test_equity_fundamental_historical_eps(params, obb):
    params = {p: v for p, v in params.items() if v}

    result = obb.equity.fundamental.historical_eps(**params)
    assert result
    assert isinstance(result, OBBject)
    assert len(result.results) > 0
```

Run this test by navigating into the folder above and entering:

```console
pytest test_equity_python.py
```

:::note

If tests not related to the items being touched directly are failing, don't worry about them. That's out of scope.

:::

#### API Test

The API test is slightly different, but the `params` can be copied and pasted from the Python test. In addition to basic checks, it will fail when values returned are not JSON serializable.

```python
"""API integration tests for equity extension."""

import base64
from datetime import time

import pytest
import requests
from extensions.tests.conftest import parametrize
from openbb_core.env import Env
from openbb_core.provider.utils.helpers import get_querystring

# pylint: disable=too-many-lines,redefined-outer-name


@pytest.fixture(scope="session")
def headers():
    userpass = f"{Env().API_USERNAME}:{Env().API_PASSWORD}"
    userpass_bytes = userpass.encode("ascii")
    base64_bytes = base64.b64encode(userpass_bytes)

    return {"Authorization": f"Basic {base64_bytes.decode('ascii')}"}


@parametrize(
    "params",
    [
        ({"symbol": "AAPL", "limit": 5, "provider": "fmp"}),
        (
            {
                "symbol": "AAPL",
                "period": "quarter",
                "limit": 5,
                "provider": "alpha_vantage"
            }
        ),
    ],
)
@pytest.mark.integration
def test_equity_fundamental_historical_eps(params, headers):
    params = {p: v for p, v in params.items() if v}

    query_str = get_querystring(params, [])
    url = f"http://0.0.0.0:8000/api/v1/equity/fundamental/historical_eps?{query_str}"
    result = requests.get(url, headers=headers, timeout=10)
    assert isinstance(result, requests.Response)
    assert result.status_code == 200
```

To run this test, we will need to open a second terminal and start the server.

```console
uvicorn openbb_core.api.rest_api:app
```

Go back to the other terminal and run the test by entering:

```console
pytest test_equity_api.py
```

Step 8 is done.

- [x] Add integration tests.

All that's left now is to submit the work as a pull request for review.

## Submit A Pull Request

We're already on the correct branch, `feature/av-historical-eps`, but it may be out-of-sync with the `develop` branch. Let's update it just to be sure.

```console
git fetch
git pull origin develop
```

#### Linters

Before opening a pull request, run the linters over all files that were touched.

- black
- ruff
- mypy
- pylint

Fix all items, and valid fixes for `pylint` can be disabling on that line. It won't always know what is contextually correct.

#### Add Files To Commit

When preparing to commit changes to the local branch, only add the files directly touched. Here are all the files we touched in this process:

- `openbb_platform/providers/alpha_vantage/openbb_alpha_vantage/models/historical_eps.py`
- `openbb_platopenbb_platform/providers/alpha_vantage/openbb_alpha_vantage/__init__.py`
- `openbb_platform/providers/alpha_vantage/tests/test_alpha_vantage_fetchers.py`
- `openbb_platform/providers/alpha_vantage/tests/record/test_av_historical_eps_fetchers.yaml`
- `openbb_platform/extensions/equity/integration/test_equity_api.py`
- `openbb_platform/extensions/equity/integration/test_equity_python.py`

#### Install Pre-Commit Hooks

The pre-commit hooks will run the testing suite locally before the commit is made. Install them from the root of the GitHub project folder, `OpenBB`.

```console
pre-commit install
```

#### Commit Changes

```console
git commit -m "adds AlphaVantage to historical_eps"
```

#### Push Changes

Assuming the commit is successful, push the changes to the remote branch.

```console
git push --set-upstream origin feature/av-historical-eps
```

#### Open a Pull Request

A pull request, in general, should have details on why the PR was created, what the changes are, what the impact is to existing users and infrastructure, how it was tested, and any other relevant information for reviewers and maintainers to consider.

1. **Why**? (1-3 sentences or a bullet point list):

   - This PR is the result of a development documentation page created (not in this PR).

   - Closes #6104, a user feature request.

2. **What**? (1-3 sentences or a bullet point list):

   - Adds AlphaVantage as a provider to `obb.equity.fundamental.historical_eps()`

3. **Impact** (1-2 sentences or a bullet point list):

   - Is not a breaking change.

   - Does not introduce any changes other than adding the provider to this endpoint.

4. **Testing Done**:

   - Created unit test and integration tests.

   - Used a variety of symbols, single and lists, to check that the EmptyDataError and symbol warnings are catching correctly.

With this final step, we have completed all the tasks outlined at the top of the page.

This guide was based on [this pull request](https://github.com/OpenBB-finance/OpenBBTerminal/pull/6155).


---

---
title: Extend OBBject functionalities
sidebar_position: 4
description: This page provides information about how to write extensions for the OpenBB OBBject class.
keywords:
  - OBBject
  - Python
  - Development
  - OpenBB Platform
  - extensions
  - obbject extension
  - accessor
  - decorator
  - how-to
  - contributing
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New OBBject Extension - How-To | OpenBB Platform Docs" />

OpenBB provides some basic methods for interacting with common data structures that will be seen in the results attribute of the [`OBBject`](/platform/usage/syntax/output_data).
If you are working with custom data, or adding new endpoints, it is possible that you will want to have your own methods for interacting with the data, and the OpenBB Platform provides a way to extend the OBBject class.

The architecture for extensions was designed to be similar to extensions and accessors for Pandas, and relies on plugins through the Poetry dependency management package.

This page will go through the steps for developing a simple extension for the OBBject class.

### Folder structure

```shell
example
├── README.md
├── openbb_example
│   └── __init__.py
├── poetry.lock
└── pyproject.toml
```

### Writing the extension

In this example the extension code all lives inside `__init__.py`.

First we create an `Extension` class instance to tell `openbb-core` our extension name and any required credentials to be available at `obb.user.credentials`.

> Credentials are required only if authorization is required for data or services used by this extension.
> It could also be the connection to a database, or any other information that needs to be passed to the extension.

```python
from openbb_core.app.model.extension import Extension

ext = Extension(name="example", credentials=["some_api_key"])
```

Then we define the extension's functionality. The decorator, `@ext.obbject_accessor`, registers an accessor in each `OBBject` that is returned when a command is executed. This accessor is just a namespace that will contain the methods defined in the decorated class.

For this example, we just add a method to say hi:

```python
@ext.obbject_accessor
class Example:
    def __init__(self, obbject):
        self._obbject = obbject

    def hello(self):
        api_key = self._obbject._user_settings.credentials.some_api_key.get_secret_value()
        print(f"Hello, this is my credential: {api_key}!")
```

### Entry Point

The `pyproject.toml` file will specify the usual setup and dependency information. Additionally, we need to include the following block:

```toml
[tool.poetry.plugins."openbb_obbject_extension"]
example = "openbb_example:ext"
```

With this in the file, we can install the extension by running `poetry install` from the extension folder.

### Using the extension

Now that the extension is installed and built, we can use it! Because we are extending the `OBBject`, this will be available on any function:

```shell
>>> from openbb import obb
>>> obb.user.credentials.some_api_key = "test"
>>> obbject = obb.equity.price.historical("AAPL")
>>> obbject.example.hello()
Hello, this is my credential: test!
```

In this example, we have added obbject.example as the extension and can use the .hello() functionality right from our OBBject.


---

---
title: Create New Toolkit Extension
sidebar_position: 3
description: This guide outlines the process for adding a new toolkit extension and router path to the OpenBB Platform.
keywords:
  - OpenBB Platform
  - Open source
  - contribution
  - contributing
  - community
  - toolkit
  - code
  - provider
  - endpoint
  - router
  - openbb-provider
  - openbb-core
  - how to
  - new
  - template
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Build New Toolkit Extension - How-To | OpenBB Platform Docs" />

Before adding a new toolkit extension and router path to the OpenBB Platform using a supplied template, it is important to understand the difference between a toolkit and a provider extension. You can find more information on this [here](/platform/usage/extensions/overview).

## How To Create A Router Extension

Let's create an extension which defines a new router entry point at the base of the `obb` namespace.
It's going to be called, `openbb-dashboards`, and will serve as an empty router for various dashboard packages to populate **future** endpoints with.

By itself, it might not have any functions. Some other extension will name it as a dependency, using it as an entry point.

We'll use the [ZIP file](https://github.com/OpenBB-finance/OpenBBTerminal/files/14542427/dashboards.zip) template as a starting point, renaming everything as the first step.

### Create Folder

The folder does not have to be kept with the OpenBB code, and could be its own GitHub repo.
For demonstration purposes, we'll unpack the ZIP file template with the rest of the OpenBB extensions:

```console
~/OpenBB/openbb_platform/extensions/dashboards
```

### Add Dependencies

This extension will be agnostic as to the type of components that might populate this space in the future - Plotly Dash, Streamlit, etc.
The only addition to the dependencies will be `openbb-charting`.
This will provide a Plotly charting library and custom backend with PyWry for window creation.

```toml
[tool.poetry]
name = "openbb-dashboards"
version = "1.0.0"
description = "Dashboards Extension for OpenBB"
authors = ["OpenBB Team <hello@openbb.co>"]
readme = "README.md"
packages = [{ include = "openbb_dashboards" }]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
openbb = "^4.1.7"
openbb-charting = "^2.0.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."openbb_core_extension"]
dashboards = "openbb_dashboards.dashboards_router:router"
```

## Build and Install Package

Open a Terminal and navigate into the folder where the extension is, then enter:

```console
poetry lock

pip install -e .
```

## Add Router Commands

To demonstrate this extension, we'll make a simple function for creating and returning a line chart. This adds one endpoint to the new namespace, `obb.dashboards.line_chart()`.

:::tip
After creating a new function, remember to rebuild the Python interface and static assets.

```python
import openbb
openbb.build()
exit()
```

:::

```python
"""Dashboards Router."""

# pylint: disable = unused-argument

from typing import List, Optional, Union

from openbb_charting import charting_router
from openbb_charting.core.openbb_figure import OpenBBFigure
from openbb_core.app.model.charts.chart import Chart
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.router import Router
from openbb_core.app.utils import basemodel_to_df, df_to_basemodel
from openbb_core.provider.abstract.data import Data

router = Router(prefix="")


@router.command(
    methods=["POST"],
)
def line_chart(
    data: Union[Data, List[Data]],
    x: Optional[str] = None,
    y: Optional[Union[str, List[str]]] = None,
    layout_kwargs: Optional[dict] = None,
    scatter_kwargs: Optional[dict] = None,
) -> OBBject:
    """Create a line chart."""
    index = "date" if x is None else x
    df = basemodel_to_df(data, index=index)

    y = y.split(",") if isinstance(y, str) else y
    if y is None:
        y = df.columns.to_list()

    if scatter_kwargs is None:
        scatter_kwargs = {}

    fig = OpenBBFigure(create_backend=True)
    for col in y:
        fig = fig.add_scatter(
            x=df.index,
            y=df[col],
            name=col,
            hovertemplate=
            "<b>%{fullData.name}</b>: " +
            "%{y:.2f}" +
            "<extra></extra>",
            hoverlabel=dict(font_size=10),
            **scatter_kwargs,
        )

    if layout_kwargs is None:
        layout_kwargs = {}

    fig.update_layout(
        hovermode="x unified",
        **layout_kwargs,
    )

    results = OBBject(results=df_to_basemodel(df))

    results.chart = Chart(
        fig=fig,
        content=fig.show(external=True).to_plotly_json(),
        format=charting_router.CHART_FORMAT
    )

    return results
```

An example syntax for use is:

```python
data = obb.equity.price.historical("AAPL", provider="yfinance")
chart = obb.dashboards.line_chart(
    data.results, y=["high", "low"],
    scatter_kwargs = {"showlegend": False},
    layout_kwargs={"template":"plotly_white"}
)
chart.show()
```

This is demonstration is not meant to represent a finished product, only a path to explore while getting started.
We hope you enjoy the journey and look forward to seeing what you build!


---

---
title: Data and Data Providers
sidebar_position: 2
description: This page contains some frequently asked questions about OpenBB data and providers.
keywords:
  - provider
  - data
  - source
  - live
  - platform
  - api
  - FastAPI
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Data Providers FAQ - FAQs | OpenBB Platform Docs" />

<details>
<summary mdxType="summary">Does OpenBB have coverage for [insert type of data]?</summary>

Equity market coverage will vary by provider and subscription status with them. It is common for free tiers to be US-listings only.

You can find all data models [here](/platform/data_models), or the [Reference](/platform/reference) page of endpoints.

If the type of data you are looking for is not listed there, send us a [feature request](https://openbb.co/request-a-feature) telling us about your use case.

</details>

<details>
<summary mdxType="summary">The router appears to be missing functions.</summary>

The router populates itself from the installed extensions.

For example, if the Technical Analysis extension is not installed, the `obb.technical` router path will not be present.

The same applies to data extensions. If a provider module is not installed, it will not be displayed as a choice.

If you have just installed a new extension, the Python interface may need to be rebuilt. This can be triggered manually with:

```python
import openbb
openbb.build()
exit()
```

:::tip
Install all toolkits and data providers with:

```bash
pip install "openbb[all]"
```

or by cloning the GitHub repo, from the `/openbb_platform/` folder:

```bash
python dev_install.py -e
```

The nightly PyPI distribution is another way to install everything, and to be on the bleeding edge of development:

```bash
pip install openbb-nightly
```

:::

</details>

<details>
<summary mdxType="summary">Why is the returned data not matching the start/end date I requested?</summary>

The provider may not have data from the requested period, in which case the data will be what they return. For example, `provider='yfinance'` at one-minute intervals will not return beyond one week ago.

Another reason could be the data entitlements of your API key. Check the provider's website to know what data coverage to expect.

If there is technical problem with a provider or function, please check [GitHub](https://github.com/OpenBB-finance/OpenBBTerminal/issues/new/choose) and raise an issue if one does not already exist.

Or, send us an [email](mailto:support@openbb.co) with the details, your system configuration, the syntax used, and any error messages that are raised.

</details>

<details>
<summary mdxType="summary">How do I load a ticker symbol from India?</summary>

Ticker symbols listed on exchanges outside of the US will have a suffix attached, for example, Rico Auto Industries Limited:

```python
from openbb import obb
data = obb.equity.price.historical("ricoauto.ns", provider="fmp")
```

The precise naming convention will differ by source, it's best to reference each source's own documentation for conventions.

</details>

<details>
<summary mdxType="summary">How can I request a data provider or function?</summary>

Please [request a feature](https://openbb.co/request-a-feature), tell us about your use case.

</details>

<details>
<summary mdxType="summary">Can I contribute my own data provider extension?</summary>

Yes! Please take a look at our [Development](/platform/developer_guide/misc/contributing) pages for more information.

</details>

<details>
<summary mdxType="summary">Can my company become a data partner?</summary>

Yes! Please visit our website [here](https://openbb.co/use-cases/data-vendors) and fill out the form.

</details>


<details>
<summary mdxType="summary">Endpoints that are displayed in this documentation are not found when I try to use them.</summary>

The [Reference](/platform/reference) pages are created from the contents of our GitHub [repo](https://github.com/OpenBB-finance/OpenBB), and may not match your installation.

If a router/endpoint appears to be missing from your installation, it is quite likely that it is not installed. It may also be that the functions are served by provider extensions that require API keys. The function will not be added to the application unless a value has been supplied, or there is another provider which does not require authorization.

See the page [here](/platform/usage/extensions/overview) for a current list of data provider extensions.

</details>


---

---
title: Errors
sidebar_position: 3
description: This page contains some frequently asked questions about OpenBB Platform errors.
keywords:
  - provider
  - data
  - source
  - error
  - OpenBBError
  - unknown error
  - EmptyDataError
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Errors FAQ - FAQs | OpenBB Platform Docs" />

<details>
<summary mdxType="summary">[Arg] provider -> input: nasdaq -> Input should be 'fmp' or 'yfinance'</summary>

There could be a few reasons for this message.

1. The provider supplied is not installed, in which case install it and follow the next step.

2. The provider extension is installed, but the static assets have not been refreshed. Rebuild the static assets from the command line with:

```sh
python -c "import openbb;openbb.build()"
```

An environment variable to auto-build the static assets on import - if there are changes to the installed configuration - can be defined as:

```env
OPENBB_AUTO_BUILD="true"
```

The expected behaviour is for this to be "true" by default, however can be situations where the flag does not trigger a build.
Manually invoke the process from the command line if necessary.

3. Not every endpoint is supported by every provider. To see the coverage of commands and data providers within the current installation, use `reference` property in the app. The docstring for each function contains the same information as the code block below.

```python
from openbb import obb

path = "/index/available"

[d for d in obb.reference["paths"][path]["parameters"] if d != "standard"]
```

```sh
['cboe', 'fmp', 'tmx', 'yfinance']
```

Complete breakdowns of query and return fields by provider and endpoint are available under the [Reference](/platform/reference)

</details>

<details>
<summary mdxType="summary">Attribute Error: 'App' object has no attribute 'some attribute'</summary>

There could be a few reasons for this message that are similar to the issue above.

1. The extension is not installed.

- Install it and rebuild the static files (described in the item above.)

2. No installed provider extension services an endpoint within the router.

- Under these conditions, the router is excluded from the app factory.

3. The extension is installed, a provider does service the router, but the static assets have not been rebuilt.

- Rebuild the static files (described in the item above.)

</details>

<details>
<summary mdxType="summary">Unauthorized Error - HTTP Status Code 502</summary>

This error is raised when provider credentials are supplied but is invalid for the particular endpoint.

Verify your credentials, access level, and subscription status directly with the provider.

</details>

<details>
<summary mdxType="summary">Unprocessable Entity (OpenBBError) - HTTP Status Code 422</summary>

This error is raised for handled exceptions. An abbreviated traceback message will display, and the full message is enabled via debug mode.

A common reason for this error is because a required parameter was not supplied, or was an incorrect choice. It may also be raised during parsing and transformation, post-request.

</details>

<details>
<summary mdxType="summary">Empty Data Error - HTTP Status Code 204</summary>

Also a 204 status code from the API. It means that the data was returned empty but the operation was a success.

There might not be anything wrong, or it could be the result of parameter choices. In which case, widen the scope of the query to capture output.

Some sources will return bad requests with a 200 status code and no message.

If all parameter permutations are only capable of returning an empty response, please open a bug issue on [GitHub](https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&labels=type%3Abug&projects=&template=bug_report.md&title=%5BBug%5D) with the operating system and version, Python version, and the syntax responsible for the error.

</details>

<details>
<summary mdxType="summary">Unexpected Error - HTTP Status Code 500</summary>

An unhandled exception. Traceback messages are truncated unless the debug environment variable is set.

```python
import os

os.environ["OPENBB_DEBUG_MODE"] = "true"

from openbb import obb

# run the syntax that created the error and the full traceback will print to the console.
```

If the issue originates from OpenBB code, please open a bug issue on [GitHub](https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&labels=type%3Abug&projects=&template=bug_report.md&title=%5BBug%5D)

Be sure to include the contents of the traceback, the operating system and version, Python version, and the syntax responsible for the error.

</details>

<details>
<summary mdxType="summary">How do I start in debug mode?</summary>

Debug mode can be set as an environment variable, in `~/openbb_platform/.env`, as:

```env
OPENBB_DEBUG_MODE=true
```

It can be invoked for the current session only by adding this code before importing the OpenBB package.

```python
import os

os.environ["OPENBB_DEBUG_MODE"] = "true"

from openbb import obb
```

</details>


---

---
title: License
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Licensing FAQ | OpenBB Platform Docs" />

As we adopt the Affero General Public License (AGPL) for our OpenBB Platform, we understand you may have questions about how this change affects your use of the platform. Below are some frequently asked questions to help clarify the implications of our new licensing model.

## General Questions

<details>
<summary mdxType="summary">Q: What has changed with the OpenBB Platform license?</summary>

A: We have transitioned from the MIT license to the Affero General Public License (AGPL) with an option for a commercial license. This change aligns with our commitment to keeping OpenBB Platform open and free while also providing options for commercial use.

</details>

<details>
<summary mdxType="summary">Q: Why did OpenBB choose AGPL?</summary>

A: AGPL helps ensure that improvements to the OpenBB Platform remain freely available. This license is ideal for protecting the community's contributions while allowing the platform to evolve sustainably.

</details>

<details>
<summary mdxType="summary">Q: What does the change to AGPL mean for general users of OpenBB?</summary>

A: For most users, there will be no impact. You can continue to use OpenBB Platform for research, development, and in your applications under the same conditions as before, provided you comply with the AGPL if you distribute the software or run it on a network server.

</details>

## Specific Use Cases

<details>
<summary mdxType="summary">Q: I'm using OpenBB Platform for research at work. Do I need a commercial license now?</summary>

A: No, if you are using OpenBB Platform in its unmodified form for research or internal business purposes and do not redistribute it or use it to provide a network-based service, you do not need a commercial license.

</details>

<details>
<summary mdxType="summary">Q: I am selling educational content and use OpenBB Platform in my course notebooks. Do I need a commercial license? Do I need to make my course content public?</summary>

A: No, you do not need a commercial license simply for using OpenBB Platform in educational content, nor do you need to make your course content public. If you are using OpenBB Platform to fetch data or perform analysis in your teaching materials, this is considered normal use of the platform. Your educational content is a separate work and does not fall under the AGPL's requirements for derivative works.

</details>

<details>
<summary mdxType="summary">Q: I want to integrate a proprietary dataset for internal use through OpenBB Platform. What does this mean for me?</summary>

A: You can freely integrate proprietary datasets without violating the AGPL, provided that any such integration uses standard interfaces of OpenBB Platform and does not modify the core AGPL-licensed code.

</details>

<details>
<summary mdxType="summary">Q: I run a business that integrates proprietary datasets through OpenBB Platform for internal use. What does the license change mean for us?</summary>

A: If you are integrating proprietary datasets and creating extensions that do not modify the OpenBB Platform code, these extensions are considered separate works. You do not need to disclose these proprietary integrations under the AGPL, provided these do not form part of the OpenBB Platform distributed to others or used to provide a network-based service.

</details>

## Modifications and Contributions

<details>
<summary mdxType="summary">Q: If I modify the OpenBB Platform for personal or internal business use, do I need to disclose my modifications?</summary>

A: If you modify the OpenBB Platform and do not distribute your modified version or use it to provide a service over a network, you do not need to disclose your modifications. However, if you distribute the modified platform or run it as a service, you must share your modifications under the AGPL.

</details>

<details>
<summary mdxType="summary">Q: We want to contribute to the OpenBB project. How does the licensing affect our contributions?</summary>

A: This doesn’t change. Contributions to the OpenBB project are very welcome. Contributions to the [main GitHub repository](https://github.com/OpenBB-finance/OpenBBTerminal) are accepted under our existing [Contributor License Agreement (CLA)](https://cla-assistant.io/OpenBB-finance/OpenBBTerminal). This means any contributions that are accepted into the main repository will be re-licensed by us under the AGPL, ensuring they remain free and open.

</details>

## Commercial Licensing Options

<details>
<summary mdxType="summary">Q: What are the benefits of obtaining a commercial license?</summary>

A: A commercial license is suitable for companies that wish to use OpenBB Platform in a proprietary product or service, or who do not wish to disclose their modifications to the platform. It offers more flexibility for commercial use while protecting your proprietary developments.

</details>

<details>
<summary mdxType="summary">Q: How can I obtain a commercial license?</summary>

A: Please contact us directly at [licensing@openbb.co](mailto:licensing@openbb.co) to discuss commercial licensing options. We are here to help you find the best licensing solution for your specific needs.

</details>

## Conclusion

<details>
<summary mdxType="summary">Q: Where can I get more information or assistance regarding licensing?</summary>

A: For more detailed inquiries or specific scenarios not covered in this FAQ, please reach out to us at [licensing@openbb.co](mailto:licensing@openbb.co). We are here to help you navigate the licensing requirements to ensure you meet your needs.

</details>


---

---
title: Platform vs SDK
sidebar_position: 1
description: The OpenBB SDK has evolved to become the OpenBB Platform. This page describes some of the key differences between the legacy version and the new architecture.
keywords:
  - what's new
  - v3
  - legacy
  - sdk
  - platform
  - api
  - FastAPI
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="What's the Difference Between OpenBB Platform and SDK? - FAQs | OpenBB Platform Docs" />

If you're already an OpenBB user, you may be familiar with some of the legacy pain points. As [this](https://openbb.co/blog/celebrating-the-openbb-platform-v4-beta) blog post highlights, there were many challenges with maintaining the existing codebase.

We needed to refresh the architecture to make it modular, resilient, and scalable. The core components have been trimmed substantially to be lean and efficient - the number of dependencies has reduced from nearly four-hundred down to about twenty.

The result is a much smoother installation procedure, with the tradeoff being some breaking changes for those transitioning from V3 SDK to the V4 Platform. The major differences are described below.

### Platform CLI

The Platform CLI is not installed with the Platform. The Platform CLI will be re-imagined with the new extension framework, it won't get left behind for long!

### Extension Framework

The extension framework lets users install or uninstall individual data and toolkit extensions. No more bloated environments.

```bash
pip install openbb-yfinance

pip uninstall openbb-yfinance
```

### Import Statement

Initialize the OpenBB Platform with a shorter statement and reduced import time.

```python
from openbb import obb
```

### REST API Compliant

The OpenBB Platform is built for REST API deployments, out-of-the-box. Outputs are JSON serializable, and this is a major difference between the SDK and Platform.

Start the API on `localhost` with:

```bash
uvicorn openbb_core.api.rest_api:app
```

### Verbose Namespaces

After careful consideration, the decision was made to name functions with more verbosity. This adds clarity to the functions and lets the user better understand its purpose.

It also improves the performance of AI tooling built on top of the Platform.

```python
obb.equity.fundamental.employee_count("AAPL")
```

### Asset Class Names

Some asset classes have been renamed:

- stocks -> equity
- forex -> currency
- stocks.options -> derivatives.options
- futures -> derivatives.futures

### Source -> Provider

V3 SDK users should note that the `source` parameter is now, `provider`.

:::note
OpenBB Hub Preferences for default sources do not currently sync with V4 Platform, and some API keys not used in the Platform CLI are not able to be saved to the Hub.
:::

### API Key Management

API keys and user preferences are stored in a JSON file - `$HOME/.openbb_platform/user_settings.json` - instead of the `ENV` file in `$HOME/.openbb_sdk/.env`.

Credentials can be entered directly from the Python interface:

```python
from openbb import obb
obb.user.credentials.fmp_api_key="REPLACE_WITH_YOUR_KEY"
```

### OpenBB Hub Login

Login to your OpenBB Hub account with an email/password combo or a revokable Personal Access Token (recommended):

```python
from openbb import obb
obb.account.login()
```

### Function Outputs

The default output format can be selected by the user, and all outputs are Pydantic models.

If you are transitioning from V3 SDK and like working with Pandas DataFrames, set the preference to "dataframe" to get a V3-like response.

```python
from openbb import obb
obb.user.preferences.output_type="dataframe"
df = obb.equity.price.historical("AAPL", provider="yfinance")
```

When the `output_type` is set to, `OBBject`, DataFrames are created from the response object after it is returned.

```python
from openbb import obb
data = obb.equity.price.historical("AAPL", provider="yfinance")
df = data.to_df()
```

:::warning
DataFrames are not JSON serializable. Changing this preference will remove REST API compatibility.
:::

### Jupyter

Jupyter does not get installed with the OpenBB Platform. Install from `pip` in the environment containing the Platform.

```bash
pip install jupyter-lab
```

### Views

Most of the development has been on the core architecture and data providers.

Most views from the V3 SDK and Platform CLI have yet to be ported over to the V4 Platform, although some charts are already available with the `openbb-charting` toolkit extension - which includes PyWry for window creation.

Install the charting extension with:

```bash
pip install openbb-charting
```

The equivalent to `openbb.stocks.candle("AAPL")` is, `obb.equity.price.historical("AAPL", chart=True).show()`.

More views to come soon!

### Getting Started

See the [quickstart in python](/platform/usage/quickstart_python) [quickstart with workspace](/platform/usage/quickstart_python) pages for examples on getting started using the OpenBB Platform in Python or in OpenBB Workspace.


---

---
title: Introduction
sidebar_position: 0
description:
  Introduction to OpenBB Platform; a convenient and powerful tool that
  provides pre-built data connectors and libraries to design and build financial reports
  and applications. Learn more about contributing to the platform.
keywords:
  - OpenBB Platform
  - investment research infrastructure
  - data connectors
  - financial reports
  - OpenBB team
  - third-party data providers
  - CONTRIBUTING GUIDELINES
---

{/* markdownlint-disable MD012 MD031 MD033 MD037 */}

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";
import NewReferenceCard from "@site/src/components/General/NewReferenceCard";

<HeadTitle title="OpenBB Platform Docs" />

The OpenBB Platform has been created and is currently maintained by the OpenBB team together with the contributions from hundreds of community members.

With its ready-to-use data connectors and a wealth of extensions, it lets you concentrate on creating outstanding financial reports and applications quickly and easily.

## Documentation Structure

<ul className="grid grid-cols-1 gap-2 -ml-6">
  <NewReferenceCard
    title="Installation"
    description="Instructions for installation."
    url="platform/installation"
  />
  <NewReferenceCard
    title="Quickstart in Python"
    description="Short goal-oriented example to help users get going with OpenBB Platform in Python."
    url="platform/usage/quickstart_python"
  />
  <NewReferenceCard
    title="Integrate with Workspace"
    description="A short guide to help users integrate OpenBB Platform data with OpenBB Workspace."
    url="platform/usage/quickstart_workspace"
  />
  <NewReferenceCard
    title="Developer Guides"
    description="In-depth explanatory articles to help developing with the OpenBB Platform."
    url="platform/developer_guide/architecture_overview"
  />
  <NewReferenceCard
    title="Command Reference"
    description="Provides detailed information about the command structure, parameters, outputs, examples, and more for the OpenBB Platform endpoints."
    url="/platform/reference"
  />
  <NewReferenceCard
    title="Data Model Reference"
    description="Provides detailed information about the standard data models used in the OpenBB Platform."
    url="/platform/data_models"
  />
  <NewReferenceCard
    title="FAQs"
    description="Provides answers to frequently asked questions."
    url="/platform/faqs/errors"
  />
  <NewReferenceCard
    title="Licensing"
    description="Provides information about the licensing of the OpenBB Platform."
    url="/platform/faqs/license"
  />
</ul>


---

---
title: Installation
sidebar_position: 1
description:
  This page presents the general system requirements, supported environments,
  installation procedures, and setup for running the OpenBB Platform. It discusses
  the prerequisites including Python version, operating system requirements, Docker
  usage, and the process of building the platform from source.
keywords:
  - OpenBB Platform
  - Python
  - System requirements
  - Supported environments
  - Installation
  - Docker
  - Python virtual environment
  - Installation from source
  - Windows 10
  - Mac OS Big Sur
  - Linux
  - Package installation
  - VS Code
  - PyCharm
  - Jupyter
  - GitHub
  - Conda
  - venv
  - API
  - Repository
  - pip
  - Poetry
  - Toml
  - PyPI
  - Node.js
  - npm
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Installation | OpenBB Platform Docs" />

## General System Requirements

Most systems capable of running Python `3.9.21-3.12` will be compatible with the OpenBB Platform. A modern processor (five years or less), running an up-to-date operating system, with at least 4GB of RAM, is recommended. Maintaining the system with current patches ensures maximum compatibility. At a minimum, Windows and macOS should be:

- Windows 10
- Mac OS Big Sur

Linux users should run the command line update for the package manager, prior to installation.

## Installer Package

An installer package is available for Mac and Windows machines. Files are available [here](https://my.openbb.co/app/platform/downloads).

It will handle the installation of Python, environment setup, and OpenBB packages with the latest versions.

:::danger
Users with v1.0.0 installations need to follow the steps below to update the version of OpenBB.

1. In Finder/Explorer, open the folder where it was installed - probably in a folder, named "OpenBB", at the root of user home folder.
2. From the main installation folder, navigate into the subdirectory, "extensions/openbb_platform_installer".
3. Open, "pyproject.toml", in any text editor, and update two lines:

   - Line 18:
     - From: `python =">3.9,<3.13"`
     - To: `python = ">=3.9.21,<3.13"`
   - Line 21:
     - From: `openbb-core = "^1"`
     - To: `openbb-core = ">=1.4.4"`

4. Save the file, close it, and then run the "Update" shortcut.
   :::

## Supported Environments

The OpenBB Platform is installed within a Python virtual environment. It is compatible with versions of Python between 3.9.21 and 3.12, inclusively. The method for creating the environment will be a matter of user preference, from the command line - [Conda](https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html), [venv](https://docs.python.org/3/library/venv.html), etc. - or in a code editor and IDE - [VS Code](https://code.visualstudio.com/docs/languages/python), [PyCharm](https://www.jetbrains.com/pycharm/), [Jupyter](https://jupyter.org/).

If you're interested in using the [Docker](/platform/installation#docker) container, skip ahead to the specific section [below](/platform/installation#docker).

For those new to Python, [this article](https://www.infoworld.com/article/3306656/python-virtualenv-and-venv-dos-and-donts.html) shares some tips on getting started and why environments are important.

See [this guide](https://code.visualstudio.com/docs/python/environments) for creating a Python environment in VS Code.

With the environment created, and activated, begin the installation process.

## Installation

Before installation, update the package manager so that `pip` is current, then create the environment with the desired version of Python.

:::note
Installing packages directly to the system Python or `base` environment is not recommended. Create a new environment first (can be any name, using openbb here for example).

```bash
conda create -n openbb python=3.12
conda activate openbb
```

:::

### PyPI

<details>
Install from PyPI with:

```console
pip install openbb
```

This will install the core OpenBB Platform, along with officially supported extensions and providers.

To install all extensions and providers (both officially supported and community maintained ones):

```console
pip install openbb[all]
```

:::tip
In a macOS `zsh` Terminal shell, add quotation marks around the library name.

`"openbb[all]"`
:::

From your python interpreter, import the OpenBB Platform:

```console
from openbb import obb
```

:::warning
This import statement is required due to the stateful nature of the obb package. There is currently no support for imports such as:

```console
from openbb.obb.equity import *
```

:::

When the package is imported, any installed extensions will be discovered, imported and available for use.

:::note
Currently if you wish to have the bare-bones openbb package with no extensions or providers, you can install with:

```console
pip install openbb-core && pip install openbb --no-deps
```

To install single extensions:

```console
pip install openbb-charting
```

```console
pip install openbb-technical
```

Or install a single provider:

```console
pip install openbb-yfinance
```

Providers are fully functional by themselves, but the interface routes are only added when the router extensions are installed.

```console
pip install openbb-equity openbb-index openbb-derivatives
```

:::

To update the package:

```console
pip install --upgrade openbb
```

To update all extensions and providers:

```console
pip install --upgrade openbb[all]
```

If you want to uninstall the package and all its dependencies:

```console
pip uninstall openbb[all]
```

</details>

### Docker

<details>
We provide a `platformAPI.Dockerfile` on [GitHub](https://raw.githubusercontent.com/OpenBB-finance/OpenBB/refs/heads/develop/build/docker/platformAPI.Dockerfile).

Run the following command from the repo root to build the image:

```bash
docker build -f build/docker/platformAPI.Dockerfile -t openbb-platform:latest .
```

To run it:

```bash
docker run -it --rm -p 6900:6900 -v ~/.openbb_platform:/root/.openbb_platform openbb-platform:latest
```

This will mount the local `~/.openbb_platform` directory into the Docker container to use with the API keys and preferences from there, and it will expose the API on port `6900`.

</details>

### Source

To install from source, create a Python virtual environment and update `pip` and `setuptools`, within the newly created environment, **before** installing any packages.

<details>
To build the OpenBB Platform from the source code, first install `git`:

```console
pip install git
```

Next, clone the repository from GitHub:

```console
git clone git@github.com:OpenBB-finance/OpenBB.git
```

When it is done, checkout the branch where the code is living:

```console
git checkout develop
```

Then, `cd` into the directory:

```console
cd openbb_platform
```

Install required packages

```console
pip install poetry
```

Finally, run the developer installation script:

```console
python dev_install.py
```

:::note
To install all extensions and providers, run: `python dev_install.py -e`
:::

</details>

## Post-Installation

With a fresh installation, and upon installing or uninstalling extensions, the Python interface needs to be built. This is done automatically, but can be manually triggered if required. Start a Python session and import openbb:

```console
python
```

```python
from openbb import obb

exit()
```

To manually trigger the build:

```python
import openbb
openbb.build()
```

Restart the Python interpreter and then begin using the OpenBB Platform.

```python
from openbb import obb
```

Start the REST API with:

```console
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

See more information about using the REST API in the [usage section](/platform/usage/quickstart_workspace)

## Hub Synchronization

Once you have installed the OpenBB Platform with the desired providers and extensions, you can synchronize with the [OpenBB Hub](https://my.openbb.co/app/hub). The main benefit of this is that you can use your single login to access your saved credentials and preferences from any instance. To login, you can use the `login` method, either using your email and password:

```python
obb.account.login(email='my_email_here', password='my_password_here')
```

Or using your personal access token:

```python
obb.account.login(pat='my_pat_here')
```


---

# Commodity

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Price" description="spot" url="/platform/reference/commodity/price" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="petroleum status report" description="EIA Weekly Petroleum Status Report" url="/platform/reference/commodity/petroleum_status_report" />
<ReferenceCard title="short term energy outlook" description="Monthly short term (18 month) projections using EIA's STEO model" url="/platform/reference/commodity/short_term_energy_outlook" />
</ul>



---

---
title: "petroleum_status_report"
description: "EIA Weekly Petroleum Status Report"
keywords:
- commodity
- petroleum_status_report
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="commodity/petroleum_status_report - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

EIA Weekly Petroleum Status Report.


Examples
--------

```python
from openbb import obb
# Get the EIA's Weekly Petroleum Status Report.
obb.commodity.petroleum_status_report(provider='eia')
# Select the category of data, and filter for a specific table within the report.
obb.commodity.petroleum_status_report(category=weekly_estimates, table=imports, provider='eia')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='eia' label='eia'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['balance_sheet', 'inputs_and_production', 'refiner_blender_net_production', 'crude_petroleum_stocks', 'gasoline_fuel_stocks', 'total_gasoline_by_sub_padd', 'distillate_fuel_oil_stocks', 'imports', 'imports_by_country', 'weekly_estimates', 'spot_prices_crude_gas_heating', 'spot_prices_diesel_jet_fuel_propane', 'retail_prices']`

The group of data to be returned. The default is the balance sheet.

 • *Default:* `balance_sheet`

 • *Optional:* `True`

---

**`table`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.<br/>
    Note: Choices represent all available tables from the entire collection and are not all available for every category.<br/>
    Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.<br/>
    Choices are:<br/>
        all<br/>
        conventional_gas<br/>
        crude<br/>
        crude_production<br/>
        crude_production_avg<br/>
        diesel<br/>
        ethanol_plant_production<br/>
        ethanol_plant_production_avg<br/>
        exports<br/>
        exports_avg<br/>
        heating_oil<br/>
        imports<br/>
        imports_avg<br/>
        imports_by_country<br/>
        imports_by_country_avg<br/>
        inputs_and_utilization<br/>
        inputs_and_utilization_avg<br/>
        jet_fuel<br/>
        monthly<br/>
        net_imports_inc_spr_avg<br/>
        net_imports_incl_spr<br/>
        net_production<br/>
        net_production_avg<br/>
        net_production_by_product<br/>
        net_production_by_production_avg<br/>
        product_by_region<br/>
        product_by_region_avg<br/>
        product_supplied<br/>
        product_supplied_avg<br/>
        propane<br/>
        rbob<br/>
        refiner_blender_net_production<br/>
        refiner_blender_net_production_avg<br/>
        stocks<br/>
        supply<br/>
        supply_avg<br/>
        ulta_low_sulfur_distillate_reclassification<br/>
        ulta_low_sulfur_distillate_reclassification_avg<br/>
        weekly Multiple items allowed for provider(s): eia.

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `conventional_gas`
- `crude`
- `crude_production`
- `crude_production_avg`
- `diesel`
- `ethanol_plant_production`
- `ethanol_plant_production_avg`
- `exports`
- `exports_avg`
- `heating_oil`
- `imports`
- `imports_avg`
- `imports_by_country`
- `imports_by_country_avg`
- `inputs_and_utilization`
- `inputs_and_utilization_avg`
- `jet_fuel`
- `monthly`
- `net_imports_inc_spr_avg`
- `net_imports_incl_spr`
- `net_production`
- `net_production_avg`
- `net_production_by_product`
- `net_production_by_production_avg`
- `product_by_region`
- `product_by_region_avg`
- `product_supplied`
- `product_supplied_avg`
- `propane`
- `rbob`
- `refiner_blender_net_production`
- `refiner_blender_net_production_avg`
- `stocks`
- `supply`
- `supply_avg`
- `ulta_low_sulfur_distillate_reclassification`
- `ulta_low_sulfur_distillate_reclassification_avg`
- `weekly`
</details>

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Subsequent requests for the same source data are cached for the session using ALRU cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PetroleumStatusReport]`

Serializable results.

---

**`provider`**: `Optional[Literal['eia']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>

<TabItem value='eia' label='eia'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>
</Tabs>



---

# Price

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="spot" description="Commodity Spot Prices" url="/platform/reference/commodity/price/spot" />
</ul>



---

---
title: "spot"
description: "Commodity Spot Prices"
keywords:
- commodity
- price
- spot
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="commodity/price/spot - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Commodity Spot Prices.


Examples
--------

```python
from openbb import obb
obb.commodity.price.spot(provider='fred')
obb.commodity.price.spot(provider='fred', commodity=wti)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`commodity`**: `Literal['wti', 'brent', 'natural_gas', 'jet_fuel', 'propane', 'heating_oil', 'diesel_gulf_coast', 'diesel_ny_harbor', 'diesel_la', 'gasoline_ny_harbor', 'gasoline_gulf_coast', 'rbob', 'all']`

Commodity name associated with the EIA spot price commodity data, default is 'all'.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        None = No change<br/>
        a = Annual<br/>
        q = Quarterly<br/>
        m = Monthly<br/>
        w = Weekly<br/>
        d = Daily<br/>
        wef = Weekly, Ending Friday<br/>
        weth = Weekly, Ending Thursday<br/>
        wew = Weekly, Ending Wednesday<br/>
        wetu = Weekly, Ending Tuesday<br/>
        wem = Weekly, Ending Monday<br/>
        wesu = Weekly, Ending Sunday<br/>
        wesa = Weekly, Ending Saturday<br/>
        bwew = Biweekly, Ending Wednesday<br/>
        bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CommoditySpotPrices]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Commodity name.

**`price`**: `float`

Price of the commodity.

**`unit`**: `str`

Unit of the commodity price.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Commodity name.

**`price`**: `float`

Price of the commodity.

**`unit`**: `str`

Unit of the commodity price.

</TabItem>
</Tabs>



---

---
title: "short_term_energy_outlook"
description: "Monthly short term (18 month) projections using EIA's STEO model"
keywords:
- commodity
- short_term_energy_outlook
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="commodity/short_term_energy_outlook - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Monthly short term (18 month) projections using EIA's STEO model.

Source: www.eia.gov/steo/


Examples
--------

```python
from openbb import obb
# Get the EIA's Short Term Energy Outlook.
obb.commodity.short_term_energy_outlook(provider='eia')
# Select the specific table of data from the STEO. Table 03d is World Crude Oil Production.
obb.commodity.short_term_energy_outlook(table=03d, provider='eia')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='eia' label='eia'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple items allowed for provider(s): eia.

 • *Optional:* `True`

---

**`table`**: `Literal['01', '02', '03a', '03b', '03c', '03d', '03e', '04a', '04b', '04c', '04d', '05a', '05b', '06', '07a', '07b', '07c', '07d1', '07d2', '07e', '08', '09a', '09b', '09c', '10a', '10b']`

<details>
<summary mdxType="summary">Description</summary>

The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.<br/>
        01: US Energy Markets Summary<br/>
        02: Nominal Energy Prices<br/>
        03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories<br/>
        03b: Non-OPEC Petroleum and Other Liquid Fuels Production<br/>
        03c: World Petroleum and Other Liquid Fuels Production<br/>
        03d: World Crude Oil Production<br/>
        03e: World Petroleum and Other Liquid Fuels Consumption<br/>
        04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories<br/>
        04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances<br/>
        04c: US Regional Motor Gasoline Prices and Inventories<br/>
        04d: US Biofuel Supply, Consumption, and Inventories<br/>
        05a: US Natural Gas Supply, Consumption, and Inventories<br/>
        05b: US Regional Natural Gas Prices<br/>
        06: US Coal Supply, Consumption, and Inventories<br/>
        07a: US Electricity Industry Overview<br/>
        07b: US Regional Electricity Retail Sales<br/>
        07c: US Regional Electricity Prices<br/>
        07d1: US Regional Electricity Generation, Electric Power Sector<br/>
        07d2: US Regional Electricity Generation, Electric Power Sector, continued<br/>
        07e: US Electricity Generating Capacity<br/>
        08: US Renewable Energy Consumption<br/>
        09a: US Macroeconomic Indicators and CO2 Emissions<br/>
        09b: US Regional Macroeconomic Data<br/>
        09c: US Regional Weather Data<br/>
        10a: Drilling Productivity Metrics<br/>
        10b: Crude Oil and Natural Gas Production from Shale and Tight Formations

</details>

 • *Default:* `01`

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data. Default is 'month'.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ShortTermEnergyOutlook]`

Serializable results.

---

**`provider`**: `Optional[Literal['eia']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>

<TabItem value='eia' label='eia'>

**`date`**: `Union[date, str]`

The date of the data.

**`table`**: `str`

Table name for the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`order`**: `int`

Presented order of the data, relative to the table.

**`title`**: `str`

Title of the data.

**`value`**: `Union[int, float]`

Value of the data.

**`unit`**: `str`

Unit or scale of the data.

</TabItem>
</Tabs>



---

# Crypto

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Price" description="historical" url="/platform/reference/crypto/price" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="search" description="Search available cryptocurrency pairs within a provider" url="/platform/reference/crypto/search" />
</ul>



---

---
title: "historical"
description: "Learn how to use the `obb.equity.price.historical` function to load historical  price data for a specific stock ticker. Find out about the available parameters  and providers, as well as the structure of the returned data and the columns it  contains."
keywords:
- equity historical price
- load stock data
- specific ticker
- python function
- equity data parameters
- alpha vantage provider
- fmp provider
- intrinio provider
- polygon provider
- yfinance provider
- equity historical data returns
- equity data columns
- alpha vantage data columns
- cboe data columns
- fmp data columns
- intrinio data columns
- polygon data columns
- yfinance data columns
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="crypto/price/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical price data for cryptocurrency pair(s) within a provider.


Examples
--------

```python
from openbb import obb
obb.crypto.price.historical(symbol='BTCUSD', provider='fmp')
obb.crypto.price.historical(symbol='BTCUSD', start_date='2024-01-01', end_date='2024-01-31', provider='fmp')
obb.crypto.price.historical(symbol='BTCUSD,ETHUSD', start_date='2024-01-01', end_date='2024-01-31', provider='polygon')
# Get monthly historical prices from Yahoo Finance for Ethereum.
obb.crypto.price.historical(symbol='ETH-USD', interval=1m, start_date='2024-01-01', end_date='2024-12-31', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '7d', '30d'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`exchanges`**: `Union[Union[list[str], str], list[Union[list[str], str]]]`

To limit the query to a subset of exchanges e.g. ['POLONIEX', 'GDAX'] Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CryptoHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'polygon', 'tiingo', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `int`

Number of transactions for the symbol in the time period.

**`volume_notional`**: `float`

The last size done for the asset on the specific date in the quote currency. The volume of the asset on the specific date in the quote currency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>
</Tabs>



---

# Price

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="historical" description="Get historical price data for cryptocurrency pair(s) within a provider" url="/platform/reference/crypto/price/historical" />
</ul>



---

---
title: "search"
description: "The documentation page provides information on how to perform a cryptocurrency  search, including the search query and provider parameters, as well as the resulting  crypto search data such as symbol, name, currency, and exchange information."
keywords:
- cryptocurrency search
- available cryptocurrency pairs
- python obb crypto search
- search query parameter
- provider parameter
- crypto search results
- crypto search provider
- crypto search warnings
- crypto search chart
- crypto search metadata
- crypto data
- symbol
- crypto name
- crypto currency
- crypto exchange
- crypto exchange name
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="crypto/search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search available cryptocurrency pairs within a provider.


Examples
--------

```python
from openbb import obb
obb.crypto.search(provider='fmp')
obb.crypto.search(query='BTCUSD', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CryptoSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (Crypto)

**`name`**: `str`

Name of the crypto.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (Crypto)

**`name`**: `str`

Name of the crypto.

**`currency`**: `str`

The currency the crypto trades for.

**`exchange`**: `str`

The exchange code the crypto trades on.

**`exchange_name`**: `str`

The short name of the exchange the crypto trades on.

</TabItem>
</Tabs>



---

# Currency

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Price" description="historical" url="/platform/reference/currency/price" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="search" description="Currency Search" url="/platform/reference/currency/search" />
<ReferenceCard title="reference rates" description="Get current, official, currency reference rates" url="/platform/reference/currency/reference_rates" />
<ReferenceCard title="snapshots" description="Snapshots of currency exchange rates from an indirect or direct perspective of a base currency" url="/platform/reference/currency/snapshots" />
</ul>



---

---
title: "historical"
description: "Learn how to use the `obb.equity.price.historical` function to load historical  price data for a specific stock ticker. Find out about the available parameters  and providers, as well as the structure of the returned data and the columns it  contains."
keywords:
- equity historical price
- load stock data
- specific ticker
- python function
- equity data parameters
- alpha vantage provider
- fmp provider
- intrinio provider
- polygon provider
- yfinance provider
- equity historical data returns
- equity data columns
- alpha vantage data columns
- cboe data columns
- fmp data columns
- intrinio data columns
- polygon data columns
- yfinance data columns
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="currency/price/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Currency Historical Price. Currency historical data.

Currency historical prices refer to the past exchange rates of one currency against
another over a specific period.
This data provides insight into the fluctuations and trends in the foreign exchange market,
helping analysts, traders, and economists understand currency performance,
evaluate economic health, and make predictions about future movements.


Examples
--------

```python
from openbb import obb
obb.currency.price.historical(symbol='EURUSD', provider='fmp')
# Filter historical data with specific start and end date.
obb.currency.price.historical(symbol='EURUSD', start_date='2023-01-01', end_date='2023-12-31', provider='fmp')
# Get data with different granularity.
obb.currency.price.historical(symbol='EURUSD', provider='polygon', interval=15m)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '5d', '21d'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Can use CURR1-CURR2 or CURR1CURR2 format. Multiple items allowed for provider(s): fmp, polygon, tiingo, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CurrencyHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'polygon', 'tiingo', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`vwap`**: `Annotated[float, Gt(gt=0)]`

Volume Weighted Average Price over the period.

</TabItem>
</Tabs>



---

# Price

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="historical" description="Currency Historical Price" url="/platform/reference/currency/price/historical" />
</ul>



---

---
title: "reference_rates"
description: "Current, official, currency reference rates"
keywords:
- currency
- reference_rates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="currency/reference_rates - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get current, official, currency reference rates.

Foreign exchange reference rates are the exchange rates set by a major financial institution or regulatory body,
serving as a benchmark for the value of currencies around the world.
These rates are used as a standard to facilitate international trade and financial transactions,
ensuring consistency and reliability in currency conversion.
They are typically updated on a daily basis and reflect the market conditions at a specific time.
Central banks and financial institutions often use these rates to guide their own exchange rates,
impacting global trade, loans, and investments.


Examples
--------

```python
from openbb import obb
obb.currency.reference_rates(provider='ecb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='ecb' label='ecb'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CurrencyReferenceRates]`

Serializable results.

---

**`provider`**: `Optional[Literal['ecb']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`EUR`**: `float`

Euro.

**`USD`**: `float`

US Dollar.

**`JPY`**: `float`

Japanese Yen.

**`BGN`**: `float`

Bulgarian Lev.

**`CZK`**: `float`

Czech Koruna.

**`DKK`**: `float`

Danish Krone.

**`GBP`**: `float`

Pound Sterling.

**`HUF`**: `float`

Hungarian Forint.

**`PLN`**: `float`

Polish Zloty.

**`RON`**: `float`

Romanian Leu.

**`SEK`**: `float`

Swedish Krona.

**`CHF`**: `float`

Swiss Franc.

**`ISK`**: `float`

Icelandic Krona.

**`NOK`**: `float`

Norwegian Krone.

**`TRY`**: `float`

Turkish Lira.

**`AUD`**: `float`

Australian Dollar.

**`BRL`**: `float`

Brazilian Real.

**`CAD`**: `float`

Canadian Dollar.

**`CNY`**: `float`

Chinese Yuan.

**`HKD`**: `float`

Hong Kong Dollar.

**`IDR`**: `float`

Indonesian Rupiah.

**`ILS`**: `float`

Israeli Shekel.

**`INR`**: `float`

Indian Rupee.

**`KRW`**: `float`

South Korean Won.

**`MXN`**: `float`

Mexican Peso.

**`MYR`**: `float`

Malaysian Ringgit.

**`NZD`**: `float`

New Zealand Dollar.

**`PHP`**: `float`

Philippine Peso.

**`SGD`**: `float`

Singapore Dollar.

**`THB`**: `float`

Thai Baht.

**`ZAR`**: `float`

South African Rand.

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[date, str]`

The date of the data.

**`EUR`**: `float`

Euro.

**`USD`**: `float`

US Dollar.

**`JPY`**: `float`

Japanese Yen.

**`BGN`**: `float`

Bulgarian Lev.

**`CZK`**: `float`

Czech Koruna.

**`DKK`**: `float`

Danish Krone.

**`GBP`**: `float`

Pound Sterling.

**`HUF`**: `float`

Hungarian Forint.

**`PLN`**: `float`

Polish Zloty.

**`RON`**: `float`

Romanian Leu.

**`SEK`**: `float`

Swedish Krona.

**`CHF`**: `float`

Swiss Franc.

**`ISK`**: `float`

Icelandic Krona.

**`NOK`**: `float`

Norwegian Krone.

**`TRY`**: `float`

Turkish Lira.

**`AUD`**: `float`

Australian Dollar.

**`BRL`**: `float`

Brazilian Real.

**`CAD`**: `float`

Canadian Dollar.

**`CNY`**: `float`

Chinese Yuan.

**`HKD`**: `float`

Hong Kong Dollar.

**`IDR`**: `float`

Indonesian Rupiah.

**`ILS`**: `float`

Israeli Shekel.

**`INR`**: `float`

Indian Rupee.

**`KRW`**: `float`

South Korean Won.

**`MXN`**: `float`

Mexican Peso.

**`MYR`**: `float`

Malaysian Ringgit.

**`NZD`**: `float`

New Zealand Dollar.

**`PHP`**: `float`

Philippine Peso.

**`SGD`**: `float`

Singapore Dollar.

**`THB`**: `float`

Thai Baht.

**`ZAR`**: `float`

South African Rand.

</TabItem>
</Tabs>



---

---
title: "search"
description: "Learn how to search for available currency pairs using the `obb.currency.search`  function, and retrieve a list of results, including provider name, warnings, chart,  and metadata. Explore the various parameters such as provider, symbol, date, search  terms, active tickers, order data, sort field, and limit. Dive into the details  of the returned data, including name, symbol, currency, stock exchange, exchange  short name, code, base currency, quote currency, market, locale, currency symbol,  currency name, base currency symbol, base currency name, last updated timestamp  in UTC, and delisted timestamp in UTC."
keywords:
- currency search
- available currency pairs
- obb.currency.search
- provider
- symbol
- date
- search terms
- active tickers
- order data
- sort field
- limit
- results
- warnings
- chart
- metadata
- name
- symbol
- currency
- stock exchange
- exchange short name
- code
- base currency
- quote currency
- market
- locale
- currency symbol
- currency name
- base currency symbol
- base currency name
- last updated utc
- delisted utc
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="currency/search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Currency Search.

Search available currency pairs.
Currency pairs are the national currencies from two countries coupled for trading on
the foreign exchange (FX) marketplace.
Both currencies will have exchange rates on which the trade will have its position basis.
All trading within the forex market, whether selling, buying, or trading, will take place through currency pairs.
(ref: Investopedia)
Major currency pairs include pairs such as EUR/USD, USD/JPY, GBP/USD, etc.


Examples
--------

```python
from openbb import obb
obb.currency.search(provider='fmp')
# Search for 'EUR' currency pair using 'intrinio' as provider.
obb.currency.search(provider='intrinio', query='EUR')
# Search for terms  using 'polygon' as provider.
obb.currency.search(provider='polygon', query='EUR')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`query`**: `str`

Query to search for currency pairs.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CurrencyPairs]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'polygon']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol of the currency pair.

**`name`**: `str`

Name of the currency pair.

**`currency`**: `str`

Base currency of the currency pair.

**`stock_exchange`**: `str`

Stock exchange of the currency pair.

**`exchange_short_name`**: `str`

Short name of the stock exchange of the currency pair.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

**`base_currency`**: `str`

ISO 4217 currency code of the base currency.

**`quote_currency`**: `str`

ISO 4217 currency code of the quote currency.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the currency pair.

**`currency_symbol`**: `str`

The symbol of the quote currency.

**`base_currency_symbol`**: `str`

The symbol of the base currency.

**`base_currency_name`**: `str`

Name of the base currency.

**`market`**: `str`

Name of the trading market. Always 'fx'.

**`locale`**: `str`

Locale of the currency pair.

**`last_updated`**: `date`

The date the reference data was last updated.

**`delisted`**: `date`

The date the item was delisted.

</TabItem>
</Tabs>



---

---
title: "snapshots"
description: "Snapshots of currency exchange rates from an indirect or direct perspective of a base currency"
keywords:
- currency
- snapshots
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="currency/snapshots - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Snapshots of currency exchange rates from an indirect or direct perspective of a base currency.


Examples
--------

```python
from openbb import obb
obb.currency.snapshots(provider='fmp')
# Get exchange rates from USD and XAU to EUR, JPY, and GBP using 'fmp' as provider.
obb.currency.snapshots(provider='fmp', base='USD,XAU', counter_currencies='EUR,JPY,GBP', quote_type='indirect')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`base`**: `Union[str, list[str]]`

The base currency symbol. Multiple items allowed for provider(s): fmp, polygon.

 • *Default:* `usd`

 • *Optional:* `True`

---

**`quote_type`**: `Literal['direct', 'indirect']`

Whether the quote is direct or indirect. Selecting 'direct' will return the exchange rate as the amount of domestic currency required to buy one unit of the foreign currency. Selecting 'indirect' (default) will return the exchange rate as the amount of foreign currency required to buy one unit of the domestic currency.

 • *Default:* `indirect`

 • *Optional:* `True`

---

**`counter_currencies`**: `Union[str, list[str]]`

An optional list of counter currency symbols to filter for. None returns all.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CurrencySnapshots]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'polygon']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in the price from the previous close.

**`change_percent`**: `float`

The change in the price from the previous close, as a normalized percent.

**`ma50`**: `float`

The 50-day moving average.

**`ma200`**: `float`

The 200-day moving average.

**`year_high`**: `float`

The 52-week high.

**`year_low`**: `float`

The 52-week low.

**`last_rate_timestamp`**: `datetime`

The timestamp of the last rate.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`base_currency`**: `str`

The base, or domestic, currency.

**`counter_currency`**: `str`

The counter, or foreign, currency.

**`last_rate`**: `float`

The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`vwap`**: `float`

The volume-weighted average price.

**`change`**: `float`

The change in price from the previous day.

**`change_percent`**: `float`

The percentage change in price from the previous day.

**`prev_open`**: `float`

The previous day's opening price.

**`prev_high`**: `float`

The previous day's high price.

**`prev_low`**: `float`

The previous day's low price.

**`prev_volume`**: `float`

The previous day's volume.

**`prev_vwap`**: `float`

The previous day's VWAP.

**`bid`**: `float`

The current bid price.

**`ask`**: `float`

The current ask price.

**`minute_open`**: `float`

The open price from the most recent minute bar.

**`minute_high`**: `float`

The high price from the most recent minute bar.

**`minute_low`**: `float`

The low price from the most recent minute bar.

**`minute_close`**: `float`

The close price from the most recent minute bar.

**`minute_volume`**: `float`

The volume from the most recent minute bar.

**`minute_vwap`**: `float`

The VWAP from the most recent minute bar.

**`minute_transactions`**: `float`

The number of transactions in the most recent minute bar.

**`quote_timestamp`**: `datetime`

The timestamp of the last quote.

**`minute_timestamp`**: `datetime`

The timestamp for the start of the most recent minute bar.

**`last_updated`**: `datetime`

The last time the data was updated.

</TabItem>
</Tabs>



---

---
title: "curve"
description: "Learn about fetching historical futures price data using Python and an  API. Understand the available parameters, such as symbol, date, and provider. Explore  the returned results, including FuturesCurve, warnings, chart, and metadata. Analyze  the data, including expiration, close price, and trading symbol."
keywords:
- futures historical price
- futures historical data
- Python
- API
- symbol
- date
- provider
- cboe
- yfinance
- results
- FuturesCurve
- warnings
- Chart
- Metadata
- expiration
- close price
- trading symbol
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/futures/curve - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Futures Term Structure, current or historical.


Examples
--------

```python
from openbb import obb
obb.derivatives.futures.curve(symbol='VX', provider='cboe', date='2024-06-25')
obb.derivatives.futures.curve(symbol='NG', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Literal['VX_AM', 'VX_EOD']`

<details>
<summary mdxType="summary">Description</summary>

Symbol to get data for.Default is 'VX_EOD'. Entered dates return the data nearest to the entered date.<br/>
    'VX_AM' = Mid-Morning TWAP Levels<br/>
    'VX_EOD' = 4PM Eastern Time Levels

</details>

 • *Default:* `VX_EOD`

 • *Optional:* `True`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Literal['BTC', 'ETH', 'PAXG']`

Symbol to get data for. Default is 'btc' Supported symbols are: ['btc', 'eth', 'paxg']

 • *Default:* `BTC`

 • *Optional:* `True`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

---

**`hours_ago`**: `Union[Union[int, list[int], str], list[Union[int, list[int], str]]]`

Compare the current curve with the specified number of hours ago. Default is None. Multiple items allowed for provider(s): deribit.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): cboe, yfinance.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FuturesCurve]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'deribit', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

**`hours_ago`**: `int`

The number of hours ago represented by the price. Only available when hours_ago is set in the query.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[date, str]`

The date of the data.

**`expiration`**: `str`

Futures expiration month.

**`price`**: `float`

The price of the futures contract.

</TabItem>
</Tabs>



---

---
title: "historical"
description: "Futures Historical Price"
keywords:
- derivatives
- futures
- historical
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/futures/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Historical futures prices.


Examples
--------

```python
from openbb import obb
obb.derivatives.futures.historical(symbol='ES', provider='yfinance')
# Enter multiple symbols.
obb.derivatives.futures.historical(symbol='ES,NQ', provider='yfinance')
# Enter expiration dates as "YYYY-MM".
obb.derivatives.futures.historical(symbol='ES', provider='yfinance', expiration='2025-12')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '3m', '5m', '10m', '15m', '30m', '1h', '2h', '3h', '6h', '12h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): deribit, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expiration`**: `str`

Future expiry date with format YYYY-MM

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FuturesHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['deribit', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

**`volume_notional`**: `float`

Trading volume in quote currency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `float`

The trading volume.

</TabItem>
</Tabs>



---

# Futures

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="instruments" description="Get reference data for available futures instruments by provider" url="/platform/reference/derivatives/futures/instruments" />
<ReferenceCard title="historical" description="Historical futures prices" url="/platform/reference/derivatives/futures/historical" />
<ReferenceCard title="curve" description="Futures Term Structure, current or historical" url="/platform/reference/derivatives/futures/curve" />
<ReferenceCard title="info" description="Get current trading statistics by futures contract symbol" url="/platform/reference/derivatives/futures/info" />
</ul>



---

---
title: "info"
description: "Get current trading statistics by futures contract symbol"
keywords:
- derivatives
- futures
- info
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/futures/info - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get current trading statistics by futures contract symbol.


Examples
--------

```python
from openbb import obb
obb.derivatives.futures.info(provider='deribit', symbol=BTC)
obb.derivatives.futures.info(provider='deribit', symbol=SOLUSDC)
obb.derivatives.futures.info(provider='deribit', symbol=SOL_USDC-PERPETUAL)
obb.derivatives.futures.info(provider='deribit', symbol=BTC,ETH)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Perpetual contracts can be referenced by their currency pair - i.e, SOLUSDC - or by their official Deribit symbol - i.e, SOL_USDC-PERPETUAL For a list of currently available instruments, use `derivatives.futures.instruments()` Multiple items allowed for provider(s): deribit.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FuturesInfo]`

Serializable results.

---

**`provider`**: `Optional[Literal['deribit']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`state`**: `Literal['open', 'closed']`

The state of the order book. Possible values are open and closed.

**`open_interest`**: `float`

The total amount of outstanding contracts in the corresponding amount units.

**`index_price`**: `float`

Current index (reference) price

**`best_ask_amount`**: `float`

It represents the requested order size of all best asks

**`best_ask_price`**: `float`

The current best ask price, null if there aren't any asks

**`best_bid_price`**: `float`

The current best bid price, null if there aren't any bids

**`best_bid_amount`**: `float`

It represents the requested order size of all best bids

**`last_price`**: `float`

The price for the last trade

**`high`**: `float`

Highest price during 24h

**`low`**: `float`

Lowest price during 24h

**`change_percent`**: `float`

24-hour price change expressed as a percentage, null if there weren't any trades

**`volume`**: `float`

Volume during last 24h in base currency

**`volume_usd`**: `float`

Volume in USD

**`mark_price`**: `float`

The mark price for the instrument

**`settlement_price`**: `float`

The settlement price for the instrument. Only when state = open

**`delivery_price`**: `float`

The settlement price for the instrument. Only when state = closed.

**`estimated_delivery_price`**: `float`

Estimated delivery price for the market.

**`current_funding`**: `float`

Current funding (perpetual only)

**`funding_8h`**: `float`

Funding 8h (perpetual only)

**`interest_value`**: `float`

Value used to calculate realized_funding in positions (perpetual only)

**`max_price`**: `float`

The maximum price for the future. Any buy orders submitted higher than this price, will be clamped to this maximum.

**`min_price`**: `float`

The minimum price for the future. Any sell orders submitted lower than this price will be clamped to this minimum.

**`timestamp`**: `datetime`

The timestamp of the data.

</TabItem>
</Tabs>



---

---
title: "instruments"
description: "Get reference data for available futures instruments by provider"
keywords:
- derivatives
- futures
- instruments
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/futures/instruments - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get reference data for available futures instruments by provider.


Examples
--------

```python
from openbb import obb
obb.derivatives.futures.instruments(provider='deribit')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FuturesInstruments]`

Serializable results.

---

**`provider`**: `Optional[Literal['deribit']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='deribit' label='deribit'>

**`instrument_id`**: `int`

Deribit Instrument ID

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`base_currency`**: `str`

The underlying currency being traded.

**`counter_currency`**: `str`

Counter currency for the instrument.

**`quote_currency`**: `str`

The currency in which the instrument prices are quoted.

**`settlement_currency`**: `str`

Settlement currency for the instrument.

**`future_type`**: `str`

Type of the instrument. linear or reversed

**`settlement_period`**: `str`

The settlement period.

**`price_index`**: `str`

Name of price index that is used for this instrument

**`contract_size`**: `float`

Contract size for instrument.

**`is_active`**: `bool`

Indicates if the instrument can currently be traded.

**`creation_timestamp`**: `datetime`

The time when the instrument was first created (milliseconds since the UNIX epoch).

**`expiration_timestamp`**: `datetime`

The time when the instrument will expire (milliseconds since the UNIX epoch).

**`tick_size`**: `float`

Specifies minimal price change and, as follows, the number of decimal places for instrument prices.

**`min_trade_amount`**: `float`

Minimum amount for trading, in USD units.

**`max_leverage`**: `int`

Maximal leverage for instrument.

**`max_liquidation_commission`**: `float`

Maximal liquidation trade commission for instrument.

**`block_trade_commission`**: `float`

Block Trade commission for instrument.

**`block_trade_min_trade_amount`**: `float`

Minimum amount for block trading.

**`block_trade_tick_size`**: `float`

Specifies minimal price change for block trading.

**`maker_commission`**: `float`

Maker commission for instrument.

**`taker_commission`**: `float`

Taker commission for instrument.

</TabItem>
</Tabs>



---

# Derivatives

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Futures" description="instruments, historical, curve, info" url="/platform/reference/derivatives/futures" />
<ReferenceCard title="Options" description="chains, snapshots, unusual" url="/platform/reference/derivatives/options" />
</ul>



---

---
title: "chains"
description: "Learn how to get the complete options chain for a ticker using the OBB.equity.options.chains  function. Explore the available parameters like symbol and provider, and understand  the data returned, including contract symbol, expiration, strike price, and more."
keywords:
- options chain
- ticker
- complete options chain
- symbol
- provider
- data
- contract symbol
- expiration
- strike price
- option type
- eod date
- trading volume
- open price
- open interest
- high price
- low price
- implied volatility
- delta
- gamma
- theta
- vega
- bid size
- ask size
- theoretical value
- last trade price
- prev close
- change percent
- rho
- last trade timestamp
- dte
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/options/chains - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the complete options chain for a ticker.


Examples
--------

```python
from openbb import obb
obb.derivatives.options.chains(symbol='AAPL', provider='intrinio')
# Use the "date" parameter to get the end-of-day-data for a specific date, where supported.
obb.derivatives.options.chains(symbol='AAPL', date=2023-01-25, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='deribit' label='deribit'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`delay`**: `Literal['eod', 'realtime', 'delayed']`

Whether to return delayed, realtime, or eod data.

 • *Default:* `eod`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

The end-of-day date for options chains data.

 • *Optional:* `True`

---

**`option_type`**: `Literal['call', 'put']`

The option type, call or put, 'None' is both (default).

 • *Optional:* `True`

---

**`moneyness`**: `Literal['otm', 'itm', 'all']`

Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied.

 • *Default:* `all`

 • *Optional:* `True`

---

**`strike_gt`**: `int`

Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`strike_lt`**: `int`

Return options with a strike price less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`volume_gt`**: `int`

Return options with a volume greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`volume_lt`**: `int`

Return options with a volume less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`oi_gt`**: `int`

Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`oi_lt`**: `int`

Return options with an open interest less than the given value. Parameter is ignored when a date is supplied.

 • *Optional:* `True`

---

**`model`**: `Literal['black_scholes', 'bjerk']`

The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied.

 • *Default:* `black_scholes`

 • *Optional:* `True`

---

**`show_extended_price`**: `bool`

Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied.

 • *Default:* `True`

 • *Optional:* `True`

---

**`include_related_symbols`**: `bool`

Include related symbols that end in a 1 or 2 because of a corporate action, default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Caching is used to validate the supplied ticker symbol, or if a historical EOD chain is requested. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

<details>
<summary mdxType="summary">Choices</summary>

- `BTC`
- `ETH`
- `SOL`
- `XRP`
- `BNB`
- `PAXG`
</details>

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OptionsChains]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'deribit', 'intrinio', 'tmx', 'tradier', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='deribit' label='deribit'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`bid_iv`**: `list[float]`

The implied volatility of the bid price.

**`ask_iv`**: `list[float]`

The implied volatility of the ask price.

**`interest_rate`**: `list[float]`

The interest rate used by Deribit to calculate greeks.

**`underlying_spot_price`**: `list[float]`

The spot price of the underlying asset. The underlying asset is the specific future or index that the option is based on.

**`settlement_price`**: `list[float]`

The settlement price of the contract.

**`min_price`**: `list[float]`

The minimum price allowed.

**`max_price`**: `list[float]`

The maximum price allowed.

**`volume_notional`**: `list[float]`

The notional trading volume of the contract, as USD or USDC.

**`timestamp`**: `list[datetime]`

The datetime of the data, as America/New_York time.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`transactions`**: `list[int]`

Number of transactions for the contract.

**`total_value`**: `list[float]`

Total value of the transactions.

**`settlement_price`**: `list[float]`

Settlement price on that date.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[int]`

Size of the contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`phi`**: `list[float]`

Phi of the option. The sensitivity of the option relative to dividend yield.

**`bid_iv`**: `list[float]`

Implied volatility of the bid price.

**`ask_iv`**: `list[float]`

Implied volatility of the ask price.

**`orats_final_iv`**: `list[float]`

ORATS final implied volatility of the option, updated once per hour.

**`year_high`**: `list[float]`

52-week high price of the option.

**`year_low`**: `list[float]`

52-week low price of the option.

**`greeks_time`**: `list[datetime]`

Timestamp of the last greeks update. Greeks/IV data is updated once per hour.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`underlying_symbol`**: `list[str]`

Underlying symbol for the option.

**`underlying_price`**: `list[float]`

Price of the underlying stock.

**`contract_symbol`**: `list[str]`

Contract symbol for the option.

**`eod_date`**: `list[date]`

Date for which the options chains are returned.

**`expiration`**: `list[date]`

Expiration date of the contract.

**`dte`**: `list[int]`

Days to expiration of the contract.

**`strike`**: `list[float]`

Strike price of the contract.

**`option_type`**: `list[str]`

Call or Put.

**`contract_size`**: `list[Union[int, float]]`

Number of underlying units per contract.

**`open_interest`**: `list[Union[int, float]]`

Open interest on the contract.

**`volume`**: `list[Union[int, float]]`

The trading volume.

**`theoretical_price`**: `list[float]`

Theoretical value of the option.

**`last_trade_price`**: `list[float]`

Last trade price of the option.

**`last_trade_size`**: `list[Union[int, float]]`

Last trade size of the option.

**`last_trade_time`**: `list[datetime]`

The timestamp of the last trade.

**`tick`**: `list[str]`

Whether the last tick was up or down in price.

**`bid`**: `list[float]`

Current bid price for the option.

**`bid_size`**: `list[Union[int, float]]`

Bid size for the option.

**`bid_time`**: `list[datetime]`

The timestamp of the bid price.

**`bid_exchange`**: `list[str]`

The exchange of the bid price.

**`ask`**: `list[float]`

Current ask price for the option.

**`ask_size`**: `list[Union[int, float]]`

Ask size for the option.

**`ask_time`**: `list[datetime]`

The timestamp of the ask price.

**`ask_exchange`**: `list[str]`

The exchange of the ask price.

**`mark`**: `list[float]`

The mid-price between the latest bid and ask.

**`open`**: `list[float]`

The open price.

**`open_bid`**: `list[float]`

The opening bid price for the option that day.

**`open_ask`**: `list[float]`

The opening ask price for the option that day.

**`high`**: `list[float]`

The high price.

**`bid_high`**: `list[float]`

The highest bid price for the option that day.

**`ask_high`**: `list[float]`

The highest ask price for the option that day.

**`low`**: `list[float]`

The low price.

**`bid_low`**: `list[float]`

The lowest bid price for the option that day.

**`ask_low`**: `list[float]`

The lowest ask price for the option that day.

**`close`**: `list[float]`

The close price.

**`close_size`**: `list[Union[int, float]]`

The closing trade size for the option that day.

**`close_time`**: `list[datetime]`

The time of the closing price for the option that day.

**`close_bid`**: `list[float]`

The closing bid price for the option that day.

**`close_bid_size`**: `list[Union[int, float]]`

The closing bid size for the option that day.

**`close_bid_time`**: `list[datetime]`

The time of the bid closing price for the option that day.

**`close_ask`**: `list[float]`

The closing ask price for the option that day.

**`close_ask_size`**: `list[Union[int, float]]`

The closing ask size for the option that day.

**`close_ask_time`**: `list[datetime]`

The time of the ask closing price for the option that day.

**`prev_close`**: `list[float]`

The previous close price.

**`change`**: `list[float]`

The change in the price of the option.

**`change_percent`**: `list[float]`

Change, in normalized percentage points, of the option.

**`implied_volatility`**: `list[float]`

Implied volatility of the option.

**`delta`**: `list[float]`

Delta of the option.

**`gamma`**: `list[float]`

Gamma of the option.

**`theta`**: `list[float]`

Theta of the option.

**`vega`**: `list[float]`

Vega of the option.

**`rho`**: `list[float]`

Rho of the option.

**`in_the_money`**: `list[bool]`

Whether the option is in the money.

**`currency`**: `list[str]`

Currency of the option.

</TabItem>
</Tabs>



---

# Options

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="chains" description="Get the complete options chain for a ticker" url="/platform/reference/derivatives/options/chains" />
<ReferenceCard title="snapshots" description="Get a snapshot of the options market universe" url="/platform/reference/derivatives/options/snapshots" />
<ReferenceCard title="unusual" description="Get the complete options chain for a ticker" url="/platform/reference/derivatives/options/unusual" />
</ul>



---

---
title: "snapshots"
description: "Get a snapshot of the options market universe"
keywords:
- derivatives
- options
- snapshots
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/options/snapshots - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get a snapshot of the options market universe.


Examples
--------

```python
from openbb import obb
obb.derivatives.options.snapshots(provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime, str], str]`

The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400'

 • *Optional:* `True`

---

**`only_traded`**: `bool`

Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OptionsSnapshots]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `list[str]`

Ticker symbol of the underlying asset.

**`contract_symbol`**: `list[str]`

Symbol of the options contract.

**`expiration`**: `list[date]`

Expiration date of the options contract.

**`dte`**: `list[int]`

Number of days to expiration of the options contract.

**`strike`**: `list[float]`

Strike price of the options contract.

**`option_type`**: `list[str]`

The type of option.

**`volume`**: `list[int]`

The trading volume.

**`open_interest`**: `list[int]`

Open interest at the time.

**`last_price`**: `list[float]`

Last trade price at the time.

**`last_size`**: `list[int]`

Lot size of the last trade.

**`last_timestamp`**: `list[datetime]`

Timestamp of the last price.

**`open`**: `list[float]`

The open price.

**`high`**: `list[float]`

The high price.

**`low`**: `list[float]`

The low price.

**`close`**: `list[float]`

The close price.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `list[str]`

Ticker symbol of the underlying asset.

**`contract_symbol`**: `list[str]`

Symbol of the options contract.

**`expiration`**: `list[date]`

Expiration date of the options contract.

**`dte`**: `list[int]`

Number of days to expiration of the options contract.

**`strike`**: `list[float]`

Strike price of the options contract.

**`option_type`**: `list[str]`

The type of option.

**`volume`**: `list[int]`

The trading volume.

**`open_interest`**: `list[int]`

Open interest at the time.

**`last_price`**: `list[float]`

Last trade price at the time.

**`last_size`**: `list[int]`

Lot size of the last trade.

**`last_timestamp`**: `list[datetime]`

Timestamp of the last price.

**`open`**: `list[float]`

The open price.

**`high`**: `list[float]`

The high price.

**`low`**: `list[float]`

The low price.

**`close`**: `list[float]`

The close price.

**`bid`**: `list[float]`

The last bid price at the time.

**`bid_size`**: `list[int]`

The size of the last bid price.

**`bid_timestamp`**: `list[datetime]`

The timestamp of the last bid price.

**`ask`**: `list[float]`

The last ask price at the time.

**`ask_size`**: `list[int]`

The size of the last ask price.

**`ask_timestamp`**: `list[datetime]`

The timestamp of the last ask price.

**`total_bid_volume`**: `list[int]`

Total volume of bids.

**`bid_high`**: `list[float]`

The highest bid price.

**`bid_low`**: `list[float]`

The lowest bid price.

**`total_ask_volume`**: `list[int]`

Total volume of asks.

**`ask_high`**: `list[float]`

The highest ask price.

**`ask_low`**: `list[float]`

The lowest ask price.

</TabItem>
</Tabs>



---

---
title: "unusual"
description: "Learn how to get the complete options chain for a ticker with the equity  options unusual API. Explore the available parameters such as symbol and provider.  Retrieve valuable data like the underlying symbol, contract symbol, trade type,  sentiment, total value, total size, average price, ask/bid prices at execution,  underlying price at execution, and timestamp."
keywords:
- complete options chain
- ticker options
- equity options unusual
- symbol
- provider
- intrinio
- source
- data
- underlying symbol
- contract symbol
- trade type
- sentiment
- total value
- total size
- average price
- ask at execution
- bid at execution
- underlying price at execution
- timestamp
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="derivatives/options/unusual - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the complete options chain for a ticker.


Examples
--------

```python
from openbb import obb
obb.derivatives.options.unusual(symbol='TSLA', provider='intrinio')
# Use the 'symbol' parameter to get the most recent activity for a specific symbol.
obb.derivatives.options.unusual(symbol='TSLA', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (the underlying symbol)

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for. (the underlying symbol)

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date.

 • *Optional:* `True`

---

**`trade_type`**: `Literal['block', 'sweep', 'large']`

The type of unusual activity to query for.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['bullish', 'bearish', 'neutral']`

The sentiment type to query for.

 • *Optional:* `True`

---

**`min_value`**: `Union[float, int]`

The inclusive minimum total value for the unusual activity.

 • *Optional:* `True`

---

**`max_value`**: `Union[float, int]`

The inclusive maximum total value for the unusual activity.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`source`**: `Literal['delayed', 'realtime']`

The source of the data. Either realtime or delayed.

 • *Default:* `delayed`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OptionsUnusual]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`underlying_symbol`**: `str`

Symbol representing the entity requested in the data. (the underlying symbol)

**`contract_symbol`**: `str`

Contract symbol for the option.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`underlying_symbol`**: `str`

Symbol representing the entity requested in the data. (the underlying symbol)

**`contract_symbol`**: `str`

Contract symbol for the option.

**`trade_timestamp`**: `datetime`

The datetime of order placement.

**`trade_type`**: `Literal['block', 'sweep', 'large']`

The type of unusual trade.

**`sentiment`**: `Literal['bullish', 'bearish', 'neutral']`

Bullish, Bearish, or Neutral Sentiment is estimated based on whether the trade was executed at the bid, ask, or mark price.

**`bid_at_execution`**: `float`

Bid price at execution.

**`ask_at_execution`**: `float`

Ask price at execution.

**`average_price`**: `float`

The average premium paid per option contract.

**`underlying_price_at_execution`**: `float`

Price of the underlying security at execution of trade.

**`total_size`**: `int`

The total number of contracts involved in a single transaction.

**`total_value`**: `Union[int, float]`

The aggregated value of all option contract premiums included in the trade.

</TabItem>
</Tabs>



---

---
title: "autocorrelation"
description: "Learn how to perform the Durbin-Watson test for autocorrelation in Python.  Understand the parameters and return value of the function, and how to use exogenous  variables in the analysis. This documentation provides a detailed explanation."
keywords:
- Durbin-Watson test
- autocorrelation
- Python
- data analysis
- exogenous variables
- parameter
- return
- documentation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/autocorrelation - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Durbin-Watson test for autocorrelation.

 The Durbin-Watson test is a widely used method for detecting the presence of autocorrelation in the residuals
 from a statistical or econometric model. Autocorrelation occurs when past values in the data series influence
 future values, which can be a critical issue in time-series analysis, affecting the reliability of
 model predictions. The test provides a statistic that ranges from 0 to 4, where a value around 2 suggests
 no autocorrelation, values towards 0 indicate positive autocorrelation, and values towards 4 suggest
 negative autocorrelation. Understanding the degree of autocorrelation helps in refining models to better capture
 the underlying dynamics of the data, ensuring more accurate and trustworthy results.


Examples
--------

```python
from openbb import obb
# Perform Durbin-Watson test for autocorrelation.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.autocorrelation(data=stock_data, y_column="close", x_columns=["open", "high", "low"])
obb.econometrics.autocorrelation(y_column='close', x_columns='['open', 'high', 'low']', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "causality"
description: "Learn how to perform a Granger causality test to determine if X causes  y. Understand the parameters and the results returned by the test."
keywords:
- Granger causality test
- causality
- perform
- determine
- exogenous variables
- lags
- data
- target column
- results
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/causality - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Granger causality test to determine if X 'causes' y.

 The Granger causality test is a statistical hypothesis test to determine if one time series is useful in
 forecasting another. While 'causality' in this context does not imply a cause-and-effect relationship in
 the philosophical sense, it does test whether changes in one variable are systematically followed by changes
 in another variable, suggesting a predictive relationship. By specifying a lag, you set the number of periods to
 look back in the time series to assess this relationship. This test is particularly useful in economic and
 financial data analysis, where understanding the lead-lag relationship between indicators can inform investment
 decisions and policy making.


Examples
--------

```python
from openbb import obb
# Perform Granger causality test to determine if X 'causes' y.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.causality(data=stock_data, y_column="close", x_column="open")
# Example with mock data.
obb.econometrics.causality(y_column='close', x_column='open', lag=1, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_column`**: `str`

Columns to use as exogenous variables.

 • *Optional:* `False`

---

**`lag`**: `int`

Number of lags to use in the test.

 • *Default:* `3`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "cointegration"
description: "Learn how to use the two-step Engle-Granger test to show co-integration  between two time series in Python. Explore the parameters, input dataset, data columns,  and the OBBject returned with the test results."
keywords:
- co-integration
- Engle-Granger test
- time series
- data
- columns
- cointegration
- maxlag
- Python
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/cointegration - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Show co-integration between two timeseries using the two step Engle-Granger test.

 The two-step Engle-Granger test is a method designed to detect co-integration between two time series.
 Co-integration is a statistical property indicating that two or more time series move together over the long term,
 even if they are individually non-stationary. This concept is crucial in economics and finance, where identifying
 pairs or groups of assets that share a common stochastic trend can inform long-term investment strategies
 and risk management practices. The Engle-Granger test first checks for a stable, long-term relationship by
 regressing one time series on the other and then tests the residuals for stationarity.
 If the residuals are found to be stationary, it suggests that despite any short-term deviations,
 the series are bound by an equilibrium relationship over time.


Examples
--------

```python
from openbb import obb
# Perform co-integration test between two timeseries.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.cointegration(data=stock_data, columns=["open", "close"])
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`columns`**: `list[str]`

Data columns to check cointegration

 • *Optional:* `False`

---

**`maxlag`**: `PositiveInt`

Number of lags to use in the test.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "correlation_matrix"
description: "Learn how to get the correlation matrix of an input dataset using Python.  Find information on the parameters and return value of the function."
keywords:
- correlation matrix
- input dataset
- Python
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/correlation_matrix - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the correlation matrix of an input dataset.

 The correlation matrix provides a view of how different variables in your dataset relate to one another.
 By quantifying the degree to which variables move in relation to each other, this matrix can help identify patterns,
 trends, and potential areas for deeper analysis. The correlation score ranges from -1 to 1, with -1 indicating a
 perfect negative correlation, 0 indicating no correlation, and 1 indicating a perfect positive correlation.


Examples
--------

```python
from openbb import obb
# Get the correlation matrix of a dataset.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.correlation_matrix(data=stock_data)
obb.econometrics.correlation_matrix(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`method`**: `Literal['pearson', 'kendall', 'spearman']`

Method to use for correlation calculation. Default is 'pearson'.

 • *Default:* `pearson`

 • *Optional:* `True`

---

**`pearson`**: `standard correlation coefficient`

kendall : Kendall Tau correlation coefficient

 • *Optional:* `False`

---

**`spearman`**: `Spearman rank correlation`

 

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

# Econometrics

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="panel fixed" description="One- and two-way fixed effects estimator for panel data" url="/platform/reference/econometrics/panel_fixed" />
<ReferenceCard title="panel between" description="Perform a Between estimator regression on panel data" url="/platform/reference/econometrics/panel_between" />
<ReferenceCard title="ols regression summary" description="Perform Ordinary Least Squares (OLS) regression" url="/platform/reference/econometrics/ols_regression_summary" />
<ReferenceCard title="residual autocorrelation" description="Perform Breusch-Godfrey Lagrange Multiplier tests for residual autocorrelation" url="/platform/reference/econometrics/residual_autocorrelation" />
<ReferenceCard title="correlation matrix" description="Get the correlation matrix of an input dataset" url="/platform/reference/econometrics/correlation_matrix" />
<ReferenceCard title="panel pooled" description="Perform a Pooled coefficient estimator regression on panel data" url="/platform/reference/econometrics/panel_pooled" />
<ReferenceCard title="causality" description="Perform Granger causality test to determine if X 'causes' y" url="/platform/reference/econometrics/causality" />
<ReferenceCard title="cointegration" description="Show co-integration between two timeseries using the two step Engle-Granger test" url="/platform/reference/econometrics/cointegration" />
<ReferenceCard title="panel first difference" description="Perform a first-difference estimate for panel data" url="/platform/reference/econometrics/panel_first_difference" />
<ReferenceCard title="panel random effects" description="Perform One-way Random Effects model for panel data" url="/platform/reference/econometrics/panel_random_effects" />
<ReferenceCard title="unit root" description="Perform Augmented Dickey-Fuller (ADF) unit root test" url="/platform/reference/econometrics/unit_root" />
<ReferenceCard title="ols regression" description="Perform Ordinary Least Squares (OLS) regression" url="/platform/reference/econometrics/ols_regression" />
<ReferenceCard title="autocorrelation" description="Perform Durbin-Watson test for autocorrelation" url="/platform/reference/econometrics/autocorrelation" />
<ReferenceCard title="panel fmac" description="Fama-MacBeth estimator for panel data" url="/platform/reference/econometrics/panel_fmac" />
<ReferenceCard title="variance inflation factor" description="Calculate VIF (variance inflation factor), which tests for collinearity" url="/platform/reference/econometrics/variance_inflation_factor" />
</ul>



---

---
title: "ols_regression"
description: "Learn how to perform OLS regression using statsmodels in Python. This  documentation explains the parameters required and the object returned."
keywords:
- OLS regression
- statsmodels
- perform OLS regression
- data
- target column
- exogenous variables
- model
- results objects
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/ols_regression - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Ordinary Least Squares (OLS) regression.

 OLS regression is a fundamental statistical method to explore and model the relationship between a
 dependent variable and one or more independent variables. By fitting the best possible linear equation to the data,
 it helps uncover how changes in the independent variables are associated with changes in the dependent variable.
 This returns the model and results objects from statsmodels library.


Examples
--------

```python
from openbb import obb
# Perform Ordinary Least Squares (OLS) regression.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.ols_regression(data=stock_data, y_column="close", x_columns=["open", "high", "low"])
obb.econometrics.ols_regression(y_column='close', x_columns='['open', 'high', 'low']', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "ols_regression_summary"
description: "Learn how to perform OLS regression using statsmodels in Python. Explore  the parameters and returns of the function, including the data, target column, exogenous  variables, and summary object."
keywords:
- OLS regression
- statsmodels
- summary object
- parameters
- data
- y_column
- x_columns
- exogenous variables
- returns
- OBBject
- model
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/ols_regression_summary - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Ordinary Least Squares (OLS) regression.

 This returns the summary object from statsmodels.


Examples
--------

```python
from openbb import obb
# Perform Ordinary Least Squares (OLS) regression and return the summary.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.ols_regression_summary(data=stock_data, y_column="close", x_columns=["open", "high", "low"])
obb.econometrics.ols_regression_summary(y_column='close', x_columns='['open', 'high', 'low']', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_between"
description: "Perform a Between estimator regression on panel data. This page provides  details on the parameters required and the returned OBBject with the fit model."
keywords:
- Between estimator
- regression
- panel data
- perform
- parameters
- data
- y_column
- x_columns
- exogenous variables
- returns
- fit model
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_between - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform a Between estimator regression on panel data.

 The Between estimator for regression analysis on panel data is focusing on the differences between entities
 (such as individuals, companies, or countries) over time. By aggregating the data for each entity and analyzing the
 average outcomes, this method provides insights into the overall impact of explanatory variables (x_columns) on
 the dependent variable (y_column) across all entities.


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_between(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_first_difference"
description: "Learn how to perform a first-difference estimate for panel data using  this Python function. Understand the parameters and the object returned by the function."
keywords:
- panel data
- first-difference estimate
- perform
- parameters
- data
- dataset
- target column
- exogenous variables
- fit model
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_first_difference - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform a first-difference estimate for panel data.

 The First-Difference estimator for panel data analysis is focusing on the changes between consecutive observations
 for each entity (such as individuals, companies, or countries). By differencing the data, this method effectively
 removes entity-specific effects that are constant over time, allowing for the examination of the impact of changes
 in explanatory variables (x_columns) on the change in the dependent variable (y_column).


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_first_difference(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_fixed"
description: "Learn about the one- and two-way fixed effects estimator for panel data  analysis. Explore the parameters and returns of this function for panel data regression  and modeling."
keywords:
- panel data
- fixed effects estimator
- panel data analysis
- two-way fixed effects
- panel data regression
- panel data modeling
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_fixed - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

One- and two-way fixed effects estimator for panel data.

 The Fixed Effects estimator to panel data is enabling a focused analysis on the unique characteristics of entities
 (such as individuals, companies, or countries) and/or time periods. By controlling for entity-specific and/or
 time-specific influences, this method isolates the effect of explanatory variables (x_columns) on the dependent
 variable (y_column), under the assumption that these entity or time effects capture unobserved heterogeneity.


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_fixed(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_fmac"
description: "Learn how to use the Fama-MacBeth estimator for panel data analysis in  Python. Understand the parameters required and how to specify the input dataset  and target column. Explore how this function can help you analyze panel data by  incorporating exogenous variables."
keywords:
- Fama-MacBeth estimator
- panel data analysis
- Python function
- parameters
- exogenous variables
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_fmac - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Fama-MacBeth estimator for panel data.

 The Fama-MacBeth estimator, a two-step procedure renowned for its application in finance to estimate the risk
 premiums and evaluate the capital asset pricing model. By first estimating cross-sectional regressions for each
 time period and then averaging the regression coefficients over time, this method provides insights into the
 relationship between the dependent variable (y_column) and explanatory variables (x_columns) across different
 entities (such as individuals, companies, or countries).


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_fmac(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_pooled"
description: "Learn how to perform a pooled coefficient estimator regression on panel  data in Python. Understand the parameters and return value of the function."
keywords:
- pooled coefficient estimator regression
- panel data
- Python
- data analysis
- exogenous variables
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_pooled - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform a Pooled coefficient estimator regression on panel data.

 The Pooled coefficient estimator for regression analysis on panel data is treating the data as a large
 cross-section without distinguishing between variations across time or entities
 (such as individuals, companies, or countries). By assuming that the explanatory variables (x_columns) have a
 uniform effect on the dependent variable (y_column) across all entities and time periods, this method simplifies
 the analysis and provides a generalized view of the relationships within the data.


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_pooled(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "panel_random_effects"
description: "Learn how to perform One-way Random Effects model for panel data using  a Python function. This function takes an input dataset, target column, and exogenous  variables as parameters and returns the fit model."
keywords:
- One-way Random Effects model
- panel data
- perform
- Python function
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/panel_random_effects - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform One-way Random Effects model for panel data.

 One-way Random Effects model to panel data is offering a nuanced approach to analyzing data that spans across both
 time and entities (such as individuals, companies, countries, etc.). By acknowledging and modeling the random
 variation that exists within these entities, this method provides insights into the general patterns that
 emerge across the dataset.


Examples
--------

```python
from openbb import obb
obb.econometrics.panel_random_effects(y_column='portfolio_value', x_columns='['risk_free_rate']', data='[{'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 0, 'portfolio_value': 100000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_1', 'time': 1, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 0, 'portfolio_value': 150000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_2', 'time': 1, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 0, 'portfolio_value': 133333.33, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_3', 'time': 1, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 0, 'portfolio_value': 125000.0, 'risk_free_rate': 0.03}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_4', 'time': 1, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 0, 'portfolio_value': 120000.0, 'risk_free_rate': 0.02}, {'is_multiindex': True, 'multiindex_names': "['asset_manager', 'time']", 'asset_manager': 'asset_manager_5', 'time': 1, 'portfolio_value': 116666.67, 'risk_free_rate': 0.02}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[dict]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "residual_autocorrelation"
description: "Perform Breusch-Godfrey Lagrange Multiplier tests for residual autocorrelation  in a Python function. Learn about the parameters used and the returned object."
keywords:
- Breusch-Godfrey Lagrange Multiplier tests
- residual autocorrelation
- Python function
- parameter description
- function returns
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/residual_autocorrelation - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Breusch-Godfrey Lagrange Multiplier tests for residual autocorrelation.

 The Breusch-Godfrey Lagrange Multiplier test is a sophisticated tool for uncovering autocorrelation within the
 residuals of a regression model. Autocorrelation in residuals can indicate that a model fails to capture some
 aspect of the underlying data structure, possibly leading to biased or inefficient estimates.
 By specifying the number of lags, you can control the depth of the test to check for autocorrelation,
 allowing for a tailored analysis that matches the specific characteristics of your data.
 This test is particularly valuable in econometrics and time-series analysis, where understanding the independence
 of errors is crucial for model validity.


Examples
--------

```python
from openbb import obb
# Perform Breusch-Godfrey Lagrange Multiplier tests for residual autocorrelation.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.residual_autocorrelation(data=stock_data, y_column="close", x_columns=["open", "high", "low"])
obb.econometrics.residual_autocorrelation(y_column='close', x_columns='['open', 'high', 'low']', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`y_column`**: `str`

Target column.

 • *Optional:* `False`

---

**`x_columns`**: `list[str]`

list of columns to use as exogenous variables.

 • *Optional:* `False`

---

**`lags`**: `int`

Number of lags to use in the test.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "unit_root"
description: "Learn how to use the Augmented Dickey-Fuller unit root test to check  for stationarity in time series data. This function takes in an input dataset and  performs the test on specified data columns. The regression type can be customized,  and the function returns the results."
keywords:
- Augmented Dickey-Fuller
- unit root test
- data
- data columns
- unit root
- regression
- constant
- trend
- trend-squared
- results
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/unit_root - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform Augmented Dickey-Fuller (ADF) unit root test.

 The ADF test is a popular method for testing the presence of a unit root in a time series.
 A unit root indicates that the series may be non-stationary, meaning its statistical properties such as mean,
 variance, and autocorrelation can change over time. The presence of a unit root suggests that the time series might
 be influenced by a random walk process, making it unpredictable and challenging for modeling and forecasting.
 The 'regression' parameter allows you to specify the model used in the test: 'c' for a constant term,
 'ct' for a constant and trend term, and 'ctt' for a constant, linear, and quadratic trend.
 This flexibility helps tailor the test to the specific characteristics of your data, providing a more accurate
 assessment of its stationarity.


Examples
--------

```python
from openbb import obb
# Perform Augmented Dickey-Fuller (ADF) unit root test.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.econometrics.unit_root(data=stock_data, column="close")
obb.econometrics.unit_root(data=stock_data, column="close", regression="ct")
obb.econometrics.unit_root(column='close', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Input dataset.

 • *Optional:* `False`

---

**`column`**: `str`

Data columns to check unit root

 • *Optional:* `False`

---

**`regression`**: `Literal['c', 'ct', 'ctt']`

Regression type to use in the test.  Either 'c' for constant only, 'ct' for constant and trend, or 'ctt' for

 • *Default:* `c`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "variance_inflation_factor"
description: "Calculate VIF (variance inflation factor), which tests for collinearity"
keywords:
- econometrics
- variance_inflation_factor
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="econometrics/variance_inflation_factor - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate VIF (variance inflation factor), which tests for collinearity.

 It quantifies the severity of multicollinearity in an ordinary least squares regression analysis. The square
 root of the variance inflation factor indicates how much larger the standard error increases compared to if
 that variable had 0 correlation to other predictor variables in the model.

 It is defined as:

 $ VIF_i = 1 / (1 - R_i^2) $
 where $ R_i $ is the coefficient of determination of the regression equation with the column i being the result
 from the i:th series being the exogenous variable.

 A VIF over 5 indicates a high collinearity and correlation. Values over 10 indicates causes problems, while a
 value of 1 indicates no correlation. Thus VIF values between 1 and 5 are most commonly considered acceptable.
 In order to improve the results one can often remove a column with high VIF.

 For further information see: https://en.wikipedia.org/wiki/Variance_inflation_factor


Examples
--------

```python
from openbb import obb
# Calculate the variance inflation factor.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='yfinance').to_df()
obb.econometrics.variance_inflation_factor(data=stock_data, column="close")
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`dataset`**: `list[Data]`

Dataset to calculate VIF on

 • *Optional:* `False`

---

**`columns`**: `list`

The columns to calculate to test for collinearity

 • *Optional:* `True`

---

**`data`**: `list[openbb_core.provider.abstract.data.Data]`



 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "available_indicators"
description: "Get the available economic indicators for a provider"
keywords:
- economy
- available_indicators
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/available_indicators - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the available economic indicators for a provider.


Examples
--------

```python
from openbb import obb
obb.economy.available_indicators(provider='econdb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='econdb' label='econdb'>

**`use_cache`**: `bool`

Whether to use cache or not, by default is True The cache of indicator symbols will persist for one week.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`query`**: `Union[str, list[str]]`

The query string to search through the available indicators. Use semicolons to separate multiple terms. Multiple items allowed for provider(s): imf.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[AvailableIndicators]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb', 'imf']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

**`currency`**: `str`

The currency, or unit, the data is based in.

**`scale`**: `str`

The scale of the data.

**`multiplier`**: `int`

The multiplier of the data to arrive at whole units.

**`transformation`**: `str`

Transformation type.

**`source`**: `str`

The original source of the data.

**`first_date`**: `date`

The first date of the data.

**`last_date`**: `date`

The last date of the data.

**`last_insert_timestamp`**: `datetime`

The time of the last update. Data is typically reported with a lag.

</TabItem>

<TabItem value='imf' label='imf'>

**`symbol_root`**: `str`

The root symbol representing the indicator.

**`symbol`**: `str`

Symbol representing the entity requested in the data. The root symbol with additional codes.

**`country`**: `str`

The name of the country, region, or entity represented by the symbol.

**`iso`**: `str`

The ISO code of the country, region, or entity represented by the symbol.

**`description`**: `str`

The description of the indicator.

**`frequency`**: `str`

The frequency of the indicator data.

**`dataset`**: `str`

The IMF dataset associated with the symbol.

**`table`**: `str`

The name of the table associated with the symbol.

**`level`**: `int`

The indentation level of the data, relative to the table and symbol_root

**`order`**: `Union[float, int]`

Order of the data, relative to the table.

**`children`**: `str`

The symbol of the child data, if any.

**`unit`**: `str`

The unit of the data.

</TabItem>
</Tabs>



---

---
title: "balance_of_payments"
description: "Balance of Payments Reports"
keywords:
- economy
- balance_of_payments
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/balance_of_payments - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Balance of Payments Reports.


Examples
--------

```python
from openbb import obb
obb.economy.balance_of_payments(provider='fred')
obb.economy.balance_of_payments(provider='fred', country=brazil)
obb.economy.balance_of_payments(provider='ecb')
obb.economy.balance_of_payments(report_type=summary, provider='ecb')
# The `country` parameter will override the `report_type`.
obb.economy.balance_of_payments(country=united_states, provider='ecb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='ecb' label='ecb'>

**`report_type`**: `Literal['main', 'summary', 'services', 'investment_income', 'direct_investment', 'portfolio_investment', 'other_investment']`

The report type, the level of detail in the data.

 • *Default:* `main`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly']`

The frequency of the data.  Monthly is valid only for ['main', 'summary'].

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`country`**: `Literal['brazil', 'canada', 'china', 'eu_ex_euro_area', 'eu_institutions', 'india', 'japan', 'russia', 'switzerland', 'united_kingdom', 'united_states', 'total']`

The country/region of the data.  This parameter will override the 'report_type' parameter.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`country`**: `Literal['argentina', 'australia', 'austria', 'belgium', 'brazil', 'canada', 'chile', 'china', 'colombia', 'costa_rica', 'czechia', 'denmark', 'estonia', 'finland', 'france', 'germany', 'greece', 'hungary', 'iceland', 'india', 'indonesia', 'ireland', 'israel', 'italy', 'japan', 'korea', 'latvia', 'lithuania', 'luxembourg', 'mexico', 'netherlands', 'new_zealand', 'norway', 'poland', 'portugal', 'russia', 'saudi_arabia', 'slovak_republic', 'slovenia', 'south_africa', 'spain', 'sweden', 'switzerland', 'turkey', 'united_kingdom', 'united_states', 'g7', 'g20']`

The country to get data. Enter as a 3-letter ISO country code, default is USA.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BalanceOfPayments]`

Serializable results.

---

**`provider`**: `Optional[Literal['ecb', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>

<TabItem value='ecb' label='ecb'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>

<TabItem value='fred' label='fred'>

**`period`**: `date`

The date representing the beginning of the reporting period.

**`current_account`**: `float`

Current Account Balance (Billions of EUR)

**`goods`**: `float`

Goods Balance (Billions of EUR)

**`services`**: `float`

Services Balance (Billions of EUR)

**`primary_income`**: `float`

Primary Income Balance (Billions of EUR)

**`secondary_income`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account`**: `float`

Capital Account Balance (Billions of EUR)

**`net_lending_to_rest_of_world`**: `float`

Balance of net lending to the rest of the world (Billions of EUR)

**`financial_account`**: `float`

Financial Account Balance (Billions of EUR)

**`direct_investment`**: `float`

Direct Investment Balance (Billions of EUR)

**`portfolio_investment`**: `float`

Portfolio Investment Balance (Billions of EUR)

**`financial_derivatives`**: `float`

Financial Derivatives Balance (Billions of EUR)

**`other_investment`**: `float`

Other Investment Balance (Billions of EUR)

**`reserve_assets`**: `float`

Reserve Assets Balance (Billions of EUR)

**`errors_and_ommissions`**: `float`

Errors and Omissions (Billions of EUR)

**`current_account_credit`**: `float`

Current Account Credits (Billions of EUR)

**`current_account_debit`**: `float`

Current Account Debits (Billions of EUR)

**`current_account_balance`**: `float`

Current Account Balance (Billions of EUR)

**`goods_credit`**: `float`

Goods Credits (Billions of EUR)

**`goods_debit`**: `float`

Goods Debits (Billions of EUR)

**`services_credit`**: `float`

Services Credits (Billions of EUR)

**`services_debit`**: `float`

Services Debits (Billions of EUR)

**`primary_income_credit`**: `float`

Primary Income Credits (Billions of EUR)

**`primary_income_employee_compensation_credit`**: `float`

Primary Income Employee Compensation Credit (Billions of EUR)

**`primary_income_debit`**: `float`

Primary Income Debits (Billions of EUR)

**`primary_income_employee_compensation_debit`**: `float`

Primary Income Employee Compensation Debit (Billions of EUR)

**`secondary_income_credit`**: `float`

Secondary Income Credits (Billions of EUR)

**`secondary_income_debit`**: `float`

Secondary Income Debits (Billions of EUR)

**`capital_account_credit`**: `float`

Capital Account Credits (Billions of EUR)

**`capital_account_debit`**: `float`

Capital Account Debits (Billions of EUR)

**`services_total_credit`**: `float`

Services Total Credit (Billions of EUR)

**`services_total_debit`**: `float`

Services Total Debit (Billions of EUR)

**`transport_credit`**: `float`

Transport Credit (Billions of EUR)

**`transport_debit`**: `float`

Transport Debit (Billions of EUR)

**`travel_credit`**: `float`

Travel Credit (Billions of EUR)

**`travel_debit`**: `float`

Travel Debit (Billions of EUR)

**`financial_services_credit`**: `float`

Financial Services Credit (Billions of EUR)

**`financial_services_debit`**: `float`

Financial Services Debit (Billions of EUR)

**`communications_credit`**: `float`

Communications Credit (Billions of EUR)

**`communications_debit`**: `float`

Communications Debit (Billions of EUR)

**`other_business_services_credit`**: `float`

Other Business Services Credit (Billions of EUR)

**`other_business_services_debit`**: `float`

Other Business Services Debit (Billions of EUR)

**`other_services_credit`**: `float`

Other Services Credit (Billions of EUR)

**`other_services_debit`**: `float`

Other Services Debit (Billions of EUR)

**`investment_total_credit`**: `float`

Investment Total Credit (Billions of EUR)

**`investment_total_debit`**: `float`

Investment Total Debit (Billions of EUR)

**`equity_credit`**: `float`

Equity Credit (Billions of EUR)

**`equity_reinvested_earnings_credit`**: `float`

Equity Reinvested Earnings Credit (Billions of EUR)

**`equity_debit`**: `float`

Equity Debit (Billions of EUR)

**`equity_reinvested_earnings_debit`**: `float`

Equity Reinvested Earnings Debit (Billions of EUR)

**`debt_instruments_credit`**: `float`

Debt Instruments Credit (Billions of EUR)

**`debt_instruments_debit`**: `float`

Debt Instruments Debit (Billions of EUR)

**`portfolio_investment_equity_credit`**: `float`

Portfolio Investment Equity Credit (Billions of EUR)

**`portfolio_investment_equity_debit`**: `float`

Portfolio Investment Equity Debit (Billions of EUR)

**`portfolio_investment_debt_instruments_credit`**: `float`

Portfolio Investment Debt Instruments Credit (Billions of EUR)

**`portofolio_investment_debt_instruments_debit`**: `float`

Portfolio Investment Debt Instruments Debit (Billions of EUR)

**`other_investment_credit`**: `float`

Other Investment Credit (Billions of EUR)

**`other_investment_debit`**: `float`

Other Investment Debit (Billions of EUR)

**`reserve_assets_credit`**: `float`

Reserve Assets Credit (Billions of EUR)

**`assets_total`**: `float`

Assets Total (Billions of EUR)

**`assets_equity`**: `float`

Assets Equity (Billions of EUR)

**`assets_debt_instruments`**: `float`

Assets Debt Instruments (Billions of EUR)

**`assets_mfi`**: `float`

Assets MFIs (Billions of EUR)

**`assets_non_mfi`**: `float`

Assets Non MFIs (Billions of EUR)

**`assets_direct_investment_abroad`**: `float`

Assets Direct Investment Abroad (Billions of EUR)

**`liabilities_total`**: `float`

Liabilities Total (Billions of EUR)

**`liabilities_equity`**: `float`

Liabilities Equity (Billions of EUR)

**`liabilities_debt_instruments`**: `float`

Liabilities Debt Instruments (Billions of EUR)

**`liabilities_mfi`**: `float`

Liabilities MFIs (Billions of EUR)

**`liabilities_non_mfi`**: `float`

Liabilities Non MFIs (Billions of EUR)

**`liabilities_direct_investment_euro_area`**: `float`

Liabilities Direct Investment in Euro Area (Billions of EUR)

**`assets_equity_and_fund_shares`**: `float`

Assets Equity and Investment Fund Shares (Billions of EUR)

**`assets_equity_shares`**: `float`

Assets Equity Shares (Billions of EUR)

**`assets_investment_fund_shares`**: `float`

Assets Investment Fund Shares (Billions of EUR)

**`assets_debt_short_term`**: `float`

Assets Debt Short Term (Billions of EUR)

**`assets_debt_long_term`**: `float`

Assets Debt Long Term (Billions of EUR)

**`assets_resident_sector_eurosystem`**: `float`

Assets Resident Sector Eurosystem (Billions of EUR)

**`assets_resident_sector_mfi_ex_eurosystem`**: `float`

Assets Resident Sector MFIs outside Eurosystem (Billions of EUR)

**`assets_resident_sector_government`**: `float`

Assets Resident Sector Government (Billions of EUR)

**`assets_resident_sector_other`**: `float`

Assets Resident Sector Other (Billions of EUR)

**`liabilities_equity_and_fund_shares`**: `float`

Liabilities Equity and Investment Fund Shares (Billions of EUR)

**`liabilities_investment_fund_shares`**: `float`

Liabilities Investment Fund Shares (Billions of EUR)

**`liabilities_debt_short_term`**: `float`

Liabilities Debt Short Term (Billions of EUR)

**`liabilities_debt_long_term`**: `float`

Liabilities Debt Long Term (Billions of EUR)

**`liabilities_resident_sector_government`**: `float`

Liabilities Resident Sector Government (Billions of EUR)

**`liabilities_resident_sector_other`**: `float`

Liabilities Resident Sector Other (Billions of EUR)

**`assets_currency_and_deposits`**: `float`

Assets Currency and Deposits (Billions of EUR)

**`assets_loans`**: `float`

Assets Loans (Billions of EUR)

**`assets_trade_credit_and_advances`**: `float`

Assets Trade Credits and Advances (Billions of EUR)

**`assets_eurosystem`**: `float`

Assets Eurosystem (Billions of EUR)

**`assets_other_mfi_ex_eurosystem`**: `float`

Assets Other MFIs outside Eurosystem (Billions of EUR)

**`assets_government`**: `float`

Assets Government (Billions of EUR)

**`assets_other_sectors`**: `float`

Assets Other Sectors (Billions of EUR)

**`liabilities_currency_and_deposits`**: `float`

Liabilities Currency and Deposits (Billions of EUR)

**`liabilities_loans`**: `float`

Liabilities Loans (Billions of EUR)

**`liabilities_trade_credit_and_advances`**: `float`

Liabilities Trade Credits and Advances (Billions of EUR)

**`liabilities_eurosystem`**: `float`

Liabilities Eurosystem (Billions of EUR)

**`liabilities_other_mfi_ex_eurosystem`**: `float`

Liabilities Other MFIs outside Eurosystem (Billions of EUR)

**`liabilities_government`**: `float`

Liabilities Government (Billions of EUR)

**`liabilities_other_sectors`**: `float`

Liabilities Other Sectors (Billions of EUR)

**`goods_balance`**: `float`

Goods Balance (Billions of EUR)

**`services_balance`**: `float`

Services Balance (Billions of EUR)

**`primary_income_balance`**: `float`

Primary Income Balance (Billions of EUR)

**`investment_income_balance`**: `float`

Investment Income Balance (Billions of EUR)

**`investment_income_credit`**: `float`

Investment Income Credits (Billions of EUR)

**`investment_income_debit`**: `float`

Investment Income Debits (Billions of EUR)

**`secondary_income_balance`**: `float`

Secondary Income Balance (Billions of EUR)

**`capital_account_balance`**: `float`

Capital Account Balance (Billions of EUR)

</TabItem>
</Tabs>



---

---
title: "calendar"
description: "The Economic Calendar provides information on economic events and data.  Use the OBB Python function `obb.economy.calendar()` to retrieve economic calendar  data. The function accepts parameters such as start date, end date, provider, country,  importance, and group. It returns a list of economic calendar data, including the  date, event, reference, source, actual value, previous value, consensus value, and  forecast value. The data can be filtered by provider such as FMP, Nasdaq, or Trading  Economics."
keywords:
- economic calendar
- python obb.economy.calendar
- parameters
- start date
- end date
- provider
- country
- importance
- group
- returns
- data
- date
- event
- reference
- source
- source url
- actual
- previous
- consensus
- forecast
- url
- currency
- unit
- change
- change percent
- updated at
- created at
- description
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/calendar - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the upcoming, or historical, economic calendar of global events.


Examples
--------

```python
from openbb import obb
# By default, the calendar will be forward-looking.
obb.economy.calendar(provider='fmp')
obb.economy.calendar(provider='fmp', start_date='2020-03-01', end_date='2020-03-31')
# By default, the calendar will be forward-looking.
obb.economy.calendar(provider='nasdaq')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country of the event Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `True`

</TabItem>

<TabItem value='tradingeconomics' label='tradingeconomics'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country of the event. Multiple items allowed for provider(s): tradingeconomics.

<details>
<summary mdxType="summary">Choices</summary>

- `afghanistan`
- `albania`
- `algeria`
- `andorra`
- `angola`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cambodia`
- `cameroon`
- `canada`
- `cape_verde`
- `cayman_islands`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_timor`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `ethiopia`
- `euro_area`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `greece`
- `grenada`
- `guatemala`
- `guinea`
- `guinea_bissau`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `isle_of_man`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `laos`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `liechtenstein`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `mauritania`
- `mauritius`
- `mexico`
- `moldova`
- `monaco`
- `mongolia`
- `montenegro`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `puerto_rico`
- `qatar`
- `republic_of_the_congo`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_korea`
- `south_sudan`
- `spain`
- `sri_lanka`
- `sudan`
- `suriname`
- `swaziland`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `vietnam`
- `yemen`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`importance`**: `Literal['low', 'medium', 'high']`

Importance of the event.

 • *Optional:* `True`

---

**`group`**: `Literal['interest_rate', 'inflation', 'bonds', 'consumer', 'gdp', 'government', 'housing', 'labour', 'markets', 'money', 'prices', 'trade', 'business']`

Grouping of events.

 • *Optional:* `True`

---

**`calendar_id`**: `Union[Union[None, int, str], list[Union[None, int, str]]]`

Get events by TradingEconomics Calendar ID. Multiple items allowed for provider(s): tradingeconomics.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EconomicCalendar]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'nasdaq', 'tradingeconomics']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`change`**: `float`

Value change since previous.

**`change_percent`**: `float`

Percentage change since previous.

**`last_updated`**: `datetime`

Last updated timestamp.

**`created_at`**: `datetime`

Created at timestamp.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`description`**: `str`

Event description.

</TabItem>

<TabItem value='tradingeconomics' label='tradingeconomics'>

**`date`**: `Union[datetime, str]`

The date of the data.

**`country`**: `str`

Country of event.

**`category`**: `str`

Category of event.

**`event`**: `str`

Event name.

**`importance`**: `str`

The importance level for the event.

**`source`**: `str`

Source of the data.

**`currency`**: `str`

Currency of the data.

**`unit`**: `str`

Unit of the data.

**`consensus`**: `Union[float, str]`

Average forecast among a representative group of economists.

**`previous`**: `Union[float, str]`

Value for the previous period after the revision (if revision is applicable).

**`revised`**: `Union[float, str]`

Revised previous value, if applicable.

**`actual`**: `Union[float, str]`

Latest released value.

**`forecast`**: `Union[str, float]`

TradingEconomics projections.

**`reference`**: `str`

Abbreviated period for which released data refers to.

**`reference_date`**: `date`

Date for the reference period.

**`calendar_id`**: `int`

TradingEconomics Calendar ID.

**`date_span`**: `int`

Date span of the event.

**`symbol`**: `str`

TradingEconomics Symbol.

**`ticker`**: `str`

TradingEconomics Ticker symbol.

**`te_url`**: `str`

TradingEconomics URL path.

**`source_url`**: `str`

Source URL.

**`last_updated`**: `datetime`

Last update of the data.

</TabItem>
</Tabs>



---

---
title: "central_bank_holdings"
description: "Get the balance sheet holdings of a central bank"
keywords:
- economy
- central_bank_holdings
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/central_bank_holdings - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the balance sheet holdings of a central bank.


Examples
--------

```python
from openbb import obb
# The default is the latest Treasury securities held by the Federal Reserve.
obb.economy.central_bank_holdings(provider='federal_reserve')
# Get historical summaries of the Fed's holdings.
obb.economy.central_bank_holdings(provider='federal_reserve', summary=True)
# Get the balance sheet holdings as-of a historical date.
obb.economy.central_bank_holdings(provider='federal_reserve', date='2019-05-21')
# Use the `holding_type` parameter to select Agency securities, or specific categories or Treasury securities.
obb.economy.central_bank_holdings(provider='federal_reserve', holding_type=agency_debts)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`holding_type`**: `Literal['all_agency', 'agency_debts', 'mbs', 'cmbs', 'all_treasury', 'bills', 'notesbonds', 'frn', 'tips']`

Type of holdings to return.

 • *Default:* `all_treasury`

 • *Optional:* `True`

---

**`summary`**: `bool`

If True, returns historical weekly summary by holding type. This parameter takes priority over other parameters.

 • *Default:* `False`

 • *Optional:* `True`

---

**`cusip`**: `Union[str, list[str]]`

 Multiple items allowed for provider(s): federal_reserve.

 • *Optional:* `True`

---

**`wam`**: `bool`

If True, returns weighted average maturity aggregated by agency or treasury securities. This parameter takes priority over `holding_type`, `cusip`, and `monthly`.

 • *Default:* `False`

 • *Optional:* `True`

---

**`monthly`**: `bool`

If True, returns historical data for all Treasury securities at a monthly interval. This parameter takes priority over other parameters, except `wam`. Only valid when `holding_type` is set to: 'all_treasury', 'bills', 'notesbonds', 'frn', 'tips'.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CentralBankHoldings]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`security_type`**: `str`

Type of security - i.e. TIPs, FRNs, etc.

**`description`**: `str`

Description of the security. Only returned for Agency securities.

**`is_aggreated`**: `Literal['Y']`

Whether the security is aggregated. Only returned for Agency securities.

**`cusip`**: `str`



**`issuer`**: `str`

Issuer of the security.

**`maturity_date`**: `date`

Maturity date of the security.

**`term`**: `str`

Term of the security. Only returned for Agency securities.

**`face_value`**: `float`

Current face value of the security (Thousands of $USD). Current face value of the securities, which is the remaining principal balance of the securities.

**`par_value`**: `float`

Par value of the security (Thousands of $USD). Changes in par may reflect primary and secondary market transactions and/or custodial account activity.

**`coupon`**: `float`

Coupon rate of the security.

**`spread`**: `float`

Spread to the current reference rate, as determined at each security's initial auction.

**`percent_outstanding`**: `float`

Total percent of the outstanding CUSIP issuance.

**`bills`**: `float`

Treasury bills amount (Thousands of $USD). Only returned when 'summary' is True.

**`frn`**: `float`

Floating rate Treasury notes amount (Thousands of $USD). Only returned when 'summary' is True.

**`notes_and_bonds`**: `float`

Treasuy Notes and bonds amount (Thousands of $USD). Only returned when 'summary' is True.

**`tips`**: `float`

Treasury inflation-protected securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`mbs`**: `float`

Mortgage-backed securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`cmbs`**: `float`

Commercial mortgage-backed securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`agencies`**: `float`

Agency securities amount (Thousands of $USD). Only returned when 'summary' is True.

**`total`**: `float`

Total SOMA holdings amount (Thousands of $USD). Only returned when 'summary' is True.

**`tips_inflation_compensation`**: `float`

Treasury inflation-protected securities inflation compensation amount (Thousands of $USD). Only returned when 'summary' is True.

**`change_prior_week`**: `float`

Change in SOMA holdings from the prior week (Thousands of $USD).

**`change_prior_year`**: `float`

Change in SOMA holdings from the prior year (Thousands of $USD).

</TabItem>
</Tabs>



---

---
title: "composite_leading_indicator"
description: "Get the composite leading indicator (CLI)"
keywords:
- economy
- composite_leading_indicator
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/composite_leading_indicator - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the composite leading indicator (CLI).

It is designed to provide early signals of turning points
in business cycles showing fluctuation of the economic activity around its long term potential level.

CLIs show short-term economic movements in qualitative rather than quantitative terms.


Examples
--------

```python
from openbb import obb
obb.economy.composite_leading_indicator(provider='oecd')
obb.economy.composite_leading_indicator(country=all, provider='oecd', growth_rate=True)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[Union[Literal['g20', 'g7', 'asia5', 'north_america', 'europe4', 'australia', 'brazil', 'canada', 'china', 'france', 'germany', 'india', 'indonesia', 'italy', 'japan', 'mexico', 'south_africa', 'south_korea', 'spain', 'turkey', 'united_kingdom', 'united_states', 'all'], str], list[Union[Literal['g20', 'g7', 'asia5', 'north_america', 'europe4', 'australia', 'brazil', 'canada', 'china', 'france', 'germany', 'india', 'indonesia', 'italy', 'japan', 'mexico', 'south_africa', 'south_korea', 'spain', 'turkey', 'united_kingdom', 'united_states', 'all'], str]]]`

Country to get the CLI for, default is G20. Multiple items allowed for provider(s): oecd.

 • *Default:* `g20`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['amplitude', 'normalized']`

Adjustment of the data, either 'amplitude' or 'normalized'. Default is amplitude.

 • *Default:* `amplitude`

 • *Optional:* `True`

---

**`growth_rate`**: `bool`

Return the 1-year growth rate (%) of the CLI, default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CompositeLeadingIndicator]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

CLI value

**`country`**: `str`

Country for the CLI value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

CLI value

**`country`**: `str`

Country for the CLI value.

</TabItem>
</Tabs>



---

---
title: "country_profile"
description: "Get a profile of country statistics and economic indicators"
keywords:
- economy
- country_profile
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/country_profile - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get a profile of country statistics and economic indicators.


Examples
--------

```python
from openbb import obb
obb.economy.country_profile(provider='econdb', country='united_kingdom')
# Enter the country as the full name, or iso code. If `latest` is False, the complete history for each series is returned.
obb.economy.country_profile(country='united_states,jp', latest=False, provider='econdb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

---

**`latest`**: `bool`

If True, return only the latest data. If False, return all available data for each indicator.

 • *Default:* `True`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day.Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CountryProfile]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`



**`population`**: `int`

Population.

**`gdp_usd`**: `float`

Gross Domestic Product, in billions of USD.

**`gdp_qoq`**: `float`

GDP growth quarter-over-quarter change, as a normalized percent.

**`gdp_yoy`**: `float`

GDP growth year-over-year change, as a normalized percent.

**`cpi_yoy`**: `float`

Consumer Price Index year-over-year change, as a normalized percent.

**`core_yoy`**: `float`

Core Consumer Price Index year-over-year change, as a normalized percent.

**`retail_sales_yoy`**: `float`

Retail Sales year-over-year change, as a normalized percent.

**`industrial_production_yoy`**: `float`

Industrial Production year-over-year change, as a normalized percent.

**`policy_rate`**: `float`

Short term policy rate, as a normalized percent.

**`yield_10y`**: `float`

10-year government bond yield, as a normalized percent.

**`govt_debt_gdp`**: `float`

Government debt as a percent (normalized) of GDP.

**`current_account_gdp`**: `float`

Current account balance as a percent (normalized) of GDP.

**`jobless_rate`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `str`



**`population`**: `int`

Population.

**`gdp_usd`**: `float`

Gross Domestic Product, in billions of USD.

**`gdp_qoq`**: `float`

GDP growth quarter-over-quarter change, as a normalized percent.

**`gdp_yoy`**: `float`

GDP growth year-over-year change, as a normalized percent.

**`cpi_yoy`**: `float`

Consumer Price Index year-over-year change, as a normalized percent.

**`core_yoy`**: `float`

Core Consumer Price Index year-over-year change, as a normalized percent.

**`retail_sales_yoy`**: `float`

Retail Sales year-over-year change, as a normalized percent.

**`industrial_production_yoy`**: `float`

Industrial Production year-over-year change, as a normalized percent.

**`policy_rate`**: `float`

Short term policy rate, as a normalized percent.

**`yield_10y`**: `float`

10-year government bond yield, as a normalized percent.

**`govt_debt_gdp`**: `float`

Government debt as a percent (normalized) of GDP.

**`current_account_gdp`**: `float`

Current account balance as a percent (normalized) of GDP.

**`jobless_rate`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "cpi"
description: "Get Consumer Price Index (CPI) data for various countries and calculate  inflation measurements. This economic indicator provides insights into the growth  rate of prices on a monthly, quarterly, and annual basis. Harmonized CPI data is  also available. Specify the start and end dates for the desired data range. The  data provider and metadata information are included in the results."
keywords:
- Consumer Price Index (CPI) Data
- CPI data
- CPI calculation
- inflation measurement
- economic indicator
- country-wise CPI data
- growth rate
- monthly CPI
- quarterly CPI
- annual CPI
- harmonized CPI
- start date
- end date
- data provider
- metadata info
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/cpi - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Consumer Price Index (CPI).

Returns either the rescaled index value, or a rate of change (inflation).


Examples
--------

```python
from openbb import obb
obb.economy.cpi(country='japan,china,turkey', provider='fred')
# Use the `transform` parameter to define the reference period for the change in values. Default is YoY.
obb.economy.cpi(country='united_states,united_kingdom', transform='period', provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): fred, oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`country`**: `Union[Literal['australia', 'austria', 'belgium', 'brazil', 'bulgaria', 'canada', 'chile', 'china', 'croatia', 'cyprus', 'czech_republic', 'denmark', 'estonia', 'finland', 'france', 'germany', 'greece', 'hungary', 'iceland', 'india', 'indonesia', 'ireland', 'israel', 'italy', 'japan', 'korea', 'latvia', 'lithuania', 'luxembourg', 'malta', 'mexico', 'netherlands', 'new_zealand', 'norway', 'poland', 'portugal', 'romania', 'russian_federation', 'slovak_republic', 'slovakia', 'slovenia', 'south_africa', 'spain', 'sweden', 'switzerland', 'turkey', 'united_kingdom', 'united_states'], str]`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

Country to get CPI for.  This is the list of OECD supported countries

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `yoy`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`harmonized`**: `bool`

If true, returns harmonized data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`expenditure`**: `Literal['total', 'all', 'actual_rentals', 'alcoholic_beverages_tobacco_narcotics', 'all_non_food_non_energy', 'clothing_footwear', 'communication', 'education', 'electricity_gas_other_fuels', 'energy', 'overall_excl_energy_food_alcohol_tobacco', 'food_non_alcoholic_beverages', 'fuels_lubricants_personal', 'furniture_household_equipment', 'goods', 'housing', 'housing_excluding_rentals', 'housing_water_electricity_gas', 'health', 'imputed_rentals', 'maintenance_repair_dwelling', 'miscellaneous_goods_services', 'recreation_culture', 'residuals', 'restaurants_hotels', 'services_less_housing', 'services_less_house_excl_rentals', 'services', 'transport', 'water_supply_other_services']`

Expenditure component of CPI.

 • *Default:* `total`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ConsumerPriceIndex]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred', 'oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `float`

CPI index value or period change.

**`expenditure`**: `str`

Expenditure component of CPI.

</TabItem>
</Tabs>



---

---
title: "direction_of_trade"
description: "Get Direction Of Trade Statistics from the IMF database"
keywords:
- economy
- direction_of_trade
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/direction_of_trade - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Direction Of Trade Statistics from the IMF database.

The Direction of Trade Statistics (DOTS) presents the value of merchandise exports and
imports disaggregated according to a country's primary trading partners.
Area and world aggregates are included in the display of trade flows between major areas of the world.
Reported data is supplemented by estimates whenever such data is not available or current.
Imports are reported on a cost, insurance and freight (CIF) basis
and exports are reported on a free on board (FOB) basis.
Time series data includes estimates derived from reports of partner countries
for non-reporting and slow-reporting countries.


Examples
--------

```python
from openbb import obb
obb.economy.direction_of_trade(provider='imf', country='all', counterpart='china')
# Select multiple countries or counterparts by entering a comma-separated list. The direction of trade can be 'exports', 'imports', 'balance', or 'all'.
obb.economy.direction_of_trade(provider='imf', country='us', counterpart='world,eu', frequency='annual', direction='exports')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. None is an equiavlent to 'all'. If 'all' is used, the counterpart field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`counterpart`**: `Union[str, list[str]]`

Counterpart country to the trade. None is an equiavlent to 'all'. If 'all' is used, the country field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`direction`**: `Literal['exports', 'imports', 'balance', 'all']`

Trade direction. Use 'all' to get all data for this dimension.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`country`**: `Union[str, list[str]]`

The country to get data. None is an equiavlent to 'all'. If 'all' is used, the counterpart field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`counterpart`**: `Union[str, list[str]]`

Counterpart country to the trade. None is an equiavlent to 'all'. If 'all' is used, the country field cannot be 'all'. Multiple items allowed for provider(s): imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `advanced_economies`
- `afghanistan`
- `africa`
- `africa_not_allocated`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `antilles`
- `argentina`
- `armenia`
- `aruba`
- `asia_not_allocated`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belgo-luxembourg_economic_union`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `china`
- `colombia`
- `community_of_independent_states`
- `comoros`
- `congo`
- `costa_rica`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `democratic_republic_of_the_congo`
- `denmark`
- `developing_asia`
- `djibouti`
- `dominica`
- `dominican_republic`
- `east_germany`
- `eastern_caribbean_currency_union`
- `ecuador`
- `egypt`
- `el_salvador`
- `emerging_and_developing_countries`
- `emerging_and_developing_europe`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `euro_area`
- `europe`
- `europe_not_allocated`
- `european_union`
- `export_earnings_fuel`
- `export_earnings_nonfuel`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `former_czechoslovakia`
- `former_ussr`
- `former_yugoslavia`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `honduras`
- `hong_kong`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `ivory_coast`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `macao`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `middle_east`
- `middle_east_and_central_asia`
- `middle_east_and_central_asia_not_specified`
- `middle_east_north_africa_afghanistan_and_pakistan`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_korea`
- `north_macedonia`
- `north_vietnam`
- `norway`
- `oman`
- `other_countries_nie`
- `pakistan`
- `palau`
- `palestine`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia`
- `serbia_and_montenegro`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_african_common_customs_area`
- `south_korea`
- `south_sudan`
- `spain`
- `special_categories_and_economic_zones`
- `sri_lanka`
- `sub-saharan_africa`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `vatican_city_state`
- `venezuela`
- `viet_nam`
- `west_malaysia`
- `western_hemisphere`
- `western_hemisphere_not_allocated`
- `world`
- `yemen`
- `yemen_arab_rep`
- `yemen_pd_rep`
- `zambia`
- `zimbabwe`
</details>

 • *Optional:* `True`

---

**`direction`**: `Literal['exports', 'imports', 'balance', 'all']`

Trade direction. Use 'all' to get all data for this dimension.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['month', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `month`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[DirectionOfTrade]`

Serializable results.

---

**`provider`**: `Optional[Literal['imf']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`counterpart`**: `str`

Counterpart country or region to the trade.

**`title`**: `str`

Title corresponding to the symbol.

**`value`**: `float`

Trade value.

**`scale`**: `str`

Scale of the value.

</TabItem>

<TabItem value='imf' label='imf'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`counterpart`**: `str`

Counterpart country or region to the trade.

**`title`**: `str`

Title corresponding to the symbol.

**`value`**: `float`

Trade value.

**`scale`**: `str`

Scale of the value.

</TabItem>
</Tabs>



---

---
title: "export_destinations"
description: "Get top export destinations by country from the UN Comtrade International Trade Statistics Database"
keywords:
- economy
- export_destinations
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/export_destinations - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get top export destinations by country from the UN Comtrade International Trade Statistics Database.


Examples
--------

```python
from openbb import obb
obb.economy.export_destinations(provider='econdb', country='us')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ExportDestinations]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`origin_country`**: `str`

The country of origin.

**`destination_country`**: `str`

The destination country.

**`value`**: `Union[float, int]`

The value of the export.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`origin_country`**: `str`

The country of origin.

**`destination_country`**: `str`

The destination country.

**`value`**: `Union[float, int]`

The value of the export.

**`units`**: `str`

The units of measurement for the value.

**`title`**: `str`

The title of the data.

**`footnote`**: `str`

The footnote for the data.

</TabItem>
</Tabs>



---

---
title: "fomc_documents"
description: "Get FOMC documents by year and document type"
keywords:
- economy
- fomc_documents
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/fomc_documents - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get FOMC documents by year and document type.
Optionally, download the file directly from the Federal Reserve's website.

Source: https://www.federalreserve.gov/monetarypolicy/fomc_historical.htm
Source: https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm

This function does not return the typical OBBject response.

The response is `list[dict[str, str]]` of FOMC documents and their URLs.

Each dictionary entry has keys: `date`, `url`, `doc_type`, and `doc_format`.

If `as_choices` is True, the response is a list of valid Workspace parameter choices.
Keys, `label` and `value`, correspond with the `doc_type` + `date`, and the `url`, respectively.

If `url` was provided, the response is a `dict[str, Any]` with keys `filename`, `content`, and `data_format`.


Examples
--------

```python
from openbb import obb
obb.economy.fomc_documents(provider='federal_reserve')
# Filter all documents by year.
obb.economy.fomc_documents(provider='federal_reserve', year=2022)
# Filter all documents by year and document type.
obb.economy.fomc_documents(provider='federal_reserve', year=2022, document_type=minutes)
# The `url` parameter will override all other parameters to download the document. The response will be a dictionary with keys `filename`, `content`, and `data_format`. PDF content will be a base64 encoded string of the document.
obb.economy.fomc_documents(provider='federal_reserve', url=https://www.federalreserve.gov/monetarypolicy/files/fomcminutes20220126.pdf)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`year`**: `int`

The year of FOMC documents to retrieve. If None, all years since 1959 are returned.

 • *Optional:* `True`

---

**`document_type`**: `str`

Filter by document type. Default is all. Choose from: all, monetary_policy, minutes, projections, materials, press_release, press_conference, conference_call, agenda, transcript, speaker_key, beige_book, teal_book, green_book, blue_book, red_book

 • *Optional:* `True`

---

**`pdf_only`**: `bool`

Whether to return as a list with only the PDF documents. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

---

**`as_choices`**: `bool`

Whether to return cast as a list of valid Workspace parameter choices. Leave as False for typical use.

 • *Default:* `False`

 • *Optional:* `True`

---

**`url`**: `str`

Download a document from the supplied URL. When provided, all other parameters are ignored. Content is returned as a base64 encoded string.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FomcDocuments]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`content`**: `Any`

The content of request results. If `url` was provided, the content is a dictionary with keys `filename` and `content`. Otherwise, it is a list of dictionaries with a mapping of FOMC documents to URLs. The endpoint response will not be an OBBject.results object, but the content directly.

</TabItem>
</Tabs>



---

---
title: "fred_regional"
description: "Query the Geo Fred API for regional economic data by series group"
keywords:
- economy
- fred_regional
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/fred_regional - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Query the Geo Fred API for regional economic data by series group.

The series group ID is found by using `fred_search` and the `series_id` parameter.


Examples
--------

```python
from openbb import obb
obb.economy.fred_regional(symbol='NYICLAIMS', provider='fred')
# With a date, time series data is returned.
obb.economy.fred_regional(symbol='NYICLAIMS', start_date='2021-01-01', end_date='2021-12-31', limit=10, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`symbol`**: `str`

For this function, it is the series_group ID or series ID. If the symbol provided is for a series_group, set the `is_series_group` parameter to True. Not all series that are in FRED have geographical data.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`is_series_group`**: `bool`

When True, the symbol provided is for a series_group, else it is for a series ID.

 • *Default:* `False`

 • *Optional:* `True`

---

**`region_type`**: `Literal['bea', 'msa', 'frb', 'necta', 'state', 'country', 'county', 'censusregion']`

The type of regional data. Parameter is only valid when `is_series_group` is True.

 • *Optional:* `True`

---

**`season`**: `Literal['sa', 'nsa', 'ssa']`

The seasonal adjustments to the data. Parameter is only valid when `is_series_group` is True.

 • *Default:* `nsa`

 • *Optional:* `True`

---

**`units`**: `str`

The units of the data. This should match the units returned from searching by series ID. An incorrect field will not necessarily return an error. Parameter is only valid when `is_series_group` is True.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        <br/>
    None = No change<br/>
        <br/>
    a = Annual<br/>
        <br/>
    q = Quarterly<br/>
        <br/>
    m = Monthly<br/>
        <br/>
    w = Weekly<br/>
        <br/>
    d = Daily<br/>
        <br/>
    wef = Weekly, Ending Friday<br/>
        <br/>
    weth = Weekly, Ending Thursday<br/>
        <br/>
    wew = Weekly, Ending Wednesday<br/>
        <br/>
    wetu = Weekly, Ending Tuesday<br/>
        <br/>
    wem = Weekly, Ending Monday<br/>
        <br/>
    wesu = Weekly, Ending Sunday<br/>
        <br/>
    wesa = Weekly, Ending Saturday<br/>
        <br/>
    bwew = Biweekly, Ending Wednesday<br/>
        <br/>
    bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FredRegional]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`region`**: `str`

The name of the region.

**`code`**: `Union[str, int]`

The code of the region.

**`value`**: `Union[float, int]`

The obersvation value. The units are defined in the search results by series ID.

**`series_id`**: `str`

The individual series ID for the region.

</TabItem>
</Tabs>



---

---
title: "fred_release_table"
description: "Get economic release data by ID and/or element from FRED"
keywords:
- economy
- fred_release_table
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/fred_release_table - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get economic release data by ID and/or element from FRED.


Examples
--------

```python
from openbb import obb
# Get the top-level elements of a release by not supplying an element ID.
obb.economy.fred_release_table(release_id='50', provider='fred')
# Drill down on a specific section of the release.
obb.economy.fred_release_table(release_id='50', element_id='4880', provider='fred')
# Drill down on a specific table of the release.
obb.economy.fred_release_table(release_id='50', element_id='4881', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`release_id`**: `str`

The ID of the release. Use `fred_search` to find releases.

 • *Optional:* `False`

---

**`element_id`**: `str`

The element ID of a specific table in the release.

 • *Optional:* `True`

---

**`date`**: `Union[Union[None, date, str], list[Union[None, date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`release_id`**: `str`

The ID of the release. Use `fred_search` to find releases.

 • *Optional:* `False`

---

**`element_id`**: `str`

The element ID of a specific table in the release.

 • *Optional:* `True`

---

**`date`**: `Union[Union[None, date, str], list[Union[None, date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FredReleaseTable]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`level`**: `int`

The indentation level of the element.

**`element_type`**: `str`

The type of the element.

**`line`**: `int`

The line number of the element.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The name of the series.

**`value`**: `float`

The reported value of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`level`**: `int`

The indentation level of the element.

**`element_type`**: `str`

The type of the element.

**`line`**: `int`

The line number of the element.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The name of the series.

**`value`**: `float`

The reported value of the series.

</TabItem>
</Tabs>



---

---
title: "fred_search"
description: "Search for FRED series or economic releases by ID or string"
keywords:
- economy
- fred_search
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/fred_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search for FRED series or economic releases by ID or string.

This does not return the observation values, only the metadata.
Use this function to find series IDs for `fred_series()`.


Examples
--------

```python
from openbb import obb
obb.economy.fred_search(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

The search word(s).

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`query`**: `str`

The search word(s).

 • *Optional:* `True`

---

**`search_type`**: `Literal['full_text', 'series_id', 'release']`

The type of search to perform. Automatically set to 'release' when a 'release_id' is provided.

 • *Default:* `full_text`

 • *Optional:* `True`

---

**`release_id`**: `Annotated[int, Ge(ge=0)]`

A specific release ID to target.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return. (1-1000)

 • *Optional:* `True`

---

**`offset`**: `Annotated[int, Ge(ge=0)]`

Offset the results in conjunction with limit. This parameter is ignored When search_type is 'release'.

 • *Default:* `0`

 • *Optional:* `True`

---

**`order_by`**: `Literal['search_rank', 'series_id', 'title', 'units', 'frequency', 'seasonal_adjustment', 'realtime_start', 'realtime_end', 'last_updated', 'observation_start', 'observation_end', 'popularity', 'group_popularity']`

Order the results by a specific attribute. The default is 'observation_end'.

 • *Default:* `observation_end`

 • *Optional:* `True`

---

**`sort_order`**: `Literal['asc', 'desc']`

Sort the 'order_by' item in ascending or descending order. The default is 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`filter_variable`**: `Literal['frequency', 'units', 'seasonal_adjustment']`

Filter by an attribute.

 • *Optional:* `True`

---

**`filter_value`**: `str`

String value to filter the variable by.  Used in conjunction with filter_variable. This parameter is ignored when search_type is 'release'.

 • *Optional:* `True`

---

**`tag_names`**: `Union[str, list[str]]`

A semicolon delimited list of tag names that series match all of.  Example: 'japan;imports' This parameter is ignored when search_type is 'release'. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`exclude_tag_names`**: `Union[str, list[str]]`

A semicolon delimited list of tag names that series match none of.  Example: 'imports;services'. Requires that variable tag_names also be set to limit the number of matching series. This parameter is ignored when search_type is 'release'. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`series_id`**: `str`

A FRED Series ID to return series group information for. This returns the required information to query for regional data. Not all series that are in FRED have geographical data. Entering a value for series_id will override all other parameters. Multiple series_ids can be separated by commas.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FredSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`release_id`**: `str`

The release ID for queries.

**`series_id`**: `str`

The series ID for the item in the release.

**`series_group`**: `str`

The series group ID of the series. This value is used to query for regional data.

**`region_type`**: `str`

The region type of the series.

**`name`**: `str`

The name of the release.

**`title`**: `str`

The title of the series.

**`observation_start`**: `date`

The date of the first observation in the series.

**`observation_end`**: `date`

The date of the last observation in the series.

**`frequency`**: `str`

The frequency of the data.

**`frequency_short`**: `str`

Short form of the data frequency.

**`units`**: `str`

The units of the data.

**`units_short`**: `str`

Short form of the data units.

**`seasonal_adjustment`**: `str`

The seasonal adjustment of the data.

**`seasonal_adjustment_short`**: `str`

Short form of the data seasonal adjustment.

**`last_updated`**: `datetime`

The datetime of the last update to the data.

**`popularity`**: `int`

Popularity of the series

**`group_popularity`**: `int`

Group popularity of the release

**`realtime_start`**: `date`

The realtime start date of the series.

**`realtime_end`**: `date`

The realtime end date of the series.

**`notes`**: `str`

Description of the release.

**`press_release`**: `bool`

If the release is a press release.

**`url`**: `str`

URL to the release.

</TabItem>

<TabItem value='fred' label='fred'>

**`release_id`**: `str`

The release ID for queries.

**`series_id`**: `str`

The series ID for the item in the release.

**`series_group`**: `str`

The series group ID of the series. This value is used to query for regional data.

**`region_type`**: `str`

The region type of the series.

**`name`**: `str`

The name of the release.

**`title`**: `str`

The title of the series.

**`observation_start`**: `date`

The date of the first observation in the series.

**`observation_end`**: `date`

The date of the last observation in the series.

**`frequency`**: `str`

The frequency of the data.

**`frequency_short`**: `str`

Short form of the data frequency.

**`units`**: `str`

The units of the data.

**`units_short`**: `str`

Short form of the data units.

**`seasonal_adjustment`**: `str`

The seasonal adjustment of the data.

**`seasonal_adjustment_short`**: `str`

Short form of the data seasonal adjustment.

**`last_updated`**: `datetime`

The datetime of the last update to the data.

**`popularity`**: `int`

Popularity of the series

**`group_popularity`**: `int`

Group popularity of the release

**`realtime_start`**: `date`

The realtime start date of the series.

**`realtime_end`**: `date`

The realtime end date of the series.

**`notes`**: `str`

Description of the release.

**`press_release`**: `bool`

If the release is a press release.

**`url`**: `str`

URL to the release.

</TabItem>
</Tabs>



---

---
title: "fred_series"
description: "Get data by series ID from FRED"
keywords:
- economy
- fred_series
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/fred_series - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get data by series ID from FRED.


Examples
--------

```python
from openbb import obb
obb.economy.fred_series(symbol='NFCI', provider='fred')
# Multiple series can be passed in as a list.
obb.economy.fred_series(symbol='NFCI,STLFSI4', provider='fred')
# Use the `transform` parameter to transform the data as change, log, or percent change.
obb.economy.fred_series(symbol='CBBTCUSD', transform=pc1, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
        None = No change<br/>
        a = Annual<br/>
        q = Quarterly<br/>
        m = Monthly<br/>
        w = Weekly<br/>
        d = Daily<br/>
        wef = Weekly, Ending Friday<br/>
        weth = Weekly, Ending Thursday<br/>
        wew = Weekly, Ending Wednesday<br/>
        wetu = Weekly, Ending Tuesday<br/>
        wem = Weekly, Ending Monday<br/>
        wesu = Weekly, Ending Sunday<br/>
        wesa = Weekly, Ending Saturday<br/>
        bwew = Biweekly, Ending Wednesday<br/>
        bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Default:* `eop`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100000`

 • *Optional:* `True`

---

**`all_pages`**: `bool`

Returns all pages of data from the API call at once.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sleep`**: `float`

Time to sleep between requests to avoid rate limiting.

 • *Default:* `1.0`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FredSeries]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred', 'intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Value of the index.

</TabItem>
</Tabs>



---

---
title: "forecast"
description: "Forecasted GDP Data"
keywords:
- economy
- gdp
- forecast
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/gdp/forecast - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Forecasted GDP Data.


Examples
--------

```python
from openbb import obb
obb.economy.gdp.forecast(provider='oecd')
obb.economy.gdp.forecast(country=united_states,germany,france, frequency=annual, units=capita, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

Country, or countries, to get forward GDP projections for. Default is all. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `argentina`
- `asia`
- `australia`
- `austria`
- `belgium`
- `brazil`
- `bulgaria`
- `canada`
- `chile`
- `china`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `peru`
- `poland`
- `portugal`
- `romania`
- `russia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `other_major_oil_producers`
- `rest_of_the_world`
- `world`
- `all`
</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency of the data, default is annual.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`units`**: `Literal['current_prices', 'volume', 'capita', 'growth', 'deflator']`

<details>
<summary mdxType="summary">Description</summary>

Units of the data, default is volume (chain linked volume, 2015).<br/>
'current_prices', 'volume', and 'capita' are expressed in USD; 'growth' as a percent; 'deflator' as an index.

</details>

 • *Default:* `volume`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[GdpForecast]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `Union[int, float]`

Forecasted GDP value for the country and date.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

None

**`value`**: `Union[int, float]`

Forecasted GDP value for the country and date.

</TabItem>
</Tabs>



---

# Gdp

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="nominal" description="Get Nominal GDP Data" url="/platform/reference/economy/gdp/nominal" />
<ReferenceCard title="real" description="Get Real GDP Data" url="/platform/reference/economy/gdp/real" />
<ReferenceCard title="forecast" description="Get Forecasted GDP Data" url="/platform/reference/economy/gdp/forecast" />
</ul>



---

---
title: "nominal"
description: "Nominal GDP Data"
keywords:
- economy
- gdp
- nominal
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/gdp/nominal - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Nominal GDP Data.


Examples
--------

```python
from openbb import obb
obb.economy.gdp.nominal(provider='oecd')
obb.economy.gdp.nominal(units=capita, country=all, frequency=annual, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data.Use 'all' to get data for all available countries. Multiple items allowed for provider(s): econdb.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. Use 'all' to get data for all available countries. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `oecd`
- `oecd_26`
- `oecd_europe`
- `g7`
- `g20`
- `euro_area`
- `european_union_27`
- `european_union_15`
- `nafta`
- `argentina`
- `australia`
- `austria`
- `belgium`
- `bulgaria`
- `brazil`
- `canada`
- `chile`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `poland`
- `portugal`
- `romania`
- `russia`
- `saudi_arabia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`units`**: `Literal['level', 'index', 'capita']`

The unit of measurement for the data.Both 'level' and 'capita' (per) are measured in USD.

 • *Default:* `level`

 • *Optional:* `True`

---

**`price_base`**: `Literal['current_prices', 'volume']`

Price base for the data, volume is chain linked volume.

 • *Default:* `current_prices`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[GdpNominal]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb', 'oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

Nominal GDP value for the country and date.

**`nominal_growth_qoq`**: `float`

Nominal GDP growth rate quarter over quarter.

**`nominal_growth_yoy`**: `float`

Nominal GDP growth rate year over year.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>
</Tabs>



---

---
title: "real"
description: "Learn about Real GDP Data and how to access it using the provided parameters.  Find detailed descriptions of the available parameters and the data returned. Understand  the structure of the returns and explore the data attributes."
keywords:
- Real GDP Data
- parameters
- units
- start date
- end date
- provider
- country
- returns
- results
- GdpReal
- warnings
- chart
- metadata
- data
- date
- value
- documentation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/gdp/real - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Real GDP Data.


Examples
--------

```python
from openbb import obb
obb.economy.gdp.real(provider='oecd')
obb.economy.gdp.real(country=united_states,germany,japan, provider='econdb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data.Use 'all' to get data for all available countries. Multiple items allowed for provider(s): econdb.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. Use 'all' to get data for all available countries. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `oecd`
- `oecd_26`
- `oecd_europe`
- `g7`
- `g20`
- `euro_area`
- `european_union_27`
- `european_union_15`
- `nafta`
- `argentina`
- `australia`
- `austria`
- `belgium`
- `bulgaria`
- `brazil`
- `canada`
- `chile`
- `colombia`
- `costa_rica`
- `croatia`
- `czech_republic`
- `denmark`
- `estonia`
- `finland`
- `france`
- `germany`
- `greece`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `ireland`
- `israel`
- `italy`
- `japan`
- `korea`
- `latvia`
- `lithuania`
- `luxembourg`
- `mexico`
- `netherlands`
- `new_zealand`
- `norway`
- `poland`
- `portugal`
- `romania`
- `russia`
- `saudi_arabia`
- `slovak_republic`
- `slovenia`
- `south_africa`
- `spain`
- `sweden`
- `switzerland`
- `turkey`
- `united_kingdom`
- `united_states`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[GdpReal]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb', 'oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

Real GDP value for the country and date.

**`real_growth_qoq`**: `float`

Real GDP growth rate quarter over quarter.

**`real_growth_yoy`**: `float`

Real GDP growth rate year over year.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

The country represented by the GDP value.

**`value`**: `Union[int, float]`

GDP value for the country and date.

</TabItem>
</Tabs>



---

---
title: "house_price_index"
description: "Get the House Price Index by country from the OECD Short-Term Economics Statistics"
keywords:
- economy
- house_price_index
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/house_price_index - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the House Price Index by country from the OECD Short-Term Economics Statistics.


Examples
--------

```python
from openbb import obb
obb.economy.house_price_index(provider='oecd')
# Multiple countries can be passed in as a list.
obb.economy.house_price_index(country='united_kingdom,germany', frequency='quarter', provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `index`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`transform`**: `Literal['index', 'yoy', 'period']`

Transformation of the CPI data. Period represents the change since previous. Defaults to change from one year ago (yoy).

 • *Default:* `index`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HousePriceIndex]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>
</Tabs>



---

---
title: "immediate_interest_rate"
description: "Get immediate interest rates by country"
keywords:
- economy
- immediate_interest_rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/immediate_interest_rate - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint will be removed in a future version. Use, `/economy/interest_rates`, instead. Deprecated in OpenBB Platform V4.3 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get immediate interest rates by country.


Examples
--------

```python
from openbb import obb
obb.economy.immediate_interest_rate(provider='oecd')
# Multiple countries can be passed in as a list.
obb.economy.immediate_interest_rate(country='united_kingdom,germany', frequency=monthly, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ImmediateInterestRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which interest rate is given

**`value`**: `float`

Immediate interest rates, call money, interbank rate.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which interest rate is given

**`value`**: `float`

Immediate interest rates, call money, interbank rate.

</TabItem>
</Tabs>



---

# Economy

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Gdp" description="nominal, real, forecast" url="/platform/reference/economy/gdp" />
<ReferenceCard title="Survey" description="manufacturing_outlook_ny, sloos, manufacturing_outlook_texas, university_of_michigan, bls_search, bls_series, economic_conditions_chicago, nonfarm_payrolls" url="/platform/reference/economy/survey" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="primary dealer fails" description="Primary Dealer Statistics for Fails to Deliver and Fails to Receive" url="/platform/reference/economy/primary_dealer_fails" />
<ReferenceCard title="pce" description="Get Personal Consumption Expenditures (PCE) reports" url="/platform/reference/economy/pce" />
<ReferenceCard title="long term interest rate" description="Get Long-term interest rates that refer to government bonds maturing in ten years" url="/platform/reference/economy/long_term_interest_rate" />
<ReferenceCard title="balance of payments" description="Balance of Payments Reports" url="/platform/reference/economy/balance_of_payments" />
<ReferenceCard title="risk premium" description="Get Market Risk Premium by country" url="/platform/reference/economy/risk_premium" />
<ReferenceCard title="calendar" description="Get the upcoming, or historical, economic calendar of global events" url="/platform/reference/economy/calendar" />
<ReferenceCard title="primary dealer positioning" description="Get Primary dealer positioning statistics" url="/platform/reference/economy/primary_dealer_positioning" />
<ReferenceCard title="immediate interest rate" description="Get immediate interest rates by country" url="/platform/reference/economy/immediate_interest_rate" />
<ReferenceCard title="fred regional" description="Query the Geo Fred API for regional economic data by series group" url="/platform/reference/economy/fred_regional" />
<ReferenceCard title="port volume" description="Get average dwelling times and TEU volumes from the top ports" url="/platform/reference/economy/port_volume" />
<ReferenceCard title="fomc documents" description="Get FOMC documents by year and document type" url="/platform/reference/economy/fomc_documents" />
<ReferenceCard title="house price index" description="Get the House Price Index by country from the OECD Short-Term Economics Statistics" url="/platform/reference/economy/house_price_index" />
<ReferenceCard title="available indicators" description="Get the available economic indicators for a provider" url="/platform/reference/economy/available_indicators" />
<ReferenceCard title="unemployment" description="Get global unemployment data" url="/platform/reference/economy/unemployment" />
<ReferenceCard title="fred series" description="Get data by series ID from FRED" url="/platform/reference/economy/fred_series" />
<ReferenceCard title="cpi" description="Get Consumer Price Index (CPI)" url="/platform/reference/economy/cpi" />
<ReferenceCard title="short term interest rate" description="Get Short-term interest rates" url="/platform/reference/economy/short_term_interest_rate" />
<ReferenceCard title="indicators" description="Get economic indicators by country and indicator" url="/platform/reference/economy/indicators" />
<ReferenceCard title="fred release table" description="Get economic release data by ID and/or element from FRED" url="/platform/reference/economy/fred_release_table" />
<ReferenceCard title="central bank holdings" description="Get the balance sheet holdings of a central bank" url="/platform/reference/economy/central_bank_holdings" />
<ReferenceCard title="fred search" description="Search for FRED series or economic releases by ID or string" url="/platform/reference/economy/fred_search" />
<ReferenceCard title="interest rates" description="Get interest rates by country(s) and duration" url="/platform/reference/economy/interest_rates" />
<ReferenceCard title="country profile" description="Get a profile of country statistics and economic indicators" url="/platform/reference/economy/country_profile" />
<ReferenceCard title="composite leading indicator" description="Get the composite leading indicator (CLI)" url="/platform/reference/economy/composite_leading_indicator" />
<ReferenceCard title="money measures" description="Get Money Measures (M1/M2 and components)" url="/platform/reference/economy/money_measures" />
<ReferenceCard title="retail prices" description="Get retail prices for common items" url="/platform/reference/economy/retail_prices" />
<ReferenceCard title="export destinations" description="Get top export destinations by country from the UN Comtrade International Trade Statistics Database" url="/platform/reference/economy/export_destinations" />
<ReferenceCard title="share price index" description="Get the Share Price Index by country from the OECD Short-Term Economics Statistics" url="/platform/reference/economy/share_price_index" />
<ReferenceCard title="direction of trade" description="Get Direction Of Trade Statistics from the IMF database" url="/platform/reference/economy/direction_of_trade" />
</ul>



---

---
title: "indicators"
description: "Get economic indicators by country and indicator"
keywords:
- economy
- indicators
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/indicators - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get economic indicators by country and indicator.


Examples
--------

```python
from openbb import obb
obb.economy.indicators(provider='econdb', symbol=PCOCO)
# Enter the country as the full name, or iso code. Use `available_indicators()` to get a list of supported indicators from EconDB.
obb.economy.indicators(symbol=CPI, country='united_states,jp', provider='econdb')
# Use the `main` symbol to get the group of main indicators for a country.
obb.economy.indicators(provider='econdb', symbol=main, country='eu')
# When the provider is 'imf', the absence of a symbol will default to 'irfcl_top_lines'. Use 'IRFCL' to get all the data from the set of indicators.
obb.economy.indicators(provider='imf')
# When the provider is 'imf', complete tables are returned by using a 'preset'. Refer to the function's docstring for descriptions of each preset. When no country is supplied, the data is returned for all countries.
obb.economy.indicators(provider='imf', symbol=gold_reserves)
# When the provider is 'imf', multiple countries and symbols can be supplied. Enter countries as a two-letter ISO country code, or the country name in lower_snake_case.
obb.economy.indicators(provider='imf', symbol=RAFA_USD,RAPFA_USD,RAFA_RAPFA_RO, country='us,china,jp,4f,gb', start_date='2010-01-01', end_date='2020-12-31', frequency=annual)
# When the provider is 'imf', additional presets return the core Financial Soundness Indicators.
    'fsi_core' -  Core FSIs
    'fsi_encouraged_set' - Encouraged Set of FSIs,
    'fsi_core_underlying' - Underlying data for the Core FSIs.
    'fsi_other' - Additional/Other FSIs that are not in the Core or Encouraged Set.
    'fsi_all' - all FSI data for a single country.
obb.economy.indicators(provider='imf', symbol=fsi_encouraged_set, country='us,fr,gb', start_date='2022-01-01', end_date='2023-12-31', frequency=annual)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. The base symbol for the indicator (e.g. GDP, CPI, etc.). Use `available_indicators()` to get a list of available symbols. Multiple items allowed for provider(s): econdb.

 • *Optional:* `False`

---

**`transform`**: `Literal['toya', 'tpop', 'tusd', 'tpgp']`

<details>
<summary mdxType="summary">Description</summary>

The transformation to apply to the data, default is None.<br/>
<br/>
    tpop: Change from previous period<br/>
    toya: Change from one year ago<br/>
    tusd: Values as US dollars<br/>
    tpgp: Values as a percent of GDP<br/>
<br/>
    Only 'tpop' and 'toya' are applicable to all indicators. Applying transformations across multiple indicators/countries may produce unexpected results.<br/>
    This is because not all indicators are compatible with all transformations, and the original units and scale differ between entities.<br/>
    `tusd` should only be used where values are currencies.

</details>

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'month']`

The frequency of the data, default is 'quarter'. Only valid when 'symbol' is 'main'.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If True, the request will be cached for one day. Using cache is recommended to avoid needlessly requesting the same data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='imf' label='imf'>

**`country`**: `Union[str, list[str]]`

The country to get data. The country represented by the indicator, if available. Multiple items allowed for provider(s): econdb, imf.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `afghanistan`
- `albania`
- `algeria`
- `american_samoa`
- `angola`
- `anguilla`
- `antigua_and_barbuda`
- `argentina`
- `armenia`
- `aruba`
- `australia`
- `austria`
- `azerbaijan`
- `bahamas`
- `bahrain`
- `bangladesh`
- `barbados`
- `belarus`
- `belgium`
- `belize`
- `benin`
- `bermuda`
- `bhutan`
- `bolivia`
- `bosnia_and_herzegovina`
- `botswana`
- `brazil`
- `brunei_darussalam`
- `bulgaria`
- `burkina_faso`
- `burundi`
- `cabo_verde`
- `cambodia`
- `cameroon`
- `canada`
- `central_african_republic`
- `chad`
- `chile`
- `hong_kong`
- `macao`
- `china`
- `colombia`
- `comoros`
- `democratic_republic_of_the_congo`
- `congo`
- `costa_rica`
- `ivory_coast`
- `croatia`
- `cuba`
- `curacao`
- `cyprus`
- `czech_republic`
- `denmark`
- `djibouti`
- `dominica`
- `dominican_republic`
- `ecuador`
- `egypt`
- `el_salvador`
- `equatorial_guinea`
- `eritrea`
- `estonia`
- `eswatini`
- `ethiopia`
- `falkland_islands`
- `faroe_islands`
- `fiji`
- `finland`
- `france`
- `french_polynesia`
- `gabon`
- `gambia`
- `georgia`
- `germany`
- `ghana`
- `gibraltar`
- `greece`
- `greenland`
- `grenada`
- `guam`
- `guatemala`
- `guinea`
- `guyana`
- `haiti`
- `vatican_city_state`
- `honduras`
- `hungary`
- `iceland`
- `india`
- `indonesia`
- `iran`
- `iraq`
- `ireland`
- `israel`
- `italy`
- `jamaica`
- `japan`
- `jordan`
- `kazakhstan`
- `kenya`
- `kiribati`
- `north_korea`
- `south_korea`
- `kosovo`
- `kuwait`
- `kyrgyzstan`
- `lao`
- `latvia`
- `lebanon`
- `lesotho`
- `liberia`
- `libya`
- `lithuania`
- `luxembourg`
- `madagascar`
- `malawi`
- `malaysia`
- `maldives`
- `mali`
- `malta`
- `marshall_islands`
- `mauritania`
- `mauritius`
- `mexico`
- `micronesia`
- `moldova`
- `mongolia`
- `montenegro`
- `montserrat`
- `morocco`
- `mozambique`
- `myanmar`
- `namibia`
- `nauru`
- `nepal`
- `antilles`
- `netherlands`
- `new_caledonia`
- `new_zealand`
- `nicaragua`
- `niger`
- `nigeria`
- `north_macedonia`
- `norway`
- `oman`
- `pakistan`
- `palau`
- `panama`
- `papua_new_guinea`
- `paraguay`
- `peru`
- `philippines`
- `poland`
- `portugal`
- `qatar`
- `romania`
- `russia`
- `rwanda`
- `samoa`
- `san_marino`
- `sao_tome_and_principe`
- `saudi_arabia`
- `senegal`
- `serbia_and_montenegro`
- `serbia`
- `seychelles`
- `sierra_leone`
- `singapore`
- `sint_maarten`
- `slovakia`
- `slovenia`
- `solomon_islands`
- `somalia`
- `south_africa`
- `south_sudan`
- `spain`
- `sri_lanka`
- `saint_kitts_and_nevis`
- `saint_lucia`
- `saint_vincent_and_the_grenadines`
- `sudan`
- `suriname`
- `sweden`
- `switzerland`
- `syria`
- `taiwan`
- `tajikistan`
- `tanzania`
- `thailand`
- `timor-leste`
- `togo`
- `tonga`
- `trinidad_and_tobago`
- `tunisia`
- `turkey`
- `turkmenistan`
- `tuvalu`
- `uganda`
- `ukraine`
- `united_arab_emirates`
- `united_kingdom`
- `united_states`
- `uruguay`
- `uzbekistan`
- `vanuatu`
- `venezuela`
- `viet_nam`
- `palestine`
- `yemen`
- `zambia`
- `zimbabwe`
- `euro_area`
- `europe`
- `european_union`
- `unspecified`
</details>

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`symbol`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

Symbol to get data for. Use `available_indicators()` to get the list of available symbols. Use 'IRFCL' to get all the data from International Reserves & Foreign Currency Liquidity indicators. Use 'core_fsi' to get the core Financial Soundness Indicators. Use 'core_fsi_underlying' to include underlying data for the core Financial Soundness Indicators. Complete tables are available only by single country, and are keyed as described below. The default is 'irfcl_top_lines'. Available presets not listed in `available_indicators()` are:<br/>
<br/>
        'IRFCL': All the data from the set of indicators. Not compatible with multiple countries.<br/>
        'irfcl_top_lines': The default, top line items from the IRFCL data. Compatible with multiple countries.<br/>
        'reserve_assets_and_other_fx_assets': Table I of the IRFCL data. Not compatible with multiple countries.<br/>
        'predetermined_drains_on_fx_assets': Table II of the IRFCL data. Not compatible with multiple countries.<br/>
        'contingent_drains_fx_assets': Table III of the IRFCL data. Not compatible with multiple countries.<br/>
        'memorandum_items': The memorandum items table of the IRFCL data. Not compatible with multiple countries.<br/>
        'gold_reserves': Gold reserves as value in USD and Fine Troy Ounces. Compatible with multiple countries.<br/>
        'derivative_assets': Net derivative assets as value in USD. Compatible with multipile countries.<br/>
        'fsi_core': The core Financial Soundness Indicators. Compatible with multiple countries.<br/>
        'fsi_core_underlying': The core FSIs underlying series data. Not compatible with country='all'.<br/>
        'fsi_encouraged_set': The encouraged set of Financial Soundness Indicators. Not compatible with country='all'.<br/>
        'fsi_other': The other Financial Soundness Indicators. Not compatible with country='all'.<br/>
        'fsi_balance_sheets': Data categorized as Balance Sheets and Income Statements. Not compatible with country='all'.<br/>
        'fsi_all': All the Financial Soundness Indicators. Not compatible with multiple countries. Multiple items allowed for provider(s): imf.

</details>

 • *Default:* `irfcl_top_lines`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'month']`

Frequency of the data, default is 'quarter'.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EconomicIndicators]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb', 'imf']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



</TabItem>

<TabItem value='imf' label='imf'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol_root`**: `str`

The root symbol for the indicator (e.g. GDP).

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`

The country represented by the data.

**`value`**: `Union[float, int]`



**`unit`**: `str`

The unit of the value.

**`scale`**: `str`

The scale of the value.

**`table`**: `str`

The name of the table associated with the symbol.

**`level`**: `int`

The indentation level of the data, relative to the table and symbol_root

**`order`**: `Union[float, int]`

Order of the data, relative to the table.

**`reference_sector`**: `str`

The reference sector for the data.

**`title`**: `str`

The title of the series associated with the symbol.

</TabItem>
</Tabs>



---

---
title: "interest_rates"
description: "Get interest rates by country(s) and duration"
keywords:
- economy
- interest_rates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/interest_rates - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get interest rates by country(s) and duration.
Most OECD countries publish short-term, a long-term, and immediate rates monthly.


Examples
--------

```python
from openbb import obb
obb.economy.interest_rates(provider='oecd')
# For OECD, duration can be 'immediate', 'short', or 'long'. Default is 'short', which is the 3-month rate. Overnight interbank rate is 'immediate', and 10-year rate is 'long'.
obb.economy.interest_rates(provider='oecd', country='all', duration=immediate, frequency=quarter)
# Multiple countries can be passed in as a list.
obb.economy.interest_rates(duration=long, country='united_kingdom,germany', frequency=monthly, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `belgium`
- `bulgaria`
- `brazil`
- `ireland`
- `mexico`
- `indonesia`
- `new_zealand`
- `japan`
- `united_kingdom`
- `france`
- `chile`
- `canada`
- `netherlands`
- `united_states`
- `south_korea`
- `norway`
- `austria`
- `south_africa`
- `denmark`
- `switzerland`
- `hungary`
- `luxembourg`
- `australia`
- `germany`
- `sweden`
- `iceland`
- `turkey`
- `greece`
- `israel`
- `czech_republic`
- `latvia`
- `slovenia`
- `poland`
- `estonia`
- `lithuania`
- `portugal`
- `costa_rica`
- `slovakia`
- `finland`
- `spain`
- `romania`
- `russia`
- `euro_area19`
- `colombia`
- `italy`
- `india`
- `china`
- `croatia`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

<details>
<summary mdxType="summary">Choices</summary>

- `belgium`
- `bulgaria`
- `brazil`
- `ireland`
- `mexico`
- `indonesia`
- `new_zealand`
- `japan`
- `united_kingdom`
- `france`
- `chile`
- `canada`
- `netherlands`
- `united_states`
- `south_korea`
- `norway`
- `austria`
- `south_africa`
- `denmark`
- `switzerland`
- `hungary`
- `luxembourg`
- `australia`
- `germany`
- `sweden`
- `iceland`
- `turkey`
- `greece`
- `israel`
- `czech_republic`
- `latvia`
- `slovenia`
- `poland`
- `estonia`
- `lithuania`
- `portugal`
- `costa_rica`
- `slovakia`
- `finland`
- `spain`
- `romania`
- `russia`
- `euro_area19`
- `colombia`
- `italy`
- `india`
- `china`
- `croatia`
- `all`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`duration`**: `Literal['immediate', 'short', 'long']`

Duration of the interest rate. 'immediate' is the overnight rate, 'short' is the 3-month rate, and 'long' is the 10-year rate.

 • *Default:* `short`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CountryInterestRates]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

The interest rate value.

**`country`**: `str`

Country for which the interest rate is given.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

The interest rate value.

**`country`**: `str`

Country for which the interest rate is given.

</TabItem>
</Tabs>



---

---
title: "long_term_interest_rate"
description: "Get Long-term interest rates that refer to government bonds maturing in ten years"
keywords:
- economy
- long_term_interest_rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/long_term_interest_rate - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint will be removed in a future version. Use, `/economy/interest_rates`, instead. Deprecated in OpenBB Platform V4.3 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Long-term interest rates that refer to government bonds maturing in ten years.

Rates are mainly determined by the price charged by the lender, the risk from the borrower and the
fall in the capital value. Long-term interest rates are generally averages of daily rates,
measured as a percentage. These interest rates are implied by the prices at which the government bonds are
traded on financial markets, not the interest rates at which the loans were issued.
In all cases, they refer to bonds whose capital repayment is guaranteed by governments.
Long-term interest rates are one of the determinants of business investment.
Low long-term interest rates encourage investment in new equipment and high interest rates discourage it.
Investment is, in turn, a major source of economic growth.


Examples
--------

```python
from openbb import obb
obb.economy.long_term_interest_rate(provider='oecd')
obb.economy.long_term_interest_rate(country=all, frequency=quarterly, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['belgium', 'bulgaria', 'brazil', 'ireland', 'mexico', 'indonesia', 'new_zealand', 'japan', 'united_kingdom', 'france', 'chile', 'canada', 'netherlands', 'united_states', 'south_korea', 'norway', 'austria', 'south_africa', 'denmark', 'switzerland', 'hungary', 'luxembourg', 'australia', 'germany', 'sweden', 'iceland', 'turkey', 'greece', 'israel', 'czech_republic', 'latvia', 'slovenia', 'poland', 'estonia', 'lithuania', 'portugal', 'costa_rica', 'slovakia', 'finland', 'spain', 'romania', 'russia', 'euro_area19', 'colombia', 'italy', 'india', 'china', 'croatia', 'all']`

Country to get interest rate for.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[LTIR]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>
</Tabs>



---

---
title: "money_measures"
description: "Get Money Measures (M1/M2 and components)"
keywords:
- economy
- money_measures
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/money_measures - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Money Measures (M1/M2 and components).

The Federal Reserve publishes as part of the H.6 Release.


Examples
--------

```python
from openbb import obb
obb.economy.money_measures(provider='federal_reserve')
obb.economy.money_measures(adjusted=False, provider='federal_reserve')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`adjusted`**: `bool`

Whether to return seasonally adjusted data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`adjusted`**: `bool`

Whether to return seasonally adjusted data.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[MoneyMeasures]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`month`**: `date`

The date of the data.

**`M1`**: `float`

Value of the M1 money supply in billions.

**`M2`**: `float`

Value of the M2 money supply in billions.

**`currency`**: `float`

Value of currency in circulation in billions.

**`demand_deposits`**: `float`

Value of demand deposits in billions.

**`retail_money_market_funds`**: `float`

Value of retail money market funds in billions.

**`other_liquid_deposits`**: `float`

Value of other liquid deposits in billions.

**`small_denomination_time_deposits`**: `float`

Value of small denomination time deposits in billions.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`month`**: `date`

The date of the data.

**`M1`**: `float`

Value of the M1 money supply in billions.

**`M2`**: `float`

Value of the M2 money supply in billions.

**`currency`**: `float`

Value of currency in circulation in billions.

**`demand_deposits`**: `float`

Value of demand deposits in billions.

**`retail_money_market_funds`**: `float`

Value of retail money market funds in billions.

**`other_liquid_deposits`**: `float`

Value of other liquid deposits in billions.

**`small_denomination_time_deposits`**: `float`

Value of small denomination time deposits in billions.

</TabItem>
</Tabs>



---

---
title: "pce"
description: "Get Personal Consumption Expenditures (PCE) reports"
keywords:
- economy
- pce
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/pce - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Personal Consumption Expenditures (PCE) reports.


Examples
--------

```python
from openbb import obb
obb.economy.pce(provider='fred')
# Get reports for multiple dates, entered as a comma-separated string.
obb.economy.pce(provider='fred', date='2024-05-01,2024-04-01,2023-05-01', category=pce_price_index)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`category`**: `Literal['personal_income', 'wages_by_industry', 'real_pce_percent_change', 'real_pce_quantity_index', 'pce_price_index', 'pce_dollars', 'real_pce_chained_dollars', 'pce_price_percent_change']`

The category to query.

 • *Default:* `personal_income`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PersonalConsumptionExpenditures]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



**`name`**: `str`

The name of the series.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`level`**: `int`

The indentation level of the element.

**`line`**: `int`

The line number of the series in the table.

</TabItem>
</Tabs>



---

---
title: "port_volume"
description: "Get average dwelling times and TEU volumes from the top ports"
keywords:
- economy
- port_volume
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/port_volume - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get average dwelling times and TEU volumes from the top ports.


Examples
--------

```python
from openbb import obb
obb.economy.port_volume(provider='econdb')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PortVolume]`

Serializable results.

---

**`provider`**: `Optional[Literal['econdb']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`port_code`**: `str`

Port code.

**`port_name`**: `str`

Port name.

**`country`**: `str`

Country where the port is located.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`port_code`**: `str`

Port code.

**`port_name`**: `str`

Port name.

**`country`**: `str`

Country where the port is located.

**`export_dwell_time`**: `float`

EconDB model estimate for the average number of days from when a container enters the terminal gates until it is loaded on a vessel. High dwelling times can indicate vessel delays.

**`import_dwell_time`**: `float`

EconDB model estimate for the average number of days from when a container is discharged from a vessel until it exits the terminal gates. High dwelling times can indicate trucking or port congestion.

**`import_teu`**: `int`

EconDB model estimate for the number of twenty-foot equivalent units (TEUs) of containers imported through the port.

**`export_teu`**: `int`

EconDB model estimate for the number of twenty-foot equivalent units (TEUs) of containers exported through the port.

</TabItem>
</Tabs>



---

---
title: "primary_dealer_fails"
description: "Primary Dealer Statistics for Fails to Deliver and Fails to Receive"
keywords:
- economy
- primary_dealer_fails
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/primary_dealer_fails - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Primary Dealer Statistics for Fails to Deliver and Fails to Receive.

Data from the NY Federal Reserve are updated on Thursdays at approximately
4:15 p.m. with the previous week's statistics.

For research on the topic, see:
https://www.federalreserve.gov/econres/notes/feds-notes/the-systemic-nature-of-settlement-fails-20170703.html

"Large and protracted settlement fails are believed to undermine the liquidity
and well-functioning of securities markets.

Near-100 percent pass-through of fails suggests a high degree of collateral
re-hypothecation together with the inability or unwillingness to borrow or buy the needed securities."


Examples
--------

```python
from openbb import obb
obb.economy.primary_dealer_fails(provider='federal_reserve')
# Transform the data to be percentage totals by asset class
obb.economy.primary_dealer_fails(provider='federal_reserve', unit=percent)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`asset_class`**: `Literal['all', 'treasuries', 'tips', 'agency', 'mbs', 'corporate']`

Asset class to return, default is 'all'.

 • *Default:* `all`

 • *Optional:* `True`

---

**`unit`**: `Literal['value', 'percent']`

Unit of the data returned to the 'value' field. Default is 'value', which represents millions of USD. 'percent' returns data as the percentage of the total fails-to-receive and fails-to-deliver, by asset class.

 • *Default:* `value`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PrimaryDealerFails]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series' symbol.

**`value`**: `Union[int, float]`

Value of the data returned, in millions of USD if the `unit` parameter is 'value' else a normalized percent.

</TabItem>
</Tabs>



---

---
title: "primary_dealer_positioning"
description: "Get Primary dealer positioning statistics"
keywords:
- economy
- primary_dealer_positioning
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/primary_dealer_positioning - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Primary dealer positioning statistics.


Examples
--------

```python
from openbb import obb
obb.economy.primary_dealer_positioning(provider='federal_reserve')
obb.economy.primary_dealer_positioning(category=abs, provider='federal_reserve')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['treasuries', 'bills', 'coupons', 'notes', 'tips', 'mbs', 'cmbs', 'municipal', 'corporate', 'commercial_paper', 'corporate_ig', 'corporate_junk', 'abs']`

The category of asset to return, defaults to 'treasuries'.

 • *Default:* `treasuries`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PrimaryDealerPositioning]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `int`

The reported value of the net position (long - short), in millions of $USD.

**`name`**: `str`

Short name for the series.

**`title`**: `str`

Title of the series.

</TabItem>
</Tabs>



---

---
title: "retail_prices"
description: "Get retail prices for common items"
keywords:
- economy
- retail_prices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/retail_prices - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get retail prices for common items.


Examples
--------

```python
from openbb import obb
obb.economy.retail_prices(provider='fred')
# The price of eggs in the northeast census region.
obb.economy.retail_prices(item='eggs', region=northeast, provider='fred')
# The percentage change in price, from one-year ago, of various meats, US City Average.
obb.economy.retail_prices(item='meats', transform=pc1, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`item`**: `str`

The item or basket of items to query.

 • *Optional:* `True`

---

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`item`**: `Literal['beverages', 'cereals', 'dairy', 'fuel', 'produce', 'meats', 'bacon', 'bananas', 'beans', 'beef', 'beer', 'bread', 'butter', 'cheese', 'chicken', 'chops', 'coffee', 'cookies', 'corn', 'diesel', 'eggs', 'electricity', 'flour', 'gas', 'gasoline', 'grapefruit', 'ground_beef', 'ham', 'ice_cream', 'lemons', 'lettuce', 'malt_beverages', 'milk', 'oil', 'orange_juice', 'oranges', 'pork', 'potato_chips', 'potatoes', 'rice', 'soft_drinks', 'spaghetti', 'steak', 'strawberries', 'sugar', 'tomatoes', 'unleaded', 'usda', 'vodka', 'wine', 'yogurt']`

The item or basket of items to query.

 • *Default:* `fuel`

 • *Optional:* `True`

---

**`country`**: `Literal['united_states']`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`region`**: `Literal['all_city', 'northeast', 'midwest', 'south', 'west']`

The region to get average price levels for.

 • *Default:* `all_city`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter', 'monthly']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RetailPrices]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`description`**: `str`

Description of the item.

**`value`**: `float`

Price, or change in price, per unit.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`country`**: `str`



**`description`**: `str`

Description of the item.

**`value`**: `float`

Price, or change in price, per unit.

</TabItem>
</Tabs>



---

---
title: "risk_premium"
description: "Learn about Historical Market Risk Premium and the obb.economy.risk_premium  function. Explore the parameters, returns, and data available, including results,  warnings, chart, metadata, country, continent, total equity risk premium, and country  risk premium."
keywords:
- Historical Market Risk Premium
- obb.economy.risk_premium
- parameters
- provider
- returns
- OBBject
- results
- RiskPremium
- warnings
- chart
- metadata
- data
- country
- continent
- total equity risk premium
- country risk premium
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/risk_premium - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Market Risk Premium by country.


Examples
--------

```python
from openbb import obb
obb.economy.risk_premium(provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fmp' label='fmp'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RiskPremium]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

Market country.

**`continent`**: `str`

Continent of the country.

**`total_equity_risk_premium`**: `Annotated[float, Gt(gt=0)]`

Total equity risk premium for the country.

**`country_risk_premium`**: `Annotated[float, Ge(ge=0)]`

Country-specific risk premium.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`country`**: `str`

Market country.

**`continent`**: `str`

Continent of the country.

**`total_equity_risk_premium`**: `Annotated[float, Gt(gt=0)]`

Total equity risk premium for the country.

**`country_risk_premium`**: `Annotated[float, Ge(ge=0)]`

Country-specific risk premium.

</TabItem>
</Tabs>



---

---
title: "share_price_index"
description: "Get the Share Price Index by country from the OECD Short-Term Economics Statistics"
keywords:
- economy
- share_price_index
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/share_price_index - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the Share Price Index by country from the OECD Short-Term Economics Statistics.


Examples
--------

```python
from openbb import obb
obb.economy.share_price_index(provider='oecd')
# Multiple countries can be passed in as a list.
obb.economy.share_price_index(country='united_kingdom,germany', frequency='quarter', provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SharePriceIndex]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`



**`value`**: `float`

Share price index value.

</TabItem>
</Tabs>



---

---
title: "short_term_interest_rate"
description: "Get Short-term interest rates"
keywords:
- economy
- short_term_interest_rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/short_term_interest_rate - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint will be removed in a future version. Use, `/economy/interest_rates`, instead. Deprecated in OpenBB Platform V4.3 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Short-term interest rates.

They are the rates at which short-term borrowings are effected between
financial institutions or the rate at which short-term government paper is issued or traded in the market.

Short-term interest rates are generally averages of daily rates, measured as a percentage.
Short-term interest rates are based on three-month money market rates where available.
Typical standardised names are "money market rate" and "treasury bill rate".


Examples
--------

```python
from openbb import obb
obb.economy.short_term_interest_rate(provider='oecd')
obb.economy.short_term_interest_rate(country=all, frequency=quarterly, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['belgium', 'bulgaria', 'brazil', 'ireland', 'mexico', 'indonesia', 'new_zealand', 'japan', 'united_kingdom', 'france', 'chile', 'canada', 'netherlands', 'united_states', 'south_korea', 'norway', 'austria', 'south_africa', 'denmark', 'switzerland', 'hungary', 'luxembourg', 'australia', 'germany', 'sweden', 'iceland', 'turkey', 'greece', 'israel', 'czech_republic', 'latvia', 'slovenia', 'poland', 'estonia', 'lithuania', 'portugal', 'costa_rica', 'slovakia', 'finland', 'spain', 'romania', 'russia', 'euro_area19', 'colombia', 'italy', 'india', 'china', 'croatia', 'all']`

Country to get interest rate for.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarterly', 'annual']`

Frequency to get interest rate for for.

 • *Default:* `monthly`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[STIR]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`value`**: `float`

Interest rate (given as a whole number, i.e 10=10%)

**`country`**: `str`

Country for which interest rate is given

</TabItem>
</Tabs>



---

---
title: "bls_search"
description: "Search BLS surveys by category and keyword or phrase to identify BLS series IDs"
keywords:
- economy
- survey
- bls_search
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/bls_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search BLS surveys by category and keyword or phrase to identify BLS series IDs.


Examples
--------

```python
from openbb import obb
obb.economy.survey.bls_search(provider='bls', category=cpi)
# Use semi-colon to separate multiple queries as an & operator.
obb.economy.survey.bls_search(provider='bls', category=cpi, query='seattle;gasoline')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

The search word(s). Use semi-colon to separate multiple queries as an & operator.

 • *Optional:* `True`

</TabItem>

<TabItem value='bls' label='bls'>

**`query`**: `str`

The search word(s). Use semi-colon to separate multiple queries as an & operator.

 • *Optional:* `True`

---

**`category`**: `Literal['cpi', 'pce', 'ppi', 'ip', 'jolts', 'nfp', 'cps', 'lfs', 'wages', 'ec', 'sla', 'bed', 'tu']`

<details>
<summary mdxType="summary">Description</summary>

The category of BLS survey to search within.<br/>
        An empty search query will return all series within the category. Options are:<br/>
        <br/>
    cpi - Consumer Price Index<br/>
        <br/>
    pce - Personal Consumption Expenditure<br/>
        <br/>
    ppi - Producer Price Index<br/>
        <br/>
    ip - Industry Productivity<br/>
        <br/>
    jolts - Job Openings and Labor Turnover Survey<br/>
        <br/>
    nfp - Nonfarm Payrolls<br/>
        <br/>
    cps - Current Population Survey<br/>
        <br/>
    lfs - Labor Force Statistics<br/>
        <br/>
    wages - Wages<br/>
        <br/>
    ec - Employer Costs<br/>
        <br/>
    sla - State and Local Area Employment<br/>
        <br/>
    bed - Business Employment Dynamics<br/>
        <br/>
    tu - Time Use

</details>

 • *Optional:* `False`

---

**`include_extras`**: `bool`

Include additional information in the search results. Extra fields returned are metadata and vary by survey. Fields are undefined strings that typically have names ending with '_code'.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_code_map`**: `bool`

When True, includes the complete code map for eaçh survey in the category, returned separately as a nested JSON to the `extras['results_metadata']` property of the response. Example content is the NAICS industry map for PPI surveys. Each code is a value within the 'symbol' of the time series.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BlsSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['bls']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

The title of the series.

**`survey_name`**: `str`

The name of the survey.

</TabItem>

<TabItem value='bls' label='bls'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

The title of the series.

**`survey_name`**: `str`

The name of the survey.

</TabItem>
</Tabs>



---

---
title: "bls_series"
description: "Get time series data for one, or more, BLS series IDs"
keywords:
- economy
- survey
- bls_series
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/bls_series - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get time series data for one, or more, BLS series IDs.


Examples
--------

```python
from openbb import obb
obb.economy.survey.bls_series(provider='bls', symbol='CES0000000001')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): bls.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='bls' label='bls'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): bls.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`calculations`**: `bool`

Include calculations in the response, if available. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

---

**`annual_average`**: `bool`

Include annual averages in the response, if available. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

---

**`aspects`**: `bool`

Include all aspects associated with a data point for a given BLS series ID, if available. Returned with the series metadata, under `extras` of the response object. Default is False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BlsSeries]`

Serializable results.

---

**`provider`**: `Optional[Literal['bls']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series.

**`value`**: `float`

Observation value for the symbol and date.

</TabItem>

<TabItem value='bls' label='bls'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`title`**: `str`

Title of the series.

**`value`**: `float`

Observation value for the symbol and date.

**`change_1M`**: `float`

One month change in value.

**`change_3M`**: `float`

Three month change in value.

**`change_6M`**: `float`

Six month change in value.

**`change_12M`**: `float`

One year change in value.

**`change_percent_1M`**: `float`

One month change in percent.

**`change_percent_3M`**: `float`

Three month change in percent.

**`change_percent_6M`**: `float`

Six month change in percent.

**`change_percent_12M`**: `float`

One year change in percent.

**`latest`**: `bool`

Latest value indicator.

**`footnotes`**: `str`

Footnotes accompanying the value.

</TabItem>
</Tabs>



---

---
title: "economic_conditions_chicago"
description: "Get The Survey Of Economic Conditions For The Chicago Region"
keywords:
- economy
- survey
- economic_conditions_chicago
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/economic_conditions_chicago - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get The Survey Of Economic Conditions For The Chicago Region.


Examples
--------

```python
from openbb import obb
obb.economy.survey.economic_conditions_chicago(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SurveyOfEconomicConditionsChicago]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`activity_index`**: `float`

Activity Index.

**`one_year_outlook`**: `float`

One Year Outlook Index.

**`manufacturing_activity`**: `float`

Manufacturing Activity Index.

**`non_manufacturing_activity`**: `float`

Non-Manufacturing Activity Index.

**`capital_expenditures_expectations`**: `float`

Capital Expenditures Expectations Index.

**`hiring_expectations`**: `float`

Hiring Expectations Index.

**`current_hiring`**: `float`

Current Hiring Index.

**`labor_costs`**: `float`

Labor Costs Index.

**`non_labor_costs`**: `float`

Non-Labor Costs Index.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`activity_index`**: `float`

Activity Index.

**`one_year_outlook`**: `float`

One Year Outlook Index.

**`manufacturing_activity`**: `float`

Manufacturing Activity Index.

**`non_manufacturing_activity`**: `float`

Non-Manufacturing Activity Index.

**`capital_expenditures_expectations`**: `float`

Capital Expenditures Expectations Index.

**`hiring_expectations`**: `float`

Hiring Expectations Index.

**`current_hiring`**: `float`

Current Hiring Index.

**`labor_costs`**: `float`

Labor Costs Index.

**`non_labor_costs`**: `float`

Non-Labor Costs Index.

</TabItem>
</Tabs>



---

# Survey

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="manufacturing outlook ny" description="Get the Empire State Manufacturing Survey" url="/platform/reference/economy/survey/manufacturing_outlook_ny" />
<ReferenceCard title="sloos" description="Get Senior Loan Officers Opinion Survey" url="/platform/reference/economy/survey/sloos" />
<ReferenceCard title="manufacturing outlook texas" description="Get The Manufacturing Outlook Survey For The Texas Region" url="/platform/reference/economy/survey/manufacturing_outlook_texas" />
<ReferenceCard title="university of michigan" description="Get University of Michigan Consumer Sentiment and Inflation Expectations Surveys" url="/platform/reference/economy/survey/university_of_michigan" />
<ReferenceCard title="bls search" description="Search BLS surveys by category and keyword or phrase to identify BLS series IDs" url="/platform/reference/economy/survey/bls_search" />
<ReferenceCard title="bls series" description="Get time series data for one, or more, BLS series IDs" url="/platform/reference/economy/survey/bls_series" />
<ReferenceCard title="economic conditions chicago" description="Get The Survey Of Economic Conditions For The Chicago Region" url="/platform/reference/economy/survey/economic_conditions_chicago" />
<ReferenceCard title="nonfarm payrolls" description="Get Nonfarm Payrolls Survey" url="/platform/reference/economy/survey/nonfarm_payrolls" />
</ul>



---

---
title: "manufacturing_outlook_ny"
description: "Get the Empire State Manufacturing Survey"
keywords:
- economy
- survey
- manufacturing_outlook_ny
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/manufacturing_outlook_ny - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the Empire State Manufacturing Survey.

It is a monthly survey of manufacturers in New York State conducted by the Federal Reserve Bank of New York.

Participants from across the state in a variety of industries respond to a questionnaire
and report the change in a variety of indicators from the previous month.

Respondents also state the likely direction of these same indicators six months ahead.
April 2002 is the first report, although survey data date back to July 2001.

The survey is sent on the first day of each month to the same pool of about 200
manufacturing executives in New York State, typically the president or CEO.

About 100 responses are received. Most are completed by the tenth, although surveys are accepted until the fifteenth.


Examples
--------

```python
from openbb import obb
obb.economy.survey.manufacturing_outlook_ny(provider='fred')
obb.economy.survey.manufacturing_outlook_ny(topic=hours_worked,new_orders, transform=pc1, provider='fred', seasonally_adjusted=True)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`topic`**: `Union[Union[Literal['business_outlook', 'hours_worked', 'employment', 'inventories', 'prices_received', 'prices_paid', 'capex', 'unfilled_orders', 'new_orders', 'shipments', 'delivery_times'], str], list[Union[Literal['business_outlook', 'hours_worked', 'employment', 'inventories', 'prices_received', 'prices_paid', 'capex', 'unfilled_orders', 'new_orders', 'shipments', 'delivery_times'], str]]]`

The topic for the survey response. Multiple items allowed for provider(s): fred.

 • *Default:* `new_orders`

 • *Optional:* `True`

---

**`seasonally_adjusted`**: `bool`

Whether the data is seasonally adjusted, default is False

 • *Default:* `False`

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        avg = Average<br/>
        sum = Sum<br/>
        eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        None = No transformation<br/>
        chg = Change<br/>
        ch1 = Change from Year Ago<br/>
        pch = Percent Change<br/>
        pc1 = Percent Change from Year Ago<br/>
        pca = Compounded Annual Rate of Change<br/>
        cch = Continuously Compounded Rate of Change<br/>
        cca = Continuously Compounded Annual Rate of Change<br/>
        log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ManufacturingOutlookNY]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>
</Tabs>



---

---
title: "manufacturing_outlook_texas"
description: "Get The Manufacturing Outlook Survey For The Texas Region"
keywords:
- economy
- survey
- manufacturing_outlook_texas
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/manufacturing_outlook_texas - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get The Manufacturing Outlook Survey For The Texas Region.


Examples
--------

```python
from openbb import obb
obb.economy.survey.manufacturing_outlook_texas(provider='fred')
obb.economy.survey.manufacturing_outlook_texas(topic=business_outlook,new_orders, transform=pc1, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`topic`**: `Union[Union[Literal['business_activity', 'business_outlook', 'capex', 'prices_paid', 'production', 'inventory', 'new_orders', 'new_orders_growth', 'unfilled_orders', 'shipments', 'delivery_time', 'employment', 'wages', 'hours_worked'], str], list[Union[Literal['business_activity', 'business_outlook', 'capex', 'prices_paid', 'production', 'inventory', 'new_orders', 'new_orders_growth', 'unfilled_orders', 'shipments', 'delivery_time', 'employment', 'wages', 'hours_worked'], str]]]`

The topic for the survey response. Multiple items allowed for provider(s): fred.

 • *Default:* `new_orders_growth`

 • *Optional:* `True`

---

**`frequency`**: `Literal['annual', 'quarter']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ManufacturingOutlookTexas]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`topic`**: `str`

Topic of the survey response.

**`diffusion_index`**: `float`

Diffusion Index.

**`percent_reporting_increase`**: `float`

Percent of respondents reporting an increase over the last month.

**`percent_reporting_decrease`**: `float`

Percent of respondents reporting a decrease over the last month.

**`percent_reporting_no_change`**: `float`

Percent of respondents reporting no change over the last month.

</TabItem>
</Tabs>



---

---
title: "nonfarm_payrolls"
description: "Get Nonfarm Payrolls Survey"
keywords:
- economy
- survey
- nonfarm_payrolls
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/nonfarm_payrolls - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Nonfarm Payrolls Survey.


Examples
--------

```python
from openbb import obb
obb.economy.survey.nonfarm_payrolls(provider='fred')
obb.economy.survey.nonfarm_payrolls(category=avg_hours, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Default is the latest report. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`category`**: `Literal['employees_nsa', 'employees_sa', 'employees_production_and_nonsupervisory', 'employees_women', 'employees_women_percent', 'avg_hours', 'avg_hours_production_and_nonsupervisory', 'avg_hours_overtime', 'avg_hours_overtime_production_and_nonsupervisory', 'avg_earnings_hourly', 'avg_earnings_hourly_production_and_nonsupervisory', 'avg_earnings_weekly', 'avg_earnings_weekly_production_and_nonsupervisory', 'index_weekly_hours', 'index_weekly_hours_production_and_nonsupervisory', 'index_weekly_payrolls', 'index_weekly_payrolls_production_and_nonsupervisory']`

The category to query.

 • *Default:* `employees_nsa`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[NonFarmPayrolls]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`



**`name`**: `str`

The name of the series.

**`element_id`**: `str`

The element id in the parent/child relationship.

**`parent_id`**: `str`

The parent id in the parent/child relationship.

**`children`**: `str`

The element_id of each child, as a comma-separated string.

**`level`**: `int`

The indentation level of the element.

</TabItem>
</Tabs>



---

---
title: "sloos"
description: "Get Senior Loan Officers Opinion Survey"
keywords:
- economy
- survey
- sloos
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/sloos - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Senior Loan Officers Opinion Survey.


Examples
--------

```python
from openbb import obb
obb.economy.survey.sloos(provider='fred')
obb.economy.survey.sloos(category=credit_card, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`category`**: `Literal['spreads', 'consumer', 'auto', 'credit_card', 'firms', 'mortgage', 'commercial_real_estate', 'standards', 'demand', 'foreign_banks']`

Category of survey response.

 • *Default:* `spreads`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SeniorLoanOfficerSurvey]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Survey value.

**`title`**: `str`

Survey title.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Survey value.

**`title`**: `str`

Survey title.

</TabItem>
</Tabs>



---

---
title: "university_of_michigan"
description: "Get University of Michigan Consumer Sentiment and Inflation Expectations Surveys"
keywords:
- economy
- survey
- university_of_michigan
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/survey/university_of_michigan - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get University of Michigan Consumer Sentiment and Inflation Expectations Surveys.


Examples
--------

```python
from openbb import obb
obb.economy.survey.university_of_michigan(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['quarter', 'annual']`

Frequency aggregation to convert monthly data to lower frequency. None is monthly.

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[UniversityOfMichigan]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`consumer_sentiment`**: `float`

Index of the results of the University of Michigan's monthly Survey of Consumers, which is used to estimate future spending and saving.  (1966:Q1=100).

**`inflation_expectation`**: `float`

Median expected price change next 12 months, Surveys of Consumers.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`consumer_sentiment`**: `float`

Index of the results of the University of Michigan's monthly Survey of Consumers, which is used to estimate future spending and saving.  (1966:Q1=100).

**`inflation_expectation`**: `float`

Median expected price change next 12 months, Surveys of Consumers.

</TabItem>
</Tabs>



---

---
title: "unemployment"
description: "Get global unemployment data"
keywords:
- economy
- unemployment
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="economy/unemployment - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get global unemployment data.


Examples
--------

```python
from openbb import obb
obb.economy.unemployment(provider='oecd')
obb.economy.unemployment(country='all', frequency='quarter', provider='oecd')
# Demographics for the statistics are selected with the `age` parameter.
obb.economy.unemployment(country='all', frequency='quarter', age=total, provider='oecd')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `Union[str, list[str]]`

The country to get data. Multiple items allowed for provider(s): oecd.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='oecd' label='oecd'>

**`country`**: `str`

The country to get data.

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`frequency`**: `Literal['monthly', 'quarter', 'annual']`

The frequency of the data.

 • *Default:* `monthly`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`sex`**: `Literal['total', 'male', 'female']`

Sex to get unemployment for.

 • *Default:* `total`

 • *Optional:* `True`

---

**`age`**: `Literal['total', '15-24', '25+']`

Age group to get unemployment for. Total indicates 15 years or over

 • *Default:* `total`

 • *Optional:* `True`

---

**`seasonal_adjustment`**: `bool`

Whether to get seasonally adjusted unemployment. Defaults to False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Unemployment]`

Serializable results.

---

**`provider`**: `Optional[Literal['oecd']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which unemployment rate is given

**`value`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>

<TabItem value='oecd' label='oecd'>

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country for which unemployment rate is given

**`value`**: `float`

Unemployment rate, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "dividend"
description: "Get upcoming and historical dividend data with the OBB.equity.calendar.dividend  method. This method allows you to retrieve dividend information such as dates, amounts,  and provider details. It also provides warnings, charts, and metadata for further  analysis."
keywords:
- dividend calendar
- upcoming dividends
- historical dividends
- dividend data
- dividend schedule
- dividend information
- dividend dates
- dividend amounts
- dividend provider
- dividend warnings
- dividend chart
- dividend metadata
- ex-dividend date
- record date
- payment date
- declaration date
- dividend symbol
- dividend name
- dividend adjusted amount
- dividend label
- annualized dividend amount
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/calendar/dividend - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical and upcoming dividend payments. Includes dividend amount, ex-dividend and payment dates.


Examples
--------

```python
from openbb import obb
obb.equity.calendar.dividend(provider='fmp')
# Get dividend calendar for specific dates.
obb.equity.calendar.dividend(start_date='2024-02-01', end_date='2024-02-07', provider='nasdaq')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CalendarDividend]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'nasdaq']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

**`adjusted_amount`**: `float`

The adjusted-dividend amount.

**`label`**: `str`

Ex-dividend date formatted for display.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`amount`**: `float`

The dividend amount per share.

**`name`**: `str`

Name of the entity.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

**`annualized_amount`**: `float`

The indicated annualized dividend amount.

</TabItem>
</Tabs>



---

---
title: "earnings"
description: "Learn how to retrieve upcoming and historical earnings calendar data  using the OBB.equity.calendar.earnings Python function. The function allows you  to specify symbols, limit the number of data entries, and choose a data provider.  The returned data includes EPS, revenue, and other important details for the specified  symbols and dates."
keywords:
- earnings calendar
- upcoming earnings
- historical earnings
- Python function
- earnings data retrieval
- symbol
- limit
- provider
- data entries
- chart
- metadata
- data
- EPS
- revenue
- estimated EPS
- estimated revenue
- date
- time
- updated from date
- fiscal date ending
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/calendar/earnings - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical and upcoming company earnings releases. Includes earnings per share (EPS) and revenue data.


Examples
--------

```python
from openbb import obb
obb.equity.calendar.earnings(provider='fmp')
# Get earnings calendar for specific dates.
obb.equity.calendar.earnings(start_date='2024-02-01', end_date='2024-02-07', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`country`**: `Literal['us', 'ca']`

The country to get calendar data for.

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CalendarEarnings]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'nasdaq', 'seeking_alpha', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`eps_actual`**: `float`

The actual earnings per share announced.

**`revenue_actual`**: `float`

The actual reported revenue.

**`revenue_consensus`**: `float`

The revenue forecast consensus.

**`period_ending`**: `date`

The fiscal period end date.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`updated_date`**: `date`

The date the data was updated last.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`eps_actual`**: `float`

The actual earnings per share (USD) announced.

**`surprise_percent`**: `float`

The earnings surprise as normalized percentage points.

**`num_estimates`**: `int`

The number of analysts providing estimates for the consensus.

**`period_ending`**: `str`

The fiscal period end date.

**`previous_report_date`**: `date`

The previous report date for the same period last year.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`market_cap`**: `int`

The market cap (USD) of the reporting entity.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The analyst conesus earnings-per-share estimate.

**`market_cap`**: `float`

Market cap of the entity.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`exchange`**: `str`

The primary trading exchange.

**`sector_id`**: `int`

The Seeking Alpha Sector ID.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`report_date`**: `date`

The date of the earnings report.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company's name.

**`eps_previous`**: `float`

The earnings-per-share from the same previously reported period.

**`eps_consensus`**: `float`

The consensus estimated EPS in dollars.

**`eps_actual`**: `float`

The actual EPS in dollars.

**`eps_surprise`**: `float`

The EPS surprise in dollars.

**`surprise_percent`**: `float`

The EPS surprise as a normalized percent.

**`reporting_time`**: `str`

The time of the report - i.e., before or after market.

</TabItem>
</Tabs>



---

---
title: "events"
description: "Get historical and upcoming company events, such as Investor Day, Conference Call, Earnings Release"
keywords:
- equity
- calendar
- events
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/calendar/events - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical and upcoming company events, such as Investor Day, Conference Call, Earnings Release.


Examples
--------

```python
from openbb import obb
obb.equity.calendar.events(provider='fmp')
# Get company events calendar for specific dates.
obb.equity.calendar.events(start_date='2024-02-01', end_date='2024-02-07', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CalendarEvents]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data. The date of the event.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data. The date of the event.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the symbol is listed.

**`time`**: `str`

The estimated time of the event, local to the exchange.

**`timing`**: `str`

The timing of the event - e.g. before, during, or after market hours.

**`description`**: `str`

The title of the event.

**`url`**: `str`

The URL to the press release for the announcement.

**`announcement_date`**: `date`

The date when the event was announced.

</TabItem>
</Tabs>



---

# Calendar

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="splits" description="Get historical and upcoming stock split operations" url="/platform/reference/equity/calendar/splits" />
<ReferenceCard title="ipo" description="Get historical and upcoming initial public offerings (IPOs)" url="/platform/reference/equity/calendar/ipo" />
<ReferenceCard title="dividend" description="Get historical and upcoming dividend payments" url="/platform/reference/equity/calendar/dividend" />
<ReferenceCard title="events" description="Get historical and upcoming company events, such as Investor Day, Conference Call, Earnings Release" url="/platform/reference/equity/calendar/events" />
<ReferenceCard title="earnings" description="Get historical and upcoming company earnings releases" url="/platform/reference/equity/calendar/earnings" />
</ul>



---

---
title: "ipo"
description: "Access the Upcoming and Historical IPO Calendars and retrieve IPO information  using Python."
keywords:
- Upcoming IPO Calendar
- Historical IPO Calendar
- Python function
- equity.calendar.ipo
- symbol
- start_date
- end_date
- limit
- provider
- intrinio
- nasdaq
- status
- min_value
- max_value
- OBBject
- results
- CalendarIpo
- warnings
- Chart
- Metadata
- data
- ipo_date
- status
- exchange
- offer_amount
- share_price
- share_price_lowest
- share_price_highest
- share_count
- share_count_lowest
- share_count_highest
- announcement_url
- sec_report_url
- open_price
- close_price
- volume
- day_change
- week_change
- month_change
- id
- company
- security
- name
- expected_price_date
- filed_date
- withdraw_date
- deal_status
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/calendar/ipo - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical and upcoming initial public offerings (IPOs).


Examples
--------

```python
from openbb import obb
obb.equity.calendar.ipo(provider='intrinio')
obb.equity.calendar.ipo(limit=100, provider='nasdaq')
# Get all IPOs available.
obb.equity.calendar.ipo(provider='intrinio')
# Get IPOs for specific dates.
obb.equity.calendar.ipo(start_date='2024-02-01', end_date='2024-02-07', provider='nasdaq')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`status`**: `Literal['upcoming', 'priced', 'withdrawn']`

Status of the IPO. [upcoming, priced, or withdrawn]

 • *Optional:* `True`

---

**`min_value`**: `int`

Return IPOs with an offer dollar amount greater than the given amount.

 • *Optional:* `True`

---

**`max_value`**: `int`

Return IPOs with an offer dollar amount less than the given amount.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`status`**: `Literal['upcoming', 'priced', 'filed', 'withdrawn']`

The status of the IPO.

 • *Default:* `priced`

 • *Optional:* `True`

---

**`is_spo`**: `bool`

If True, returns data for secondary public offerings (SPOs).

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CalendarIpo]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio', 'nasdaq']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

**`status`**: `Literal['upcoming', 'priced', 'withdrawn']`

The status of the IPO. Upcoming IPOs have not taken place yet but are expected to. Priced IPOs have taken place. Withdrawn IPOs were expected to take place, but were subsequently withdrawn.

**`exchange`**: `str`

The acronym of the stock exchange that the company is going to trade publicly on. Typically NYSE or NASDAQ.

**`offer_amount`**: `float`

The total dollar amount of shares offered in the IPO. Typically this is share price * share count

**`share_price`**: `float`

The price per share at which the IPO was offered.

**`share_price_lowest`**: `float`

The expected lowest price per share at which the IPO will be offered. Before an IPO is priced, companies typically provide a range of prices per share at which they expect to offer the IPO (typically available for upcoming IPOs).

**`share_price_highest`**: `float`

The expected highest price per share at which the IPO will be offered. Before an IPO is priced, companies typically provide a range of prices per share at which they expect to offer the IPO (typically available for upcoming IPOs).

**`share_count`**: `int`

The number of shares offered in the IPO.

**`share_count_lowest`**: `int`

The expected lowest number of shares that will be offered in the IPO. Before an IPO is priced, companies typically provide a range of shares that they expect to offer in the IPO (typically available for upcoming IPOs).

**`share_count_highest`**: `int`

The expected highest number of shares that will be offered in the IPO. Before an IPO is priced, companies typically provide a range of shares that they expect to offer in the IPO (typically available for upcoming IPOs).

**`announcement_url`**: `str`

The URL to the company's announcement of the IPO

**`sec_report_url`**: `str`

The URL to the company's S-1, S-1/A, F-1, or F-1/A SEC filing, which is required to be filed before an IPO takes place.

**`open_price`**: `float`

The opening price at the beginning of the first trading day (only available for priced IPOs).

**`close_price`**: `float`

The closing price at the end of the first trading day (only available for priced IPOs).

**`volume`**: `int`

The volume at the end of the first trading day (only available for priced IPOs).

**`day_change`**: `float`

The percentage change between the open price and the close price on the first trading day (only available for priced IPOs).

**`week_change`**: `float`

The percentage change between the open price on the first trading day and the close price approximately a week after the first trading day (only available for priced IPOs).

**`month_change`**: `float`

The percentage change between the open price on the first trading day and the close price approximately a month after the first trading day (only available for priced IPOs).

**`id`**: `str`

The Intrinio ID of the IPO.

**`company`**: `IntrinioCompany`

The company that is going public via the IPO.

**`security`**: `IntrinioSecurity`

The primary Security for the Company that is going public via the IPO

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`ipo_date`**: `date`

The date of the IPO, when the stock first trades on a major exchange.

**`name`**: `str`

The name of the company.

**`offer_amount`**: `float`

The dollar value of the shares offered.

**`share_count`**: `int`

The number of shares offered.

**`expected_price_date`**: `date`

The date the pricing is expected.

**`filed_date`**: `date`

The date the IPO was filed.

**`withdraw_date`**: `date`

The date the IPO was withdrawn.

**`deal_status`**: `str`

The status of the deal.

</TabItem>
</Tabs>



---

---
title: "splits"
description: "Get historical and upcoming stock split operations"
keywords:
- equity
- calendar
- splits
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/calendar/splits - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical and upcoming stock split operations.


Examples
--------

```python
from openbb import obb
obb.equity.calendar.splits(provider='fmp')
# Get stock splits calendar for specific dates.
obb.equity.calendar.splits(start_date='2024-02-01', end_date='2024-02-07', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CalendarSplits]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`label`**: `str`

Label of the stock splits.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`numerator`**: `float`

Numerator of the stock splits.

**`denominator`**: `float`

Denominator of the stock splits.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`label`**: `str`

Label of the stock splits.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`numerator`**: `float`

Numerator of the stock splits.

**`denominator`**: `float`

Denominator of the stock splits.

</TabItem>
</Tabs>



---

---
title: "company_facts"
description: "Compare reported company facts and fundamental data points"
keywords:
- equity
- compare
- company_facts
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/compare/company_facts - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Compare reported company facts and fundamental data points.


Examples
--------

```python
from openbb import obb
obb.equity.compare.company_facts(provider='sec')
obb.equity.compare.company_facts(provider='sec', fact='PaymentsForRepurchaseOfCommonStock', year=2023)
obb.equity.compare.company_facts(provider='sec', symbol='NVDA,AAPL,AMZN,MSFT,GOOG,SMCI', fact='RevenueFromContractWithCustomerExcludingAssessedTax', year=2024)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): sec.

 • *Optional:* `True`

---

**`fact`**: `str`

The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): sec.

 • *Optional:* `True`

---

**`fact`**: `Literal['AccountsPayableCurrent', 'AccountsReceivableNet', 'AccountsReceivableNetCurrent', 'AccrualForTaxesOtherThanIncomeTaxesCurrent', 'AccrualForTaxesOtherThanIncomeTaxesCurrentAndNoncurrent', 'AccruedIncomeTaxesCurrent', 'AccruedIncomeTaxesNoncurrent', 'AccruedInsuranceCurrent', 'AccruedLiabilitiesCurrent', 'AccumulatedDepreciationDepletionAndAmortizationPropertyPlantAndEquipment', 'AccumulatedOtherComprehensiveIncomeLossNetOfTax', 'AcquisitionsNetOfCashAcquiredAndPurchasesOfIntangibleAndOtherAssets', 'AdjustmentsToAdditionalPaidInCapitalSharebasedCompensationRequisiteServicePeriodRecognitionValue', 'AdvertisingExpense', 'AllocatedShareBasedCompensationExpense', 'AntidilutiveSecuritiesExcludedFromComputationOfEarningsPerShareAmount', 'Assets', 'AssetsCurrent', 'AssetsNoncurrent', 'NoncurrentAssets', 'AssetImpairmentCharges', 'BuildingsAndImprovementsGross', 'CapitalLeaseObligationsCurrent', 'CapitalLeaseObligationsNoncurrent', 'Cash', 'CashAndCashEquivalentsAtCarryingValue', 'CashCashEquivalentsAndShortTermInvestments', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsIncludingDisposalGroupAndDiscontinuedOperations', 'CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsPeriodIncreaseDecreaseIncludingExchangeRateEffect', 'CommitmentsAndContingencies', 'CommercialPaper', 'CommonStockDividendsPerShareDeclared', 'CommonStockDividendsPerShareCashPaid', 'CommonStocksIncludingAdditionalPaidInCapital', 'ComprehensiveIncomeNetOfTax', 'ComprehensiveIncomeNetOfTaxAttributableToNoncontrollingInterest', 'ComprehensiveIncomeNetOfTaxIncludingPortionAttributableToNoncontrollingInterest', 'ConstructionInProgressGross', 'ContractWithCustomerAssetNet', 'ContractWithCustomerLiability', 'ContractWithCustomerLiabilityCurrent', 'ContractWithCustomerLiabilityNoncurrent', 'CostOfRevenue', 'CostOfGoodsAndServicesSold', 'CurrentFederalTaxExpenseBenefit', 'CurrentForeignTaxExpenseBenefit', 'CurrentIncomeTaxExpenseBenefit', 'CurrentStateAndLocalTaxExpenseBenefit', 'DebtInstrumentFaceAmount', 'DebtInstrumentFairValue', 'DebtLongtermAndShorttermCombinedAmount', 'DeferredFederalIncomeTaxExpenseBenefit', 'DeferredForeignIncomeTaxExpenseBenefit', 'DeferredIncomeTaxExpenseBenefit', 'DeferredIncomeTaxesAndTaxCredits', 'DeferredIncomeTaxLiabilities', 'DeferredIncomeTaxLiabilitiesNet', 'DeferredRevenue', 'DeferredTaxAssetsGross', 'DeferredTaxAssetsLiabilitiesNet', 'DeferredTaxAssetsNet', 'DeferredTaxLiabilities', 'DefinedContributionPlanCostRecognized', 'Depreciation', 'DepreciationAmortizationAndAccretionNet', 'DepreciationAmortizationAndOther', 'DepreciationAndAmortization', 'DepreciationDepletionAndAmortization', 'DerivativeCollateralObligationToReturnCash', 'DerivativeCollateralRightToReclaimCash', 'DerivativeFairValueOfDerivativeNet', 'DerivativeLiabilityCollateralRightToReclaimCashOffset', 'DerivativeNotionalAmount', 'Dividends', 'DividendsCash', 'DividendsPayableAmountPerShare', 'DividendsPayableCurrent', 'DistributedEarnings', 'EarningsPerShareBasic', 'EarningsPerShareDiluted', 'EffectOfExchangeRateOnCashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents', 'EffectOfExchangeRateOnCashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsIncludingDisposalGroupAndDiscontinuedOperations', 'EmployeeRelatedLiabilitiesCurrent', 'EmployeeRelatedLiabilitiesCurrentAndNoncurrent', 'EmployeeServiceShareBasedCompensationTaxBenefitFromCompensationExpense', 'FinanceLeaseInterestExpense', 'FinanceLeaseInterestPaymentOnLiability', 'FinanceLeaseLiability', 'FinanceLeaseLiabilityCurrent', 'FinanceLeaseLiabilityNoncurrent', 'FinanceLeaseLiabilityPaymentsDue', 'FinanceLeaseLiabilityPaymentsDueAfterYearFive', 'FinanceLeaseLiabilityPaymentsDueNextTwelveMonths', 'FinanceLeaseLiabilityPaymentsDueYearFive', 'FinanceLeaseLiabilityPaymentsDueYearFour', 'FinanceLeaseLiabilityPaymentsDueYearThree', 'FinanceLeaseLiabilityPaymentsDueYearTwo', 'FinanceLeaseLiabilityPaymentsRemainderOfFiscalYear', 'FinanceLeaseLiabilityUndiscountedExcessAmount', 'FinanceLeasePrincipalPayments', 'FinanceLeaseRightOfUseAsset', 'FinancingReceivableAllowanceForCreditLosses', 'FiniteLivedIntangibleAssetsNet', 'FixturesAndEquipmentGross', 'GainLossOnInvestments', 'GainLossOnInvestmentsAndDerivativeInstruments', 'GainLossOnSaleOfBusiness', 'GainsLossesOnExtinguishmentOfDebt', 'GeneralAndAdministrativeExpense', 'Goodwill', 'GrossProfit', 'ImpairmentOfIntangibleAssetsExcludingGoodwill', 'ImpairmentOfIntangibleAssetsIndefinitelivedExcludingGoodwill', 'IncomeLossFromContinuingOperations', 'IncomeLossFromContinuingOperationsAttributableToNoncontrollingEntity', 'IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest', 'IncomeLossFromContinuingOperationsPerBasicShare', 'IncomeLossFromContinuingOperationsPerDilutedShare', 'InterestAndDebtExpense', 'IncomeTaxExpenseBenefit', 'IncomeTaxesPaid', 'IncomeTaxesPaidNet', 'IncreaseDecreaseInAccountsAndOtherReceivables', 'IncreaseDecreaseInAccountsPayable', 'IncreaseDecreaseInAccountsReceivable', 'IncreaseDecreaseInAccruedLiabilities', 'IncreaseDecreaseInAccruedIncomeTaxesPayable', 'IncreaseDecreaseInAccruedTaxesPayable', 'IncreaseDecreaseInContractWithCustomerLiability', 'IncreaseDecreaseInDeferredIncomeTaxes', 'IncreaseDecreaseInInventories', 'IncreaseDecreaseInOtherCurrentAssets', 'IncreaseDecreaseInOtherCurrentLiabilities', 'IncreaseDecreaseInOtherNoncurrentAssets', 'IncreaseDecreaseInOtherNoncurrentLiabilities', 'IncreaseDecreaseInPensionPlanObligations', 'IncrementalCommonSharesAttributableToShareBasedPaymentArrangements', 'InterestExpenseDebt', 'InterestIncomeExpenseNet', 'InterestPaid', 'InterestPaidNet', 'InventoryNet', 'InvestmentIncomeInterest', 'Land', 'LeaseAndRentalExpense', 'LesseeOperatingLeaseLiabilityPaymentsDue', 'LesseeOperatingLeaseLiabilityPaymentsDueAfterYearFive', 'LesseeOperatingLeaseLiabilityPaymentsDueNextTwelveMonths', 'LesseeOperatingLeaseLiabilityPaymentsDueYearFive', 'LesseeOperatingLeaseLiabilityPaymentsDueYearFour', 'LesseeOperatingLeaseLiabilityPaymentsDueYearThree', 'LesseeOperatingLeaseLiabilityPaymentsDueYearTwo', 'LesseeOperatingLeaseLiabilityPaymentsRemainderOfFiscalYear', 'LettersOfCreditOutstandingAmount', 'Liabilities', 'LiabilitiesAndStockholdersEquity', 'LiabilitiesCurrent', 'LineOfCredit', 'LineOfCreditFacilityMaximumBorrowingCapacity', 'LongTermDebt', 'LongTermDebtCurrent', 'LongTermDebtMaturitiesRepaymentsOfPrincipalAfterYearFive', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInNextTwelveMonths', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearFive', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearFour', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearThree', 'LongTermDebtMaturitiesRepaymentsOfPrincipalInYearTwo', 'LongTermDebtMaturitiesRepaymentsOfPrincipalRemainderOfFiscalYear', 'LongTermDebtNoncurrent', 'LongTermInvestments', 'LossContingencyEstimateOfPossibleLoss', 'MachineryAndEquipmentGross', 'MarketableSecuritiesCurrent', 'MarketableSecuritiesNoncurrent', 'MinorityInterest', 'NetCashProvidedByUsedInFinancingActivities', 'NetCashProvidedByUsedInInvestingActivities', 'NetCashProvidedByUsedInOperatingActivities', 'NetIncomeLoss', 'NetIncomeLossAttributableToNoncontrollingInterest', 'NetIncomeLossAttributableToNonredeemableNoncontrollingInterest', 'NetIncomeLossAttributableToRedeemableNoncontrollingInterest', 'NonoperatingIncomeExpense', 'NoninterestIncome', 'NotesReceivableNet', 'OperatingExpenses', 'OperatingIncomeLoss', 'OperatingLeaseCost', 'OperatingLeaseLiability', 'OperatingLeaseLiabilityCurrent', 'OperatingLeaseLiabilityNoncurrent', 'OperatingLeaseRightOfUseAsset', 'OtherAccruedLiabilitiesCurrent', 'OtherAssetsCurrent', 'OtherAssetsNoncurrent', 'OtherComprehensiveIncomeLossAvailableForSaleSecuritiesAdjustmentNetOfTax', 'OtherComprehensiveIncomeLossCashFlowHedgeGainLossAfterReclassificationAndTax', 'OtherComprehensiveIncomeLossDerivativeInstrumentGainLossafterReclassificationandTax', 'OtherComprehensiveIncomeLossDerivativeInstrumentGainLossbeforeReclassificationafterTax', 'OtherComprehensiveIncomeLossForeignCurrencyTransactionAndTranslationAdjustmentNetOfTax', 'OtherComprehensiveIncomeLossNetOfTax', 'OtherComprehensiveIncomeLossNetOfTaxPortionAttributableToParent', 'OtherComprehensiveIncomeUnrealizedHoldingGainLossOnSecuritiesArisingDuringPeriodNetOfTax', 'OtherIncome', 'OtherLiabilitiesCurrent', 'OtherLiabilitiesNoncurrent', 'OtherLongTermDebt', 'OtherNoncashIncomeExpense', 'PaymentsForCapitalImprovements', 'PaymentsOfDividends', 'PaymentsOfDividendsMinorityInterest', 'PaymentsForProceedsFromBusinessesAndInterestInAffiliates', 'PaymentsForProceedsFromOtherInvestingActivities', 'PaymentsForRent', 'PaymentsForRepurchaseOfCommonStock', 'PaymentsOfDebtExtinguishmentCosts', 'PaymentsToAcquireInvestments', 'PaymentsToAcquirePropertyPlantAndEquipment', 'PreferredStockSharesOutstanding', 'PreferredStockValue', 'PrepaidExpenseAndOtherAssetsCurrent', 'PrepaidExpenseCurrent', 'ProceedsFromDebtMaturingInMoreThanThreeMonths', 'ProceedsFromDebtNetOfIssuanceCosts', 'ProceedsFromDivestitureOfBusinesses', 'ProceedsFromInvestments', 'ProceedsFromIssuanceOfCommonStock', 'ProceedsFromIssuanceOfDebt', 'ProceedsFromIssuanceOfLongTermDebt', 'ProceedsFromIssuanceOfUnsecuredDebt', 'ProceedsFromIssuanceOrSaleOfEquity', 'ProceedsFromMaturitiesPrepaymentsAndCallsOfAvailableForSaleSecurities', 'ProceedsFromPaymentsForOtherFinancingActivities', 'ProceedsFromPaymentsToMinorityShareholders', 'ProceedsFromRepaymentsOfShortTermDebt', 'ProceedsFromRepaymentsOfShortTermDebtMaturingInThreeMonthsOrLess', 'ProceedsFromSaleOfPropertyPlantAndEquipment', 'ProceedsFromStockOptionsExercised', 'ProfitLoss', 'PropertyPlantAndEquipmentGross', 'PropertyPlantAndEquipmentNet', 'ReceivablesNetCurrent', 'RedeemableNoncontrollingInterestEquityCarryingAmount', 'RepaymentsOfDebtMaturingInMoreThanThreeMonths', 'RepaymentsOfLongTermDebt', 'ResearchAndDevelopmentExpense', 'RestrictedCash', 'RestrictedCashAndCashEquivalents', 'RestrictedStockExpense', 'RestructuringCharges', 'RetainedEarningsAccumulatedDeficit', 'Revenues', 'RevenueFromContractWithCustomerExcludingAssessedTax', 'SecuredLongTermDebt', 'SellingAndMarketingExpense', 'SellingGeneralAndAdministrativeExpense', 'ShareBasedCompensation', 'ShortTermBorrowings', 'ShortTermInvestments', 'StockholdersEquity', 'StockholdersEquityIncludingPortionAttributableToNoncontrollingInterest', 'StockholdersEquityOther', 'StockIssuedDuringPeriodValueNewIssues', 'StockOptionPlanExpense', 'StockRedeemedOrCalledDuringPeriodValue', 'StockRepurchasedDuringPeriodValue', 'StockRepurchasedAndRetiredDuringPeriodValue', 'TaxesPayableCurrent', 'TradingSecuritiesDebt', 'TreasuryStockAcquiredAverageCostPerShare', 'TreasuryStockSharesAcquired', 'UnrealizedGainLossOnInvestments', 'UnrecognizedTaxBenefits', 'UnsecuredDebt', 'VariableLeaseCost', 'WeightedAverageNumberOfDilutedSharesOutstanding', 'WeightedAverageNumberOfSharesOutstandingBasic', 'WeightedAverageNumberDilutedSharesOutstandingAdjustment']`

Fact or concept from the SEC taxonomy, in UpperCamelCase. Defaults to, 'Revenues'. AAPL, MSFT, GOOG, BRK-A currently report revenue as, 'RevenueFromContractWithCustomerExcludingAssessedTax'. In previous years, they have reported as 'Revenues'.

 • *Default:* `Revenues`

 • *Optional:* `True`

---

**`year`**: `int`

The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied.

 • *Optional:* `True`

---

**`instantaneous`**: `bool`

<details>
<summary mdxType="summary">Description</summary>

Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data.<br/>
The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied.

</details>

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use cache for the request. Defaults to True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CompareCompanyFacts]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`value`**: `float`

The reported value of the fact or concept.

**`reported_date`**: `date`

The date when the report was filed.

**`period_beginning`**: `date`

The start date of the reporting period.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

The fiscal year.

**`fiscal_period`**: `str`

The fiscal period of the fiscal year.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`value`**: `float`

The reported value of the fact or concept.

**`reported_date`**: `date`

The date when the report was filed.

**`period_beginning`**: `date`

The start date of the reporting period.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

The fiscal year.

**`fiscal_period`**: `str`

The fiscal period of the fiscal year.

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

**`location`**: `str`

Geographic location of the reporting entity.

**`form`**: `str`

The SEC form associated with the fact or concept.

**`frame`**: `str`

The frame ID associated with the fact or concept, if applicable.

**`accession`**: `str`

SEC filing accession number associated with the reported fact or concept.

**`fact`**: `str`

The display name of the fact or concept.

**`unit`**: `str`

The unit of measurement for the fact or concept.

</TabItem>
</Tabs>



---

---
title: "groups"
description: "Get company data grouped by sector, industry or country and display either performance or valuation metrics"
keywords:
- equity
- compare
- groups
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/compare/groups - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get company data grouped by sector, industry or country and display either performance or valuation metrics.

Valuation metrics include price to earnings, price to book, price to sales ratios and price to cash flow.
Performance metrics include the stock price change for different time periods.


Examples
--------

```python
from openbb import obb
obb.equity.compare.groups(provider='finviz')
# Group by sector and analyze valuation.
obb.equity.compare.groups(group=sector, metric=valuation, provider='finviz')
# Group by industry and analyze performance.
obb.equity.compare.groups(group=industry, metric=performance, provider='finviz')
# Group by country and analyze valuation.
obb.equity.compare.groups(group=country, metric=valuation, provider='finviz')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`group`**: `Literal['sector', 'industry', 'country', 'capitalization', 'energy', 'materials', 'industrials', 'consumer_cyclical', 'consumer_defensive', 'healthcare', 'financial', 'technology', 'communication_services', 'utilities', 'real_estate']`

US-listed stocks only. When an individual sector is selected, it is broken down by industry. The default is 'sector'.

 • *Default:* `sector`

 • *Optional:* `True`

---

**`metric`**: `Literal['performance', 'valuation', 'overview']`

Statistical metric to return. Select from: ['performance', 'valuation', 'overview'] The default is 'performance'.

 • *Default:* `performance`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CompareGroups]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`name`**: `str`

Name or label of the group.

**`stocks`**: `int`

The number of stocks in the group.

**`market_cap`**: `int`

The market cap of the group.

**`performance_1d`**: `float`

The performance in the last day, as a normalized percent.

**`performance_1w`**: `float`

The performance in the last week, as a normalized percent.

**`performance_1m`**: `float`

The performance in the last month, as a normalized percent.

**`performance_3m`**: `float`

The performance in the last quarter, as a normalized percent.

**`performance_6m`**: `float`

The performance in the last half year, as a normalized percent.

**`performance_1y`**: `float`

The performance in the last year, as a normalized percent.

**`performance_ytd`**: `float`

The performance in the year to date, as a normalized percent.

**`dividend_yield`**: `float`

The dividend yield of the group, as a normalized percent.

**`pe`**: `float`

The P/E ratio of the group.

**`forward_pe`**: `float`

The forward P/E ratio of the group.

**`peg`**: `float`

The PEG ratio of the group.

**`eps_growth_past_5y`**: `float`

The EPS growth of the group for the past 5 years, as a normalized percent.

**`eps_growth_next_5y`**: `float`

The estimated EPS growth of the groupo for the next 5 years, as a normalized percent.

**`sales_growth_past_5y`**: `float`

The sales growth of the group for the past 5 years, as a normalized percent.

**`float_short`**: `float`

The percent of the float shorted for the group, as a normalized value.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

**`volume`**: `int`

The trading volume.

**`volume_average`**: `int`

The 3-month average volume of the group.

**`volume_relative`**: `float`

The relative volume compared to the 3-month average volume.

</TabItem>
</Tabs>



---

# Compare

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="peers" description="Get the closest peers for a given company" url="/platform/reference/equity/compare/peers" />
<ReferenceCard title="company facts" description="Compare reported company facts and fundamental data points" url="/platform/reference/equity/compare/company_facts" />
<ReferenceCard title="groups" description="Get company data grouped by sector, industry or country and display either performance or valuation metrics" url="/platform/reference/equity/compare/groups" />
</ul>



---

---
title: "peers"
description: "Learn how to compare and analyze equity peers with the `obb.equity.compare.peers`  function. This function allows you to retrieve a list of company peers based on  symbol, sector, exchange, and market cap. Understand the parameters, returns, and  data structure provided by this function."
keywords:
- equity peers
- company peers
- compare peers
- symbol
- provider
- parameter
- returns
- data
- list of peers
- sector
- exchange
- market cap
- serializable results
- chart object
- metadata
- command execution
- warnings
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/compare/peers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the closest peers for a given company.

Peers consist of companies trading on the same exchange, operating within the same sector
and with comparable market capitalizations.


Examples
--------

```python
from openbb import obb
obb.equity.compare.peers(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityPeers]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`peers_list`**: `list[str]`

A list of equity peers based on sector, exchange and market cap.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`peers_list`**: `list[str]`

A list of equity peers based on sector, exchange and market cap.

</TabItem>
</Tabs>



---

# Darkpool

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="otc" description="Get the weekly aggregate trade data for Over The Counter deals" url="/platform/reference/equity/darkpool/otc" />
</ul>



---

---
title: "otc"
description: "Get weekly aggregate trade data for Over The Counter deals, including  ATS trading data and non-ATS trading data. The data is provided for each ATS/firm  with trade reporting obligations under FINRA rules."
keywords:
- Over The Counter deals
- ATS trading data
- FINRA rules
- symbol
- provider
- tier
- is_ats
- OBBject
- results
- OTCAggregate
- warnings
- Chart
- Metadata
- data
- update_date
- share_quantity
- trade_quantity
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/darkpool/otc - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the weekly aggregate trade data for Over The Counter deals.

ATS and non-ATS trading data for each ATS/firm
with trade reporting obligations under FINRA rules.


Examples
--------

```python
from openbb import obb
obb.equity.darkpool.otc(provider='finra')
# Get OTC data for a symbol
obb.equity.darkpool.otc(symbol='AAPL', provider='finra')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='finra' label='finra'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`tier`**: `Literal['T1', 'T2', 'OTCE']`

<details>
<summary mdxType="summary">Description</summary>

'T1 - Securities included in the S&P 500, Russell 1000 and selected exchange-traded products;<br/>
        T2 - All other NMS stocks; OTC - Over-the-Counter equity securities

</details>

 • *Default:* `T1`

 • *Optional:* `True`

---

**`is_ats`**: `bool`

ATS data if true, NON-ATS otherwise

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OTCAggregate]`

Serializable results.

---

**`provider`**: `Optional[Literal['finra']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`update_date`**: `date`

Most recent date on which total trades is updated based on data received from each ATS/OTC.

**`share_quantity`**: `float`

Aggregate weekly total number of shares reported by each ATS for the Symbol.

**`trade_quantity`**: `float`

Aggregate weekly total number of trades reported by each ATS for the Symbol

</TabItem>

<TabItem value='finra' label='finra'>

**`update_date`**: `date`

Most recent date on which total trades is updated based on data received from each ATS/OTC.

**`share_quantity`**: `float`

Aggregate weekly total number of shares reported by each ATS for the Symbol.

**`trade_quantity`**: `float`

Aggregate weekly total number of trades reported by each ATS for the Symbol

</TabItem>
</Tabs>



---

---
title: "active"
description: "Learn how to get the most active ETFs using the ETF discovery API. This  page provides documentation for the parameters, returns, and data associated with  the API endpoint. Understand how to use the sorting, limiting, and provider parameters  and explore the returned results, chart object, and metadata. Find details about  the data fields including symbol, name, last price, percent change, net change,  volume, date, country, mantissa, type, and formatted values. Retrieve the source  url for additional information."
keywords:
- ETFs
- most active ETFs
- ETF discovery
- sort order
- limit parameter
- provider parameter
- results
- chart object
- metadata
- symbol
- name
- last price
- percent change
- net change
- volume
- date
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/active - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the most actively traded stocks based on volume.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.active(provider='yfinance')
obb.equity.discovery.active(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityActive]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "aggressive_small_caps"
description: "Learn how to get aggressive small cap equities with the equity discovery  API. Understand the parameters, returns, and data format."
keywords:
- equities
- aggressive small caps
- equity discovery
- parameter
- sort order
- provider
- returns
- data
- symbol
- name
- price
- change
- percent change
- volume
- market cap
- average volume
- PE ratio
- documentation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/aggressive_small_caps - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get top small cap stocks based on earnings growth.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.aggressive_small_caps(provider='yfinance')
obb.equity.discovery.aggressive_small_caps(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results. Default is all.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityAggressiveSmallCaps]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "filings"
description: "Get the most-recent filings submitted to the SEC"
keywords:
- equity
- discovery
- filings
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/filings - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.

SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114,
Foreign Investment Disclosures and others. The annual 10-K report is required to be
filed annually and includes the company's financial statements, management discussion and analysis,
and audited financial statements.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.filings(provider='fmp')
# Get filings for the year 2023, limited to 100 results
obb.equity.discovery.filings(start_date='2023-01-01', end_date='2023-12-31', limit=100, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `str`

Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `str`

Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`is_done`**: `bool`

Flag for whether or not the filing is done.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[DiscoveryFilings]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`title`**: `str`

Title of the filing.

**`date`**: `Union[datetime, str]`

The date of the data.

**`form_type`**: `str`

The form type of the filing

**`link`**: `str`

URL to the filing page on the SEC site.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`title`**: `str`

Title of the filing.

**`date`**: `Union[datetime, str]`

The date of the data.

**`form_type`**: `str`

The form type of the filing

**`link`**: `str`

URL to the filing page on the SEC site.

</TabItem>
</Tabs>



---

---
title: "gainers"
description: "Learn how to get the top ETF gainers using Python code. This documentation  includes details about the parameters, return values, and data format."
keywords:
- ETF gainers
- ETFGainers
- Python code
- parameters
- sort order
- limit
- provider
- returns
- results
- warnings
- chart
- metadata
- data
- symbol
- name
- last price
- percent change
- net change
- trading volume
- date
- bluegrass channel
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/gainers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the top price gainers in the stock market.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.gainers(provider='yfinance')
obb.equity.discovery.gainers(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`category`**: `Literal['dividend', 'energy', 'healthcare', 'industrials', 'price_performer', 'rising_stars', 'real_estate', 'tech', 'utilities', '52w_high', 'volume']`

The category of list to retrieve. Defaults to `price_performer`.

 • *Default:* `price_performer`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityGainers]`

Serializable results.

---

**`provider`**: `Optional[Literal['tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`thirty_day_price_change`**: `float`

30 Day Price Change.

**`ninety_day_price_change`**: `float`

90 Day Price Change.

**`dividend_yield`**: `float`

Dividend Yield.

**`avg_volume_10d`**: `float`

10 Day Avg. Volume.

**`rank`**: `int`

The rank of the stock in the list.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "growth_tech"
description: "Learn how to get growth tech equities, sort them, and retrieve detailed  data such as symbol, name, price, volume, and more using the OBB.equity.discovery.growth_tech  method in the provided code snippet. This documentation page also covers the parameters,  returns, and available data structures."
keywords:
- growth tech equities
- tech equities
- equity discovery
- sorting
- provider
- results
- warnings
- chart
- metadata
- data
- symbol
- name
- price
- change
- percent change
- volume
- market cap
- average volume
- P/E ratio
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/growth_tech - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get top tech stocks based on revenue and earnings growth.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.growth_tech(provider='yfinance')
obb.equity.discovery.growth_tech(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[GrowthTechEquities]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

# Discovery

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="losers" description="Get the top price losers in the stock market" url="/platform/reference/equity/discovery/losers" />
<ReferenceCard title="undervalued large caps" description="Get potentially undervalued large cap stocks" url="/platform/reference/equity/discovery/undervalued_large_caps" />
<ReferenceCard title="aggressive small caps" description="Get top small cap stocks based on earnings growth" url="/platform/reference/equity/discovery/aggressive_small_caps" />
<ReferenceCard title="active" description="Get the most actively traded stocks based on volume" url="/platform/reference/equity/discovery/active" />
<ReferenceCard title="undervalued growth" description="Get potentially undervalued growth stocks" url="/platform/reference/equity/discovery/undervalued_growth" />
<ReferenceCard title="top retail" description="Track over $30B USD/day of individual investors trades" url="/platform/reference/equity/discovery/top_retail" />
<ReferenceCard title="gainers" description="Get the top price gainers in the stock market" url="/platform/reference/equity/discovery/gainers" />
<ReferenceCard title="latest financial reports" description="Get the newest quarterly, annual, and current reports for all companies" url="/platform/reference/equity/discovery/latest_financial_reports" />
<ReferenceCard title="growth tech" description="Get top tech stocks based on revenue and earnings growth" url="/platform/reference/equity/discovery/growth_tech" />
<ReferenceCard title="filings" description="Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more" url="/platform/reference/equity/discovery/filings" />
</ul>



---

---
title: "latest_financial_reports"
description: "Get the newest quarterly, annual, and current reports for all companies"
keywords:
- equity
- discovery
- latest_financial_reports
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/latest_financial_reports - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the newest quarterly, annual, and current reports for all companies.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.latest_financial_reports(provider='sec')
obb.equity.discovery.latest_financial_reports(provider='sec', date=2024-09-30)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to today.

 • *Optional:* `True`

---

**`report_type`**: `Union[str, list[str]]`

Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple items allowed for provider(s): sec.

<details>
<summary mdxType="summary">Choices</summary>

- `1-K`
- `1-SA`
- `1-U`
- `10-D`
- `10-K`
- `10-KT`
- `10-Q`
- `10-QT`
- `20-F`
- `40-F`
- `6-K`
- `8-K`
</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[LatestFinancialReports]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`filing_date`**: `date`

The date of the filing.

**`period_ending`**: `date`

Report for the period ending.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`sic`**: `str`

Standard Industrial Classification code.

**`report_type`**: `str`

Type of filing.

**`description`**: `str`

Description of the report.

**`url`**: `str`

URL to the filing page.

</TabItem>

<TabItem value='sec' label='sec'>

**`filing_date`**: `date`

The date of the filing.

**`period_ending`**: `date`

Report for the period ending.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`sic`**: `str`

Standard Industrial Classification code.

**`report_type`**: `str`

Type of filing.

**`description`**: `str`

Description of the report.

**`url`**: `str`

URL to the filing page.

**`items`**: `str`

Item codes associated with the filing.

**`index_headers`**: `str`

URL to the index headers file.

**`complete_submission`**: `str`

URL to the complete submission text file.

**`metadata`**: `str`

URL to the MetaLinks.json file, if available.

**`financial_report`**: `str`

URL to the Financial_Report.xlsx file, if available.

</TabItem>
</Tabs>



---

---
title: "losers"
description: "Learn how to get the top ETF losers using the OBB ETF Discovery API endpoint.  Explore the available parameters and the returned data, including symbols, names,  prices, percentage changes, and trading volumes."
keywords:
- ETF losers
- top ETF losers
- ETFLosers
- sort order
- data entries
- provider
- warnings
- chart
- metadata
- symbol
- name
- last price
- percent change
- net change
- trading volume
- date
- bluegrass channel
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- source url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/losers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the top price losers in the stock market.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.losers(provider='yfinance')
obb.equity.discovery.losers(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityLosers]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "top_retail"
description: "Learn about the OBB.equity.discovery.top_retail function in Python, which  tracks retail activity and sentiment for over 9,500 US traded stocks, ADRs, and  ETPs. Find out how to use the function's parameters and understand the data it returns."
keywords:
- retail activity
- sentiment
- top retail
- equity discovery
- US traded stocks
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/top_retail - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Track over $30B USD/day of individual investors trades.

It gives a daily view into retail activity and sentiment for over 9,500 US traded stocks,
ADRs, and ETPs.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.top_retail(provider='nasdaq')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TopRetail]`

Serializable results.

---

**`provider`**: `Optional[Literal['nasdaq']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`activity`**: `float`

Activity of the symbol.

**`sentiment`**: `float`

Sentiment of the symbol. 1 is bullish, -1 is bearish.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`activity`**: `float`

Activity of the symbol.

**`sentiment`**: `float`

Sentiment of the symbol. 1 is bullish, -1 is bearish.

</TabItem>
</Tabs>



---

---
title: "undervalued_growth"
description: "Learn how to get undervalued growth equities using the equity discovery  feature, and understand the various parameters, returns, and data available in the  results."
keywords:
- undervalued growth equities
- equity discovery
- sort order
- provider
- results
- warnings
- chart
- metadata
- data
- symbol
- name
- price
- change
- percent change
- volume
- market cap
- average volume
- PE ratio
- TTM
- trading volume
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/undervalued_growth - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get potentially undervalued growth stocks.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.undervalued_growth(provider='yfinance')
obb.equity.discovery.undervalued_growth(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityUndervaluedGrowth]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "undervalued_large_caps"
description: "Learn how to get undervalued large cap equities and explore equity discovery  using the OBB equity API. Understand the parameters available, such as sorting undervalued  large caps and selecting the yfinance provider. Retrieve useful equity data, including  the symbol, name, price, change, percent change, volume, market cap, average volume,  and PE ratio."
keywords:
- undervalued large cap equities
- equity discovery
- sorting undervalued large caps
- yfinance provider
- equity data
- symbol
- name
- price
- change
- percent change
- volume
- market cap
- average volume
- PE ratio
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/discovery/undervalued_large_caps - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get potentially undervalued large cap stocks.


Examples
--------

```python
from openbb import obb
obb.equity.discovery.undervalued_large_caps(provider='yfinance')
obb.equity.discovery.undervalued_large_caps(sort='desc', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityUndervaluedLargeCaps]`

Serializable results.

---

**`provider`**: `Optional[Literal['yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`price`**: `float`

Last price.

**`change`**: `float`

Change in price.

**`percent_change`**: `float`

Percent change.

**`volume`**: `Union[int, float]`

The trading volume.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "analyst_search"
description: "Search for specific analysts and get their forecast track record"
keywords:
- equity
- estimates
- analyst_search
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/analyst_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search for specific analysts and get their forecast track record.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.analyst_search(provider='benzinga')
obb.equity.estimates.analyst_search(firm_name='Wedbush', provider='benzinga')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`analyst_name`**: `Union[str, list[str]]`

Analyst names to return. Omitting will return all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_name`**: `Union[str, list[str]]`

Firm names to return. Omitting will return all available firms. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`analyst_name`**: `Union[str, list[str]]`

Analyst names to return. Omitting will return all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_name`**: `Union[str, list[str]]`

Firm names to return. Omitting will return all available firms. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`analyst_ids`**: `Union[str, list[str]]`

list of analyst IDs to return. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_ids`**: `Union[str, list[str]]`

Firm IDs to return. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`limit`**: `int`

Number of results returned. Limit 1000.

 • *Default:* `100`

 • *Optional:* `True`

---

**`page`**: `int`

Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date.

 • *Default:* `0`

 • *Optional:* `True`

---

**`fields`**: `Union[str, list[str]]`

Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[AnalystSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['benzinga']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`last_updated`**: `datetime`

Date of the last update.

**`firm_name`**: `str`

Firm name of the analyst.

**`name_first`**: `str`

Analyst first name.

**`name_last`**: `str`

Analyst last name.

**`name_full`**: `str`

Analyst full name.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`last_updated`**: `datetime`

Date of the last update.

**`firm_name`**: `str`

Firm name of the analyst.

**`name_first`**: `str`

Analyst first name.

**`name_last`**: `str`

Analyst last name.

**`name_full`**: `str`

Analyst full name.

**`analyst_id`**: `str`

ID of the analyst.

**`firm_id`**: `str`

ID of the analyst firm.

**`smart_score`**: `float`

A weighted average of the total_ratings_percentile, overall_avg_return_percentile, and overall_success_rate

**`overall_success_rate`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain overall.

**`overall_avg_return_percentile`**: `float`

The percentile (normalized) of this analyst's overall average return per rating in comparison to other analysts' overall average returns per rating.

**`total_ratings_percentile`**: `float`

The percentile (normalized) of this analyst's total number of ratings in comparison to the total number of ratings published by all other analysts

**`total_ratings`**: `int`

Number of recommendations made by this analyst.

**`overall_gain_count`**: `int`

The number of ratings that have gained value since the date of recommendation

**`overall_loss_count`**: `int`

The number of ratings that have lost value since the date of recommendation

**`overall_average_return`**: `float`

The average percent (normalized) price difference per rating since the date of recommendation

**`overall_std_dev`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings since the date of recommendation

**`gain_count_1m`**: `int`

The number of ratings that have gained value over the last month

**`loss_count_1m`**: `int`

The number of ratings that have lost value over the last month

**`average_return_1m`**: `float`

The average percent (normalized) price difference per rating over the last month

**`std_dev_1m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last month

**`smart_score_1m`**: `float`

A weighted average smart score over the last month.

**`success_rate_1m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last month

**`gain_count_3m`**: `int`

The number of ratings that have gained value over the last 3 months

**`loss_count_3m`**: `int`

The number of ratings that have lost value over the last 3 months

**`average_return_3m`**: `float`

The average percent (normalized) price difference per rating over the last 3 months

**`std_dev_3m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 3 months

**`smart_score_3m`**: `float`

A weighted average smart score over the last 3 months.

**`success_rate_3m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 3 months

**`gain_count_6m`**: `int`

The number of ratings that have gained value over the last 6 months

**`loss_count_6m`**: `int`

The number of ratings that have lost value over the last 6 months

**`average_return_6m`**: `float`

The average percent (normalized) price difference per rating over the last 6 months

**`std_dev_6m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 6 months

**`gain_count_9m`**: `int`

The number of ratings that have gained value over the last 9 months

**`loss_count_9m`**: `int`

The number of ratings that have lost value over the last 9 months

**`average_return_9m`**: `float`

The average percent (normalized) price difference per rating over the last 9 months

**`std_dev_9m`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 9 months

**`smart_score_9m`**: `float`

A weighted average smart score over the last 9 months.

**`success_rate_9m`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 9 months

**`gain_count_1y`**: `int`

The number of ratings that have gained value over the last 1 year

**`loss_count_1y`**: `int`

The number of ratings that have lost value over the last 1 year

**`average_return_1y`**: `float`

The average percent (normalized) price difference per rating over the last 1 year

**`std_dev_1y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 1 year

**`smart_score_1y`**: `float`

A weighted average smart score over the last 1 year.

**`success_rate_1y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 1 year

**`gain_count_2y`**: `int`

The number of ratings that have gained value over the last 2 years

**`loss_count_2y`**: `int`

The number of ratings that have lost value over the last 2 years

**`average_return_2y`**: `float`

The average percent (normalized) price difference per rating over the last 2 years

**`std_dev_2y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 2 years

**`smart_score_2y`**: `float`

A weighted average smart score over the last 3 years.

**`success_rate_2y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 2 years

**`gain_count_3y`**: `int`

The number of ratings that have gained value over the last 3 years

**`loss_count_3y`**: `int`

The number of ratings that have lost value over the last 3 years

**`average_return_3y`**: `float`

The average percent (normalized) price difference per rating over the last 3 years

**`std_dev_3y`**: `float`

The standard deviation in percent (normalized) price difference in the analyst's ratings over the last 3 years

**`smart_score_3y`**: `float`

A weighted average smart score over the last 3 years.

**`success_rate_3y`**: `float`

The percentage (normalized) of gain/loss ratings that resulted in a gain over the last 3 years

</TabItem>
</Tabs>



---

---
title: "consensus"
description: "Learn how to access and use the Price Target Consensus functionality  in your application. Explore the available parameters and understand the returned  data structure."
keywords:
- Price target consensus data
- equity estimates consensus
- symbol parameter
- provider parameter
- results attribute
- provider attribute
- warnings attribute
- chart attribute
- metadata attribute
- data table
- target_high column
- target_low column
- target_consensus column
- target_median column
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/consensus - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get consensus price target and recommendation.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.consensus(symbol='AAPL', provider='fmp')
obb.equity.estimates.consensus(symbol='AAPL,MSFT', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

---

**`industry_group_number`**: `int`

The Zacks industry group number.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PriceTargetConsensus]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`standard_deviation`**: `float`

The standard deviation of target price estimates.

**`total_anaylsts`**: `int`

The total number of target price estimates in consensus.

**`raised`**: `int`

The number of analysts that have raised their target price estimates.

**`lowered`**: `int`

The number of analysts that have lowered their target price estimates.

**`most_recent_date`**: `date`

The date of the most recent estimate.

**`industry_group_number`**: `int`

The Zacks industry group number.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`target_upside`**: `float`

Percent of upside, as a normalized percent.

**`total_analysts`**: `int`

Total number of analyst.

**`buy_ratings`**: `int`

Number of buy ratings.

**`sell_ratings`**: `int`

Number of sell ratings.

**`hold_ratings`**: `int`

Number of hold ratings.

**`consensus_action`**: `str`

Consensus action.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

The company name

**`target_high`**: `float`

High target of the price target consensus.

**`target_low`**: `float`

Low target of the price target consensus.

**`target_consensus`**: `float`

Consensus target of the price target consensus.

**`target_median`**: `float`

Median target of the price target consensus.

**`recommendation`**: `str`

Recommendation - buy, sell, etc.

**`recommendation_mean`**: `float`

Mean recommendation score where 1 is strong buy and 5 is strong sell.

**`number_of_analysts`**: `int`

Number of analysts providing opinions.

**`current_price`**: `float`

Current price of the stock.

**`currency`**: `str`

Currency the stock is priced in.

</TabItem>
</Tabs>



---

---
title: "forward_ebitda"
description: "Get forward EBITDA estimates"
keywords:
- equity
- estimates
- forward_ebitda
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/forward_ebitda - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get forward EBITDA estimates.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.forward_ebitda(provider='intrinio')
obb.equity.estimates.forward_ebitda(symbol='AAPL', fiscal_period=annual, provider='intrinio')
obb.equity.estimates.forward_ebitda(symbol='AAPL,MSFT', fiscal_period=quarter, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['annual', 'quarter']`

The future fiscal period to retrieve estimates for.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`include_historical`**: `bool`

If True, the data will include all past data and the limit will be ignored.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['quarter', 'annual']`

Filter for only full-year or quarterly estimates.

 • *Optional:* `True`

---

**`estimate_type`**: `Literal['ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income']`

Limit the EBITDA estimates to this type.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ForwardEbitdaEstimates]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_updated`**: `date`

The date of the last update.

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `Union[str, int]`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The EBITDA estimate low for the period.

**`high_estimate`**: `int`

The EBITDA estimate high for the period.

**`mean`**: `int`

The EBITDA estimate mean for the period.

**`median`**: `int`

The EBITDA estimate median for the period.

**`standard_deviation`**: `int`

The EBITDA estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`conensus_type`**: `Literal['ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income']`

The type of estimate.

</TabItem>
</Tabs>



---

---
title: "forward_eps"
description: "Get forward EPS estimates"
keywords:
- equity
- estimates
- forward_eps
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/forward_eps - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get forward EPS estimates.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.forward_eps(symbol='AAPL', provider='intrinio')
obb.equity.estimates.forward_eps(fiscal_year=2025, fiscal_period=fy, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['annual', 'quarter']`

The future fiscal period to retrieve estimates for.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`include_historical`**: `bool`

If True, the data will include all past data and the limit will be ignored.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The future fiscal period to retrieve estimates for.

 • *Optional:* `True`

---

**`calendar_year`**: `int`

The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['q1', 'q2', 'q3', 'q4']`

The future calendar period to retrieve estimates for.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

The reporting period.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ForwardEpsEstimates]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'seeking_alpha']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`revisions_change_percent`**: `float`

The earnings per share (EPS) percent change in estimate for the period.

**`mean_1w`**: `float`

The mean estimate for the period one week ago.

**`mean_1m`**: `float`

The mean estimate for the period one month ago.

**`mean_2m`**: `float`

The mean estimate for the period two months ago.

**`mean_3m`**: `float`

The mean estimate for the period three months ago.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `float`

Estimated EPS low for the period.

**`high_estimate`**: `float`

Estimated EPS high for the period.

**`mean`**: `float`

Estimated EPS mean for the period.

**`median`**: `float`

Estimated EPS median for the period.

**`standard_deviation`**: `float`

Estimated EPS standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`normalized_actual`**: `float`

Actual normalized EPS.

**`period_growth`**: `float`

Estimated (or actual if reported) EPS growth for the period.

**`low_estimate_gaap`**: `float`

Estimated GAAP EPS low for the period.

**`high_estimate_gaap`**: `float`

Estimated GAAP EPS high for the period.

**`mean_gaap`**: `float`

Estimated GAAP EPS mean for the period.

**`gaap_actual`**: `float`

Actual GAAP EPS.

</TabItem>
</Tabs>



---

---
title: "forward_pe"
description: "Get forward PE estimates"
keywords:
- equity
- estimates
- forward_pe
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/forward_pe - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get forward PE estimates.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.forward_pe(provider='intrinio')
obb.equity.estimates.forward_pe(symbol='AAPL,MSFT,GOOG', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ForwardPeEstimates]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`year1`**: `float`

Estimated PE ratio for the next fiscal year.

**`year2`**: `float`

Estimated PE ratio two fiscal years from now.

**`year3`**: `float`

Estimated PE ratio three fiscal years from now.

**`year4`**: `float`

Estimated PE ratio four fiscal years from now.

**`year5`**: `float`

Estimated PE ratio five fiscal years from now.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`year1`**: `float`

Estimated PE ratio for the next fiscal year.

**`year2`**: `float`

Estimated PE ratio two fiscal years from now.

**`year3`**: `float`

Estimated PE ratio three fiscal years from now.

**`year4`**: `float`

Estimated PE ratio four fiscal years from now.

**`year5`**: `float`

Estimated PE ratio five fiscal years from now.

**`peg_ratio_year1`**: `float`

Estimated Forward PEG ratio for the next fiscal year.

**`eps_ttm`**: `float`

The latest trailing twelve months earnings per share.

**`last_updated`**: `date`

The date the data was last updated.

</TabItem>
</Tabs>



---

---
title: "forward_sales"
description: "Get forward sales estimates"
keywords:
- equity
- estimates
- forward_sales
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/forward_sales - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get forward sales estimates.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.forward_sales(symbol='AAPL', provider='intrinio')
obb.equity.estimates.forward_sales(fiscal_year=2025, fiscal_period=fy, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`fiscal_period`**: `Literal['fy', 'q1', 'q2', 'q3', 'q4']`

The future fiscal period to retrieve estimates for.

 • *Optional:* `True`

---

**`calendar_year`**: `int`

The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['q1', 'q2', 'q3', 'q4']`

The future calendar period to retrieve estimates for.

 • *Optional:* `True`

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio, seeking_alpha.

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

The reporting period.

 • *Default:* `quarter`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ForwardSalesEstimates]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio', 'seeking_alpha']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`revisions_1w_up`**: `int`

Number of revisions up in the last week.

**`revisions_1w_down`**: `int`

Number of revisions down in the last week.

**`revisions_1w_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 1 week.

**`revisions_1m_up`**: `int`

Number of revisions up in the last month.

**`revisions_1m_down`**: `int`

Number of revisions down in the last month.

**`revisions_1m_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 1 month.

**`revisions_3m_up`**: `int`

Number of revisions up in the last 3 months.

**`revisions_3m_down`**: `int`

Number of revisions down in the last 3 months.

**`revisions_3m_change_percent`**: `float`

The analyst revisions percent change in estimate for the period of 3 months.

</TabItem>

<TabItem value='seeking_alpha' label='seeking_alpha'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`date`**: `Union[date, str]`

The date of the data.

**`fiscal_year`**: `int`

Fiscal year for the estimate.

**`fiscal_period`**: `str`

Fiscal quarter for the estimate.

**`calendar_year`**: `int`

Calendar year for the estimate.

**`calendar_period`**: `str`

Calendar quarter for the estimate.

**`low_estimate`**: `int`

The sales estimate low for the period.

**`high_estimate`**: `int`

The sales estimate high for the period.

**`mean`**: `int`

The sales estimate mean for the period.

**`median`**: `int`

The sales estimate median for the period.

**`standard_deviation`**: `int`

The sales estimate standard deviation for the period.

**`number_of_analysts`**: `int`

Number of analysts providing estimates for the period.

**`actual`**: `int`

Actual sales (revenue) for the period.

**`period_growth`**: `float`

Estimated (or actual if reported) EPS growth for the period.

</TabItem>
</Tabs>



---

---
title: "historical"
description: "Learn about historical analyst estimates and analyst stock recommendations  with the OBBPy library in Python. Explore the usage of the `obb.equity.estimates.historical`  function and its parameters, including `symbol`, `period`, `limit`, and `provider`.  Understand the structure of the returned object, `OBBject`, with `results`, `provider`,  `warnings`, `chart`, and `metadata` properties. Dive into the available data such  as `symbol`, `date`, `estimated revenue`, `ebitda`, `ebit`, `net income`, `SGA expense`,  `EPS`, and the number of analysts who estimated revenue and EPS."
keywords:
- historical analyst estimates
- analyst stock recommendations
- python obb.equity.estimates.historical
- parameters
- standard
- symbol
- union[str, list[str]]
- period
- literal['quarter', 'annual']
- limit
- int
- provider
- literal['fmp']
- returns
- obbject
- list[analystestimates]
- serializable results
- optional[literal['fmp']]
- optional[list[warning_]]
- optional[chart]
- optional[metadata]
- data
- symbol
- str
- date
- estimated revenue low
- estimated revenue high
- estimated revenue average
- estimated ebitda low
- estimated ebitda high
- estimated ebitda average
- estimated ebit low
- estimated ebit high
- estimated ebit average
- estimated net income low
- estimated net income high
- estimated net income average
- estimated sga expense low
- estimated sga expense high
- estimated sga expense average
- estimated eps average
- estimated eps high
- estimated eps low
- number of analysts who estimated revenue
- number of analysts who estimated eps
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical analyst estimates for earnings and revenue.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.historical(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[AnalystEstimates]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`estimated_revenue_low`**: `int`

Estimated revenue low.

**`estimated_revenue_high`**: `int`

Estimated revenue high.

**`estimated_revenue_avg`**: `int`

Estimated revenue average.

**`estimated_sga_expense_low`**: `int`

Estimated SGA expense low.

**`estimated_sga_expense_high`**: `int`

Estimated SGA expense high.

**`estimated_sga_expense_avg`**: `int`

Estimated SGA expense average.

**`estimated_ebitda_low`**: `int`

Estimated EBITDA low.

**`estimated_ebitda_high`**: `int`

Estimated EBITDA high.

**`estimated_ebitda_avg`**: `int`

Estimated EBITDA average.

**`estimated_ebit_low`**: `int`

Estimated EBIT low.

**`estimated_ebit_high`**: `int`

Estimated EBIT high.

**`estimated_ebit_avg`**: `int`

Estimated EBIT average.

**`estimated_net_income_low`**: `int`

Estimated net income low.

**`estimated_net_income_high`**: `int`

Estimated net income high.

**`estimated_net_income_avg`**: `int`

Estimated net income average.

**`estimated_eps_avg`**: `float`

Estimated EPS average.

**`estimated_eps_high`**: `float`

Estimated EPS high.

**`estimated_eps_low`**: `float`

Estimated EPS low.

**`number_analyst_estimated_revenue`**: `int`

Number of analysts who estimated revenue.

**`number_analysts_estimated_eps`**: `int`

Number of analysts who estimated EPS.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`estimated_revenue_low`**: `int`

Estimated revenue low.

**`estimated_revenue_high`**: `int`

Estimated revenue high.

**`estimated_revenue_avg`**: `int`

Estimated revenue average.

**`estimated_sga_expense_low`**: `int`

Estimated SGA expense low.

**`estimated_sga_expense_high`**: `int`

Estimated SGA expense high.

**`estimated_sga_expense_avg`**: `int`

Estimated SGA expense average.

**`estimated_ebitda_low`**: `int`

Estimated EBITDA low.

**`estimated_ebitda_high`**: `int`

Estimated EBITDA high.

**`estimated_ebitda_avg`**: `int`

Estimated EBITDA average.

**`estimated_ebit_low`**: `int`

Estimated EBIT low.

**`estimated_ebit_high`**: `int`

Estimated EBIT high.

**`estimated_ebit_avg`**: `int`

Estimated EBIT average.

**`estimated_net_income_low`**: `int`

Estimated net income low.

**`estimated_net_income_high`**: `int`

Estimated net income high.

**`estimated_net_income_avg`**: `int`

Estimated net income average.

**`estimated_eps_avg`**: `float`

Estimated EPS average.

**`estimated_eps_high`**: `float`

Estimated EPS high.

**`estimated_eps_low`**: `float`

Estimated EPS low.

**`number_analyst_estimated_revenue`**: `int`

Number of analysts who estimated revenue.

**`number_analysts_estimated_eps`**: `int`

Number of analysts who estimated EPS.

</TabItem>
</Tabs>



---

# Estimates

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="forward ebitda" description="Get forward EBITDA estimates" url="/platform/reference/equity/estimates/forward_ebitda" />
<ReferenceCard title="forward pe" description="Get forward PE estimates" url="/platform/reference/equity/estimates/forward_pe" />
<ReferenceCard title="forward eps" description="Get forward EPS estimates" url="/platform/reference/equity/estimates/forward_eps" />
<ReferenceCard title="forward sales" description="Get forward sales estimates" url="/platform/reference/equity/estimates/forward_sales" />
<ReferenceCard title="historical" description="Get historical analyst estimates for earnings and revenue" url="/platform/reference/equity/estimates/historical" />
<ReferenceCard title="consensus" description="Get consensus price target and recommendation" url="/platform/reference/equity/estimates/consensus" />
<ReferenceCard title="analyst search" description="Search for specific analysts and get their forecast track record" url="/platform/reference/equity/estimates/analyst_search" />
<ReferenceCard title="price target" description="Get analyst price targets by company" url="/platform/reference/equity/estimates/price_target" />
</ul>



---

---
title: "price_target"
description: "Get price target data for an equity symbol. Retrieve information such  as publication date, analyst details, price target, and more. Supports multiple  symbols and customizable providers."
keywords:
- price target data
- equity estimates
- symbol
- provider
- grade
- published date
- news URL
- news title
- analyst name
- analyst company
- price target
- adjusted price target
- price when posted
- news publisher
- news base URL
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/estimates/price_target - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get analyst price targets by company.


Examples
--------

```python
from openbb import obb
obb.equity.estimates.price_target(provider='benzinga')
# Get price targets for Microsoft using 'benzinga' as provider.
obb.equity.estimates.price_target(start_date=2020-01-01, end_date=2024-02-16, limit=10, symbol='msft', provider='benzinga', action=downgrades)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

---

**`page`**: `int`

Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters.

 • *Default:* `0`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

Date for calendar data, shorthand for date_from and date_to.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`updated`**: `Union[date, int]`

Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD.

 • *Optional:* `True`

---

**`importance`**: `int`

Importance level to filter by. Uses Greater Than or Equal To the importance indicated

 • *Optional:* `True`

---

**`action`**: `Literal['downgrades', 'maintains', 'reinstates', 'reiterates', 'upgrades', 'assumes', 'initiates', 'terminates', 'removes', 'suspends', 'firm_dissolved']`

Filter by a specific action_company.

 • *Optional:* `True`

---

**`analyst_ids`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`firm_ids`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of firm IDs. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

---

**`fields`**: `Union[Union[str, list[str]], list[Union[str, list[str]]]]`

Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple items allowed for provider(s): benzinga.

 • *Optional:* `True`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, finviz, fmp.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `200`

 • *Optional:* `True`

---

**`with_grade`**: `bool`

Include upgrades and downgrades in the response.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PriceTarget]`

Serializable results.

---

**`provider`**: `Optional[Literal['benzinga', 'finviz', 'fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `Literal['Downgrades', 'Maintains', 'Reinstates', 'Reiterates', 'Upgrades', 'Assumes', 'Initiates Coverage On', 'Terminates Coverage On', 'Removes', 'Suspends', 'Firm Dissolved']`

Description of the change in rating from firm's last rating.Note that all of these terms are precisely defined.

**`action_change`**: `Literal['Announces', 'Maintains', 'Lowers', 'Raises', 'Removes', 'Adjusts']`

Description of the change in price target from firm's last price target.

**`importance`**: `Literal[0, 1, 2, 3, 4, 5]`

Subjective Basis of How Important Event is to Market. 5 = High

**`notes`**: `str`

Notes of the price target.

**`analyst_id`**: `str`

Id of the analyst.

**`url_news`**: `str`

URL for analyst ratings news articles for this ticker on Benzinga.com.

**`url_analyst`**: `str`

URL for analyst ratings page for this ticker on Benzinga.com.

**`id`**: `str`

Unique ID of this entry.

**`last_updated`**: `datetime`

Last updated timestamp, UTC.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

**`status`**: `str`

The action taken by the firm. This could be 'Upgrade', 'Downgrade', 'Reiterated', etc.

**`rating_change`**: `str`

The rating given by the analyst. This could be 'Buy', 'Sell', 'Underweight', etc. If the rating is a revision, the change is indicated by '->'

</TabItem>

<TabItem value='fmp' label='fmp'>

**`published_date`**: `Union[date, datetime]`

Published date of the price target.

**`published_time`**: `datetime.time`

Time of the original rating, UTC.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`exchange`**: `str`

Exchange where the company is traded.

**`company_name`**: `str`

Name of company that is the subject of rating.

**`analyst_name`**: `str`

Analyst name.

**`analyst_firm`**: `str`

Name of the analyst firm that published the price target.

**`currency`**: `str`

Currency the data is denominated in.

**`price_target`**: `float`

The current price target.

**`adj_price_target`**: `float`

Adjusted price target for splits and stock dividends.

**`price_target_previous`**: `float`

Previous price target.

**`previous_adj_price_target`**: `float`

Previous adjusted price target.

**`price_when_posted`**: `float`

Price when posted.

**`rating_current`**: `str`

The analyst's rating for the company.

**`rating_previous`**: `str`

Previous analyst rating for the company.

**`action`**: `str`

Description of the change in rating from firm's last rating.

**`news_url`**: `str`

News URL of the price target.

**`news_title`**: `str`

News title of the price target.

**`news_publisher`**: `str`

News publisher of the price target.

**`news_base_url`**: `str`

News base URL of the price target.

</TabItem>
</Tabs>



---

---
title: "balance"
description: "Learn how to use the balance sheet function in Python to retrieve financial  statement data. This documentation provides details about the function parameters,  return values, and available data types."
keywords:
- balance sheet statement
- balance sheet function
- python function
- financial statement function
- balance sheet data parameters
- balance sheet data returns
- balance sheet data types
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/balance - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the balance sheet for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.balance(symbol='AAPL', provider='fmp')
obb.equity.fundamental.balance(symbol='AAPL', period=annual, limit=5, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Default:* `True`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BalanceSheet]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'polygon', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date when the filing was made.

**`accepted_date`**: `datetime`

The date and time when the filing was accepted.

**`reported_currency`**: `str`

The currency in which the balance sheet was reported.

**`cash_and_cash_equivalents`**: `float`

Cash and cash equivalents.

**`short_term_investments`**: `float`

Short term investments.

**`cash_and_short_term_investments`**: `float`

Cash and short term investments.

**`net_receivables`**: `float`

Net receivables.

**`inventory`**: `float`

Inventory.

**`other_current_assets`**: `float`

Other current assets.

**`total_current_assets`**: `float`

Total current assets.

**`plant_property_equipment_net`**: `float`

Plant property equipment net.

**`goodwill`**: `float`

Goodwill.

**`intangible_assets`**: `float`

Intangible assets.

**`goodwill_and_intangible_assets`**: `float`

Goodwill and intangible assets.

**`long_term_investments`**: `float`

Long term investments.

**`tax_assets`**: `float`

Tax assets.

**`other_non_current_assets`**: `float`

Other non current assets.

**`non_current_assets`**: `float`

Total non current assets.

**`other_assets`**: `float`

Other assets.

**`total_assets`**: `float`

Total assets.

**`accounts_payable`**: `float`

Accounts payable.

**`short_term_debt`**: `float`

Short term debt.

**`tax_payables`**: `float`

Tax payables.

**`current_deferred_revenue`**: `float`

Current deferred revenue.

**`other_current_liabilities`**: `float`

Other current liabilities.

**`total_current_liabilities`**: `float`

Total current liabilities.

**`long_term_debt`**: `float`

Long term debt.

**`deferred_revenue_non_current`**: `float`

Non current deferred revenue.

**`deferred_tax_liabilities_non_current`**: `float`

Deferred tax liabilities non current.

**`other_non_current_liabilities`**: `float`

Other non current liabilities.

**`total_non_current_liabilities`**: `float`

Total non current liabilities.

**`other_liabilities`**: `float`

Other liabilities.

**`capital_lease_obligations`**: `float`

Capital lease obligations.

**`total_liabilities`**: `float`

Total liabilities.

**`preferred_stock`**: `float`

Preferred stock.

**`common_stock`**: `float`

Common stock.

**`retained_earnings`**: `float`

Retained earnings.

**`accumulated_other_comprehensive_income`**: `float`

Accumulated other comprehensive income (loss).

**`other_shareholders_equity`**: `float`

Other shareholders equity.

**`other_total_shareholders_equity`**: `float`

Other total shareholders equity.

**`total_common_equity`**: `float`

Total common equity.

**`total_equity_non_controlling_interests`**: `float`

Total equity non controlling interests.

**`total_liabilities_and_shareholders_equity`**: `float`

Total liabilities and shareholders equity.

**`minority_interest`**: `float`

Minority interest.

**`total_liabilities_and_total_equity`**: `float`

Total liabilities and total equity.

**`total_investments`**: `float`

Total investments.

**`total_debt`**: `float`

Total debt.

**`net_debt`**: `float`

Net debt.

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`cash_and_cash_equivalents`**: `float`

Cash and cash equivalents.

**`cash_and_due_from_banks`**: `float`

Cash and due from banks.

**`restricted_cash`**: `float`

Restricted cash.

**`short_term_investments`**: `float`

Short term investments.

**`federal_funds_sold`**: `float`

Federal funds sold.

**`accounts_receivable`**: `float`

Accounts receivable.

**`note_and_lease_receivable`**: `float`

Note and lease receivable. (Vendor non-trade receivables)

**`inventories`**: `float`

Net Inventories.

**`customer_and_other_receivables`**: `float`

Customer and other receivables.

**`interest_bearing_deposits_at_other_banks`**: `float`

Interest bearing deposits at other banks.

**`time_deposits_placed_and_other_short_term_investments`**: `float`

Time deposits placed and other short term investments.

**`trading_account_securities`**: `float`

Trading account securities.

**`loans_and_leases`**: `float`

Loans and leases.

**`allowance_for_loan_and_lease_losses`**: `float`

Allowance for loan and lease losses.

**`current_deferred_refundable_income_taxes`**: `float`

Current deferred refundable income taxes.

**`other_current_assets`**: `float`

Other current assets.

**`loans_and_leases_net_of_allowance`**: `float`

Loans and leases net of allowance.

**`accrued_investment_income`**: `float`

Accrued investment income.

**`other_current_non_operating_assets`**: `float`

Other current non-operating assets.

**`loans_held_for_sale`**: `float`

Loans held for sale.

**`prepaid_expenses`**: `float`

Prepaid expenses.

**`total_current_assets`**: `float`

Total current assets.

**`plant_property_equipment_gross`**: `float`

Plant property equipment gross.

**`accumulated_depreciation`**: `float`

Accumulated depreciation.

**`premises_and_equipment_net`**: `float`

Net premises and equipment.

**`plant_property_equipment_net`**: `float`

Net plant property equipment.

**`long_term_investments`**: `float`

Long term investments.

**`mortgage_servicing_rights`**: `float`

Mortgage servicing rights.

**`unearned_premiums_asset`**: `float`

Unearned premiums asset.

**`non_current_note_lease_receivables`**: `float`

Non-current note lease receivables.

**`deferred_acquisition_cost`**: `float`

Deferred acquisition cost.

**`goodwill`**: `float`

Goodwill.

**`separate_account_business_assets`**: `float`

Separate account business assets.

**`non_current_deferred_refundable_income_taxes`**: `float`

Noncurrent deferred refundable income taxes.

**`intangible_assets`**: `float`

Intangible assets.

**`employee_benefit_assets`**: `float`

Employee benefit assets.

**`other_assets`**: `float`

Other assets.

**`other_non_current_operating_assets`**: `float`

Other noncurrent operating assets.

**`other_non_current_non_operating_assets`**: `float`

Other noncurrent non-operating assets.

**`interest_bearing_deposits`**: `float`

Interest bearing deposits.

**`total_non_current_assets`**: `float`

Total noncurrent assets.

**`total_assets`**: `float`

Total assets.

**`non_interest_bearing_deposits`**: `float`

Non interest bearing deposits.

**`federal_funds_purchased_and_securities_sold`**: `float`

Federal funds purchased and securities sold.

**`bankers_acceptance_outstanding`**: `float`

Bankers acceptance outstanding.

**`short_term_debt`**: `float`

Short term debt.

**`accounts_payable`**: `float`

Accounts payable.

**`current_deferred_revenue`**: `float`

Current deferred revenue.

**`current_deferred_payable_income_tax_liabilities`**: `float`

Current deferred payable income tax liabilities.

**`accrued_interest_payable`**: `float`

Accrued interest payable.

**`accrued_expenses`**: `float`

Accrued expenses.

**`other_short_term_payables`**: `float`

Other short term payables.

**`customer_deposits`**: `float`

Customer deposits.

**`dividends_payable`**: `float`

Dividends payable.

**`claims_and_claim_expense`**: `float`

Claims and claim expense.

**`future_policy_benefits`**: `float`

Future policy benefits.

**`current_employee_benefit_liabilities`**: `float`

Current employee benefit liabilities.

**`unearned_premiums_liability`**: `float`

Unearned premiums liability.

**`other_taxes_payable`**: `float`

Other taxes payable.

**`policy_holder_funds`**: `float`

Policy holder funds.

**`other_current_liabilities`**: `float`

Other current liabilities.

**`other_current_non_operating_liabilities`**: `float`

Other current non-operating liabilities.

**`separate_account_business_liabilities`**: `float`

Separate account business liabilities.

**`total_current_liabilities`**: `float`

Total current liabilities.

**`long_term_debt`**: `float`

Long term debt.

**`other_long_term_liabilities`**: `float`

Other long term liabilities.

**`non_current_deferred_revenue`**: `float`

Non-current deferred revenue.

**`non_current_deferred_payable_income_tax_liabilities`**: `float`

Non-current deferred payable income tax liabilities.

**`non_current_employee_benefit_liabilities`**: `float`

Non-current employee benefit liabilities.

**`other_non_current_operating_liabilities`**: `float`

Other non-current operating liabilities.

**`other_non_current_non_operating_liabilities`**: `float`

Other non-current, non-operating liabilities.

**`total_non_current_liabilities`**: `float`

Total non-current liabilities.

**`capital_lease_obligations`**: `float`

Capital lease obligations.

**`asset_retirement_reserve_litigation_obligation`**: `float`

Asset retirement reserve litigation obligation.

**`total_liabilities`**: `float`

Total liabilities.

**`commitments_contingencies`**: `float`

Commitments contingencies.

**`redeemable_non_controlling_interest`**: `float`

Redeemable non-controlling interest.

**`preferred_stock`**: `float`

Preferred stock.

**`common_stock`**: `float`

Common stock.

**`retained_earnings`**: `float`

Retained earnings.

**`treasury_stock`**: `float`

Treasury stock.

**`accumulated_other_comprehensive_income`**: `float`

Accumulated other comprehensive income.

**`participating_policy_holder_equity`**: `float`

Participating policy holder equity.

**`other_equity_adjustments`**: `float`

Other equity adjustments.

**`total_common_equity`**: `float`

Total common equity.

**`total_preferred_common_equity`**: `float`

Total preferred common equity.

**`non_controlling_interest`**: `float`

Non-controlling interest.

**`total_equity_non_controlling_interests`**: `float`

Total equity non-controlling interests.

**`total_liabilities_shareholders_equity`**: `float`

Total liabilities and shareholders equity.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`accounts_receivable`**: `float`

Accounts receivable

**`marketable_securities`**: `float`

Marketable securities

**`prepaid_expenses`**: `float`

Prepaid expenses

**`other_current_assets`**: `float`

Other current assets

**`total_current_assets`**: `float`

Total current assets

**`property_plant_equipment_net`**: `float`

Property plant and equipment net

**`inventory`**: `float`

Inventory

**`other_non_current_assets`**: `float`

Other non-current assets

**`total_non_current_assets`**: `float`

Total non-current assets

**`intangible_assets`**: `float`

Intangible assets

**`total_assets`**: `float`

Total assets

**`accounts_payable`**: `float`

Accounts payable

**`employee_wages`**: `float`

Employee wages

**`other_current_liabilities`**: `float`

Other current liabilities

**`total_current_liabilities`**: `float`

Total current liabilities

**`other_non_current_liabilities`**: `float`

Other non-current liabilities

**`total_non_current_liabilities`**: `float`

Total non-current liabilities

**`long_term_debt`**: `float`

Long term debt

**`total_liabilities`**: `float`

Total liabilities

**`minority_interest`**: `float`

Minority interest

**`temporary_equity_attributable_to_parent`**: `float`

Temporary equity attributable to parent

**`equity_attributable_to_parent`**: `float`

Equity attributable to parent

**`temporary_equity`**: `float`

Temporary equity

**`preferred_stock`**: `float`

Preferred stock

**`redeemable_non_controlling_interest`**: `float`

Redeemable non-controlling interest

**`redeemable_non_controlling_interest_other`**: `float`

Redeemable non-controlling interest other

**`total_shareholders_equity`**: `float`

Total stock holders equity

**`total_equity`**: `float`

Total equity

**`total_liabilities_and_shareholders_equity`**: `float`

Total liabilities and stockholders equity

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "balance_growth"
description: "Learn about balance sheet statement growth, equity data for a company,  parameters like symbol, limit, and provider, and explore the returned results, warnings,  charts, and metadata. Retrieve detailed data on various balance sheet growth metrics  like cash and cash equivalents, short-term investments, inventory, total assets,  total liabilities, and more."
keywords:
- balance sheet statement growth
- company balance sheet growth
- equity data
- symbol
- limit parameter
- provider parameter
- results
- balance sheet growth
- warnings
- chart
- metadata
- data
- cash and cash equivalents
- short-term investments
- net receivables
- inventory
- current assets
- property, plant, and equipment
- goodwill
- intangible assets
- long-term investments
- tax assets
- other non-current assets
- total non-current assets
- other assets
- total assets
- accounts payable
- short-term debt
- total current liabilities
- long-term debt
- non-current deferred revenue
- non-current deferred tax liabilities
- total non-current liabilities
- common stock
- retained earnings
- accumulated other comprehensive income/loss
- total stockholders' equity
- total liabilities and stockholders' equity
- total investments
- total debt
- net debt
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/balance_growth - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the growth of a company's balance sheet items over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.balance_growth(symbol='AAPL', provider='fmp')
obb.equity.fundamental.balance_growth(symbol='AAPL', limit=10, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BalanceSheetGrowth]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_cash_and_cash_equivalents`**: `float`

Growth rate of cash and cash equivalents.

**`growth_short_term_investments`**: `float`

Growth rate of short-term investments.

**`growth_cash_and_short_term_investments`**: `float`

Growth rate of cash and short-term investments.

**`growth_net_receivables`**: `float`

Growth rate of net receivables.

**`growth_inventory`**: `float`

Growth rate of inventory.

**`growth_other_current_assets`**: `float`

Growth rate of other current assets.

**`growth_total_current_assets`**: `float`

Growth rate of total current assets.

**`growth_property_plant_equipment_net`**: `float`

Growth rate of net property, plant, and equipment.

**`growth_goodwill`**: `float`

Growth rate of goodwill.

**`growth_intangible_assets`**: `float`

Growth rate of intangible assets.

**`growth_goodwill_and_intangible_assets`**: `float`

Growth rate of goodwill and intangible assets.

**`growth_long_term_investments`**: `float`

Growth rate of long-term investments.

**`growth_tax_assets`**: `float`

Growth rate of tax assets.

**`growth_other_non_current_assets`**: `float`

Growth rate of other non-current assets.

**`growth_total_non_current_assets`**: `float`

Growth rate of total non-current assets.

**`growth_other_assets`**: `float`

Growth rate of other assets.

**`growth_total_assets`**: `float`

Growth rate of total assets.

**`growth_account_payables`**: `float`

Growth rate of accounts payable.

**`growth_short_term_debt`**: `float`

Growth rate of short-term debt.

**`growth_tax_payables`**: `float`

Growth rate of tax payables.

**`growth_deferred_revenue`**: `float`

Growth rate of deferred revenue.

**`growth_other_current_liabilities`**: `float`

Growth rate of other current liabilities.

**`growth_total_current_liabilities`**: `float`

Growth rate of total current liabilities.

**`growth_long_term_debt`**: `float`

Growth rate of long-term debt.

**`growth_deferred_revenue_non_current`**: `float`

Growth rate of non-current deferred revenue.

**`growth_deferrred_tax_liabilities_non_current`**: `float`

Growth rate of non-current deferred tax liabilities.

**`growth_other_non_current_liabilities`**: `float`

Growth rate of other non-current liabilities.

**`growth_total_non_current_liabilities`**: `float`

Growth rate of total non-current liabilities.

**`growth_other_liabilities`**: `float`

Growth rate of other liabilities.

**`growth_total_liabilities`**: `float`

Growth rate of total liabilities.

**`growth_common_stock`**: `float`

Growth rate of common stock.

**`growth_retained_earnings`**: `float`

Growth rate of retained earnings.

**`growth_accumulated_other_comprehensive_income`**: `float`

Growth rate of accumulated other comprehensive income/loss.

**`growth_other_total_shareholders_equity`**: `float`

Growth rate of other total stockholders' equity.

**`growth_total_shareholders_equity`**: `float`

Growth rate of total stockholders' equity.

**`growth_total_liabilities_and_shareholders_equity`**: `float`

Growth rate of total liabilities and stockholders' equity.

**`growth_total_investments`**: `float`

Growth rate of total investments.

**`growth_total_debt`**: `float`

Growth rate of total debt.

**`growth_net_debt`**: `float`

Growth rate of net debt.

</TabItem>
</Tabs>



---

---
title: "cash"
description: "Learn how to use the Cash Flow Statement API endpoint to retrieve information  about cash flow statements. Understand the parameters and return values of the API,  and explore the available data fields for cash flow statements."
keywords:
- Cash Flow Statement
- cash flow statement parameters
- cash flow statement returns
- cash flow statement data
- python obb.equity.fundamental.cash
- symbol
- period
- limit
- provider
- cik
- filing date
- period of report date
- include sources
- order
- sort
- net income
- depreciation and amortization
- stock based compensation
- deferred income tax
- other non-cash items
- changes in operating assets and liabilities
- accounts receivables
- inventory
- vendor non-trade receivables
- other current and non-current assets
- accounts payables
- deferred revenue
- other current and non-current liabilities
- net cash flow from operating activities
- purchases of marketable securities
- sales from maturities of investments
- investments in property plant and equipment
- payments from acquisitions
- other investing activities
- net cash flow from investing activities
- taxes paid on net share settlement
- dividends paid
- common stock repurchased
- debt proceeds
- debt repayment
- other financing activities
- net cash flow from financing activities
- net change in cash
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/cash - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the cash flow statement for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.cash(symbol='AAPL', provider='fmp')
obb.equity.fundamental.cash(symbol='AAPL', period=annual, limit=5, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Default:* `False`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CashFlowStatement]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'polygon', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date of the filing.

**`accepted_date`**: `datetime`

The date the filing was accepted.

**`reported_currency`**: `str`

The currency in which the cash flow statement was reported.

**`net_income`**: `float`

Net income.

**`depreciation_and_amortization`**: `float`

Depreciation and amortization.

**`deferred_income_tax`**: `float`

Deferred income tax.

**`stock_based_compensation`**: `float`

Stock-based compensation.

**`change_in_working_capital`**: `float`

Change in working capital.

**`change_in_account_receivables`**: `float`

Change in account receivables.

**`change_in_inventory`**: `float`

Change in inventory.

**`change_in_account_payable`**: `float`

Change in account payable.

**`change_in_other_working_capital`**: `float`

Change in other working capital.

**`change_in_other_non_cash_items`**: `float`

Change in other non-cash items.

**`net_cash_from_operating_activities`**: `float`

Net cash from operating activities.

**`purchase_of_property_plant_and_equipment`**: `float`

Purchase of property, plant and equipment.

**`acquisitions`**: `float`

Acquisitions.

**`purchase_of_investment_securities`**: `float`

Purchase of investment securities.

**`sale_and_maturity_of_investments`**: `float`

Sale and maturity of investments.

**`other_investing_activities`**: `float`

Other investing activities.

**`net_cash_from_investing_activities`**: `float`

Net cash from investing activities.

**`repayment_of_debt`**: `float`

Repayment of debt.

**`issuance_of_common_equity`**: `float`

Issuance of common equity.

**`repurchase_of_common_equity`**: `float`

Repurchase of common equity.

**`payment_of_dividends`**: `float`

Payment of dividends.

**`other_financing_activities`**: `float`

Other financing activities.

**`net_cash_from_financing_activities`**: `float`

Net cash from financing activities.

**`effect_of_exchange_rate_changes_on_cash`**: `float`

Effect of exchange rate changes on cash.

**`net_change_in_cash_and_equivalents`**: `float`

Net change in cash and equivalents.

**`cash_at_beginning_of_period`**: `float`

Cash at beginning of period.

**`cash_at_end_of_period`**: `float`

Cash at end of period.

**`operating_cash_flow`**: `float`

Operating cash flow.

**`capital_expenditure`**: `float`

Capital expenditure.

**`free_cash_flow`**: `float`

None

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`net_income_continuing_operations`**: `float`

Net Income (Continuing Operations)

**`net_income_discontinued_operations`**: `float`

Net Income (Discontinued Operations)

**`net_income`**: `float`

Consolidated Net Income.

**`provision_for_loan_losses`**: `float`

Provision for Loan Losses

**`provision_for_credit_losses`**: `float`

Provision for credit losses

**`depreciation_expense`**: `float`

Depreciation Expense.

**`amortization_expense`**: `float`

Amortization Expense.

**`share_based_compensation`**: `float`

Share-based compensation.

**`non_cash_adjustments_to_reconcile_net_income`**: `float`

Non-Cash Adjustments to Reconcile Net Income.

**`changes_in_operating_assets_and_liabilities`**: `float`

Changes in Operating Assets and Liabilities (Net)

**`net_cash_from_continuing_operating_activities`**: `float`

Net Cash from Continuing Operating Activities

**`net_cash_from_discontinued_operating_activities`**: `float`

Net Cash from Discontinued Operating Activities

**`net_cash_from_operating_activities`**: `float`

Net Cash from Operating Activities

**`divestitures`**: `float`

Divestitures

**`sale_of_property_plant_and_equipment`**: `float`

Sale of Property, Plant, and Equipment

**`acquisitions`**: `float`

Acquisitions

**`purchase_of_investments`**: `float`

Purchase of Investments

**`purchase_of_investment_securities`**: `float`

Purchase of Investment Securities

**`sale_and_maturity_of_investments`**: `float`

Sale and Maturity of Investments

**`loans_held_for_sale`**: `float`

Loans Held for Sale (Net)

**`purchase_of_property_plant_and_equipment`**: `float`

Purchase of Property, Plant, and Equipment

**`other_investing_activities`**: `float`

Other Investing Activities (Net)

**`net_cash_from_continuing_investing_activities`**: `float`

Net Cash from Continuing Investing Activities

**`net_cash_from_discontinued_investing_activities`**: `float`

Net Cash from Discontinued Investing Activities

**`net_cash_from_investing_activities`**: `float`

Net Cash from Investing Activities

**`payment_of_dividends`**: `float`

Payment of Dividends

**`repurchase_of_common_equity`**: `float`

Repurchase of Common Equity

**`repurchase_of_preferred_equity`**: `float`

Repurchase of Preferred Equity

**`issuance_of_common_equity`**: `float`

Issuance of Common Equity

**`issuance_of_preferred_equity`**: `float`

Issuance of Preferred Equity

**`issuance_of_debt`**: `float`

Issuance of Debt

**`repayment_of_debt`**: `float`

Repayment of Debt

**`other_financing_activities`**: `float`

Other Financing Activities (Net)

**`cash_interest_received`**: `float`

Cash Interest Received

**`net_change_in_deposits`**: `float`

Net Change in Deposits

**`net_increase_in_fed_funds_sold`**: `float`

Net Increase in Fed Funds Sold

**`net_cash_from_continuing_financing_activities`**: `float`

Net Cash from Continuing Financing Activities

**`net_cash_from_discontinued_financing_activities`**: `float`

Net Cash from Discontinued Financing Activities

**`net_cash_from_financing_activities`**: `float`

Net Cash from Financing Activities

**`effect_of_exchange_rate_changes`**: `float`

Effect of Exchange Rate Changes

**`other_net_changes_in_cash`**: `float`

Other Net Changes in Cash

**`net_change_in_cash_and_equivalents`**: `float`

Net Change in Cash and Equivalents

**`cash_income_taxes_paid`**: `float`

Cash Income Taxes Paid

**`cash_interest_paid`**: `float`

Cash Interest Paid

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`net_cash_flow_from_operating_activities_continuing`**: `float`

Net cash flow from operating activities continuing.

**`net_cash_flow_from_operating_activities_discontinued`**: `float`

Net cash flow from operating activities discontinued.

**`net_cash_flow_from_operating_activities`**: `float`

Net cash flow from operating activities.

**`net_cash_flow_from_investing_activities_continuing`**: `float`

Net cash flow from investing activities continuing.

**`net_cash_flow_from_investing_activities_discontinued`**: `float`

Net cash flow from investing activities discontinued.

**`net_cash_flow_from_investing_activities`**: `float`

Net cash flow from investing activities.

**`net_cash_flow_from_financing_activities_continuing`**: `float`

Net cash flow from financing activities continuing.

**`net_cash_flow_from_financing_activities_discontinued`**: `float`

Net cash flow from financing activities discontinued.

**`net_cash_flow_from_financing_activities`**: `float`

Net cash flow from financing activities.

**`net_cash_flow_continuing`**: `float`

Net cash flow continuing.

**`net_cash_flow_discontinued`**: `float`

Net cash flow discontinued.

**`exchange_gains_losses`**: `float`

Exchange gains losses.

**`net_cash_flow`**: `float`

Net cash flow.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "cash_growth"
description: "Learn about Cash Flow Statement Growth and how to retrieve cash growth  data using the Python function obb.equity.fundamental.cash_growth(). This page provides  details on the function's parameters and the data it returns, including information  on net income, depreciation and amortization, working capital, investments, financing  activities, and more."
keywords:
- Cash Flow Statement Growth
- company cash flow
- cash growth
- Python
- function
- parameters
- symbol
- limit
- provider
- data
- returns
- net income
- depreciation and amortization
- deferred income tax
- stock-based compensation
- working capital
- accounts receivables
- inventory
- accounts payables
- other non-cash items
- net cash provided by operating activities
- investments in property, plant, and equipment
- net acquisitions
- purchases of investments
- sales maturities of investments
- net cash used for investing activities
- debt repayment
- common stock issued
- common stock repurchased
- dividends paid
- net cash used/provided by financing activities
- foreign exchange changes on cash
- net change in cash
- cash at end of period
- cash at beginning of period
- operating cash flow
- capital expenditure
- free cash flow
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/cash_growth - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the growth of a company's cash flow statement items over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.cash_growth(symbol='AAPL', provider='fmp')
obb.equity.fundamental.cash_growth(symbol='AAPL', limit=10, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CashFlowStatementGrowth]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_net_income`**: `float`

Growth rate of net income.

**`growth_depreciation_and_amortization`**: `float`

Growth rate of depreciation and amortization.

**`growth_deferred_income_tax`**: `float`

Growth rate of deferred income tax.

**`growth_stock_based_compensation`**: `float`

Growth rate of stock-based compensation.

**`growth_change_in_working_capital`**: `float`

Growth rate of change in working capital.

**`growth_account_receivables`**: `float`

Growth rate of accounts receivables.

**`growth_inventory`**: `float`

Growth rate of inventory.

**`growth_account_payable`**: `float`

Growth rate of account payable.

**`growth_other_working_capital`**: `float`

Growth rate of other working capital.

**`growth_other_non_cash_items`**: `float`

Growth rate of other non-cash items.

**`growth_net_cash_from_operating_activities`**: `float`

Growth rate of net cash provided by operating activities.

**`growth_purchase_of_property_plant_and_equipment`**: `float`

Growth rate of investments in property, plant, and equipment.

**`growth_acquisitions`**: `float`

Growth rate of net acquisitions.

**`growth_purchase_of_investment_securities`**: `float`

Growth rate of purchases of investments.

**`growth_sale_and_maturity_of_investments`**: `float`

Growth rate of sales maturities of investments.

**`growth_other_investing_activities`**: `float`

Growth rate of other investing activities.

**`growth_net_cash_from_investing_activities`**: `float`

Growth rate of net cash used for investing activities.

**`growth_repayment_of_debt`**: `float`

Growth rate of debt repayment.

**`growth_common_stock_issued`**: `float`

Growth rate of common stock issued.

**`growth_common_stock_repurchased`**: `float`

Growth rate of common stock repurchased.

**`growth_dividends_paid`**: `float`

Growth rate of dividends paid.

**`growth_other_financing_activities`**: `float`

Growth rate of other financing activities.

**`growth_net_cash_from_financing_activities`**: `float`

Growth rate of net cash used/provided by financing activities.

**`growth_effect_of_exchange_rate_changes_on_cash`**: `float`

Growth rate of the effect of foreign exchange changes on cash.

**`growth_net_change_in_cash_and_equivalents`**: `float`

Growth rate of net change in cash.

**`growth_cash_at_beginning_of_period`**: `float`

Growth rate of cash at the beginning of the period.

**`growth_cash_at_end_of_period`**: `float`

Growth rate of cash at the end of the period.

**`growth_operating_cash_flow`**: `float`

Growth rate of operating cash flow.

**`growth_capital_expenditure`**: `float`

Growth rate of capital expenditure.

**`growth_free_cash_flow`**: `float`

Growth rate of free cash flow.

</TabItem>
</Tabs>



---

---
title: "dividends"
description: "Get historical dividends data for a given company with the OBB.equity.fundamental.dividends  function. Explore parameters like symbol and provider, and understand the returned  results, warnings, and metadata. View the data fields, including date, label, adj_dividend,  dividend, record_date, payment_date, and declaration_date."
keywords:
- historical dividends
- dividends data
- company dividends
- symbol
- data provider
- default provider
- results
- warnings
- chart
- metadata
- date
- label
- adj_dividend
- dividend
- record_date
- payment_date
- declaration_date
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/dividends - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical dividend data for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.dividends(symbol='AAPL', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): nasdaq.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalDividends]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'nasdaq', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`label`**: `str`

Label of the historical dividends.

**`adj_dividend`**: `float`

Adjusted dividend of the historical dividends.

**`record_date`**: `date`

Record date of the historical dividends.

**`payment_date`**: `date`

Payment date of the historical dividends.

**`declaration_date`**: `date`

Declaration date of the historical dividends.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`factor`**: `float`

factor by which to multiply stock prices before this date, in order to calculate historically-adjusted stock prices.

**`currency`**: `str`

The currency in which the dividend is paid.

**`split_ratio`**: `float`

The ratio of the stock split, if a stock split occurred.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`dividend_type`**: `str`

The type of dividend - i.e., cash, stock.

**`currency`**: `str`

The currency in which the dividend is paid.

**`record_date`**: `date`

The record date of ownership for eligibility.

**`payment_date`**: `date`

The payment date of the dividend.

**`declaration_date`**: `date`

Declaration date of the dividend.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

**`currency`**: `str`

The currency the dividend is paid in.

**`decalaration_date`**: `date`

The date of the announcement.

**`record_date`**: `date`

The record date of ownership for rights to the dividend.

**`payment_date`**: `date`

The date the dividend is paid.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`ex_dividend_date`**: `date`

The ex-dividend date - the date on which the stock begins trading without rights to the dividend.

**`amount`**: `float`

The dividend amount per share.

</TabItem>
</Tabs>



---

---
title: "employee_count"
description: "Learn how to retrieve historical employee count data using the Python  API. Understand the parameters, returns, and data structure for the OBB.equity.fundamental.employee_count  method."
keywords:
- historical employees
- employee count
- Python API
- data retrieval
- symbol
- provider
- warnings
- chart object
- metadata
- data
- CIK
- acceptance time
- period of report
- company name
- form type
- filing date
- source URL
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/employee_count - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical employee count data for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.employee_count(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalEmployees]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`acceptance_time`**: `datetime`

Time of acceptance of the company employee.

**`period_of_report`**: `date`

Date of reporting of the company employee.

**`company_name`**: `str`

Registered name of the company to retrieve the historical employees of.

**`form_type`**: `str`

Form type of the company employee.

**`filing_date`**: `date`

Filing date of the company employee

**`employee_count`**: `int`

Count of employees of the company.

**`source`**: `str`

Source URL which retrieves this data for the company.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`acceptance_time`**: `datetime`

Time of acceptance of the company employee.

**`period_of_report`**: `date`

Date of reporting of the company employee.

**`company_name`**: `str`

Registered name of the company to retrieve the historical employees of.

**`form_type`**: `str`

Form type of the company employee.

**`filing_date`**: `date`

Filing date of the company employee

**`employee_count`**: `int`

Count of employees of the company.

**`source`**: `str`

Source URL which retrieves this data for the company.

</TabItem>
</Tabs>



---

---
title: "filings"
description: "Learn how to retrieve company filings data such as date, type of document,  and link. Understand the available parameters to filter the data, including symbol,  limit, provider, type, and page. Explore the different fields in the data, such  as ticker symbol, accepted date, and final link."
keywords:
- company filings
- data entries
- symbol
- limit
- provider
- type
- page
- cik
- date
- link
- ticker symbol
- accepted date
- final link
- report date
- act
- items
- primary doc description
- primary doc
- accession number
- file number
- film number
- is inline xbrl
- is xbrl
- size
- complete submission url
- filing detail url
- xml
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/filings - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get public company filings.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.filings(provider='fmp')
obb.equity.fundamental.filings(limit=100, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`form_type`**: `str`

SEC form type to filter by.

 • *Optional:* `True`

---

**`limit`**: `int`

Number of results to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`form_type`**: `str`

SEC form type to filter by.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`thea_enabled`**: `bool`

Return filings that have been read by Intrinio's Thea NLP.

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`year`**: `int`

Calendar year of the data, default is current year. The earliest year available is 1994, for all companies and form types.

 • *Optional:* `True`

---

**`form_group`**: `Literal['annual', 'quarterly', 'proxy', 'insider', '8k', 'registration', 'comment']`

The form group to fetch, default is 8k.

 • *Default:* `8k`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`cik`**: `Union[str, int]`

Lookup filings by Central Index Key (CIK) instead of by symbol.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`form_type`**: `Union[str, list[str]]`

SEC form type to filter by. Multiple items allowed for provider(s): sec.

<details>
<summary mdxType="summary">Choices</summary>

- `1`
- `1-A`
- `1-A_POS`
- `1-A-W`
- `1-E`
- `1-E_AD`
- `1-K`
- `1-SA`
- `1-U`
- `1-Z`
- `1-Z-W`
- `10-12B`
- `10-12G`
- `10-D`
- `10-K`
- `10-KT`
- `10-Q`
- `10-QT`
- `11-K`
- `11-KT`
- `13F-HR`
- `13F-NT`
- `13FCONP`
- `144`
- `15-12B`
- `15-12G`
- `15-15D`
- `15F-12B`
- `15F-12G`
- `15F-15D`
- `18-12B`
- `18-K`
- `19B-4E`
- `2-A`
- `2-AF`
- `2-E`
- `20-F`
- `20FR12B`
- `20FR12G`
- `24F-2NT`
- `25`
- `25-NSE`
- `253G1`
- `253G2`
- `253G3`
- `253G4`
- `3`
- `305B2`
- `34-12H`
- `4`
- `40-17F1`
- `40-17F2`
- `40-17G`
- `40-17GCS`
- `40-202A`
- `40-203A`
- `40-206A`
- `40-24B2`
- `40-33`
- `40-6B`
- `40-8B25`
- `40-8F-2`
- `40-APP`
- `40-F`
- `40-OIP`
- `40FR12B`
- `40FR12G`
- `424A`
- `424B1`
- `424B2`
- `424B3`
- `424B4`
- `424B5`
- `424B7`
- `424B8`
- `424H`
- `425`
- `485APOS`
- `485BPOS`
- `485BXT`
- `486APOS`
- `486BPOS`
- `486BXT`
- `487`
- `497`
- `497AD`
- `497H2`
- `497J`
- `497K`
- `497VPI`
- `497VPU`
- `5`
- `6-K`
- `6B_NTC`
- `6B_ORDR`
- `8-A12B`
- `8-A12G`
- `8-K`
- `8-K12B`
- `8-K12G3`
- `8-K15D5`
- `8-M`
- `8F-2_NTC`
- `8F-2_ORDR`
- `9-M`
- `ABS-15G`
- `ABS-EE`
- `ADN-MTL`
- `ADV-E`
- `ADV-H-C`
- `ADV-H-T`
- `ADV-NR`
- `ANNLRPT`
- `APP_NTC`
- `APP_ORDR`
- `APP_WD`
- `APP_WDG`
- `ARS`
- `ATS-N`
- `ATS-N-C`
- `ATS-N/UA`
- `AW`
- `AW_WD`
- `C`
- `C-AR`
- `C-AR-W`
- `C-TR`
- `C-TR-W`
- `C-U`
- `C-U-W`
- `C-W`
- `CB`
- `CERT`
- `CERTARCA`
- `CERTBATS`
- `CERTCBO`
- `CERTNAS`
- `CERTNYS`
- `CERTPAC`
- `CFPORTAL`
- `CFPORTAL-W`
- `CORRESP`
- `CT_ORDER`
- `D`
- `DEF_14A`
- `DEF_14C`
- `DEFA14A`
- `DEFA14C`
- `DEFC14A`
- `DEFC14C`
- `DEFM14A`
- `DEFM14C`
- `DEFN14A`
- `DEFR14A`
- `DEFR14C`
- `DEL_AM`
- `DFAN14A`
- `DFRN14A`
- `DOS`
- `DOSLTR`
- `DRS`
- `DRSLTR`
- `DSTRBRPT`
- `EFFECT`
- `F-1`
- `F-10`
- `F-10EF`
- `F-10POS`
- `F-1MEF`
- `F-3`
- `F-3ASR`
- `F-3D`
- `F-3DPOS`
- `F-3MEF`
- `F-4`
- `F-4_POS`
- `F-4MEF`
- `F-6`
- `F-6_POS`
- `F-6EF`
- `F-7`
- `F-7_POS`
- `F-8`
- `F-8_POS`
- `F-80`
- `F-80POS`
- `F-9`
- `F-9_POS`
- `F-N`
- `F-X`
- `FOCUSN`
- `FWP`
- `G-405`
- `G-405N`
- `G-FIN`
- `G-FINW`
- `IRANNOTICE`
- `MA`
- `MA-A`
- `MA-I`
- `MA-W`
- `MSD`
- `MSDCO`
- `MSDW`
- `N-1`
- `N-14`
- `N-14_8C`
- `N-14MEF`
- `N-18F1`
- `N-1A`
- `N-2`
- `N-2_POSASR`
- `N-23C-2`
- `N-23C3A`
- `N-23C3B`
- `N-23C3C`
- `N-2ASR`
- `N-2MEF`
- `N-30B-2`
- `N-30D`
- `N-4`
- `N-5`
- `N-54A`
- `N-54C`
- `N-6`
- `N-6F`
- `N-8A`
- `N-8B-2`
- `N-8F`
- `N-8F_NTC`
- `N-8F_ORDR`
- `N-CEN`
- `N-CR`
- `N-CSR`
- `N-CSRS`
- `N-MFP`
- `N-MFP1`
- `N-MFP2`
- `N-PX`
- `N-Q`
- `N-VP`
- `N-VPFS`
- `NO_ACT`
- `NPORT-EX`
- `NPORT-NP`
- `NPORT-P`
- `NRSRO-CE`
- `NRSRO-UPD`
- `NSAR-A`
- `NSAR-AT`
- `NSAR-B`
- `NSAR-BT`
- `NSAR-U`
- `NT_10-D`
- `NT_10-K`
- `NT_10-Q`
- `NT_11-K`
- `NT_20-F`
- `NT_N-CEN`
- `NT_N-MFP`
- `NT_N-MFP1`
- `NT_N-MFP2`
- `NT_NPORT-EX`
- `NT_NPORT-P`
- `NT-NCEN`
- `NT-NCSR`
- `NT-NSAR`
- `NTFNCEN`
- `NTFNCSR`
- `NTFNSAR`
- `NTN_10D`
- `NTN_10K`
- `NTN_10Q`
- `NTN_20F`
- `OIP_NTC`
- `OIP_ORDR`
- `POS_8C`
- `POS_AM`
- `POS_AMI`
- `POS_EX`
- `POS462B`
- `POS462C`
- `POSASR`
- `PRE_14A`
- `PRE_14C`
- `PREC14A`
- `PREC14C`
- `PREM14A`
- `PREM14C`
- `PREN14A`
- `PRER14A`
- `PRER14C`
- `PRRN14A`
- `PX14A6G`
- `PX14A6N`
- `QRTLYRPT`
- `QUALIF`
- `REG-NR`
- `REVOKED`
- `RW`
- `RW_WD`
- `S-1`
- `S-11`
- `S-11MEF`
- `S-1MEF`
- `S-20`
- `S-3`
- `S-3ASR`
- `S-3D`
- `S-3DPOS`
- `S-3MEF`
- `S-4`
- `S-4_POS`
- `S-4EF`
- `S-4MEF`
- `S-6`
- `S-8`
- `S-8_POS`
- `S-B`
- `S-BMEF`
- `SBSE`
- `SBSE-A`
- `SBSE-BD`
- `SBSE-C`
- `SBSE-W`
- `SC_13D`
- `SC_13E1`
- `SC_13E3`
- `SC_13G`
- `SC_14D9`
- `SC_14F1`
- `SC_14N`
- `SC_TO-C`
- `SC_TO-I`
- `SC_TO-T`
- `SC13E4F`
- `SC14D1F`
- `SC14D9C`
- `SC14D9F`
- `SD`
- `SDR`
- `SE`
- `SEC_ACTION`
- `SEC_STAFF_ACTION`
- `SEC_STAFF_LETTER`
- `SF-1`
- `SF-3`
- `SL`
- `SP_15D2`
- `STOP_ORDER`
- `SUPPL`
- `T-3`
- `TA-1`
- `TA-2`
- `TA-W`
- `TACO`
- `TH`
- `TTW`
- `UNDER`
- `UPLOAD`
- `WDL-REQ`
- `X-17A-5`
</details>

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.  If True, cache will store for one day.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

The start date to fetch.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

The end date to fetch.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CompanyFilings]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'nasdaq', 'sec', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`filing_url`**: `str`

URL to the filing page.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`accepted_date`**: `datetime`

Accepted date of the filing.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`id`**: `str`

Intrinio ID of the filing.

**`period_end_date`**: `date`

Ending date of the fiscal period for the filing.

**`accepted_date`**: `datetime`

Accepted date of the filing.

**`sec_unique_id`**: `str`

SEC unique ID of the filing.

**`filing_url`**: `str`

URL to the filing page.

**`instance_url`**: `str`

URL for the XBRL filing for the report.

**`industry_group`**: `str`

Industry group of the company.

**`industry_category`**: `str`

Industry category of the company.

**`word_count`**: `int`

Number of words in the filing, if available.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`period_ending`**: `date`

The ending date for the reporting period, if available.

**`name`**: `str`

The name of the company, if available.

**`reporting_owner`**: `str`

The name of the reporting owner, if applicable.

**`pdf_url`**: `str`

The URL to the PDF document, if available.

**`xls_url`**: `str`

The URL to the XLS document, if available.

**`xbr_url`**: `str`

The URL to the XBR document, if available.

**`doc_link`**: `str`

The URL to the DOC document, if available.

</TabItem>

<TabItem value='sec' label='sec'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`report_date`**: `date`

The date of the filing.

**`act`**: `Union[str, int]`

The SEC Act number.

**`items`**: `Union[str, float]`

The SEC Item numbers.

**`primary_doc_description`**: `str`

The description of the primary document.

**`primary_doc`**: `str`

The filename of the primary document.

**`accession_number`**: `Union[str, int]`

The accession number.

**`file_number`**: `Union[str, int]`

The file number.

**`film_number`**: `Union[str, int]`

The film number.

**`is_inline_xbrl`**: `Union[str, int]`

Whether the filing is an inline XBRL filing.

**`is_xbrl`**: `Union[str, int]`

Whether the filing is an XBRL filing.

**`size`**: `Union[str, int]`

The size of the filing.

**`complete_submission_url`**: `str`

The URL to the complete filing submission.

**`filing_detail_url`**: `str`

The URL to the filing details.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`filing_date`**: `date`

The date of the filing.

**`report_type`**: `str`

Type of filing.

**`report_url`**: `str`

URL to the actual report.

**`description`**: `str`

The description of the filing.

**`size`**: `str`

The file size of the PDF document.

</TabItem>
</Tabs>



---

---
title: "historical_attributes"
description: "Get the historical values of a data tag from Intrinio"
keywords:
- equity
- fundamental
- historical_attributes
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/historical_attributes - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the historical values of a data tag from Intrinio.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.historical_attributes(symbol='AAPL', tag='ebitda', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['daily', 'weekly', 'monthly', 'quarterly', 'yearly']`

The frequency of the data.

 • *Default:* `yearly`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

---

**`tag_type`**: `str`

Filter by type, when applicable.

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['daily', 'weekly', 'monthly', 'quarterly', 'yearly']`

The frequency of the data.

 • *Default:* `yearly`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

---

**`tag_type`**: `str`

Filter by type, when applicable.

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalAttributes]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `float`

The value of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `float`

The value of the data.

</TabItem>
</Tabs>



---

---
title: "historical_eps"
description: "Historical earnings-per-share for a given company"
keywords:
- equity
- fundamental
- historical_eps
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/historical_eps - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical earnings per share data for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.historical_eps(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `quarter`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalEps]`

Serializable results.

---

**`provider`**: `Optional[Literal['alpha_vantage', 'fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

**`surprise`**: `float`

Surprise in EPS (Actual - Estimated).

**`surprise_percent`**: `Union[float, str]`

EPS surprise as a normalized percent.

**`reported_date`**: `date`

Date of the earnings report.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`announce_time`**: `str`

Timing of the earnings announcement.

**`eps_actual`**: `float`

Actual EPS from the earnings date.

**`eps_estimated`**: `float`

Estimated EPS for the earnings date.

**`revenue_estimated`**: `float`

Estimated consensus revenue for the reporting period.

**`revenue_actual`**: `float`

The actual reported revenue.

**`reporting_time`**: `str`

The reporting time - e.g. after market close.

**`updated_at`**: `date`

The date when the data was last updated.

**`period_ending`**: `date`

The fiscal period end date.

</TabItem>
</Tabs>



---

---
title: "historical_splits"
description: "Learn how to retrieve historical stock splits data using the Python obb.equity.fundamental.historical_splits  function. Understand the parameters, returns, and data structure for this API call."
keywords:
- historical stock splits
- stock splits data
- python obb.equity.fundamental.historical_splits
- parameters
- symbol
- provider
- returns
- results
- provider name
- warnings
- chart object
- metadata
- data
- date
- label
- numerator
- denominator
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/historical_splits - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical stock splits for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.historical_splits(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalSplits]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`numerator`**: `float`

Numerator of the split.

**`denominator`**: `float`

Denominator of the split.

**`split_ratio`**: `str`

Split ratio.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`numerator`**: `float`

Numerator of the split.

**`denominator`**: `float`

Denominator of the split.

**`split_ratio`**: `str`

Split ratio.

</TabItem>
</Tabs>



---

---
title: "income"
description: "Get income statement and financial performance data for a company. Parameters  include symbol, period, limit, provider, and more. Data includes revenue, gross  profit, operating expenses, net income, and more."
keywords:
- income statement
- financial performance
- get income data
- period
- limit
- provider
- symbol
- cik
- filing date
- period of report date
- include sources
- order
- sort
- revenue
- cost of revenue
- gross profit
- cost and expenses
- research and development expenses
- general and administrative expenses
- selling and marketing expenses
- other expenses
- operating expenses
- depreciation and amortization
- ebitda
- operating income
- interest income
- interest expense
- income before tax
- income tax expense
- net income
- eps
- weighted average shares outstanding
- link
- reported currency
- filling date
- accepted date
- calendar year
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/income - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the income statement for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.income(symbol='AAPL', provider='fmp')
obb.equity.fundamental.income(symbol='AAPL', period=annual, limit=5, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`filing_date`**: `date`

Filing date of the financial statement.

 • *Optional:* `True`

---

**`filing_date_lt`**: `date`

Filing date less than the given date.

 • *Optional:* `True`

---

**`filing_date_lte`**: `date`

Filing date less than or equal to the given date.

 • *Optional:* `True`

---

**`filing_date_gt`**: `date`

Filing date greater than the given date.

 • *Optional:* `True`

---

**`filing_date_gte`**: `date`

Filing date greater than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date`**: `date`

Period of report date of the financial statement.

 • *Optional:* `True`

---

**`period_of_report_date_lt`**: `date`

Period of report date less than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_lte`**: `date`

Period of report date less than or equal to the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gt`**: `date`

Period of report date greater than the given date.

 • *Optional:* `True`

---

**`period_of_report_date_gte`**: `date`

Period of report date greater than or equal to the given date.

 • *Optional:* `True`

---

**`include_sources`**: `bool`

Whether to include the sources of the financial statement.

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order of the financial statement.

 • *Optional:* `True`

---

**`sort`**: `Literal['filing_date', 'period_of_report_date']`

Sort of the financial statement.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `5`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IncomeStatement]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'polygon', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`filing_date`**: `date`

The date when the filing was made.

**`accepted_date`**: `datetime`

The date and time when the filing was accepted.

**`reported_currency`**: `str`

The currency in which the balance sheet was reported.

**`revenue`**: `float`

Total revenue.

**`cost_of_revenue`**: `float`

Cost of revenue.

**`gross_profit`**: `float`

Gross profit.

**`gross_profit_margin`**: `float`

Gross profit margin.

**`general_and_admin_expense`**: `float`

General and administrative expenses.

**`research_and_development_expense`**: `float`

Research and development expenses.

**`selling_and_marketing_expense`**: `float`

Selling and marketing expenses.

**`selling_general_and_admin_expense`**: `float`

Selling, general and administrative expenses.

**`other_expenses`**: `float`

Other expenses.

**`total_operating_expenses`**: `float`

Total operating expenses.

**`cost_and_expenses`**: `float`

Cost and expenses.

**`interest_income`**: `float`

Interest income.

**`total_interest_expense`**: `float`

Total interest expenses.

**`depreciation_and_amortization`**: `float`

Depreciation and amortization.

**`ebitda`**: `float`

EBITDA.

**`ebitda_margin`**: `float`

EBITDA margin.

**`total_operating_income`**: `float`

Total operating income.

**`operating_income_margin`**: `float`

Operating income margin.

**`total_other_income_expenses`**: `float`

Total other income and expenses.

**`total_pre_tax_income`**: `float`

Total pre-tax income.

**`pre_tax_income_margin`**: `float`

Pre-tax income margin.

**`income_tax_expense`**: `float`

Income tax expense.

**`consolidated_net_income`**: `float`

Consolidated net income.

**`net_income_margin`**: `float`

Net income margin.

**`basic_earnings_per_share`**: `float`

Basic earnings per share.

**`diluted_earnings_per_share`**: `float`

Diluted earnings per share.

**`weighted_average_basic_shares_outstanding`**: `float`

Weighted average basic shares outstanding.

**`weighted_average_diluted_shares_outstanding`**: `float`

Weighted average diluted shares outstanding.

**`link`**: `str`

Link to the filing.

**`final_link`**: `str`

Link to the filing document.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`reported_currency`**: `str`

The currency in which the balance sheet is reported.

**`revenue`**: `float`

Total revenue

**`operating_revenue`**: `float`

Total operating revenue

**`cost_of_revenue`**: `float`

Total cost of revenue

**`operating_cost_of_revenue`**: `float`

Total operating cost of revenue

**`gross_profit`**: `float`

Total gross profit

**`gross_profit_margin`**: `float`

Gross margin ratio.

**`provision_for_credit_losses`**: `float`

Provision for credit losses

**`research_and_development_expense`**: `float`

Research and development expense

**`selling_general_and_admin_expense`**: `float`

Selling, general, and admin expense

**`salaries_and_employee_benefits`**: `float`

Salaries and employee benefits

**`marketing_expense`**: `float`

Marketing expense

**`net_occupancy_and_equipment_expense`**: `float`

Net occupancy and equipment expense

**`other_operating_expenses`**: `float`

Other operating expenses

**`depreciation_expense`**: `float`

Depreciation expense

**`amortization_expense`**: `float`

Amortization expense

**`amortization_of_deferred_policy_acquisition_costs`**: `float`

Amortization of deferred policy acquisition costs

**`exploration_expense`**: `float`

Exploration expense

**`depletion_expense`**: `float`

Depletion expense

**`total_operating_expenses`**: `float`

Total operating expenses

**`total_operating_income`**: `float`

Total operating income

**`deposits_and_money_market_investments_interest_income`**: `float`

Deposits and money market investments interest income

**`federal_funds_sold_and_securities_borrowed_interest_income`**: `float`

Federal funds sold and securities borrowed interest income

**`investment_securities_interest_income`**: `float`

Investment securities interest income

**`loans_and_leases_interest_income`**: `float`

Loans and leases interest income

**`trading_account_interest_income`**: `float`

Trading account interest income

**`other_interest_income`**: `float`

Other interest income

**`total_non_interest_income`**: `float`

Total non-interest income

**`interest_and_investment_income`**: `float`

Interest and investment income

**`short_term_borrowings_interest_expense`**: `float`

Short-term borrowings interest expense

**`long_term_debt_interest_expense`**: `float`

Long-term debt interest expense

**`capitalized_lease_obligations_interest_expense`**: `float`

Capitalized lease obligations interest expense

**`deposits_interest_expense`**: `float`

Deposits interest expense

**`federal_funds_purchased_and_securities_sold_interest_expense`**: `float`

Federal funds purchased and securities sold interest expense

**`other_interest_expense`**: `float`

Other interest expense

**`total_interest_expense`**: `float`

Total interest expense

**`net_interest_income`**: `float`

Net interest income

**`other_non_interest_income`**: `float`

Other non-interest income

**`investment_banking_income`**: `float`

Investment banking income

**`trust_fees_by_commissions`**: `float`

Trust fees by commissions

**`premiums_earned`**: `float`

Premiums earned

**`insurance_policy_acquisition_costs`**: `float`

Insurance policy acquisition costs

**`current_and_future_benefits`**: `float`

Current and future benefits

**`property_and_liability_insurance_claims`**: `float`

Property and liability insurance claims

**`total_non_interest_expense`**: `float`

Total non-interest expense

**`net_realized_and_unrealized_capital_gains_on_investments`**: `float`

Net realized and unrealized capital gains on investments

**`other_gains`**: `float`

Other gains

**`non_operating_income`**: `float`

Non-operating income

**`other_income`**: `float`

Other income

**`other_revenue`**: `float`

Other revenue

**`extraordinary_income`**: `float`

Extraordinary income

**`total_other_income`**: `float`

Total other income

**`ebitda`**: `float`

Earnings Before Interest, Taxes, Depreciation and Amortization.

**`ebitda_margin`**: `float`

Margin on Earnings Before Interest, Taxes, Depreciation and Amortization.

**`total_pre_tax_income`**: `float`

Total pre-tax income

**`ebit`**: `float`

Earnings Before Interest and Taxes.

**`pre_tax_income_margin`**: `float`

Pre-Tax Income Margin.

**`income_tax_expense`**: `float`

Income tax expense

**`impairment_charge`**: `float`

Impairment charge

**`restructuring_charge`**: `float`

Restructuring charge

**`service_charges_on_deposit_accounts`**: `float`

Service charges on deposit accounts

**`other_service_charges`**: `float`

Other service charges

**`other_special_charges`**: `float`

Other special charges

**`other_cost_of_revenue`**: `float`

Other cost of revenue

**`net_income_continuing_operations`**: `float`

Net income (continuing operations)

**`net_income_discontinued_operations`**: `float`

Net income (discontinued operations)

**`consolidated_net_income`**: `float`

Consolidated net income

**`other_adjustments_to_consolidated_net_income`**: `float`

Other adjustments to consolidated net income

**`other_adjustment_to_net_income_attributable_to_common_shareholders`**: `float`

Other adjustment to net income attributable to common shareholders

**`net_income_attributable_to_noncontrolling_interest`**: `float`

Net income attributable to noncontrolling interest

**`net_income_attributable_to_common_shareholders`**: `float`

Net income attributable to common shareholders

**`basic_earnings_per_share`**: `float`

Basic earnings per share

**`diluted_earnings_per_share`**: `float`

Diluted earnings per share

**`basic_and_diluted_earnings_per_share`**: `float`

Basic and diluted earnings per share

**`cash_dividends_to_common_per_share`**: `float`

Cash dividends to common per share

**`preferred_stock_dividends_declared`**: `float`

Preferred stock dividends declared

**`weighted_average_basic_shares_outstanding`**: `float`

Weighted average basic shares outstanding

**`weighted_average_diluted_shares_outstanding`**: `float`

Weighted average diluted shares outstanding

**`weighted_average_basic_and_diluted_shares_outstanding`**: `float`

Weighted average basic and diluted shares outstanding

</TabItem>

<TabItem value='polygon' label='polygon'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`revenue`**: `float`

Total Revenue

**`cost_of_revenue_goods`**: `float`

Cost of Revenue - Goods

**`cost_of_revenue_services`**: `float`

Cost of Revenue - Services

**`cost_of_revenue`**: `float`

Cost of Revenue

**`gross_profit`**: `float`

Gross Profit

**`provisions_for_loan_lease_and_other_losses`**: `float`

Provisions for loan lease and other losses

**`depreciation_and_amortization`**: `float`

Depreciation and Amortization

**`income_tax_expense_benefit_current`**: `float`

Income tax expense benefit current

**`deferred_tax_benefit`**: `float`

Deferred tax benefit

**`benefits_costs_expenses`**: `float`

Benefits, costs and expenses

**`selling_general_and_administrative_expense`**: `float`

Selling, general and administrative expense

**`research_and_development`**: `float`

Research and development

**`costs_and_expenses`**: `float`

Costs and expenses

**`other_operating_expenses`**: `float`

Other Operating Expenses

**`operating_expenses`**: `float`

Operating expenses

**`operating_income`**: `float`

Operating Income/Loss

**`non_operating_income`**: `float`

Non Operating Income/Loss

**`interest_and_dividend_income`**: `float`

Interest and Dividend Income

**`total_interest_expense`**: `float`

Interest Expense

**`interest_and_debt_expense`**: `float`

Interest and Debt Expense

**`net_interest_income`**: `float`

Interest Income Net

**`interest_income_after_provision_for_losses`**: `float`

Interest Income After Provision for Losses

**`non_interest_expense`**: `float`

Non-Interest Expense

**`non_interest_income`**: `float`

Non-Interest Income

**`income_from_discontinued_operations_net_of_tax_on_disposal`**: `float`

Income From Discontinued Operations Net of Tax on Disposal

**`income_from_discontinued_operations_net_of_tax`**: `float`

Income From Discontinued Operations Net of Tax

**`income_before_equity_method_investments`**: `float`

Income Before Equity Method Investments

**`income_from_equity_method_investments`**: `float`

Income From Equity Method Investments

**`total_pre_tax_income`**: `float`

Income Before Tax

**`income_tax_expense`**: `float`

Income Tax Expense

**`income_after_tax`**: `float`

Income After Tax

**`consolidated_net_income`**: `float`

Net Income/Loss

**`net_income_attributable_noncontrolling_interest`**: `float`

Net income (loss) attributable to noncontrolling interest

**`net_income_attributable_to_parent`**: `float`

Net income (loss) attributable to parent

**`net_income_attributable_to_common_shareholders`**: `float`

Net Income/Loss Available To Common Stockholders Basic

**`participating_securities_earnings`**: `float`

Participating Securities Distributed And Undistributed Earnings Loss Basic

**`undistributed_earnings_allocated_to_participating_securities`**: `float`

Undistributed Earnings Allocated To Participating Securities

**`common_stock_dividends`**: `float`

Common Stock Dividends

**`preferred_stock_dividends_and_other_adjustments`**: `float`

Preferred stock dividends and other adjustments

**`basic_earnings_per_share`**: `float`

Earnings Per Share

**`diluted_earnings_per_share`**: `float`

Diluted Earnings Per Share

**`weighted_average_basic_shares_outstanding`**: `float`

Basic Average Shares

**`weighted_average_diluted_shares_outstanding`**: `float`

Diluted Average Shares

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "income_growth"
description: "Explore the growth of a company's income statement with the Python function  obb.equity.fundamental.income_growth. Retrieve data for symbols, specify the limit,  period, and provider, and get detailed information on various aspects of the income  statement growth."
keywords:
- income statement growth
- company income statement
- python obb.equity.fundamental.income_growth
- symbol
- limit
- period
- provider
- data entries
- time period
- provider name
- warnings
- chart object
- metadata
- symbol data
- date
- growth revenue
- cost of goods sold
- gross profit
- gross profit ratio
- research and development expenses
- general and administrative expenses
- selling and marketing expenses
- operating expenses
- total costs and expenses
- interest expenses
- depreciation and amortization expenses
- ebitda
- ebitda ratio
- operating income
- operating income ratio
- total other income expenses net
- income before tax
- income tax expenses
- net income
- eps
- eps diluted
- weighted average shares outstanding
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/income_growth - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the growth of a company's income statement items over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.income_growth(symbol='AAPL', provider='fmp')
obb.equity.fundamental.income_growth(symbol='AAPL', limit=10, period=annual, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IncomeStatementGrowth]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report.

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`growth_revenue`**: `float`

Growth rate of total revenue.

**`growth_cost_of_revenue`**: `float`

Growth rate of cost of goods sold.

**`growth_gross_profit`**: `float`

Growth rate of gross profit.

**`growth_gross_profit_margin`**: `float`

Growth rate of gross profit as a percentage of revenue.

**`growth_general_and_admin_expense`**: `float`

Growth rate of general and administrative expenses.

**`growth_research_and_development_expense`**: `float`

Growth rate of expenses on research and development.

**`growth_selling_and_marketing_expense`**: `float`

Growth rate of expenses on selling and marketing activities.

**`growth_other_expenses`**: `float`

Growth rate of other operating expenses.

**`growth_operating_expenses`**: `float`

Growth rate of total operating expenses.

**`growth_cost_and_expenses`**: `float`

Growth rate of total costs and expenses.

**`growth_interest_expense`**: `float`

Growth rate of interest expenses.

**`growth_depreciation_and_amortization`**: `float`

Growth rate of depreciation and amortization expenses.

**`growth_ebitda`**: `float`

Growth rate of Earnings Before Interest, Taxes, Depreciation, and Amortization.

**`growth_ebitda_margin`**: `float`

Growth rate of EBITDA as a percentage of revenue.

**`growth_operating_income`**: `float`

Growth rate of operating income.

**`growth_operating_income_margin`**: `float`

Growth rate of operating income as a percentage of revenue.

**`growth_total_other_income_expenses_net`**: `float`

Growth rate of net total other income and expenses.

**`growth_income_before_tax`**: `float`

Growth rate of income before taxes.

**`growth_income_before_tax_margin`**: `float`

Growth rate of income before taxes as a percentage of revenue.

**`growth_income_tax_expense`**: `float`

Growth rate of income tax expenses.

**`growth_consolidated_net_income`**: `float`

Growth rate of net income.

**`growth_net_income_margin`**: `float`

Growth rate of net income as a percentage of revenue.

**`growth_basic_earings_per_share`**: `float`

Growth rate of Earnings Per Share (EPS).

**`growth_diluted_earnings_per_share`**: `float`

Growth rate of diluted Earnings Per Share (EPS).

**`growth_weighted_average_basic_shares_outstanding`**: `float`

Growth rate of weighted average shares outstanding.

**`growth_weighted_average_diluted_shares_outstanding`**: `float`

Growth rate of diluted weighted average shares outstanding.

</TabItem>
</Tabs>



---

# Fundamental

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="ratios" description="Get an extensive set of financial and accounting ratios for a given company over time" url="/platform/reference/equity/fundamental/ratios" />
<ReferenceCard title="income growth" description="Get the growth of a company's income statement items over time" url="/platform/reference/equity/fundamental/income_growth" />
<ReferenceCard title="transcript" description="Get earnings call transcripts for a given company" url="/platform/reference/equity/fundamental/transcript" />
<ReferenceCard title="historical attributes" description="Get the historical values of a data tag from Intrinio" url="/platform/reference/equity/fundamental/historical_attributes" />
<ReferenceCard title="multiples" description="Get equity valuation multiples for a given company" url="/platform/reference/equity/fundamental/multiples" />
<ReferenceCard title="cash growth" description="Get the growth of a company's cash flow statement items over time" url="/platform/reference/equity/fundamental/cash_growth" />
<ReferenceCard title="management" description="Get executive management team data for a given company" url="/platform/reference/equity/fundamental/management" />
<ReferenceCard title="historical splits" description="Get historical stock splits for a given company" url="/platform/reference/equity/fundamental/historical_splits" />
<ReferenceCard title="reported financials" description="Get financial statements as reported by the company" url="/platform/reference/equity/fundamental/reported_financials" />
<ReferenceCard title="metrics" description="Get fundamental metrics for a given company" url="/platform/reference/equity/fundamental/metrics" />
<ReferenceCard title="dividends" description="Get historical dividend data for a given company" url="/platform/reference/equity/fundamental/dividends" />
<ReferenceCard title="balance growth" description="Get the growth of a company's balance sheet items over time" url="/platform/reference/equity/fundamental/balance_growth" />
<ReferenceCard title="trailing dividend yield" description="Get the 1 year trailing dividend yield for a given company over time" url="/platform/reference/equity/fundamental/trailing_dividend_yield" />
<ReferenceCard title="cash" description="Get the cash flow statement for a given company" url="/platform/reference/equity/fundamental/cash" />
<ReferenceCard title="management compensation" description="Get executive management team compensation for a given company over time" url="/platform/reference/equity/fundamental/management_compensation" />
<ReferenceCard title="latest attributes" description="Get the latest value of a data tag from Intrinio" url="/platform/reference/equity/fundamental/latest_attributes" />
<ReferenceCard title="revenue per segment" description="Get the revenue breakdown by business segment for a given company over time" url="/platform/reference/equity/fundamental/revenue_per_segment" />
<ReferenceCard title="employee count" description="Get historical employee count data for a given company" url="/platform/reference/equity/fundamental/employee_count" />
<ReferenceCard title="management discussion analysis" description="Get the Management Discussion & Analysis section from the financial statements for a given company" url="/platform/reference/equity/fundamental/management_discussion_analysis" />
<ReferenceCard title="revenue per geography" description="Get the geographic breakdown of revenue for a given company over time" url="/platform/reference/equity/fundamental/revenue_per_geography" />
<ReferenceCard title="search attributes" description="Search Intrinio data tags to search in latest or historical attributes" url="/platform/reference/equity/fundamental/search_attributes" />
<ReferenceCard title="income" description="Get the income statement for a given company" url="/platform/reference/equity/fundamental/income" />
<ReferenceCard title="filings" description="Get public company filings" url="/platform/reference/equity/fundamental/filings" />
<ReferenceCard title="historical eps" description="Get historical earnings per share data for a given company" url="/platform/reference/equity/fundamental/historical_eps" />
<ReferenceCard title="balance" description="Get the balance sheet for a given company" url="/platform/reference/equity/fundamental/balance" />
</ul>



---

---
title: "latest_attributes"
description: "Get the latest value of a data tag from Intrinio"
keywords:
- equity
- fundamental
- latest_attributes
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/latest_attributes - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the latest value of a data tag from Intrinio.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.latest_attributes(symbol='AAPL', tag='ceo', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

---

**`tag`**: `Union[str, list[str]]`

Intrinio data tag ID or code. Multiple items allowed for provider(s): intrinio.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[LatestAttributes]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `Union[str, float]`

The value of the data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`tag`**: `str`

Tag name for the fetched data.

**`value`**: `Union[str, float]`

The value of the data.

</TabItem>
</Tabs>



---

---
title: "management"
description: "Learn about key executives for a company and how to retrieve their data  using the `obb.equity.fundamental.management` function. Get details such as designation,  name, pay, currency, gender, birth year, and title since."
keywords:
- key executives
- company executives
- symbol
- data
- designation
- name
- pay
- currency
- gender
- birth year
- title since
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/management - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get executive management team data for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.management(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[KeyExecutives]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`title`**: `str`

Designation of the key executive.

**`name`**: `str`

Name of the key executive.

**`pay`**: `int`

Pay of the key executive.

**`currency_pay`**: `str`

Currency of the pay.

**`gender`**: `str`

Gender of the key executive.

**`year_born`**: `int`

Birth year of the key executive.

**`title_since`**: `int`

Date the tile was held since.

**`exercised_value`**: `int`

Value of shares exercised.

**`unexercised_value`**: `int`

Value of shares not exercised.

**`fiscal_year`**: `int`

Fiscal year of the pay.

</TabItem>
</Tabs>



---

---
title: "management_compensation"
description: "Learn how to retrieve executive compensation data for a company using  the equity management compensation function in Python. Understand the parameters,  return values, and available data fields such as symbol, salary, bonus, stock award,  and more."
keywords:
- executive compensation
- company executive compensation
- equity management compensation
- symbol parameter
- provider parameter
- return values
- data
- symbol
- cik
- filing date
- accepted date
- name and position
- year of compensation
- salary
- bonus
- stock award
- incentive plan compensation
- all other compensation
- total compensation
- URL
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/management_compensation - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get executive management team compensation for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.management_compensation(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `int`

Year of the compensation.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ExecutiveCompensation]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`company_name`**: `str`

The name of the company.

**`industry`**: `str`

The industry of the company.

**`year`**: `int`

Year of the compensation.

**`name_and_position`**: `str`

Name and position.

**`salary`**: `Annotated[float, Ge(ge=0)]`

Salary.

**`bonus`**: `Annotated[float, Ge(ge=0)]`

Bonus payments.

**`stock_award`**: `Annotated[float, Ge(ge=0)]`

Stock awards.

**`incentive_plan_compensation`**: `Annotated[float, Ge(ge=0)]`

Incentive plan compensation.

**`all_other_compensation`**: `Annotated[float, Ge(ge=0)]`

All other compensation.

**`total`**: `Annotated[float, Ge(ge=0)]`

Total compensation.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`company_name`**: `str`

The name of the company.

**`industry`**: `str`

The industry of the company.

**`year`**: `int`

Year of the compensation.

**`name_and_position`**: `str`

Name and position.

**`salary`**: `Annotated[float, Ge(ge=0)]`

Salary.

**`bonus`**: `Annotated[float, Ge(ge=0)]`

Bonus payments.

**`stock_award`**: `Annotated[float, Ge(ge=0)]`

Stock awards.

**`incentive_plan_compensation`**: `Annotated[float, Ge(ge=0)]`

Incentive plan compensation.

**`all_other_compensation`**: `Annotated[float, Ge(ge=0)]`

All other compensation.

**`total`**: `Annotated[float, Ge(ge=0)]`

Total compensation.

**`filing_date`**: `date`

Date of the filing.

**`accepted_date`**: `datetime`

Date the filing was accepted.

**`url`**: `str`

URL to the filing data.

</TabItem>
</Tabs>



---

---
title: "management_discussion_analysis"
description: "Get the Management Discussion & Analysis section from the financial statements for a given company"
keywords:
- equity
- fundamental
- management_discussion_analysis
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/management_discussion_analysis - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the Management Discussion & Analysis section from the financial statements for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.management_discussion_analysis(symbol='AAPL', provider='sec')
# Get the Management Discussion & Analysis section by calendar year and period.
obb.equity.fundamental.management_discussion_analysis(symbol='AAPL', calendar_year=2020, calendar_period='Q4', provider='sec')
# Setting 'include_tables' to True will attempt to extract all tables in valid Markdown.
obb.equity.fundamental.management_discussion_analysis(symbol='AAPL', calendar_year=2020, calendar_period='Q4', provider='sec', include_tables=True)
# Setting 'raw_html' to True will bypass extraction and return the raw HTML file, as is. Use this for custom parsing or to access the entire HTML filing.
obb.equity.fundamental.management_discussion_analysis(symbol='AAPL', calendar_year=2020, calendar_period='Q4', provider='sec', raw_html=True)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`calendar_year`**: `int`

Calendar year of the report. By default, is the current year. If the calendar period is not provided, but the calendar year is, it will return the annual report.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['Q1', 'Q2', 'Q3', 'Q4']`

Calendar period of the report. By default, is the most recent report available for the symbol. If no calendar year and no calendar period are provided, it will return the most recent report.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`calendar_year`**: `int`

Calendar year of the report. By default, is the current year. If the calendar period is not provided, but the calendar year is, it will return the annual report.

 • *Optional:* `True`

---

**`calendar_period`**: `Literal['Q1', 'Q2', 'Q3', 'Q4']`

Calendar period of the report. By default, is the most recent report available for the symbol. If no calendar year and no calendar period are provided, it will return the most recent report.

 • *Optional:* `True`

---

**`strategy`**: `Literal['inscriptis', 'trafilatura']`

The strategy to use for extracting the text. Default is 'trafilatura'.

 • *Default:* `trafilatura`

 • *Optional:* `True`

---

**`wrap_length`**: `int`

The length to wrap the extracted text, excluding tables. Default is 120.

 • *Default:* `120`

 • *Optional:* `True`

---

**`include_tables`**: `bool`

Return tables formatted as markdown in the text. Default is False. Tables may reveal 'missing' content, but will likely need some level of manual cleaning, post-request, to display properly. In some cases, tables may not be recoverable due to the nature of the document.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the file will be cached for use later. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

---

**`raw_html`**: `bool`

When True, the raw HTML content of the entire filing will be returned. Default is False. Use this option to parse the document manually.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ManagementDiscussionAnalysis]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`calendar_year`**: `int`

The calendar year of the report.

**`calendar_period`**: `int`

The calendar period of the report.

**`period_ending`**: `date`

The end date of the reporting period.

**`content`**: `str`

The content of the management discussion and analysis.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`calendar_year`**: `int`

The calendar year of the report.

**`calendar_period`**: `int`

The calendar period of the report.

**`period_ending`**: `date`

The end date of the reporting period.

**`content`**: `str`

The content of the management discussion and analysis.

**`url`**: `str`

The URL of the filing from which the data was extracted.

</TabItem>
</Tabs>



---

---
title: "metrics"
description: "Learn about key metrics for a given company using the `obb.equity.fundamental.metrics`  Python function. This API endpoint provides data such as revenue per share, net  income per share, market capitalization, price-to-earnings ratio, and more. Explore  the available parameters and returned data to analyze financial performance. Full  documentation and usage examples available."
keywords:
- key metrics
- python function
- documentation
- API
- parameters
- returns
- data
- symbol
- period
- limit
- provider
- with_ttm
- revenue per share
- net income per share
- operating cash flow per share
- free cash flow per share
- cash per share
- book value per share
- tangible book value per share
- shareholders equity per share
- interest debt per share
- market capitalization
- enterprise value
- price-to-earnings ratio
- price-to-sales ratio
- price-to-operating cash flow ratio
- price-to-free cash flow ratio
- price-to-book ratio
- price-to-tangible book ratio
- earnings yield
- free cash flow yield
- debt-to-equity ratio
- debt-to-assets ratio
- net debt-to-EBITDA ratio
- current ratio
- interest coverage
- income quality
- dividend yield
- payout ratio
- sales general and administrative expenses-to-revenue ratio
- research and development expenses-to-revenue ratio
- intangibles-to-total assets ratio
- capital expenditures-to-operating cash flow ratio
- capital expenditures-to-revenue ratio
- capital expenditures-to-depreciation ratio
- stock-based compensation-to-revenue ratio
- Graham number
- return on invested capital
- return on tangible assets
- Graham net-net working capital
- working capital
- tangible asset value
- net current asset value
- invested capital
- average receivables
- average payables
- average inventory
- days sales outstanding
- days payables outstanding
- days of inventory on hand
- receivables turnover
- payables turnover
- inventory turnover
- return on equity
- capital expenditures per share
- calendar year
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/metrics - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get fundamental metrics for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.metrics(symbol='AAPL', provider='fmp')
obb.equity.fundamental.metrics(symbol='AAPL', period=annual, limit=100, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`with_ttm`**: `bool`

Include trailing twelve months (TTM) data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, yfinance.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[KeyMetrics]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz', 'fmp', 'intrinio', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`foward_pe`**: `float`

Forward price-to-earnings ratio (forward P/E)

**`eps`**: `float`

Earnings per share (EPS)

**`price_to_sales`**: `float`

Price-to-sales ratio (P/S)

**`price_to_book`**: `float`

Price-to-book ratio (P/B)

**`book_value_per_share`**: `float`

Book value per share (Book/sh)

**`price_to_cash`**: `float`

Price-to-cash ratio (P/C)

**`cash_per_share`**: `float`

Cash per share (Cash/sh)

**`price_to_free_cash_flow`**: `float`

Price-to-free cash flow ratio (P/FCF)

**`debt_to_equity`**: `float`

Debt-to-equity ratio (Debt/Eq)

**`long_term_debt_to_equity`**: `float`

Long-term debt-to-equity ratio (LT Debt/Eq)

**`quick_ratio`**: `float`

Quick ratio

**`current_ratio`**: `float`

Current ratio

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`operating_margin`**: `float`

Operating margin, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets (ROA), as a normalized percent.

**`return_on_investment`**: `float`

Return on investment (ROI), as a normalized percent.

**`return_on_equity`**: `float`

Return on equity (ROE), as a normalized percent.

**`payout_ratio`**: `float`

Payout ratio, as a normalized percent.

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`period_ending`**: `date`

Period ending date.

**`fiscal_period`**: `str`

Period of the data.

**`calendar_year`**: `int`

Calendar year for the fiscal period.

**`revenue_per_share`**: `float`

Revenue per share

**`capex_per_share`**: `float`

Capital expenditures per share

**`net_income_per_share`**: `float`

Net income per share

**`operating_cash_flow_per_share`**: `float`

Operating cash flow per share

**`free_cash_flow_per_share`**: `float`

Free cash flow per share

**`cash_per_share`**: `float`

Cash per share

**`book_value_per_share`**: `float`

Book value per share

**`tangible_book_value_per_share`**: `float`

Tangible book value per share

**`shareholders_equity_per_share`**: `float`

Shareholders equity per share

**`interest_debt_per_share`**: `float`

Interest debt per share

**`price_to_sales`**: `float`

Price-to-sales ratio

**`price_to_operating_cash_flow`**: `float`

Price-to-operating cash flow ratio

**`price_to_free_cash_flow`**: `float`

Price-to-free cash flow ratio

**`price_to_book`**: `float`

Price-to-book ratio

**`price_to_tangible_book`**: `float`

Price-to-tangible book ratio

**`ev_to_sales`**: `float`

Enterprise value-to-sales ratio

**`ev_to_ebitda`**: `float`

Enterprise value-to-EBITDA ratio

**`ev_to_operating_cash_flow`**: `float`

Enterprise value-to-operating cash flow ratio

**`ev_to_free_cash_flow`**: `float`

Enterprise value-to-free cash flow ratio

**`earnings_yield`**: `float`

Earnings yield

**`free_cash_flow_yield`**: `float`

Free cash flow yield

**`debt_to_market_cap`**: `float`

Debt-to-market capitalization ratio

**`debt_to_equity`**: `float`

Debt-to-equity ratio

**`debt_to_assets`**: `float`

Debt-to-assets ratio

**`net_debt_to_ebitda`**: `float`

Net debt-to-EBITDA ratio

**`current_ratio`**: `float`

Current ratio

**`interest_coverage`**: `float`

Interest coverage

**`income_quality`**: `float`

Income quality

**`payout_ratio`**: `float`

Payout ratio

**`sales_general_and_administrative_to_revenue`**: `float`

Sales general and administrative expenses-to-revenue ratio

**`research_and_development_to_revenue`**: `float`

Research and development expenses-to-revenue ratio

**`intangibles_to_total_assets`**: `float`

Intangibles-to-total assets ratio

**`capex_to_operating_cash_flow`**: `float`

Capital expenditures-to-operating cash flow ratio

**`capex_to_revenue`**: `float`

Capital expenditures-to-revenue ratio

**`capex_to_depreciation`**: `float`

Capital expenditures-to-depreciation ratio

**`stock_based_compensation_to_revenue`**: `float`

Stock-based compensation-to-revenue ratio

**`working_capital`**: `float`

Working capital

**`tangible_asset_value`**: `float`

Tangible asset value

**`net_current_asset_value`**: `float`

Net current asset value

**`enterprise_value`**: `float`

Enterprise value

**`invested_capital`**: `float`

Invested capital

**`average_receivables`**: `float`

Average receivables

**`average_payables`**: `float`

Average payables

**`average_inventory`**: `float`

Average inventory

**`days_sales_outstanding`**: `float`

Days sales outstanding

**`days_payables_outstanding`**: `float`

Days payables outstanding

**`days_of_inventory_on_hand`**: `float`

Days of inventory on hand

**`receivables_turnover`**: `float`

Receivables turnover

**`payables_turnover`**: `float`

Payables turnover

**`inventory_turnover`**: `float`

Inventory turnover

**`return_on_equity`**: `float`

Return on equity

**`return_on_invested_capital`**: `float`

Return on invested capital

**`return_on_tangible_assets`**: `float`

Return on tangible assets

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`graham_number`**: `float`

Graham number

**`graham_net_net`**: `float`

Graham net-net working capital

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`price_to_book`**: `float`

Price to book ratio.

**`price_to_tangible_book`**: `float`

Price to tangible book ratio.

**`price_to_revenue`**: `float`

Price to revenue ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`ebit_margin`**: `float`

EBIT margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`eps`**: `float`

Basic earnings per share.

**`eps_growth`**: `float`

EPS growth, as a normalized percent.

**`revenue_growth`**: `float`

Revenue growth, as a normalized percent.

**`ebitda_growth`**: `float`

EBITDA growth, as a normalized percent.

**`ebit_growth`**: `float`

EBIT growth, as a normalized percent.

**`net_income_growth`**: `float`

Net income growth, as a normalized percent.

**`free_cash_flow_to_firm_growth`**: `float`

Free cash flow to firm growth, as a normalized percent.

**`invested_capital_growth`**: `float`

Invested capital growth, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets, as a normalized percent.

**`return_on_equity`**: `float`

Return on equity, as a normalized percent.

**`return_on_invested_capital`**: `float`

Return on invested capital, as a normalized percent.

**`ebitda`**: `int`

Earnings before interest, taxes, depreciation, and amortization.

**`ebit`**: `int`

Earnings before interest and taxes.

**`long_term_debt`**: `int`

Long-term debt.

**`total_debt`**: `int`

Total debt.

**`total_capital`**: `int`

The sum of long-term debt and total shareholder equity.

**`enterprise_value`**: `int`

Enterprise value.

**`free_cash_flow_to_firm`**: `int`

Free cash flow to firm.

**`altman_z_score`**: `float`

Altman Z-score.

**`beta`**: `float`

Beta relative to the broad market (rolling three-year).

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`earnings_yield`**: `float`

Earnings yield, as a normalized percent.

**`last_price`**: `float`

Last price of the stock.

**`year_high`**: `float`

52 week high

**`year_low`**: `float`

52 week low

**`volume_avg`**: `int`

Average daily volume.

**`short_interest`**: `int`

Number of shares reported as sold short.

**`shares_outstanding`**: `int`

Weighted average shares outstanding (TTM).

**`days_to_cover`**: `float`

Days to cover short interest, based on average daily volume.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `float`

Market capitalization

**`pe_ratio`**: `float`

Price-to-earnings ratio (P/E ratio)

**`forward_pe`**: `float`

Forward price-to-earnings ratio.

**`peg_ratio`**: `float`

PEG ratio (5-year expected).

**`peg_ratio_ttm`**: `float`

PEG ratio (TTM).

**`eps_ttm`**: `float`

Earnings per share (TTM).

**`eps_forward`**: `float`

Forward earnings per share.

**`enterprise_to_ebitda`**: `float`

Enterprise value to EBITDA ratio.

**`earnings_growth`**: `float`

Earnings growth (Year Over Year), as a normalized percent.

**`earnings_growth_quarterly`**: `float`

Quarterly earnings growth (Year Over Year), as a normalized percent.

**`revenue_per_share`**: `float`

Revenue per share (TTM).

**`revenue_growth`**: `float`

Revenue growth (Year Over Year), as a normalized percent.

**`enterprise_to_revenue`**: `float`

Enterprise value to revenue ratio.

**`cash_per_share`**: `float`

Cash per share.

**`quick_ratio`**: `float`

Quick ratio.

**`current_ratio`**: `float`

Current ratio.

**`debt_to_equity`**: `float`

Debt-to-equity ratio.

**`gross_margin`**: `float`

Gross margin, as a normalized percent.

**`operating_margin`**: `float`

Operating margin, as a normalized percent.

**`ebitda_margin`**: `float`

EBITDA margin, as a normalized percent.

**`profit_margin`**: `float`

Profit margin, as a normalized percent.

**`return_on_assets`**: `float`

Return on assets, as a normalized percent.

**`return_on_equity`**: `float`

Return on equity, as a normalized percent.

**`dividend_yield`**: `float`

Dividend yield, as a normalized percent.

**`dividend_yield_5y_avg`**: `float`

5-year average dividend yield, as a normalized percent.

**`payout_ratio`**: `float`

Payout ratio.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price-to-book ratio.

**`enterprise_value`**: `int`

Enterprise value.

**`overall_risk`**: `float`

Overall risk score.

**`audit_risk`**: `float`

Audit risk score.

**`board_risk`**: `float`

Board risk score.

**`compensation_risk`**: `float`

Compensation risk score.

**`shareholder_rights_risk`**: `float`

Shareholder rights risk score.

**`beta`**: `float`

Beta relative to the broad market (5-year monthly).

**`price_return_1y`**: `float`

One-year price return, as a normalized percent.

**`currency`**: `str`

Currency in which the data is presented.

</TabItem>
</Tabs>



---

---
title: "multiples"
description: "Learn how to calculate equity valuation multiples for a stock ticker  using the OBB Python function. Discover the available parameters and the data returned,  including revenue per share, net income per share, market capitalization, price-to-earnings  ratio, and more. Improve your investment analysis with this powerful tool."
keywords:
- equity valuation multiples
- stock ticker valuation
- python function
- parameters
- returns
- data
- revenue per share
- net income per share
- operating cash flow per share
- free cash flow per share
- cash per share
- book value per share
- tangible book value per share
- shareholders equity per share
- market capitalization
- price-to-earnings ratio
- price-to-sales ratio
- price-to-operating cash flow ratio
- price-to-free cash flow ratio
- price-to-book ratio
- price-to-tangible book ratio
- enterprise value-to-sales ratio
- enterprise value-to-EBITDA ratio
- earnings yield
- free cash flow yield
- debt-to-equity ratio
- debt-to-assets ratio
- net debt-to-EBITDA ratio
- current ratio
- interest coverage
- income quality
- dividend yield
- payout ratio
- sales general and administrative expenses-to-revenue ratio
- research and development expenses-to-revenue ratio
- intangibles-to-total assets ratio
- capital expenditures-to-operating cash flow ratio
- capital expenditures-to-revenue ratio
- capital expenditures-to-depreciation ratio
- stock-based compensation-to-revenue ratio
- graham number
- return on invested capital
- return on tangible assets
- graham net-net working capital
- working capital
- tangible asset value
- net current asset value
- invested capital
- average receivables
- average payables
- average inventory
- days sales outstanding
- days payables outstanding
- days of inventory on hand
- receivables turnover
- payables turnover
- inventory turnover
- return on equity
- capital expenditures per share
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/multiples - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get equity valuation multiples for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.multiples(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityValuationMultiples]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`revenue_per_share_ttm`**: `float`

Revenue per share calculated as trailing twelve months.

**`net_income_per_share_ttm`**: `float`

Net income per share calculated as trailing twelve months.

**`operating_cash_flow_per_share_ttm`**: `float`

Operating cash flow per share calculated as trailing twelve months.

**`free_cash_flow_per_share_ttm`**: `float`

Free cash flow per share calculated as trailing twelve months.

**`cash_per_share_ttm`**: `float`

Cash per share calculated as trailing twelve months.

**`book_value_per_share_ttm`**: `float`

Book value per share calculated as trailing twelve months.

**`tangible_book_value_per_share_ttm`**: `float`

Tangible book value per share calculated as trailing twelve months.

**`shareholders_equity_per_share_ttm`**: `float`

Shareholders equity per share calculated as trailing twelve months.

**`interest_debt_per_share_ttm`**: `float`

Interest debt per share calculated as trailing twelve months.

**`market_cap_ttm`**: `float`

Market capitalization calculated as trailing twelve months.

**`enterprise_value_ttm`**: `float`

Enterprise value calculated as trailing twelve months.

**`pe_ratio_ttm`**: `float`

Price-to-earnings ratio (P/E ratio) calculated as trailing twelve months.

**`price_to_sales_ratio_ttm`**: `float`

Price-to-sales ratio calculated as trailing twelve months.

**`pocf_ratio_ttm`**: `float`

Price-to-operating cash flow ratio calculated as trailing twelve months.

**`pfcf_ratio_ttm`**: `float`

Price-to-free cash flow ratio calculated as trailing twelve months.

**`pb_ratio_ttm`**: `float`

Price-to-book ratio calculated as trailing twelve months.

**`ptb_ratio_ttm`**: `float`

Price-to-tangible book ratio calculated as trailing twelve months.

**`ev_to_sales_ttm`**: `float`

Enterprise value-to-sales ratio calculated as trailing twelve months.

**`enterprise_value_over_ebitda_ttm`**: `float`

Enterprise value-to-EBITDA ratio calculated as trailing twelve months.

**`ev_to_operating_cash_flow_ttm`**: `float`

Enterprise value-to-operating cash flow ratio calculated as trailing twelve months.

**`ev_to_free_cash_flow_ttm`**: `float`

Enterprise value-to-free cash flow ratio calculated as trailing twelve months.

**`earnings_yield_ttm`**: `float`

Earnings yield calculated as trailing twelve months.

**`free_cash_flow_yield_ttm`**: `float`

Free cash flow yield calculated as trailing twelve months.

**`debt_to_equity_ttm`**: `float`

Debt-to-equity ratio calculated as trailing twelve months.

**`debt_to_assets_ttm`**: `float`

Debt-to-assets ratio calculated as trailing twelve months.

**`net_debt_to_ebitda_ttm`**: `float`

Net debt-to-EBITDA ratio calculated as trailing twelve months.

**`current_ratio_ttm`**: `float`

Current ratio calculated as trailing twelve months.

**`interest_coverage_ttm`**: `float`

Interest coverage calculated as trailing twelve months.

**`income_quality_ttm`**: `float`

Income quality calculated as trailing twelve months.

**`dividend_yield_ttm`**: `float`

Dividend yield calculated as trailing twelve months.

**`dividend_yield_percentage_ttm`**: `float`

Dividend yield percentage calculated as trailing twelve months.

**`dividend_to_market_cap_ttm`**: `float`

Dividend to market capitalization ratio calculated as trailing twelve months.

**`dividend_per_share_ttm`**: `float`

Dividend per share calculated as trailing twelve months.

**`payout_ratio_ttm`**: `float`

Payout ratio calculated as trailing twelve months.

**`sales_general_and_administrative_to_revenue_ttm`**: `float`

Sales general and administrative expenses-to-revenue ratio calculated as trailing twelve months.

**`research_and_development_to_revenue_ttm`**: `float`

Research and development expenses-to-revenue ratio calculated as trailing twelve months.

**`intangibles_to_total_assets_ttm`**: `float`

Intangibles-to-total assets ratio calculated as trailing twelve months.

**`capex_to_operating_cash_flow_ttm`**: `float`

Capital expenditures-to-operating cash flow ratio calculated as trailing twelve months.

**`capex_to_revenue_ttm`**: `float`

Capital expenditures-to-revenue ratio calculated as trailing twelve months.

**`capex_to_depreciation_ttm`**: `float`

Capital expenditures-to-depreciation ratio calculated as trailing twelve months.

**`stock_based_compensation_to_revenue_ttm`**: `float`

Stock-based compensation-to-revenue ratio calculated as trailing twelve months.

**`graham_number_ttm`**: `float`

Graham number calculated as trailing twelve months.

**`roic_ttm`**: `float`

Return on invested capital calculated as trailing twelve months.

**`return_on_tangible_assets_ttm`**: `float`

Return on tangible assets calculated as trailing twelve months.

**`graham_net_net_ttm`**: `float`

Graham net-net working capital calculated as trailing twelve months.

**`working_capital_ttm`**: `float`

Working capital calculated as trailing twelve months.

**`tangible_asset_value_ttm`**: `float`

Tangible asset value calculated as trailing twelve months.

**`net_current_asset_value_ttm`**: `float`

Net current asset value calculated as trailing twelve months.

**`invested_capital_ttm`**: `float`

Invested capital calculated as trailing twelve months.

**`average_receivables_ttm`**: `float`

Average receivables calculated as trailing twelve months.

**`average_payables_ttm`**: `float`

Average payables calculated as trailing twelve months.

**`average_inventory_ttm`**: `float`

Average inventory calculated as trailing twelve months.

**`days_sales_outstanding_ttm`**: `float`

Days sales outstanding calculated as trailing twelve months.

**`days_payables_outstanding_ttm`**: `float`

Days payables outstanding calculated as trailing twelve months.

**`days_of_inventory_on_hand_ttm`**: `float`

Days of inventory on hand calculated as trailing twelve months.

**`receivables_turnover_ttm`**: `float`

Receivables turnover calculated as trailing twelve months.

**`payables_turnover_ttm`**: `float`

Payables turnover calculated as trailing twelve months.

**`inventory_turnover_ttm`**: `float`

Inventory turnover calculated as trailing twelve months.

**`roe_ttm`**: `float`

Return on equity calculated as trailing twelve months.

**`capex_per_share_ttm`**: `float`

Capital expenditures per share calculated as trailing twelve months.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`revenue_per_share_ttm`**: `float`

Revenue per share calculated as trailing twelve months.

**`net_income_per_share_ttm`**: `float`

Net income per share calculated as trailing twelve months.

**`operating_cash_flow_per_share_ttm`**: `float`

Operating cash flow per share calculated as trailing twelve months.

**`free_cash_flow_per_share_ttm`**: `float`

Free cash flow per share calculated as trailing twelve months.

**`cash_per_share_ttm`**: `float`

Cash per share calculated as trailing twelve months.

**`book_value_per_share_ttm`**: `float`

Book value per share calculated as trailing twelve months.

**`tangible_book_value_per_share_ttm`**: `float`

Tangible book value per share calculated as trailing twelve months.

**`shareholders_equity_per_share_ttm`**: `float`

Shareholders equity per share calculated as trailing twelve months.

**`interest_debt_per_share_ttm`**: `float`

Interest debt per share calculated as trailing twelve months.

**`market_cap_ttm`**: `float`

Market capitalization calculated as trailing twelve months.

**`enterprise_value_ttm`**: `float`

Enterprise value calculated as trailing twelve months.

**`pe_ratio_ttm`**: `float`

Price-to-earnings ratio (P/E ratio) calculated as trailing twelve months.

**`price_to_sales_ratio_ttm`**: `float`

Price-to-sales ratio calculated as trailing twelve months.

**`pocf_ratio_ttm`**: `float`

Price-to-operating cash flow ratio calculated as trailing twelve months.

**`pfcf_ratio_ttm`**: `float`

Price-to-free cash flow ratio calculated as trailing twelve months.

**`pb_ratio_ttm`**: `float`

Price-to-book ratio calculated as trailing twelve months.

**`ptb_ratio_ttm`**: `float`

Price-to-tangible book ratio calculated as trailing twelve months.

**`ev_to_sales_ttm`**: `float`

Enterprise value-to-sales ratio calculated as trailing twelve months.

**`enterprise_value_over_ebitda_ttm`**: `float`

Enterprise value-to-EBITDA ratio calculated as trailing twelve months.

**`ev_to_operating_cash_flow_ttm`**: `float`

Enterprise value-to-operating cash flow ratio calculated as trailing twelve months.

**`ev_to_free_cash_flow_ttm`**: `float`

Enterprise value-to-free cash flow ratio calculated as trailing twelve months.

**`earnings_yield_ttm`**: `float`

Earnings yield calculated as trailing twelve months.

**`free_cash_flow_yield_ttm`**: `float`

Free cash flow yield calculated as trailing twelve months.

**`debt_to_equity_ttm`**: `float`

Debt-to-equity ratio calculated as trailing twelve months.

**`debt_to_assets_ttm`**: `float`

Debt-to-assets ratio calculated as trailing twelve months.

**`net_debt_to_ebitda_ttm`**: `float`

Net debt-to-EBITDA ratio calculated as trailing twelve months.

**`current_ratio_ttm`**: `float`

Current ratio calculated as trailing twelve months.

**`interest_coverage_ttm`**: `float`

Interest coverage calculated as trailing twelve months.

**`income_quality_ttm`**: `float`

Income quality calculated as trailing twelve months.

**`dividend_yield_ttm`**: `float`

Dividend yield calculated as trailing twelve months.

**`dividend_yield_percentage_ttm`**: `float`

Dividend yield percentage calculated as trailing twelve months.

**`dividend_to_market_cap_ttm`**: `float`

Dividend to market capitalization ratio calculated as trailing twelve months.

**`dividend_per_share_ttm`**: `float`

Dividend per share calculated as trailing twelve months.

**`payout_ratio_ttm`**: `float`

Payout ratio calculated as trailing twelve months.

**`sales_general_and_administrative_to_revenue_ttm`**: `float`

Sales general and administrative expenses-to-revenue ratio calculated as trailing twelve months.

**`research_and_development_to_revenue_ttm`**: `float`

Research and development expenses-to-revenue ratio calculated as trailing twelve months.

**`intangibles_to_total_assets_ttm`**: `float`

Intangibles-to-total assets ratio calculated as trailing twelve months.

**`capex_to_operating_cash_flow_ttm`**: `float`

Capital expenditures-to-operating cash flow ratio calculated as trailing twelve months.

**`capex_to_revenue_ttm`**: `float`

Capital expenditures-to-revenue ratio calculated as trailing twelve months.

**`capex_to_depreciation_ttm`**: `float`

Capital expenditures-to-depreciation ratio calculated as trailing twelve months.

**`stock_based_compensation_to_revenue_ttm`**: `float`

Stock-based compensation-to-revenue ratio calculated as trailing twelve months.

**`graham_number_ttm`**: `float`

Graham number calculated as trailing twelve months.

**`roic_ttm`**: `float`

Return on invested capital calculated as trailing twelve months.

**`return_on_tangible_assets_ttm`**: `float`

Return on tangible assets calculated as trailing twelve months.

**`graham_net_net_ttm`**: `float`

Graham net-net working capital calculated as trailing twelve months.

**`working_capital_ttm`**: `float`

Working capital calculated as trailing twelve months.

**`tangible_asset_value_ttm`**: `float`

Tangible asset value calculated as trailing twelve months.

**`net_current_asset_value_ttm`**: `float`

Net current asset value calculated as trailing twelve months.

**`invested_capital_ttm`**: `float`

Invested capital calculated as trailing twelve months.

**`average_receivables_ttm`**: `float`

Average receivables calculated as trailing twelve months.

**`average_payables_ttm`**: `float`

Average payables calculated as trailing twelve months.

**`average_inventory_ttm`**: `float`

Average inventory calculated as trailing twelve months.

**`days_sales_outstanding_ttm`**: `float`

Days sales outstanding calculated as trailing twelve months.

**`days_payables_outstanding_ttm`**: `float`

Days payables outstanding calculated as trailing twelve months.

**`days_of_inventory_on_hand_ttm`**: `float`

Days of inventory on hand calculated as trailing twelve months.

**`receivables_turnover_ttm`**: `float`

Receivables turnover calculated as trailing twelve months.

**`payables_turnover_ttm`**: `float`

Payables turnover calculated as trailing twelve months.

**`inventory_turnover_ttm`**: `float`

Inventory turnover calculated as trailing twelve months.

**`roe_ttm`**: `float`

Return on equity calculated as trailing twelve months.

**`capex_per_share_ttm`**: `float`

Capital expenditures per share calculated as trailing twelve months.

</TabItem>
</Tabs>



---

---
title: "ratios"
description: "Learn about financial ratios for a given company over time. Explore various  equity ratios, such as current ratio, quick ratio, and cash conversion cycle. Understand  key profitability metrics like return on equity and profit margin. Analyze debt  ratios, inventory turnover, and operating and free cash flows. Evaluate the price  to earnings ratio and dividend yield."
keywords:
- financial ratios
- company ratios
- ratios over time
- equity ratios
- current ratio
- quick ratio
- cash conversion cycle
- return on equity
- profit margin
- debt ratio
- inventory turnover
- operating cash flow
- free cash flow
- price to earnings ratio
- dividend yield
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/ratios - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get an extensive set of financial and accounting ratios for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.ratios(symbol='AAPL', provider='fmp')
obb.equity.fundamental.ratios(symbol='AAPL', period=annual, limit=12, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `12`

 • *Optional:* `True`

---

**`period`**: `Literal['annual', 'quarter', 'ttm', 'ytd']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FinancialRatios]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

**`current_ratio`**: `float`

Current ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`cash_ratio`**: `float`

Cash ratio.

**`days_of_sales_outstanding`**: `float`

Days of sales outstanding.

**`days_of_inventory_outstanding`**: `float`

Days of inventory outstanding.

**`operating_cycle`**: `float`

Operating cycle.

**`days_of_payables_outstanding`**: `float`

Days of payables outstanding.

**`cash_conversion_cycle`**: `float`

Cash conversion cycle.

**`gross_profit_margin`**: `float`

Gross profit margin.

**`operating_profit_margin`**: `float`

Operating profit margin.

**`pretax_profit_margin`**: `float`

Pretax profit margin.

**`net_profit_margin`**: `float`

Net profit margin.

**`effective_tax_rate`**: `float`

Effective tax rate.

**`return_on_assets`**: `float`

Return on assets.

**`return_on_equity`**: `float`

Return on equity.

**`return_on_capital_employed`**: `float`

Return on capital employed.

**`net_income_per_ebt`**: `float`

Net income per EBT.

**`ebt_per_ebit`**: `float`

EBT per EBIT.

**`ebit_per_revenue`**: `float`

EBIT per revenue.

**`debt_ratio`**: `float`

Debt ratio.

**`debt_equity_ratio`**: `float`

Debt equity ratio.

**`long_term_debt_to_capitalization`**: `float`

Long term debt to capitalization.

**`total_debt_to_capitalization`**: `float`

Total debt to capitalization.

**`interest_coverage`**: `float`

Interest coverage.

**`cash_flow_to_debt_ratio`**: `float`

Cash flow to debt ratio.

**`company_equity_multiplier`**: `float`

Company equity multiplier.

**`receivables_turnover`**: `float`

Receivables turnover.

**`payables_turnover`**: `float`

Payables turnover.

**`inventory_turnover`**: `float`

Inventory turnover.

**`fixed_asset_turnover`**: `float`

Fixed asset turnover.

**`asset_turnover`**: `float`

Asset turnover.

**`operating_cash_flow_per_share`**: `float`

Operating cash flow per share.

**`free_cash_flow_per_share`**: `float`

Free cash flow per share.

**`cash_per_share`**: `float`

Cash per share.

**`payout_ratio`**: `float`

Payout ratio.

**`operating_cash_flow_sales_ratio`**: `float`

Operating cash flow sales ratio.

**`free_cash_flow_operating_cash_flow_ratio`**: `float`

Free cash flow operating cash flow ratio.

**`cash_flow_coverage_ratios`**: `float`

Cash flow coverage ratios.

**`short_term_coverage_ratios`**: `float`

Short term coverage ratios.

**`capital_expenditure_coverage_ratio`**: `float`

Capital expenditure coverage ratio.

**`dividend_paid_and_capex_coverage_ratio`**: `float`

Dividend paid and capex coverage ratio.

**`dividend_payout_ratio`**: `float`

Dividend payout ratio.

**`price_book_value_ratio`**: `float`

Price book value ratio.

**`price_to_book_ratio`**: `float`

Price to book ratio.

**`price_to_sales_ratio`**: `float`

Price to sales ratio.

**`price_earnings_ratio`**: `float`

Price earnings ratio.

**`price_to_free_cash_flows_ratio`**: `float`

Price to free cash flows ratio.

**`price_to_operating_cash_flows_ratio`**: `float`

Price to operating cash flows ratio.

**`price_cash_flow_ratio`**: `float`

Price cash flow ratio.

**`price_earnings_to_growth_ratio`**: `float`

Price earnings to growth ratio.

**`price_sales_ratio`**: `float`

Price sales ratio.

**`dividend_yield`**: `float`

Dividend yield.

**`dividend_yield_percentage`**: `float`

Dividend yield percentage.

**`dividend_per_share`**: `float`

Dividend per share.

**`enterprise_value_multiple`**: `float`

Enterprise value multiple.

**`price_fair_value`**: `float`

Price fair value.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `str`

The date of the data.

**`fiscal_period`**: `str`

Period of the financial ratios.

**`fiscal_year`**: `int`

Fiscal year.

</TabItem>
</Tabs>



---

---
title: "reported_financials"
description: "Get financial statements as reported by the company"
keywords:
- equity
- fundamental
- reported_financials
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/reported_financials - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get financial statements as reported by the company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.reported_financials(symbol='AAPL', provider='intrinio')
# Get AAPL balance sheet with a limit of 10 items.
obb.equity.fundamental.reported_financials(symbol='AAPL', period='annual', statement_type='balance', limit=10, provider='intrinio')
# Get reported income statement
obb.equity.fundamental.reported_financials(symbol='AAPL', statement_type='income', provider='intrinio')
# Get reported cash flow statement
obb.equity.fundamental.reported_financials(symbol='AAPL', statement_type='cash', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `str`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

---

**`statement_type`**: `str`

The type of financial statement - i.e, balance, income, cash.

 • *Default:* `balance`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['annual', 'quarter']`

None

 • *Default:* `annual`

 • *Optional:* `True`

---

**`statement_type`**: `Literal['balance', 'income', 'cash']`

Cash flow statements are reported as YTD, Q4 is the same as FY.

 • *Default:* `income`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.

 • *Default:* `100`

 • *Optional:* `True`

---

**`fiscal_year`**: `int`

The specific fiscal year.  Reports do not go beyond 2008.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ReportedFinancials]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The ending date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report (e.g. FY, Q1, etc.).

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`period_ending`**: `date`

The ending date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the report (e.g. FY, Q1, etc.).

**`fiscal_year`**: `int`

The fiscal year of the fiscal period.

</TabItem>
</Tabs>



---

---
title: "revenue_per_geography"
description: "Learn about the revenue per geography data with the geographic revenue  data Python function in this documentation page. Understand the symbol, period,  structure, and provider parameters. Explore the returns, results, metadata, and  the data structure including the date, geographic segment, and revenue by region  (Americas, Europe, Greater China, Japan, Rest of Asia Pacific)."
keywords:
- geographic revenue data
- revenue per geography
- Python function
- documentation page
- symbol parameter
- period parameter
- structure parameter
- provider parameter
- returns
- results
- metadata
- data
- date
- geographic segment
- Americas
- Europe
- Greater China
- Japan
- Rest of Asia Pacific
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/revenue_per_geography - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the geographic breakdown of revenue for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.revenue_per_geography(symbol='AAPL', provider='fmp')
obb.equity.fundamental.revenue_per_geography(symbol='AAPL', period=quarter, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RevenueGeographic]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`region`**: `str`

The region represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the region.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`region`**: `str`

The region represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the region.

</TabItem>
</Tabs>



---

---
title: "revenue_per_segment"
description: "Learn how to get revenue data for a specific business line using the  equity fundamental revenue per segment function."
keywords:
- Revenue Business Line
- business line revenue data
- equity fundamental revenue per segment
- symbol
- period
- structure
- provider
- results
- RevenueBusinessLine
- chart
- metadata
- data
- date
- business line
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/revenue_per_segment - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the revenue breakdown by business segment for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.revenue_per_segment(symbol='AAPL', provider='fmp')
obb.equity.fundamental.revenue_per_segment(symbol='AAPL', period=quarter, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`period`**: `Literal['quarter', 'annual']`

Time period of the data to return.

 • *Default:* `annual`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RevenueBusinessLine]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`business_line`**: `str`

The business line represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the business line.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`period_ending`**: `date`

The end date of the reporting period.

**`fiscal_period`**: `str`

The fiscal period of the reporting period.

**`fiscal_year`**: `int`

The fiscal year of the reporting period.

**`filing_date`**: `date`

The filing date of the report.

**`business_line`**: `str`

The business line represented by the revenue data.

**`revenue`**: `Union[int, float]`

The total revenue attributed to the business line.

</TabItem>
</Tabs>



---

---
title: "search_attributes"
description: "Search Intrinio data tags to search in latest or historical attributes"
keywords:
- equity
- fundamental
- search_attributes
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/search_attributes - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search Intrinio data tags to search in latest or historical attributes.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.search_attributes(query='ebitda', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Query to search for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Query to search for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `1000`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SearchAttributes]`

Serializable results.

---

**`provider`**: `Optional[Literal['intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`id`**: `str`

ID of the financial attribute.

**`name`**: `str`

Name of the financial attribute.

**`tag`**: `str`

Tag of the financial attribute.

**`statement_code`**: `str`

Code of the financial statement.

**`statement_type`**: `str`

Type of the financial statement.

**`parent_name`**: `str`

Parent's name of the financial attribute.

**`sequence`**: `int`

Sequence of the financial statement.

**`factor`**: `str`

Unit of the financial attribute.

**`transaction`**: `str`

Transaction type (credit/debit) of the financial attribute.

**`type`**: `str`

Type of the financial attribute.

**`unit`**: `str`

Unit of the financial attribute.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`id`**: `str`

ID of the financial attribute.

**`name`**: `str`

Name of the financial attribute.

**`tag`**: `str`

Tag of the financial attribute.

**`statement_code`**: `str`

Code of the financial statement.

**`statement_type`**: `str`

Type of the financial statement.

**`parent_name`**: `str`

Parent's name of the financial attribute.

**`sequence`**: `int`

Sequence of the financial statement.

**`factor`**: `str`

Unit of the financial attribute.

**`transaction`**: `str`

Transaction type (credit/debit) of the financial attribute.

**`type`**: `str`

Type of the financial attribute.

**`unit`**: `str`

Unit of the financial attribute.

</TabItem>
</Tabs>



---

---
title: "trailing_dividend_yield"
description: "Trailing 1yr dividend yield"
keywords:
- equity
- fundamental
- trailing_dividend_yield
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/trailing_dividend_yield - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the 1 year trailing dividend yield for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.trailing_dividend_yield(symbol='AAPL', provider='tiingo')
obb.equity.fundamental.trailing_dividend_yield(symbol='AAPL', limit=252, provider='tiingo')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Default is 252, the number of trading days in a year.

 • *Default:* `252`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Default is 252, the number of trading days in a year.

 • *Default:* `252`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TrailingDividendYield]`

Serializable results.

---

**`provider`**: `Optional[Literal['tiingo']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`trailing_dividend_yield`**: `float`

Trailing dividend yield.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[date, str]`

The date of the data.

**`trailing_dividend_yield`**: `float`

Trailing dividend yield.

</TabItem>
</Tabs>



---

---
title: "transcript"
description: "Learn how to retrieve earnings call transcripts for a given company using  Python obb.equity.fundamental.transcript. Understand the data parameters, returns,  symbol, year, quarter, and metadata associated with the transcripts."
keywords:
- earnings call transcript
- python obb.equity.fundamental.transcript
- data parameters
- returns
- symbols
- year
- quar
- content
- metadata
- provider
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/fundamental/transcript - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get earnings call transcripts for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.fundamental.transcript(symbol='AAPL', year='2020', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `Union[Union[int, str], list[Union[int, str]]]`

Year of the earnings call transcript. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

---

**`year`**: `Union[Union[int, str], list[Union[int, str]]]`

Year of the earnings call transcript. Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EarningsCallTranscript]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`quarter`**: `int`

Quarter of the earnings call transcript.

**`year`**: `int`

Year of the earnings call transcript.

**`date`**: `Union[datetime, str]`

The date of the data.

**`content`**: `str`

Content of the earnings call transcript.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`quarter`**: `int`

Quarter of the earnings call transcript.

**`year`**: `int`

Year of the earnings call transcript.

**`date`**: `Union[datetime, str]`

The date of the data.

**`content`**: `str`

Content of the earnings call transcript.

</TabItem>
</Tabs>



---

---
title: "historical_market_cap"
description: "Get the historical market cap of a ticker symbol"
keywords:
- equity
- historical_market_cap
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/historical_market_cap - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the historical market cap of a ticker symbol.


Examples
--------

```python
from openbb import obb
obb.equity.historical_market_cap(provider='fmp', symbol='AAPL')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp, intrinio.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['day', 'week', 'month', 'quarter', 'year']`

None

 • *Default:* `day`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HistoricalMarketCap]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`market_cap`**: `Union[int, float]`

Market capitalization of the security.

</TabItem>
</Tabs>



---

# Equity

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Calendar" description="splits, ipo, dividend, events, earnings" url="/platform/reference/equity/calendar" />
<ReferenceCard title="Compare" description="peers, company_facts, groups" url="/platform/reference/equity/compare" />
<ReferenceCard title="Darkpool" description="otc" url="/platform/reference/equity/darkpool" />
<ReferenceCard title="Discovery" description="losers, undervalued_large_caps, aggressive_small_caps, active, undervalued_growth, top_retail, gainers, latest_financial_reports,..." url="/platform/reference/equity/discovery" />
<ReferenceCard title="Estimates" description="forward_ebitda, forward_pe, forward_eps, forward_sales, historical, consensus, analyst_search, price_target" url="/platform/reference/equity/estimates" />
<ReferenceCard title="Fundamental" description="ratios, income_growth, transcript, historical_attributes, multiples, cash_growth, management, historical_splits,..." url="/platform/reference/equity/fundamental" />
<ReferenceCard title="Ownership" description="government_trades, major_holders, form_13f, insider_trading, institutional, share_statistics" url="/platform/reference/equity/ownership" />
<ReferenceCard title="Price" description="historical, nbbo, quote, performance" url="/platform/reference/equity/price" />
<ReferenceCard title="Shorts" description="short_interest, fails_to_deliver, short_volume" url="/platform/reference/equity/shorts" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="search" description="Search for stock symbol, CIK, LEI, or company name" url="/platform/reference/equity/search" />
<ReferenceCard title="screener" description="Screen for companies meeting various criteria" url="/platform/reference/equity/screener" />
<ReferenceCard title="profile" description="Get general information about a company" url="/platform/reference/equity/profile" />
<ReferenceCard title="market snapshots" description="Get an updated equity market snapshot" url="/platform/reference/equity/market_snapshots" />
<ReferenceCard title="historical market cap" description="Get the historical market cap of a ticker symbol" url="/platform/reference/equity/historical_market_cap" />
</ul>



---

---
title: "market_snapshots"
description: "Get a current, complete market snapshot with the obb.equity.market_snapshots  Python method. Retrieve equity data such as stock information, financial data, market  analysis, and trading volume. Explore details like stock performance, price change,  moving averages, 52-week high and low, market cap, earnings per share, price to  earnings ratio, and stock exchange."
keywords:
- market snapshot
- equity data
- market data
- stock information
- financial data
- market analysis
- trading volume
- stock performance
- price change
- moving averages
- 52-week high
- 52-week low
- market cap
- earnings per share
- price to earnings ratio
- stock exchange
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/market_snapshots - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get an updated equity market snapshot. This includes price data for thousands of stocks.


Examples
--------

```python
from openbb import obb
obb.equity.market_snapshots(provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fmp' label='fmp'>

**`market`**: `Literal['amex', 'ams', 'ase', 'asx', 'ath', 'bme', 'bru', 'bud', 'bue', 'cai', 'cnq', 'cph', 'dfm', 'doh', 'etf', 'euronext', 'hel', 'hkse', 'ice', 'iob', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'koe', 'ksc', 'kuw', 'lse', 'mex', 'mutual_fund', 'nasdaq', 'neo', 'nse', 'nyse', 'nze', 'osl', 'otc', 'pnk', 'pra', 'ris', 'sao', 'sau', 'set', 'sgo', 'shh', 'shz', 'six', 'sto', 'tai', 'tlv', 'tsx', 'two', 'vie', 'wse', 'xetra']`

The market to fetch data for.

 • *Default:* `nasdaq`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime, str], str]`

The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400'

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[MarketSnapshots]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'polygon']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`last_price`**: `float`

The last price of the stock.

**`last_price_timestamp`**: `Union[date, datetime]`

The timestamp of the last price.

**`ma50`**: `float`

The 50-day moving average.

**`ma200`**: `float`

The 200-day moving average.

**`year_high`**: `float`

The 52-week high.

**`year_low`**: `float`

The 52-week low.

**`volume_avg`**: `int`

Average daily trading volume.

**`market_cap`**: `int`

Market cap of the stock.

**`eps`**: `float`

Earnings per share.

**`pe`**: `float`

Price to earnings ratio.

**`shares_outstanding`**: `int`

Number of shares outstanding.

**`name`**: `str`

The company name associated with the symbol.

**`exchange`**: `str`

The exchange of the stock.

**`earnings_date`**: `Union[date, datetime]`

The upcoming earnings announcement date.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`last_price`**: `float`

The last trade price.

**`last_size`**: `int`

The last trade size.

**`last_volume`**: `int`

The last trade volume.

**`last_trade_timestamp`**: `datetime`

The timestamp of the last trade.

**`bid_size`**: `int`

The size of the last bid price. Bid price and size is not always available.

**`bid_price`**: `float`

The last bid price. Bid price and size is not always available.

**`ask_price`**: `float`

The last ask price. Ask price and size is not always available.

**`ask_size`**: `int`

The size of the last ask price. Ask price and size is not always available.

**`last_bid_timestamp`**: `datetime`

The timestamp of the last bid price. Bid price and size is not always available.

**`last_ask_timestamp`**: `datetime`

The timestamp of the last ask price. Ask price and size is not always available.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price from the previous close.

**`change_percent`**: `float`

The change in price from the previous close, as a normalized percent.

**`vwap`**: `float`

The volume weighted average price of the stock on the current trading day.

**`prev_open`**: `float`

The previous trading session opening price.

**`prev_high`**: `float`

The previous trading session high price.

**`prev_low`**: `float`

The previous trading session low price.

**`prev_volume`**: `float`

The previous trading session volume.

**`prev_vwap`**: `float`

The previous trading session VWAP.

**`last_updated`**: `datetime`

The last time the data was updated.

**`bid`**: `float`

The current bid price.

**`bid_size`**: `int`

The current bid size.

**`ask_size`**: `int`

The current ask size.

**`ask`**: `float`

The current ask price.

**`quote_timestamp`**: `datetime`

The timestamp of the last quote.

**`last_trade_price`**: `float`

The last trade price.

**`last_trade_size`**: `int`

The last trade size.

**`last_trade_conditions`**: `list[int]`

The last trade condition codes.

**`last_trade_exchange`**: `int`

The last trade exchange ID code.

**`last_trade_timestamp`**: `datetime`

The last trade timestamp.

</TabItem>
</Tabs>



---

---
title: "form_13f"
description: "Get the form 13F"
keywords:
- equity
- ownership
- form_13f
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/form_13f - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the form 13F.

The Securities and Exchange Commission's (SEC) Form 13F is a quarterly report
that is required to be filed by all institutional investment managers with at least
$100 million in assets under management.
Managers are required to file Form 13F within 45 days after the last day of the calendar quarter.
Most funds wait until the end of this period in order to conceal
their investment strategy from competitors and the public.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.form_13f(symbol='NVDA', provider='sec')
# Enter a date (calendar quarter ending) for a specific report.
obb.equity.ownership.form_13f(symbol='BRK-A', date='2016-09-30', provider='sec')
# Example finding Michael Burry's filings.
cik = obb.regulators.sec.institutions_search("Scion Asset Management").results[0].cik
# Use the `limit` parameter to return N number of reports from the most recent.
obb.equity.ownership.form_13f(cik, limit=2).to_df()
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. A CIK or Symbol can be used.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for. A CIK or Symbol can be used.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Form13FHR]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`period_ending`**: `date`

The end-of-quarter date of the filing.

**`issuer`**: `str`

The name of the issuer.

**`cusip`**: `str`

The CUSIP of the security.

**`asset_class`**: `str`

The title of the asset class for the security.

**`security_type`**: `Literal['SH', 'PRN']`

Whether the principal amount represents the number of shares or the principal amount of such class. 'SH' for shares. 'PRN' for principal amount. Convertible debt securities are reported as 'PRN'.

**`option_type`**: `Literal['call', 'put']`

Defined when the holdings being reported are put or call options. Only long positions are reported.

**`investment_discretion`**: `str`

The investment discretion held by the Manager. Sole, shared-defined (DFN), or shared-other (OTR).

**`voting_authority_sole`**: `int`

The number of shares for which the Manager exercises sole voting authority.

**`voting_authority_shared`**: `int`

The number of shares for which the Manager exercises a defined shared voting authority.

**`voting_authority_none`**: `int`

The number of shares for which the Manager exercises no voting authority.

**`principal_amount`**: `int`

The total number of shares of the class of security or the principal amount of such class. Defined by the 'security_type'. Only long positions are reported

**`value`**: `int`

The fair market value of the holding of the particular class of security. The value reported for options is the fair market value of the underlying security with respect to the number of shares controlled. Values are rounded to the nearest US dollar and use the closing price of the last trading day of the calendar year or quarter.

</TabItem>

<TabItem value='sec' label='sec'>

**`period_ending`**: `date`

The end-of-quarter date of the filing.

**`issuer`**: `str`

The name of the issuer.

**`cusip`**: `str`

The CUSIP of the security.

**`asset_class`**: `str`

The title of the asset class for the security.

**`security_type`**: `Literal['SH', 'PRN']`

Whether the principal amount represents the number of shares or the principal amount of such class. 'SH' for shares. 'PRN' for principal amount. Convertible debt securities are reported as 'PRN'.

**`option_type`**: `Literal['call', 'put']`

Defined when the holdings being reported are put or call options. Only long positions are reported.

**`investment_discretion`**: `str`

The investment discretion held by the Manager. Sole, shared-defined (DFN), or shared-other (OTR).

**`voting_authority_sole`**: `int`

The number of shares for which the Manager exercises sole voting authority.

**`voting_authority_shared`**: `int`

The number of shares for which the Manager exercises a defined shared voting authority.

**`voting_authority_none`**: `int`

The number of shares for which the Manager exercises no voting authority.

**`principal_amount`**: `int`

The total number of shares of the class of security or the principal amount of such class. Defined by the 'security_type'. Only long positions are reported

**`value`**: `int`

The fair market value of the holding of the particular class of security. The value reported for options is the fair market value of the underlying security with respect to the number of shares controlled. Values are rounded to the nearest US dollar and use the closing price of the last trading day of the calendar year or quarter.

**`weight`**: `float`

The weight of the security relative to the market value of all securities in the filing , as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "government_trades"
description: "Obtain government transaction data, including data from the Senate
and the House of Representatives"
keywords:
- equity
- ownership
- government_trades
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/government_trades - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Obtain government transaction data, including data from the Senate
and the House of Representatives.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.government_trades(symbol='AAPL', chamber='all', provider='fmp')
obb.equity.ownership.government_trades(limit=500, chamber='all', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `True`

---

**`chamber`**: `Literal['house', 'senate', 'all']`

Government Chamber.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): fmp.

 • *Optional:* `True`

---

**`chamber`**: `Literal['house', 'senate', 'all']`

Government Chamber.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[GovernmentTrades]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`transaction_date`**: `date`

Date of Transaction.

**`representative`**: `str`

Name of Representative.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`transaction_date`**: `date`

Date of Transaction.

**`representative`**: `str`

Name of Representative.

**`chamber`**: `Literal['house', 'senate']`

Government Chamber - House or Senate.

**`owner`**: `str`

Ownership status (e.g., Spouse, Joint).

**`asset_type`**: `str`

Type of asset involved in the transaction.

**`asset_description`**: `str`

Description of the asset.

**`transaction_type`**: `str`

Type of transaction (e.g., Sale, Purchase).

**`amount`**: `str`

Transaction amount range.

**`comment`**: `str`

Additional comments on the transaction.

**`url`**: `str`

Link to the transaction document.

</TabItem>
</Tabs>



---

# Ownership

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="government trades" description="Obtain government transaction data, including data from the Senate
and the House of Representatives" url="/platform/reference/equity/ownership/government_trades" />
<ReferenceCard title="major holders" description="Get data about major holders for a given company over time" url="/platform/reference/equity/ownership/major_holders" />
<ReferenceCard title="form 13f" description="Get the form 13F" url="/platform/reference/equity/ownership/form_13f" />
<ReferenceCard title="insider trading" description="Get data about trading by a company's management team and board of directors" url="/platform/reference/equity/ownership/insider_trading" />
<ReferenceCard title="institutional" description="Get data about institutional ownership for a given company over time" url="/platform/reference/equity/ownership/institutional" />
<ReferenceCard title="share statistics" description="Get data about share float for a given company" url="/platform/reference/equity/ownership/share_statistics" />
</ul>



---

---
title: "insider_trading"
description: "Learn how to use the stock insider trading Python function to get information  about insider trading, including parameter details, return types, and data descriptions."
keywords:
- stock insider trading
- equity ownership
- Python function
- parameter details
- data description
- symbol
- transaction type
- limit
- provider
- returns
- results
- chart
- metadata
- data
- filing date
- transaction date
- reporting CIK
- securities owned
- company CIK
- reporting name
- type of owner
- acquisition or disposition
- form type
- securities transacted
- price
- security name
- link
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/insider_trading - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get data about trading by a company's management team and board of directors.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.insider_trading(symbol='AAPL', provider='fmp')
obb.equity.ownership.insider_trading(symbol='AAPL', limit=500, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`transaction_type`**: `Literal['award', 'conversion', 'return', 'expire_short', 'in_kind', 'gift', 'expire_long', 'discretionary', 'other', 'small', 'exempt', 'otm', 'purchase', 'sale', 'tender', 'will', 'itm', 'trust']`

Type of the transaction.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `False`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `False`

---

**`ownership_type`**: `Literal['D', 'I']`

Type of ownership.

 • *Optional:* `True`

---

**`sort_by`**: `Literal['filing_date', 'updated_on']`

Field to sort by.

 • *Default:* `updated_on`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. Default is today.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `500`

 • *Optional:* `True`

---

**`summary`**: `bool`

Return a summary of the insider activity instead of the individuals.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[InsiderTrading]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'sec', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`form_type`**: `str`

Form type of the insider trading.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

URL of the filing.

**`company_name`**: `str`

Name of the company.

**`conversion_exercise_price`**: `float`

Conversion/Exercise price of the shares.

**`deemed_execution_date`**: `date`

Deemed execution date of the trade.

**`exercise_date`**: `date`

Exercise date of the trade.

**`expiration_date`**: `date`

Expiration date of the derivative.

**`underlying_security_title`**: `str`

Name of the underlying non-derivative security related to this derivative transaction.

**`underlying_shares`**: `Union[float, int]`

Number of underlying shares related to this derivative transaction.

**`nature_of_ownership`**: `str`

Nature of ownership of the insider trading.

**`director`**: `bool`

Whether the owner is a director.

**`officer`**: `bool`

Whether the owner is an officer.

**`ten_percent_owner`**: `bool`

Whether the owner is a 10% owner.

**`other_relation`**: `bool`

Whether the owner is having another relation.

**`derivative_transaction`**: `bool`

Whether the owner is having a derivative transaction.

**`report_line_number`**: `int`

Report line number of the insider trading.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

Name of the reporting individual.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `float`

Number of securities owned by the reporting individual.

**`securities_transacted`**: `float`

Number of securities transacted by the reporting individual.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`company_name`**: `str`

Name of the company.

**`form`**: `Union[str, int]`

Form type.

**`director`**: `bool`

Whether the owner is a director.

**`officer`**: `bool`

Whether the owner is an officer.

**`ten_percent_owner`**: `bool`

Whether the owner is a 10% owner.

**`other`**: `bool`

Whether the owner is classified as other.

**`other_text`**: `str`

Text for other classification.

**`transaction_timeliness`**: `str`

Timeliness of the transaction.

**`ownership_type`**: `str`

Type of ownership, direct or indirect.

**`nature_of_ownership`**: `str`

Nature of the ownership.

**`exercise_date`**: `date`

Date of exercise.

**`expiration_date`**: `date`

Date of expiration for the derivative.

**`deemed_execution_date`**: `date`

Deemed execution date.

**`underlying_security_title`**: `str`

Title of the underlying security.

**`underlying_security_shares`**: `float`

Number of underlying shares associated with the derivative.

**`underlying_security_value`**: `float`

Value of the underlying security.

**`conversion_exercise_price`**: `float`

Price of conversion or exercise of the securities.

**`transaction_value`**: `float`

Total value of the transaction.

**`value_owned`**: `float`

Value of the securities owned after the transaction.

**`footnote`**: `str`

Footnote for the transaction.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`company_cik`**: `Union[str, int]`

CIK number of the company.

**`filing_date`**: `Union[date, datetime]`

Filing date of the trade.

**`transaction_date`**: `date`

Date of the transaction.

**`owner_cik`**: `Union[str, int]`

Reporting individual's CIK.

**`owner_name`**: `str`

The name of the insider.

**`owner_title`**: `str`

The title held by the reporting individual.

**`transaction_type`**: `str`

Type of transaction being reported.

**`acquisition_or_disposition`**: `str`

Acquisition or disposition of the shares.

**`security_type`**: `str`

The type of security transacted.

**`securities_owned`**: `int`

The number of shares held by the insider.

**`securities_transacted`**: `int`

The total number of shares traded by the insider over the period.

**`transaction_price`**: `float`

The price of the transaction.

**`filing_url`**: `str`

Link to the filing.

**`period`**: `str`

The period of the activity. Bucketed by three, six, and twelve months.

**`acquisition_or_deposition`**: `str`

Whether the insider bought or sold the shares.

**`number_of_trades`**: `int`

The number of shares traded over the period.

**`trade_value`**: `float`

The value of the shares traded by the insider.

**`securities_bought`**: `int`

The total number of shares bought by all insiders over the period.

**`securities_sold`**: `int`

The total number of shares sold by all insiders over the period.

**`net_activity`**: `int`

The total net activity by all insiders over the period.

</TabItem>
</Tabs>



---

---
title: "institutional"
description: "Learn about institutional ownership data, and how to use the OBB.equity.ownership.institutional  function in Python to access the data. Explore the symbol, include_current_quarter,  date, and provider parameters. Understand the meaning and usage of the results,  provider, warnings, chart, and metadata properties. Additionally, get detailed descriptions  of the various data fields such as symbol, cik, date, investors_holding, number_of_13f_shares,  total_invested, ownership_percent, new_positions, closed_positions, total_calls,  total_puts, and put_call_ratio."
keywords:
- institutional ownership data
- python OBB.equity.ownership.institutional function
- symbol parameter
- include_current_quarter parameter
- date parameter
- provider parameter
- results property
- provider property
- warnings property
- chart property
- metadata property
- data description
- symbol data
- cik data
- date data
- investors_holding data
- last_investors_holding data
- investors_holding_change data
- number_of_13f_shares data
- last_number_of_13f_shares data
- number_of_13f_shares_change data
- total_invested data
- last_total_invested data
- total_invested_change data
- ownership_percent data
- last_ownership_percent data
- ownership_percent_change data
- new_positions data
- last_new_positions data
- new_positions_change data
- increased_positions data
- last_increased_positions data
- increased_positions_change data
- closed_positions data
- last_closed_positions data
- closed_positions_change data
- reduced_positions data
- last_reduced_positions data
- reduced_positions_change data
- total_calls data
- last_total_calls data
- total_calls_change data
- total_puts data
- last_total_puts data
- total_puts_change data
- put_call_ratio data
- last_put_call_ratio data
- put_call_ratio_change data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/institutional - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get data about institutional ownership for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.institutional(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`include_current_quarter`**: `bool`

Include current quarter data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[InstitutionalOwnership]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`date`**: `Union[date, str]`

The date of the data.

**`investors_holding`**: `int`

Number of investors holding the stock.

**`last_investors_holding`**: `int`

Number of investors holding the stock in the last quarter.

**`investors_holding_change`**: `int`

Change in the number of investors holding the stock.

**`number_of_13f_shares`**: `int`

Number of 13F shares.

**`last_number_of_13f_shares`**: `int`

Number of 13F shares in the last quarter.

**`number_of_13f_shares_change`**: `int`

Change in the number of 13F shares.

**`total_invested`**: `float`

Total amount invested.

**`last_total_invested`**: `float`

Total amount invested in the last quarter.

**`total_invested_change`**: `float`

Change in the total amount invested.

**`ownership_percent`**: `float`

Ownership percent.

**`last_ownership_percent`**: `float`

Ownership percent in the last quarter.

**`ownership_percent_change`**: `float`

Change in the ownership percent.

**`new_positions`**: `int`

Number of new positions.

**`last_new_positions`**: `int`

Number of new positions in the last quarter.

**`new_positions_change`**: `int`

Change in the number of new positions.

**`increased_positions`**: `int`

Number of increased positions.

**`last_increased_positions`**: `int`

Number of increased positions in the last quarter.

**`increased_positions_change`**: `int`

Change in the number of increased positions.

**`closed_positions`**: `int`

Number of closed positions.

**`last_closed_positions`**: `int`

Number of closed positions in the last quarter.

**`closed_positions_change`**: `int`

Change in the number of closed positions.

**`reduced_positions`**: `int`

Number of reduced positions.

**`last_reduced_positions`**: `int`

Number of reduced positions in the last quarter.

**`reduced_positions_change`**: `int`

Change in the number of reduced positions.

**`total_calls`**: `int`

Total number of call options contracts traded for Apple Inc. on the specified date.

**`last_total_calls`**: `int`

Total number of call options contracts traded for Apple Inc. on the previous reporting date.

**`total_calls_change`**: `int`

Change in the total number of call options contracts traded between the current and previous reporting dates.

**`total_puts`**: `int`

Total number of put options contracts traded for Apple Inc. on the specified date.

**`last_total_puts`**: `int`

Total number of put options contracts traded for Apple Inc. on the previous reporting date.

**`total_puts_change`**: `int`

Change in the total number of put options contracts traded between the current and previous reporting dates.

**`put_call_ratio`**: `float`

Put-call ratio, which is the ratio of the total number of put options to call options traded on the specified date.

**`last_put_call_ratio`**: `float`

Put-call ratio on the previous reporting date.

**`put_call_ratio_change`**: `float`

Change in the put-call ratio between the current and previous reporting dates.

</TabItem>
</Tabs>



---

---
title: "major_holders"
description: "Get detailed information about equity ownership and stock ownership,  including investment data, security data, market value data, shares data, performance  data, and ownership data. Use the equity ownership API to retrieve equity ownership  details, and explore various stock ownership parameters and returns. Access company  ownership data, investor data, filing data, industry data, and more."
keywords:
- equity ownership
- company ownership
- equity ownership API
- equity ownership data
- equity ownership parameters
- equity ownership returns
- equity ownership data fields
- stock ownership
- stock ownership data
- stock ownership API
- stock ownership parameters
- stock ownership returns
- stock ownership data fields
- investment data
- security data
- market value data
- shares data
- performance data
- ownership data
- equity ownership details
- stock ownership details
- equity ownership information
- stock ownership information
- company ownership data
- investor data
- filing data
- industry data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/major_holders - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get data about major holders for a given company over time.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.major_holders(symbol='AAPL', provider='fmp')
obb.equity.ownership.major_holders(symbol='AAPL', page=0, provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the data to fetch.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the data to fetch.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityOwnership]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`filing_date`**: `date`

Filing date of the stock ownership.

**`investor_name`**: `str`

Investor name of the stock ownership.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`security_name`**: `str`

Security name of the stock ownership.

**`type_of_security`**: `str`

Type of security of the stock ownership.

**`security_cusip`**: `str`

Security cusip of the stock ownership.

**`shares_type`**: `str`

Shares type of the stock ownership.

**`put_call_share`**: `str`

Put call share of the stock ownership.

**`investment_discretion`**: `str`

Investment discretion of the stock ownership.

**`industry_title`**: `str`

Industry title of the stock ownership.

**`weight`**: `float`

Weight of the stock ownership.

**`last_weight`**: `float`

Last weight of the stock ownership.

**`change_in_weight`**: `float`

Change in weight of the stock ownership.

**`change_in_weight_percentage`**: `float`

Change in weight percentage of the stock ownership.

**`market_value`**: `int`

Market value of the stock ownership.

**`last_market_value`**: `int`

Last market value of the stock ownership.

**`change_in_market_value`**: `int`

Change in market value of the stock ownership.

**`change_in_market_value_percentage`**: `float`

Change in market value percentage of the stock ownership.

**`shares_number`**: `int`

Shares number of the stock ownership.

**`last_shares_number`**: `int`

Last shares number of the stock ownership.

**`change_in_shares_number`**: `float`

Change in shares number of the stock ownership.

**`change_in_shares_number_percentage`**: `float`

Change in shares number percentage of the stock ownership.

**`quarter_end_price`**: `float`

Quarter end price of the stock ownership.

**`avg_price_paid`**: `float`

Average price paid of the stock ownership.

**`is_new`**: `bool`

Is the stock ownership new.

**`is_sold_out`**: `bool`

Is the stock ownership sold out.

**`ownership`**: `float`

How much is the ownership.

**`last_ownership`**: `float`

Last ownership amount.

**`change_in_ownership`**: `float`

Change in ownership amount.

**`change_in_ownership_percentage`**: `float`

Change in ownership percentage.

**`holding_period`**: `int`

Holding period of the stock ownership.

**`first_added`**: `date`

First added date of the stock ownership.

**`performance`**: `float`

Performance of the stock ownership.

**`performance_percentage`**: `float`

Performance percentage of the stock ownership.

**`last_performance`**: `float`

Last performance of the stock ownership.

**`change_in_performance`**: `float`

Change in performance of the stock ownership.

**`is_counted_for_performance`**: `bool`

Is the stock ownership counted for performance.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`filing_date`**: `date`

Filing date of the stock ownership.

**`investor_name`**: `str`

Investor name of the stock ownership.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`security_name`**: `str`

Security name of the stock ownership.

**`type_of_security`**: `str`

Type of security of the stock ownership.

**`security_cusip`**: `str`

Security cusip of the stock ownership.

**`shares_type`**: `str`

Shares type of the stock ownership.

**`put_call_share`**: `str`

Put call share of the stock ownership.

**`investment_discretion`**: `str`

Investment discretion of the stock ownership.

**`industry_title`**: `str`

Industry title of the stock ownership.

**`weight`**: `float`

Weight of the stock ownership.

**`last_weight`**: `float`

Last weight of the stock ownership.

**`change_in_weight`**: `float`

Change in weight of the stock ownership.

**`change_in_weight_percentage`**: `float`

Change in weight percentage of the stock ownership.

**`market_value`**: `int`

Market value of the stock ownership.

**`last_market_value`**: `int`

Last market value of the stock ownership.

**`change_in_market_value`**: `int`

Change in market value of the stock ownership.

**`change_in_market_value_percentage`**: `float`

Change in market value percentage of the stock ownership.

**`shares_number`**: `int`

Shares number of the stock ownership.

**`last_shares_number`**: `int`

Last shares number of the stock ownership.

**`change_in_shares_number`**: `float`

Change in shares number of the stock ownership.

**`change_in_shares_number_percentage`**: `float`

Change in shares number percentage of the stock ownership.

**`quarter_end_price`**: `float`

Quarter end price of the stock ownership.

**`avg_price_paid`**: `float`

Average price paid of the stock ownership.

**`is_new`**: `bool`

Is the stock ownership new.

**`is_sold_out`**: `bool`

Is the stock ownership sold out.

**`ownership`**: `float`

How much is the ownership.

**`last_ownership`**: `float`

Last ownership amount.

**`change_in_ownership`**: `float`

Change in ownership amount.

**`change_in_ownership_percentage`**: `float`

Change in ownership percentage.

**`holding_period`**: `int`

Holding period of the stock ownership.

**`first_added`**: `date`

First added date of the stock ownership.

**`performance`**: `float`

Performance of the stock ownership.

**`performance_percentage`**: `float`

Performance percentage of the stock ownership.

**`last_performance`**: `float`

Last performance of the stock ownership.

**`change_in_performance`**: `float`

Change in performance of the stock ownership.

**`is_counted_for_performance`**: `bool`

Is the stock ownership counted for performance.

</TabItem>
</Tabs>



---

---
title: "share_statistics"
description: "Learn how to retrieve and analyze share statistics for a given company  using the obb.equity.ownership.share_statistics API endpoint. This documentation  provides details on the parameters, return values, and data structure."
keywords:
- share statistics
- company statistics
- equity ownership
- symbol
- provider
- data
- free float
- float shares
- outstanding shares
- source
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/ownership/share_statistics - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get data about share float for a given company.


Examples
--------

```python
from openbb import obb
obb.equity.ownership.share_statistics(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ShareStatistics]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

**`adjusted_outstanding_shares`**: `float`

Total number of shares of a publicly-traded company, adjusted for splits.

**`public_float`**: `float`

Aggregate market value of the shares of a publicly-traded company.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`date`**: `Union[date, str]`

The date of the data.

**`free_float`**: `float`

Percentage of unrestricted shares of a publicly-traded company.

**`float_shares`**: `float`

Number of shares available for trading by the general public.

**`outstanding_shares`**: `float`

Total number of shares of a publicly-traded company.

**`source`**: `str`

Source of the received data.

**`implied_shares_outstanding`**: `int`

Implied Shares Outstanding of common equity, assuming the conversion of all convertible subsidiary equity into common.

**`short_interest`**: `int`

Number of shares that are reported short.

**`short_percent_of_float`**: `float`

Percentage of shares that are reported short, as a normalized percent.

**`days_to_cover`**: `float`

Number of days to repurchase the shares as a ratio of average daily volume

**`short_interest_prev_month`**: `int`

Number of shares that were reported short in the previous month.

**`short_interest_prev_date`**: `date`

Date of the previous month's report.

**`insider_ownership`**: `float`

Percentage of shares held by insiders, as a normalized percent.

**`institution_ownership`**: `float`

Percentage of shares held by institutions, as a normalized percent.

**`institution_float_ownership`**: `float`

Percentage of float held by institutions, as a normalized percent.

**`institutions_count`**: `int`

Number of institutions holding shares.

</TabItem>
</Tabs>



---

---
title: "historical"
description: "Learn how to use the `obb.equity.price.historical` function to load historical  price data for a specific stock ticker. Find out about the available parameters  and providers, as well as the structure of the returned data and the columns it  contains."
keywords:
- equity historical price
- load stock data
- specific ticker
- python function
- equity data parameters
- alpha vantage provider
- fmp provider
- intrinio provider
- polygon provider
- yfinance provider
- equity historical data returns
- equity data columns
- alpha vantage data columns
- cboe data columns
- fmp data columns
- intrinio data columns
- polygon data columns
- yfinance data columns
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/price/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical price data for a given stock. This includes open, high, low, close, and volume.


Examples
--------

```python
from openbb import obb
obb.equity.price.historical(symbol='AAPL', provider='fmp')
obb.equity.price.historical(symbol='AAPL', interval=1d, provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '60m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. 'splits_only' is not supported for intraday data.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '10m', '15m', '30m', '60m', '1h', '1d', '1W', '1M', '1Q', '1Y']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`start_time`**: `datetime.time`

Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`end_time`**: `datetime.time`

Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`timezone`**: `str`

Timezone of the data, in the IANA format (Continent/City).

 • *Default:* `America/New_York`

 • *Optional:* `True`

---

**`source`**: `Literal['realtime', 'delayed', 'nasdaq_basic']`

The source of the data.

 • *Default:* `realtime`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'unadjusted']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '1W', '1M', '1Y'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '2m', '5m', '15m', '30m', '60m', '1h', '1d', '1W', '1M'], str, int]`

Time interval of the data to return. Or, any integer (entered as a string) representing the number of minutes. Default is daily data. There is no extended hours data, and intraday data is limited to after April 12 2022.

 • *Default:* `day`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. Only valid for daily data.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_actions`**: `bool`

Include dividends and stock splits in results.

 • *Default:* `True`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['alpha_vantage', 'cboe', 'fmp', 'intrinio', 'polygon', 'tiingo', 'tmx', 'tradier', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `Annotated[float, Gt(gt=0)]`

The adjusted close price.

**`dividend`**: `Annotated[float, Ge(ge=0)]`

Dividend amount, if a dividend was paid.

**`split_ratio`**: `Annotated[float, Ge(ge=0)]`

Split coefficient, if a split occurred.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`calls_volume`**: `int`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `int`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `int`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`unadjusted_volume`**: `float`

Unadjusted volume of the symbol.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`average`**: `float`

Average trade price of an individual equity during the interval.

**`change`**: `float`

Change in the price of the symbol from the previous day.

**`change_percent`**: `float`

Percent change in the price of the symbol from the previous day.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`fifty_two_week_high`**: `float`

52 week high price for the symbol.

**`fifty_two_week_low`**: `float`

52 week low price for the symbol.

**`factor`**: `float`

factor by which to multiply equity prices before this date, in order to calculate historically-adjusted equity prices.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

**`close_time`**: `datetime`

The timestamp that represents the end of the interval span.

**`interval`**: `str`

The data time frequency.

**`intra_period`**: `bool`

If true, the equity price represents an unfinished period (be it day, week, quarter, month, or year), meaning that the close price is the latest price available, not the official close price for the period

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume weighted average price for the day.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price, as a normalized percentage.

**`transactions`**: `int`

Total number of transactions recorded.

**`transactions_value`**: `float`

Nominal value of recorded transactions.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`last_price`**: `float`

The last price of the equity.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount (split-adjusted), if a dividend was paid.

</TabItem>
</Tabs>



---

# Price

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="historical" description="Get historical price data for a given stock" url="/platform/reference/equity/price/historical" />
<ReferenceCard title="nbbo" description="Get the National Best Bid and Offer for a given stock" url="/platform/reference/equity/price/nbbo" />
<ReferenceCard title="quote" description="Get the latest quote for a given stock" url="/platform/reference/equity/price/quote" />
<ReferenceCard title="performance" description="Get price performance data for a given stock" url="/platform/reference/equity/price/performance" />
</ul>



---

---
title: "nbbo"
description: "Learn how to load the National Best Bid and Offer (NBBO) for a specific  equity using the OBB.equity.price.nbbo API. Explore the parameters and data returned  by the query, including ask price, bid price, ask size, bid size, exchange details,  timestamps, and more."
keywords:
- Equity Quote
- National Best Bid and Offer
- specific equity
- symbol
- provider
- polygon
- query
- limit
- date
- timestamp
- OBBject
- results
- EquityNBBO
- warnings
- Chart
- Metadata
- ask_exchange
- ask
- ask_size
- bid_size
- bid
- bid_exchange
- tape
- conditions
- indicators
- sequence_num
- participant_timestamp
- sip_timestamp
- trf_timestamp
- data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/price/nbbo - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the National Best Bid and Offer for a given stock.


Examples
--------

```python
from openbb import obb
obb.equity.price.nbbo(symbol='AAPL', provider='polygon')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols.

 • *Default:* `50000`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges.

 • *Optional:* `True`

---

**`timestamp_lt`**: `Union[datetime, str]`

Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_gt`**: `Union[datetime, str]`

Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_lte`**: `Union[datetime, str]`

Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

---

**`timestamp_gte`**: `Union[datetime, str]`

Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityNBBO]`

Serializable results.

---

**`provider`**: `Optional[Literal['polygon']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`ask_exchange`**: `str`

The exchange ID for the ask.

**`ask`**: `float`

The last ask price.

**`ask_size`**: `int`

<details>
<summary mdxType="summary">Description</summary>

The ask size. This represents the number of round lot orders at the given ask price.<br/>
        The normal round lot size is 100 shares.<br/>
        An ask size of 2 means there are 200 shares available to purchase at the given ask price.

</details>

**`bid_size`**: `int`

The bid size in round lots.

**`bid`**: `float`

The last bid price.

**`bid_exchange`**: `str`

The exchange ID for the bid.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`ask_exchange`**: `str`

The exchange ID for the ask.

**`ask`**: `float`

The last ask price.

**`ask_size`**: `int`

<details>
<summary mdxType="summary">Description</summary>

The ask size. This represents the number of round lot orders at the given ask price.<br/>
        The normal round lot size is 100 shares.<br/>
        An ask size of 2 means there are 200 shares available to purchase at the given ask price.

</details>

**`bid_size`**: `int`

The bid size in round lots.

**`bid`**: `float`

The last bid price.

**`bid_exchange`**: `str`

The exchange ID for the bid.

**`tape`**: `str`

The exchange tape.

**`conditions`**: `Union[str, list[int], list[str]]`

A list of condition codes.

**`indicators`**: `list[int]`

A list of indicator codes.

**`sequence_num`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11)

**`participant_timestamp`**: `datetime`

The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.

**`sip_timestamp`**: `datetime`

The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this quote from the exchange which produced it.

**`trf_timestamp`**: `datetime`

The nanosecond accuracy TRF (Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this quote.

</TabItem>
</Tabs>



---

---
title: "performance"
description: "Learn how to calculate the price performance return for a symbol over  different time periods using the OBB.equity.price.performance function. Retrieve  data such as one-day return, week to date return, one-week return, month to date  return, and more. Understand the parameters, returns, and data structure of the  function."
keywords:
- price performance
- return
- symbol
- data
- provider
- chart
- metadata
- one-day return
- week to date return
- one-week return
- month to date return
- one-month return
- quarter to date return
- three-month return
- six-month return
- year to date return
- one-year return
- three-year return
- five-year return
- ten-year return
- max return
- time series
- ticker symbol
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/price/performance - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get price performance data for a given stock. This includes price changes for different time periods.


Examples
--------

```python
from openbb import obb
obb.equity.price.performance(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PricePerformance]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz', 'fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`volatility_week`**: `float`

One-week realized volatility, as a normalized percent.

**`volatility_month`**: `float`

One-month realized volatility, as a normalized percent.

**`price`**: `float`

Last Price.

**`volume`**: `float`

Current volume.

**`average_volume`**: `float`

Average daily volume.

**`relative_volume`**: `float`

Relative volume as a ratio of current volume to average volume.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>
</Tabs>



---

---
title: "quote"
description: "Learn how to load stock data for a specific ticker with the Equity Quote  function. Discover the various parameters and data returned, including day low,  day high, date, symbol, name, price, volume, and more."
keywords:
- equity quote
- stock data
- ticker
- parameters
- symbol
- provider
- returns
- data
- day low
- day high
- date
- fmp
- intrinio
- source
- results
- warnings
- chart
- metadata
- price
- changes percentage
- change
- year high
- year low
- market cap
- price avg50
- price avg200
- volume
- avg volume
- exchange
- open
- previous close
- eps
- pe
- earnings announcement
- shares outstanding
- last price
- last time
- last size
- bid price
- bid size
- ask price
- ask size
- close price
- high price
- low price
- exchange volume
- market volume
- updated on
- listing venue
- sales conditions
- quote conditions
- market center code
- is darkpool
- messages
- security
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/price/quote - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the latest quote for a given stock. Quote includes price, volume, and other data.


Examples
--------

```python
from openbb import obb
obb.equity.price.quote(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`source`**: `Literal['iex', 'bats', 'bats_delayed', 'utp_delayed', 'cta_a_delayed', 'cta_b_delayed', 'intrinio_mx', 'intrinio_mx_plus', 'delayed_sip']`

Source of the data.

 • *Default:* `iex`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, tmx, tradier, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityQuote]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'fmp', 'intrinio', 'tmx', 'tradier', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`iv30`**: `float`

The 30-day implied volatility of the stock.

**`iv30_change`**: `float`

Change in 30-day implied volatility of the stock.

**`iv30_change_percent`**: `float`

Change in 30-day implied volatility of the stock as a normalized percentage value.

**`iv30_annual_high`**: `float`

The 1-year high of 30-day implied volatility.

**`hv30_annual_high`**: `float`

The 1-year high of 30-day realized volatility.

**`iv30_annual_low`**: `float`

The 1-year low of 30-day implied volatility.

**`hv30_annual_low`**: `float`

The 1-year low of 30-dayrealized volatility.

**`iv60_annual_high`**: `float`

The 1-year high of 60-day implied volatility.

**`hv60_annual_high`**: `float`

The 1-year high of 60-day realized volatility.

**`iv60_annual_low`**: `float`

The 1-year low of 60-day implied volatility.

**`hv60_annual_low`**: `float`

The 1-year low of 60-day realized volatility.

**`iv90_annual_high`**: `float`

The 1-year high of 90-day implied volatility.

**`hv90_annual_high`**: `float`

The 1-year high of 90-day realized volatility.

**`iv90_annual_low`**: `float`

The 1-year low of 90-day implied volatility.

**`hv90_annual_low`**: `float`

The 1-year low of 90-day realized volatility.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`price_avg50`**: `float`

50 day moving average price.

**`price_avg200`**: `float`

200 day moving average price.

**`avg_volume`**: `int`

Average volume over the last 10 trading days.

**`market_cap`**: `float`

Market cap of the company.

**`shares_outstanding`**: `int`

Number of shares outstanding.

**`eps`**: `float`

Earnings per share.

**`pe`**: `float`

Price earnings ratio.

**`earnings_announcement`**: `datetime`

Upcoming earnings announcement date.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`is_darkpool`**: `bool`

Whether or not the current trade is from a darkpool.

**`source`**: `str`

Source of the Intrinio data.

**`updated_on`**: `datetime`

Date and Time when the data was last updated.

**`security`**: `IntrinioSecurity`

Security details related to the quote.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

The name of the asset.

**`exchange`**: `str`

The listing exchange code.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

The last price of the asset.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

None

**`volume`**: `int`

Volume Weighted Average Price over the period.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

The change in price.

**`change_percent`**: `float`

The change in price as a normalized percent.

**`year_high`**: `float`

Fifty-two week high.

**`year_low`**: `float`

Fifty-two week low.

**`security_type`**: `str`

The issuance type of the asset.

**`sector`**: `str`

The sector of the asset.

**`industry_category`**: `str`

The industry category of the asset.

**`industry_group`**: `str`

The industry group of the asset.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`ma_21`**: `float`

Twenty-one day moving average.

**`ma_50`**: `float`

Fifty day moving average.

**`ma_200`**: `float`

Two-hundred day moving average.

**`volume_avg_10d`**: `int`

Ten day average volume.

**`volume_avg_30d`**: `int`

Thirty day average volume.

**`volume_avg_50d`**: `int`

Fifty day average volume.

**`market_cap`**: `int`

Market capitalization.

**`market_cap_all_classes`**: `int`

Market capitalization of all share classes.

**`div_amount`**: `float`

The most recent dividend amount.

**`div_currency`**: `str`

The currency the dividend is paid in.

**`div_yield`**: `float`

The dividend yield as a normalized percentage.

**`div_freq`**: `str`

The frequency of dividend payments.

**`div_ex_date`**: `date`

The ex-dividend date.

**`div_pay_date`**: `date`

The next dividend ayment date.

**`div_growth_3y`**: `Union[str, float]`

The three year dividend growth as a normalized percentage.

**`div_growth_5y`**: `Union[str, float]`

The five year dividend growth as a normalized percentage.

**`pe`**: `Union[str, float]`

The price to earnings ratio.

**`eps`**: `Union[str, float]`

The earnings per share.

**`debt_to_equity`**: `Union[str, float]`

The debt to equity ratio.

**`price_to_book`**: `Union[str, float]`

The price to book ratio.

**`price_to_cf`**: `Union[str, float]`

The price to cash flow ratio.

**`return_on_equity`**: `Union[str, float]`

The return on equity, as a normalized percentage.

**`return_on_assets`**: `Union[str, float]`

The return on assets, as a normalized percentage.

**`beta`**: `Union[str, float]`

The beta relative to the TSX Composite.

**`alpha`**: `Union[str, float]`

The alpha relative to the TSX Composite.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_escrow`**: `int`

The number of shares held in escrow.

**`shares_total`**: `int`

The total number of shares outstanding from all classes.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`last_volume`**: `int`

The last trade volume.

**`volume_avg`**: `int`

The average daily trading volume.

**`bid_timestamp`**: `datetime`

Timestamp of the bid price.

**`ask_timestamp`**: `datetime`

Timestamp of the ask price.

**`greeks_timestamp`**: `datetime`

Timestamp of the greeks data.

**`underlying`**: `str`

The underlying symbol for the option.

**`root_symbol`**: `str`

The root symbol for the option.

**`option_type`**: `Literal['call', 'put']`

Type of option - call or put.

**`contract_size`**: `int`

The number of shares in a standard contract.

**`expiration_type`**: `str`

The expiration type of the option - i.e, standard, weekly, etc.

**`expiration_date`**: `date`

The expiration date of the option.

**`strike`**: `float`

The strike price of the option.

**`open_interest`**: `int`

The number of open contracts for the option.

**`bid_iv`**: `float`

Implied volatility of the bid price.

**`ask_iv`**: `float`

Implied volatility of the ask price.

**`mid_iv`**: `float`

Mid-point implied volatility of the option.

**`orats_final_iv`**: `float`

ORATS final implied volatility of the option.

**`delta`**: `float`

Delta of the option.

**`gamma`**: `float`

Gamma of the option.

**`theta`**: `float`

Theta of the option.

**`vega`**: `float`

Vega of the option.

**`rho`**: `float`

Rho of the option.

**`phi`**: `float`

Phi of the option.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`asset_type`**: `str`

Type of asset - i.e, stock, ETF, etc.

**`name`**: `str`

Name of the company or asset.

**`exchange`**: `str`

The name or symbol of the venue where the data is from.

**`bid`**: `float`

Price of the top bid order.

**`bid_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`bid_exchange`**: `str`

The specific trading venue where the purchase order was placed.

**`ask`**: `float`

Price of the top ask order.

**`ask_size`**: `int`

This represents the number of round lot orders at the given price. The normal round lot size is 100 shares. A size of 2 means there are 200 shares available at the given price.

**`ask_exchange`**: `str`

The specific trading venue where the sale order was placed.

**`quote_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the quote.

**`quote_indicators`**: `Union[str, int, list[str], list[int]]`

Indicators or indicator codes applicable to the participant quote related to the price bands for the issue, or the affect the quote has on the NBBO.

**`sales_conditions`**: `Union[str, int, list[str], list[int]]`

Conditions or condition codes applicable to the sale.

**`sequence_number`**: `int`

The sequence number represents the sequence in which message events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11).

**`market_center`**: `str`

The ID of the UTP participant that originated the message.

**`participant_timestamp`**: `datetime`

Timestamp for when the quote was generated by the exchange.

**`trf_timestamp`**: `datetime`

Timestamp for when the TRF (Trade Reporting Facility) received the message.

**`sip_timestamp`**: `datetime`

Timestamp for when the SIP (Security Information Processor) received the message from the exchange.

**`last_price`**: `float`

Price of the last trade.

**`last_tick`**: `str`

Whether the last sale was an up or down tick.

**`last_size`**: `int`

Size of the last trade.

**`last_timestamp`**: `datetime`

Date and Time when the last price was recorded.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`exchange_volume`**: `Union[float, int]`

Volume of shares exchanged during the trading day on the specific exchange.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price from previous close.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`year_high`**: `float`

The one year high (52W High).

**`year_low`**: `float`

The one year low (52W Low).

**`ma_50d`**: `float`

50-day moving average price.

**`ma_200d`**: `float`

200-day moving average price.

**`volume_average`**: `float`

Average daily trading volume.

**`volume_average_10d`**: `float`

Average daily trading volume in the last 10 days.

**`currency`**: `str`

Currency of the price.

</TabItem>
</Tabs>



---

---
title: "profile"
description: "Get general price and performance metrics of a stock with the Equity  Information API. Retrieve data such as the symbol, name, price, open price, high  price, low price, close price, change in price, change percent, previous close,  type, exchange ID, bid, ask, volume, implied volatility, realized volatility, last  trade timestamp, annual high, and annual low."
keywords:
- equity info
- price and performance metrics
- stock data
- equity profile
- symbol
- provider
- data
- parameters
- returns
- cboe
- EquityInfo
- warnings
- chart
- metadata
- Data
- name
- price
- open price
- high price
- low price
- close price
- change percent
- previous close
- type
- exchange ID
- bid
- ask
- volume
- implied volatility
- realized volatility
- last trade timestamp
- annual high
- annual low
- iv30
- hv30
- iv60
- hv60
- iv90
- hv90
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/profile - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get general information about a company. This includes company name, industry, sector and price data.


Examples
--------

```python
from openbb import obb
obb.equity.profile(symbol='AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityInfo]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz', 'fmp', 'intrinio', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`index`**: `str`

Included in indices - i.e., Dow, Nasdaq, or S&P.

**`optionable`**: `str`

Whether options trade against the ticker.

**`shortable`**: `str`

If the asset is shortable.

**`shares_outstanding`**: `str`

The number of shares outstanding, as an abbreviated string.

**`shares_float`**: `str`

The number of shares in the public float, as an abbreviated string.

**`short_interest`**: `str`

The last reported number of shares sold short, as an abbreviated string.

**`institutional_ownership`**: `float`

The institutional ownership of the stock, as a normalized percent.

**`market_cap`**: `str`

The market capitalization of the stock, as an abbreviated string.

**`dividend_yield`**: `float`

The dividend yield of the stock, as a normalized percent.

**`earnings_date`**: `str`

The last, or next confirmed, earnings date and announcement time, as a string. The format is Nov 02 AMC - for after market close.

**`beta`**: `float`

The beta of the stock relative to the broad market.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`is_etf`**: `bool`

If the symbol is an ETF.

**`is_actively_trading`**: `bool`

If the company is actively trading.

**`is_adr`**: `bool`

If the stock is an ADR.

**`is_fund`**: `bool`

If the company is a fund.

**`image`**: `str`

Image of the company.

**`currency`**: `str`

Currency in which the stock is traded.

**`market_cap`**: `int`

Market capitalization of the company.

**`last_price`**: `float`

The last traded price.

**`year_high`**: `float`

The one-year high of the price.

**`year_low`**: `float`

The one-year low of the price.

**`volume_avg`**: `int`

Average daily trading volume.

**`annualized_dividend_amount`**: `float`

The annualized dividend payment based on the most recent regular dividend payment.

**`beta`**: `float`

Beta of the stock relative to the market.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`id`**: `str`

Intrinio ID for the company.

**`thea_enabled`**: `bool`

Whether the company has been enabled for Thea.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`email`**: `str`

The email of the company.

**`issue_type`**: `str`

The issuance type of the asset.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_escrow`**: `int`

The number of shares held in escrow.

**`shares_total`**: `int`

The total number of shares outstanding from all classes.

**`dividend_frequency`**: `str`

The dividend frequency.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Common name of the company.

**`cik`**: `str`

Central Index Key (CIK) for the requested entity.

**`cusip`**: `str`

CUSIP identifier for the company.

**`isin`**: `str`

International Securities Identification Number.

**`lei`**: `str`

Legal Entity Identifier assigned to the company.

**`legal_name`**: `str`

Official legal name of the company.

**`stock_exchange`**: `str`

Stock exchange where the company is traded.

**`sic`**: `int`

Standard Industrial Classification code for the company.

**`short_description`**: `str`

Short description of the company.

**`long_description`**: `str`

Long description of the company.

**`ceo`**: `str`

Chief Executive Officer of the company.

**`company_url`**: `str`

URL of the company's website.

**`business_address`**: `str`

Address of the company's headquarters.

**`mailing_address`**: `str`

Mailing address of the company.

**`business_phone_no`**: `str`

Phone number of the company's headquarters.

**`hq_address1`**: `str`

Address of the company's headquarters.

**`hq_address2`**: `str`

Address of the company's headquarters.

**`hq_address_city`**: `str`

City of the company's headquarters.

**`hq_address_postal_code`**: `str`

Zip code of the company's headquarters.

**`hq_state`**: `str`

State of the company's headquarters.

**`hq_country`**: `str`

Country of the company's headquarters.

**`inc_state`**: `str`

State in which the company is incorporated.

**`inc_country`**: `str`

Country in which the company is incorporated.

**`employees`**: `int`

Number of employees working for the company.

**`entity_legal_form`**: `str`

Legal form of the company.

**`entity_status`**: `str`

Status of the company.

**`latest_filing_date`**: `date`

Date of the company's latest filing.

**`irs_number`**: `str`

IRS number assigned to the company.

**`sector`**: `str`

Sector in which the company operates.

**`industry_category`**: `str`

Category of industry in which the company operates.

**`industry_group`**: `str`

Group of industry in which the company operates.

**`template`**: `str`

Template used to standardize the company's financial statements.

**`standardized_active`**: `bool`

Whether the company is active or not.

**`first_fundamental_date`**: `date`

Date of the company's first fundamental.

**`last_fundamental_date`**: `date`

Date of the company's last fundamental.

**`first_stock_price_date`**: `date`

Date of the company's first stock price.

**`last_stock_price_date`**: `date`

Date of the company's last stock price.

**`exchange_timezone`**: `str`

The timezone of the exchange.

**`issue_type`**: `str`

The issuance type of the asset.

**`currency`**: `str`

The currency in which the asset is traded.

**`market_cap`**: `int`

The market capitalization of the asset.

**`shares_outstanding`**: `int`

The number of listed shares outstanding.

**`shares_float`**: `int`

The number of shares in the public float.

**`shares_implied_outstanding`**: `int`

Implied shares outstanding of common equityassuming the conversion of all convertible subsidiary equity into common.

**`shares_short`**: `int`

The reported number of shares short.

**`dividend_yield`**: `float`

The dividend yield of the asset, as a normalized percent.

**`beta`**: `float`

The beta of the asset relative to the broad market.

</TabItem>
</Tabs>



---

---
title: "screener"
description: "Equity Screen"
keywords:
- equity
- screener
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/screener - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Screen for companies meeting various criteria.

These criteria include market cap, price, beta, volume, and dividend yield.


Examples
--------

```python
from openbb import obb
obb.equity.screener(provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='finviz' label='finviz'>

**`metric`**: `Literal['overview', 'valuation', 'financial', 'ownership', 'performance', 'technical']`

The data group to return, default is 'overview'.

 • *Default:* `overview`

 • *Optional:* `True`

---

**`exchange`**: `Literal['all', 'amex', 'nasdaq', 'nyse']`

Filter by exchange.

 • *Default:* `all`

 • *Optional:* `True`

---

**`index`**: `Literal['all', 'dow', 'nasdaq', 'sp500', 'russell']`

Filter by index.

 • *Default:* `all`

 • *Optional:* `True`

---

**`sector`**: `Literal['all', 'energy', 'materials', 'industrials', 'consumer_cyclical', 'consumer_defensive', 'financial', 'healthcare', 'technology', 'communication_services', 'utilities', 'real_estate']`

Filter by sector.

 • *Default:* `all`

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `stocks_only`
- `etf`
- `advertising_agencies`
- `aerospace_defense`
- `agricultural_inputs`
- `airlines`
- `airports_airservices`
- `aluminum`
- `apparel_manufacturing`
- `apparel_retail`
- `asset_management`
- `auto_manufacturers`
- `auto_parts`
- `auto_dealerships`
- `banks_diversified`
- `banks_regional`
- `beverages_brewers`
- `beverages_nonalcoholic`
- `beverages_wineries_distilleries`
- `biotechnology`
- `broadcasting`
- `building_materials`
- `building_products_equipment`
- `business_equipment_supplies`
- `capital_markets`
- `chemicals`
- `closed_end_fund_debt`
- `closed_end_fund_equity`
- `closed_end_fund_foreign`
- `coking_coal`
- `communication_equipment`
- `computer_hardware`
- `confectioners`
- `conglomerates`
- `consulting_services`
- `consumer_electronics`
- `copper`
- `credit_services`
- `department_stores`
- `diagnostics_research`
- `discount_stores`
- `drug_manufacturers_general`
- `drug_manufacturers_specialty_generic`
- `education_training_services`
- `electrical_equipment_parts`
- `electronic_components`
- `electronic_gaming_multimedia`
- `electronics_computer_distribution`
- `engineering_construction`
- `entertainment`
- `farm_heavy_construction_machinery`
- `farm_products`
- `financial_conglomerates`
- `financial_data_stock_exchanges`
- `food_distribution`
- `footwear_accessories`
- `furnishings_fixtures_appliances`
- `gambling`
- `gold`
- `grocery_stores`
- `health_care_plans`
- `health_information_services`
- `home_improvement_retail`
- `household_personal_products`
- `industrial_distribution`
- `information_technology_services`
- `infrastructure_operations`
- `insurance_brokers`
- `insurance_diversified`
- `insurance_life`
- `insurance_property_casualty`
- `insurance_reinsurance`
- `insurance_specialty`
- `integrated_freight_logistics`
- `internet_content_information`
- `internet_retail`
- `leisure`
- `lodging`
- `lumber_wood_production`
- `luxury_goods`
- `marine_shipping`
- `medical_care_facilities`
- `medical_devices`
- `medical_distribution`
- `medical_instruments_supplies`
- `metal_fabrication`
- `mortgage_finance`
- `oil_gas_drilling`
- `oil_gas_ep`
- `oil_gas_equipment_services`
- `oil_gas_integrated`
- `oil_gas_midstream`
- `oil_gas_refining_marketing`
- `other_industrial_metals_mining`
- `other_precious_metals_mining`
- `packaged_foods`
- `packaging_containers`
- `paper_paper_products`
- `personal_services`
- `pharmaceutical_retailers`
- `pollution_treatment_controls`
- `publishing`
- `railroads`
- `real_estate_development`
- `real_estate_diversified`
- `real_estate_services`
- `recreational_vehicles`
- `reit_diversified`
- `reit_health_care_facilities`
- `reit_hotel_motel`
- `reit_industrial`
- `reit_mortgage`
- `reit_office`
- `reit_residential`
- `reit_retail`
- `reit_specialty`
- `rental_leasing_services`
- `residential_construction`
- `resorts_casinos`
- `restaurants`
- `scientific_technical_instruments`
- `security_protection_services`
- `semiconductor_equipment_materials`
- `semiconductors`
- `shell_companies`
- `silver`
- `software_application`
- `software_infrastructure`
- `solar`
- `specialty_business_services`
- `specialty_chemicals`
- `specialty_industrial_machinery`
- `specialty_retail`
- `staffing_employment_services`
- `steel`
- `telecom_services`
- `textile_manufacturing`
- `thermal_coal`
- `tobacco`
- `tools_accessories`
- `travel_services`
- `trucking`
- `uranium`
- `utilities_diversified`
- `utilities_independent_power_producers`
- `utilities_regulated_electric`
- `utilities_regulated_gas`
- `utilities_regulated_water`
- `utilities_renewable`
- `waste_management`
</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`mktcap`**: `Literal['all', 'mega', 'large', 'large_over', 'large_under', 'mid', 'mid_over', 'mid_under', 'small', 'small_over', 'small_under', 'micro', 'micro_over', 'micro_under', 'nano']`

<details>
<summary mdxType="summary">Description</summary>

Filter by market cap.<br/>
    Mega - > 200B<br/>
    Large - 10B - 200B<br/>
    Mid - 2B - 10B<br/>
    Small - 300M - 2B<br/>
    Micro - 50M - 300M<br/>
    Nano - < 50M

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`recommendation`**: `Literal['all', 'strong_buy', 'buy+', 'buy', 'hold+', 'hold', 'hold-', 'sell', 'sell-', 'strong_sell']`

Filter by analyst recommendation.

 • *Default:* `all`

 • *Optional:* `True`

---

**`signal`**: `str`

<details>
<summary mdxType="summary">Description</summary>

The Finviz screener signal to use. When no parameters are provided, the screener defaults to 'top_gainers'. Available signals are:<br/>
        channel: both support and resistance trendlines are horizontal<br/>
        channel_down: both support and resistance trendlines slope downward<br/>
        channel_up: both support and resistance trendlines slope upward<br/>
        double_bottom: stock with 'W' shape that indicates a bullish reversal in trend<br/>
        double_top: stock with 'M' shape that indicates a bearish reversal in trend<br/>
        downgrades: stocks downgraded by analysts today<br/>
        earnings_after: companies reporting earnings today, after market close<br/>
        earnings_before: companies reporting earnings today, before market open<br/>
        head_shoulders: chart formation that predicts a bullish-to-bearish trend reversal<br/>
        head_shoulders_inverse: chart formation that predicts a bearish-to-bullish trend reversal<br/>
        horizontal_sr: horizontal channel of price range between support and resistance trendlines<br/>
        major_news: stocks with the highest news coverage today<br/>
        most_active: stocks with the highest trading volume today<br/>
        most_volatile: stocks with the highest widest high/low trading range today<br/>
        multiple_bottom: same as double_bottom hitting more lows<br/>
        multiple_top: same as double_top hitting more highs<br/>
        new_high: stocks making 52-week high today<br/>
        new_low: stocks making 52-week low today<br/>
        overbought: stock is becoming overvalued and may experience a pullback.<br/>
        oversold: oversold stocks may represent a buying opportunity for investors<br/>
        recent_insider_buying: stocks with recent insider buying activity<br/>
        recent_insider_selling: stocks with recent insider selling activity<br/>
        tl_resistance: once a rising trendline is broken<br/>
        tl_support: once a falling trendline is broken<br/>
        top_gainers: stocks with the highest price gain percent today<br/>
        top_losers: stocks with the highest price percent loss today<br/>
        triangle_ascending: upward trendline support and horizontal trendline resistance<br/>
        triangle_descending: horizontal trendline support and downward trendline resistance<br/>
        unusual_volume: stocks with unusually high volume today - the highest relative volume ratio<br/>
        upgrades: stocks upgraded by analysts today<br/>
        wedge: upward trendline support, downward trendline resistance (contiunation)<br/>
        wedge_down: downward trendline support and downward trendline resistance (reversal)<br/>
        wedge_up: upward trendline support and upward trendline resistance (reversal)

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `channel`
- `channel_down`
- `channel_up`
- `double_bottom`
- `double_top`
- `downgrades`
- `earnings_after`
- `earnings_before`
- `head_shoulders`
- `head_shoulders_inverse`
- `horizontal_sr`
- `major_news`
- `most_active`
- `most_volatile`
- `multiple_bottom`
- `multiple_top`
- `new_high`
- `new_low`
- `overbought`
- `oversold`
- `recent_insider_buying`
- `recent_insider_selling`
- `tl_resistance`
- `tl_support`
- `top_gainers`
- `top_losers`
- `triangle_ascending`
- `triangle_descending`
- `unusual_volume`
- `upgrades`
- `wedge`
- `wedge_down`
- `wedge_up`
</details>

 • *Optional:* `True`

---

**`preset`**: `str`

<details>
<summary mdxType="summary">Description</summary>

A configured preset file to use for the query. This overrides all other query parameters except 'metric', and 'limit'. Presets (.ini text files) can be created and modified in the '~/OpenBBUserData/finviz/presets' directory. If the path does not exist, it will be created and populated with the default presets on the first run. Refer to the file, 'screener_template.ini', for the format and options.<br/>
<br/>
Note: Syntax of parameters in preset files must follow the template file exactly  - i.e, Analyst Recom. = Strong Buy (1)

</details>

 • *Optional:* `True`

---

**`filters_dict`**: `Union[Dict, str]`

A formatted dictionary, or serialized JSON string, of additional filters to apply to the query. This parameter can be used as an alternative to preset files, and is ignored when a preset is supplied. Invalid entries will raise an error. Syntax should follow the 'screener_template.ini' file.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`mktcap_min`**: `int`

Filter by market cap greater than this value.

 • *Optional:* `True`

---

**`mktcap_max`**: `int`

Filter by market cap less than this value.

 • *Optional:* `True`

---

**`price_min`**: `float`

Filter by price greater than this value.

 • *Optional:* `True`

---

**`price_max`**: `float`

Filter by price less than this value.

 • *Optional:* `True`

---

**`beta_min`**: `float`

Filter by a beta greater than this value.

 • *Optional:* `True`

---

**`beta_max`**: `float`

Filter by a beta less than this value.

 • *Optional:* `True`

---

**`volume_min`**: `int`

Filter by volume greater than this value.

 • *Optional:* `True`

---

**`volume_max`**: `int`

Filter by volume less than this value.

 • *Optional:* `True`

---

**`dividend_min`**: `float`

Filter by dividend amount greater than this value.

 • *Optional:* `True`

---

**`dividend_max`**: `float`

Filter by dividend amount less than this value.

 • *Optional:* `True`

---

**`is_etf`**: `bool`

If true, returns only ETFs.

 • *Default:* `False`

 • *Optional:* `True`

---

**`is_active`**: `bool`

If false, returns only inactive tickers.

 • *Default:* `True`

 • *Optional:* `True`

---

**`sector`**: `Literal['consumer_cyclical', 'energy', 'technology', 'industrials', 'financial_services', 'basic_materials', 'communication_services', 'consumer_defensive', 'healthcare', 'real_estate', 'utilities', 'industrial_goods', 'financial', 'services']`

Filter by sector.

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

 • *Optional:* `True`

---

**`country`**: `str`

Filter by country, as a two-letter country code.

 • *Optional:* `True`

---

**`exchange`**: `Literal['amex', 'ams', 'ase', 'asx', 'ath', 'bme', 'bru', 'bud', 'bue', 'cai', 'cnq', 'cph', 'dfm', 'doh', 'etf', 'euronext', 'hel', 'hkse', 'ice', 'iob', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'koe', 'ksc', 'kuw', 'lse', 'mex', 'mutual_fund', 'nasdaq', 'neo', 'nse', 'nyse', 'nze', 'osl', 'otc', 'pnk', 'pra', 'ris', 'sao', 'sau', 'set', 'sgo', 'shh', 'shz', 'six', 'sto', 'tai', 'tlv', 'tsx', 'two', 'vie', 'wse', 'xetra']`

Filter by exchange.

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results to return.

 • *Default:* `50000`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`exchange`**: `Union[Union[Literal['all', 'nasdaq', 'nyse', 'amex'], str], list[Union[Literal['all', 'nasdaq', 'nyse', 'amex'], str]]]`

Filter by exchange. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`exsubcategory`**: `Union[Union[Literal['all', 'ngs', 'ngm', 'ncm', 'adr'], str], list[Union[Literal['all', 'ngs', 'ngm', 'ncm', 'adr'], str]]]`

<details>
<summary mdxType="summary">Description</summary>

Filter by exchange subcategory.<br/>
    NGS - Nasdaq Global Select Market<br/>
    NGM - Nasdaq Global Market<br/>
    NCM - Nasdaq Capital Market<br/>
    ADR - American Depository Receipt Multiple items allowed for provider(s): nasdaq.

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`mktcap`**: `Union[Union[Literal['all', 'mega', 'large', 'mid', 'small', 'micro'], str], list[Union[Literal['all', 'mega', 'large', 'mid', 'small', 'micro'], str]]]`

<details>
<summary mdxType="summary">Description</summary>

Filter by market cap.<br/>
    Mega - > 200B<br/>
    Large - 10B - 200B<br/>
    Mid - 2B - 10B<br/>
    Small - 300M - 2B<br/>
    Micro - 50M - 300M Multiple items allowed for provider(s): nasdaq.

</details>

 • *Default:* `all`

 • *Optional:* `True`

---

**`recommendation`**: `Union[Union[Literal['all', 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'], str], list[Union[Literal['all', 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'], str]]]`

Filter by consensus analyst action. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`sector`**: `Union[Union[Literal['all', 'energy', 'basic_materials', 'industrials', 'consumer_staples', 'consumer_discretionary', 'health_care', 'financial_services', 'technology', 'communication_services', 'utilities', 'real_estate'], str], list[Union[Literal['all', 'energy', 'basic_materials', 'industrials', 'consumer_staples', 'consumer_discretionary', 'health_care', 'financial_services', 'technology', 'communication_services', 'utilities', 'real_estate'], str]]]`

Filter by sector. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`region`**: `Union[Union[Literal['all', 'africa', 'asia', 'australia_and_south_pacific', 'caribbean', 'europe', 'middle_east', 'north_america', 'south_america'], str], list[Union[Literal['all', 'africa', 'asia', 'australia_and_south_pacific', 'caribbean', 'europe', 'middle_east', 'north_america', 'south_america'], str]]]`

Filter by region. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`country`**: `Union[Union[Literal['all', 'argentina', 'armenia', 'australia', 'austria', 'belgium', 'bermuda', 'brazil', 'canada', 'cayman_islands', 'chile', 'colombia', 'costa_rica', 'curacao', 'cyprus', 'denmark', 'finland', 'france', 'germany', 'greece', 'guernsey', 'hong_kong', 'india', 'indonesia', 'ireland', 'isle_of_man', 'israel', 'italy', 'japan', 'jersey', 'luxembourg', 'macau', 'mexico', 'monaco', 'netherlands', 'norway', 'panama', 'peru', 'philippines', 'puerto_rico', 'russia', 'singapore', 'south_africa', 'south_korea', 'spain', 'sweden', 'switzerland', 'taiwan', 'turkey', 'united_kingdom', 'united_states', 'usa'], str], list[Union[Literal['all', 'argentina', 'armenia', 'australia', 'austria', 'belgium', 'bermuda', 'brazil', 'canada', 'cayman_islands', 'chile', 'colombia', 'costa_rica', 'curacao', 'cyprus', 'denmark', 'finland', 'france', 'germany', 'greece', 'guernsey', 'hong_kong', 'india', 'indonesia', 'ireland', 'isle_of_man', 'israel', 'italy', 'japan', 'jersey', 'luxembourg', 'macau', 'mexico', 'monaco', 'netherlands', 'norway', 'panama', 'peru', 'philippines', 'puerto_rico', 'russia', 'singapore', 'south_africa', 'south_korea', 'spain', 'sweden', 'switzerland', 'taiwan', 'turkey', 'united_kingdom', 'united_states', 'usa'], str]]]`

Filter by country. Multiple items allowed for provider(s): nasdaq.

 • *Default:* `all`

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results to return.

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`country`**: `str`

Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries.

<details>
<summary mdxType="summary">Choices</summary>

- `all`
- `ar`
- `at`
- `au`
- `be`
- `br`
- `ca`
- `ch`
- `cl`
- `cn`
- `cz`
- `de`
- `dk`
- `ee`
- `eg`
- `es`
- `fi`
- `fr`
- `gb`
- `gr`
- `hk`
- `hu`
- `id`
- `ie`
- `il`
- `in`
- `is`
- `it`
- `jp`
- `kr`
- `kw`
- `lk`
- `lt`
- `lv`
- `mx`
- `my`
- `nl`
- `no`
- `nz`
- `pe`
- `ph`
- `pk`
- `pl`
- `pt`
- `qa`
- `ro`
- `ru`
- `sa`
- `se`
- `sg`
- `sr`
- `th`
- `tr`
- `tw`
- `us`
- `ve`
- `vn`
- `za`
</details>

 • *Default:* `us`

 • *Optional:* `True`

---

**`exchange`**: `Literal['ams', 'aqs', 'ase', 'asx', 'ath', 'ber', 'bru', 'bse', 'bts', 'bud', 'bue', 'bvb', 'bvc', 'ccs', 'cnq', 'cph', 'cxe', 'dfm', 'doh', 'dus', 'ebs', 'fka', 'fra', 'ger', 'ham', 'han', 'hel', 'hkg', 'ice', 'iob', 'ise', 'ist', 'jkt', 'jnb', 'jpx', 'kls', 'kuw', 'lis', 'lit', 'lse', 'mce', 'mex', 'mil', 'mun', 'ncm', 'neo', 'ngm', 'nms', 'nsi', 'nyq', 'nze', 'oem', 'oqb', 'oqx', 'osl', 'par', 'pnk', 'pra', 'ris', 'sau', 'ses', 'set', 'sgo', 'shh', 'shz', 'sto', 'stu', 'tai', 'tal', 'tlv', 'tor', 'two', 'van', 'vie', 'vse', 'wse']`

Filter by exchange.

 • *Optional:* `True`

---

**`sector`**: `Literal['basic_materials', 'communication_services', 'consumer_cyclical', 'consumer_defensive', 'energy', 'financial_services', 'healthcare', 'industrials', 'real_estate', 'technology', 'utilities']`

Filter by sector.

 • *Optional:* `True`

---

**`industry`**: `str`

Filter by industry.

<details>
<summary mdxType="summary">Choices</summary>

- `advertising_agencies`
- `aerospace_defense`
- `agricultural_inputs`
- `airlines`
- `airports_air_services`
- `aluminum`
- `apparel_manufacturing`
- `apparel_retail`
- `asset_management`
- `auto_components`
- `auto_manufacturers`
- `auto_parts`
- `auto_truck_dealerships`
- `automobiles`
- `banks`
- `biotechnology`
- `broadcasting`
- `building_materials`
- `building_products`
- `building_products_equipment`
- `business_equipment_supplies`
- `capital_markets`
- `chemicals`
- `coking_coal`
- `commercial_services`
- `communication_equipment`
- `computer_hardware`
- `confectioners`
- `construction_engineering`
- `construction_materials`
- `consulting_services`
- `consumer_durables`
- `consumer_electronics`
- `consumer_services`
- `copper`
- `credit_services`
- `department_stores`
- `diagnostics_research`
- `discount_stores`
- `diversified_financials`
- `education_training_services`
- `electrical_equipment`
- `electrical_equipment_parts`
- `electronic_components`
- `electronic_gaming_multimedia`
- `electronics_computer_distribution`
- `energy_services`
- `engineering_construction`
- `entertainment`
- `farm_heavy_construction_machinery`
- `farm_products`
- `financial_conglomerates`
- `financial_data_stock_exchanges`
- `food_distribution`
- `footwear_accessories`
- `furnishings_fixtures_appliances`
- `gambling`
- `gold`
- `grocery_stores`
- `health_information_services`
- `healthcare_plans`
- `home_builders`
- `home_improvement_retail`
- `household_products`
- `household_personal_products`
- `industrial_conglomerates`
- `industrial_distribution`
- `information_technology_services`
- `infrastructure_operations`
- `insurance`
- `integrated_freight_logistics`
- `internet_content_information`
- `internet_retail`
- `leisure`
- `lodging`
- `lumber_wood_production`
- `luxury_goods`
- `machinery`
- `marine_shipping`
- `media`
- `medical_care_facilities`
- `medical_devices`
- `medical_distribution`
- `medical_instruments_supplies`
- `metal_fabrication`
- `mortgage_finance`
- `oil_gas_drilling`
- `oil_gas_e_p`
- `oil_gas_equipment_services`
- `oil_gas_integrated`
- `oil_gas_midstream`
- `oil_gas_producers`
- `oil_gas_refining_marketing`
- `other_industrial_metals_mining`
- `other_precious_metals_mining`
- `packaged_foods`
- `packaging_containers`
- `paper_forestry`
- `paper_paper_products`
- `personal_services`
- `pharmaceuticals`
- `pharmaceutical_retailers`
- `pollution_treatment_controls`
- `precious_metals`
- `publishing`
- `railroads`
- `real_estate`
- `recreational_vehicles`
- `refiners_pipelines`
- `rental_leasing_services`
- `residential_construction`
- `resorts_casinos`
- `restaurants`
- `retailing`
- `scientific_technical_instruments`
- `security_protection_services`
- `semiconductor_equipment_materials`
- `semiconductors`
- `shell_companies`
- `silver`
- `software_and_services`
- `solar`
- `specialty_business_services`
- `specialty_chemicals`
- `specialty_industrial_machinery`
- `specialty_retail`
- `staffing_employment_services`
- `steel`
- `technology_hardware`
- `telecom_services`
- `textiles_apparel`
- `textile_manufacturing`
- `thermal_coal`
- `tobacco`
- `tools_accessories`
- `traders_distributors`
- `transportation`
- `transportation_infrastructure`
- `travel_services`
- `trucking`
- `uranium`
- `utilities`
- `waste_management`
</details>

 • *Optional:* `True`

---

**`mktcap_min`**: `int`

Filter by market cap greater than this value. Default is 500M.

 • *Default:* `500000000`

 • *Optional:* `True`

---

**`mktcap_max`**: `int`

Filter by market cap less than this value.

 • *Optional:* `True`

---

**`price_min`**: `float`

Filter by price greater than this value. Default is, 5

 • *Default:* `5`

 • *Optional:* `True`

---

**`price_max`**: `float`

Filter by price less than this value.

 • *Optional:* `True`

---

**`volume_min`**: `int`

Filter by volume greater than this value. Default is, 10K

 • *Default:* `10000`

 • *Optional:* `True`

---

**`volume_max`**: `int`

Filter by volume less than this value.

 • *Optional:* `True`

---

**`beta_min`**: `float`

Filter by a beta greater than this value.

 • *Optional:* `True`

---

**`beta_max`**: `float`

Filter by a beta less than this value.

 • *Optional:* `True`

---

**`limit`**: `int`

Limit the number of results returned. Default is, 200. Set to, 0, for all results.

 • *Default:* `200`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityScreener]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz', 'fmp', 'nasdaq', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`earnings_date`**: `str`

Earnings date, where 'a' and 'b' mean after and before market close, respectively.

**`country`**: `str`

Country of the company.

**`sector`**: `str`

Sector of the company.

**`industry`**: `str`

Industry of the company.

**`beta`**: `float`

Beta of the stock.

**`analyst_recommendation`**: `float`

Analyst's mean recommendation. (1=Buy 5=Sell).

**`market_cap`**: `float`

Market capitalization of the company.

**`price`**: `float`

Price of a share.

**`change_percent`**: `float`

Price change percentage.

**`change_from_open`**: `float`

Price change percentage, from the opening price.

**`gap`**: `float`

Price gap percentage, from the previous close.

**`volume`**: `Union[float, int]`

The trading volume.

**`volume_avg`**: `Union[float, int]`

3-month average daily volume.

**`volume_relative`**: `float`

Current volume relative to the average.

**`average_true_range`**: `float`

Average true range (14).

**`price_change_1w`**: `float`

One-week price return.

**`price_change_1m`**: `float`

One-month price return.

**`price_change_3m`**: `float`

Three-month price return.

**`price_change_6m`**: `float`

Six-month price return.

**`price_change_1y`**: `float`

One-year price return.

**`price_change_ytd`**: `float`

Year-to-date price return.

**`volatility_1w`**: `float`

One-week volatility.

**`volatility_1m`**: `float`

One-month volatility.

**`year_high_percent`**: `float`

Percent difference from current price to the 52-week high.

**`year_low_percent`**: `float`

Percent difference from current price to the 52-week low.

**`sma20_percent`**: `float`

Percent difference from current price to the 20-day simple moving average.

**`sma50_percent`**: `float`

Percent difference from current price to the 50-day simple moving average.

**`sma200_percent`**: `float`

Percent difference from current price to the 200-day simple moving average.

**`rsi`**: `float`

Relative strength index (14).

**`shares_outstanding`**: `Union[float, int]`

Number of shares outstanding.

**`shares_float`**: `Union[float, int]`

Number of shares available to trade.

**`short_interest`**: `float`

Percent of float reported as short.

**`short_ratio`**: `float`

Short interest ratio

**`insider_ownership`**: `float`

Insider ownership as a percentage.

**`insider_ownership_change`**: `float`

6-month change in insider ownership percentage.

**`institutional_ownership`**: `float`

Institutional ownership as a percentage.

**`institutional_ownership_change`**: `float`

3-month change in institutional ownership percentage.

**`price_to_earnings`**: `float`

Price to earnings ratio.

**`forward_pe`**: `float`

Forward price to earnings ratio.

**`peg_ratio`**: `float`

Price/Earnings-To-Growth (PEG) ratio.

**`price_to_sales`**: `float`

Price to sales ratio.

**`price_to_book`**: `float`

Price to book ratio.

**`price_to_cash`**: `float`

Price to cash ratio.

**`price_to_fcf`**: `float`

Price to free cash flow ratio.

**`eps_growth_past_1y`**: `float`

EPS growth for this year.

**`eps_growth_next_1y`**: `float`

EPS growth next year.

**`eps_growth_past_5y`**: `float`

EPS growth for the previous 5 years.

**`eps_growth_next_5y`**: `float`

EPS growth for the next 5 years.

**`sales_growth_past_5y`**: `float`

Sales growth for the previous 5 years.

**`dividend_yield`**: `float`

Annualized dividend yield.

**`return_on_assets`**: `float`

Return on assets.

**`return_on_equity`**: `float`

Return on equity.

**`return_on_investment`**: `float`

Return on investment.

**`current_ratio`**: `float`

Current ratio.

**`quick_ratio`**: `float`

Quick ratio.

**`long_term_debt_to_equity`**: `float`

Long term debt to equity ratio.

**`debt_to_equity`**: `float`

Total debt to equity ratio.

**`gross_margin`**: `float`

Gross margin.

**`operating_margin`**: `float`

Operating margin.

**`profit_margin`**: `float`

Profit margin.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`market_cap`**: `int`

The market cap of ticker.

**`sector`**: `str`

The sector the ticker belongs to.

**`industry`**: `str`

The industry ticker belongs to.

**`beta`**: `float`

The beta of the ETF.

**`price`**: `float`

The current price.

**`last_annual_dividend`**: `float`

The last annual amount dividend paid.

**`volume`**: `int`

The current trading volume.

**`exchange`**: `str`

The exchange code the asset trades on.

**`exchange_name`**: `str`

The full name of the primary exchange.

**`country`**: `str`

The two-letter country abbreviation where the head office is located.

**`is_etf`**: `Literal[True, False]`

Whether the ticker is an ETF.

**`actively_trading`**: `Literal[True, False]`

Whether the ETF is actively trading.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`last_price`**: `float`

Last sale price.

**`change`**: `float`

1-day change in price.

**`change_percent`**: `float`

1-day percent change in price.

**`market_cap`**: `int`

Market cap.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`open`**: `float`

Open price for the day.

**`high`**: `float`

High price for the day.

**`low`**: `float`

Low price for the day.

**`previous_close`**: `float`

Previous close price.

**`ma50`**: `float`

50-day moving average.

**`ma200`**: `float`

200-day moving average.

**`year_high`**: `float`

52-week high.

**`year_low`**: `float`

52-week low.

**`market_cap`**: `float`

Market Cap.

**`shares_outstanding`**: `float`

Shares outstanding.

**`book_value`**: `float`

Book value per share.

**`price_to_book`**: `float`

Price to book ratio.

**`eps_ttm`**: `float`

Earnings per share over the trailing twelve months.

**`eps_forward`**: `float`

Forward earnings per share.

**`pe_forward`**: `float`

Forward price-to-earnings ratio.

**`dividend_yield`**: `float`

Trailing twelve month dividend yield.

**`exchange`**: `str`

Exchange where the stock is listed.

**`exchange_timezone`**: `str`

Timezone of the exchange.

**`earnings_date`**: `datetime`

Most recent earnings date.

**`currency`**: `str`

Currency of the price data.

</TabItem>
</Tabs>



---

---
title: "search"
description: "Learn how to perform an equity search to find a company or stock ticker.  Understand the query parameters, such as search by ticker symbol and search provider.  Explore the various filters available, including market cap, price, beta, volume,  dividend, ETF, sector, industry, country, and exchange. Limit and structure the  results accordingly. Get access to the returned data, provider information, warnings,  chart, and metadata."
keywords:
- equity search
- company search
- stock ticker search
- query parameter
- search by ticker symbol
- search provider
- market cap filter
- price filter
- beta filter
- volume filter
- dividend filter
- ETF filter
- sector filter
- industry filter
- country filter
- exchange filter
- limit results
- data structure
- results
- provider
- warnings
- chart
- metadata
- symbol
- name
- dpm_name
- post_station
- market cap
- sector
- industry
- beta
- price
- last annual dividend
- volume
- exchange
- exchange_name
- country
- is_etf
- actively trading
- cik
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search for stock symbol, CIK, LEI, or company name.


Examples
--------

```python
from openbb import obb
obb.equity.search(provider='intrinio')
obb.equity.search(query='AAPL', is_symbol=False, use_cache=True, provider='nasdaq')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use the cache or not.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`active`**: `bool`

When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded.

 • *Default:* `True`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10000`

 • *Optional:* `True`

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`is_etf`**: `bool`

If True, returns ETFs.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use the cache or not.

 • *Default:* `True`

 • *Optional:* `True`

---

**`is_fund`**: `bool`

Whether to direct the search to the list of mutual funds and ETFs.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. The list of companies is cached for two days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether the query is a symbol. Defaults to False.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquitySearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'intrinio', 'nasdaq', 'sec', 'tmx', 'tradier']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`dpm_name`**: `str`

Name of the primary market maker.

**`post_station`**: `str`

Post and station location on the CBOE trading floor.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`



**`lei`**: `str`

The Legal Entity Identifier (LEI) of the company.

**`intrinio_id`**: `str`

The Intrinio ID of the company.

</TabItem>

<TabItem value='nasdaq' label='nasdaq'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`nasdaq_traded`**: `str`

Is Nasdaq traded?

**`exchange`**: `str`

Primary Exchange

**`market_category`**: `str`

Market Category

**`etf`**: `str`

Is ETF?

**`round_lot_size`**: `float`

Round Lot Size

**`test_issue`**: `str`

Is test Issue?

**`financial_status`**: `str`

Financial Status

**`cqs_symbol`**: `str`

CQS Symbol

**`nasdaq_symbol`**: `str`

NASDAQ Symbol

**`next_shares`**: `str`

Is NextShares?

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`cik`**: `str`

Central Index Key

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the company.

**`exchange`**: `str`

Exchange where the security is listed.

**`security_type`**: `Literal['stock', 'option', 'etf', 'index', 'mutual_fund']`

Type of security.

</TabItem>
</Tabs>



---

---
title: "fails_to_deliver"
description: "Learn how to retrieve reported Fail-to-deliver (FTD) data using the OBB.equity.shorts.fails_to_deliver  function in Python. Explore the available parameters for symbol selection and provider  options. Understand the data returned, including settlement date, symbol, quantity  of fails, and more."
keywords:
- Fail-to-deliver data
- Fail-to-deliver reporting
- Equity FTD
- Symbol data
- Provider selection
- Limiting number of reports
- Skipping reports
- Settlement date
- CUSIP
- Quantity of fails
- Previous closing price
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/shorts/fails_to_deliver - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get reported Fail-to-deliver (FTD) data.


Examples
--------

```python
from openbb import obb
obb.equity.shorts.fails_to_deliver(symbol='AAPL', provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`limit`**: `int`

<details>
<summary mdxType="summary">Description</summary>

Limit the number of reports to parse, from most recent.<br/>
        Approximately 24 reports per year, going back to 2009.

</details>

 • *Default:* `24`

 • *Optional:* `True`

---

**`skip_reports`**: `int`

Skip N number of reports from current. A value of 1 will skip the most recent report.

 • *Default:* `0`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityFTD]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`settlement_date`**: `date`

The settlement date of the fail.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cusip`**: `str`

CUSIP of the Security.

**`quantity`**: `int`

The number of fails on that settlement date.

**`price`**: `float`

The price at the previous closing price from the settlement date.

**`description`**: `str`

The description of the Security.

</TabItem>

<TabItem value='sec' label='sec'>

**`settlement_date`**: `date`

The settlement date of the fail.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`cusip`**: `str`

CUSIP of the Security.

**`quantity`**: `int`

The number of fails on that settlement date.

**`price`**: `float`

The price at the previous closing price from the settlement date.

**`description`**: `str`

The description of the Security.

</TabItem>
</Tabs>



---

# Shorts

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="short interest" description="Get reported short volume and days to cover data" url="/platform/reference/equity/shorts/short_interest" />
<ReferenceCard title="fails to deliver" description="Get reported Fail-to-deliver (FTD) data" url="/platform/reference/equity/shorts/fails_to_deliver" />
<ReferenceCard title="short volume" description="Get reported Fail-to-deliver (FTD) data" url="/platform/reference/equity/shorts/short_volume" />
</ul>



---

---
title: "short_interest"
description: "Learn how to get reported Short Volume and Days to Cover data using the  OBB.equity.shorts.short_interest function in Python. This page provides information  on the parameters, returns, and available data fields such as settlement date, symbol,  issue name, market class, current short position, previous short position, average  daily volume, days to cover, change, and change percentage."
keywords:
- Get reported Short Volume and Days to Cover data
- OBB.equity.shorts.short_interest
- symbol
- provider
- Short Volume
- Days to Cover
- data
- parameters
- returns
- data
- settlement_date
- symbol
- issue_name
- market_class
- current_short_position
- previous_short_position
- avg_daily_volume
- days_to_cover
- change
- change_pct
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/shorts/short_interest - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get reported short volume and days to cover data.


Examples
--------

```python
from openbb import obb
obb.equity.shorts.short_interest(symbol='AAPL', provider='finra')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='finra' label='finra'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EquityShortInterest]`

Serializable results.

---

**`provider`**: `Optional[Literal['finra']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`settlement_date`**: `date`

The mid-month short interest report is based on short positions held by members on the settlement date of the 15th of each month. If the 15th falls on a weekend or another non-settlement date, the designated settlement date will be the previous business day on which transactions settled. The end-of-month short interest report is based on short positions held on the last business day of the month on which transactions settle. Once the short position reports are received, the short interest data is compiled for each equity security and provided for publication on the 7th business day after the reporting settlement date.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`issue_name`**: `str`

Unique identifier of the issue.

**`market_class`**: `str`

Primary listing market.

**`current_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the current cycle’s designated settlement date.

**`previous_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the previous cycle’s designated settlement date.

**`avg_daily_volume`**: `float`

Total Volume or Adjusted Volume in case of splits / Total trade days between (previous settlement date + 1) to (current settlement date). The NULL values are translated as zero.

**`days_to_cover`**: `float`

The number of days of average share volume it would require to buy all of the shares that were sold short during the reporting cycle. Formula: Short Interest / Average Daily Share Volume, Rounded to Hundredths. 1.00 will be displayed for any values equal or less than 1 (i.e., Average Daily Share is equal to or greater than Short Interest). N/A will be displayed If the days to cover is Zero (i.e., Average Daily Share Volume is Zero).

**`change`**: `float`

Change in Shares Short from Previous Cycle: Difference in short interest between the current cycle and the previous cycle.

**`change_pct`**: `float`

Change in Shares Short from Previous Cycle as a percent.

</TabItem>

<TabItem value='finra' label='finra'>

**`settlement_date`**: `date`

The mid-month short interest report is based on short positions held by members on the settlement date of the 15th of each month. If the 15th falls on a weekend or another non-settlement date, the designated settlement date will be the previous business day on which transactions settled. The end-of-month short interest report is based on short positions held on the last business day of the month on which transactions settle. Once the short position reports are received, the short interest data is compiled for each equity security and provided for publication on the 7th business day after the reporting settlement date.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`issue_name`**: `str`

Unique identifier of the issue.

**`market_class`**: `str`

Primary listing market.

**`current_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the current cycle’s designated settlement date.

**`previous_short_position`**: `float`

The total number of shares in the issue that are reflected on the books and records of the reporting firms as short as defined by Rule 200 of Regulation SHO as of the previous cycle’s designated settlement date.

**`avg_daily_volume`**: `float`

Total Volume or Adjusted Volume in case of splits / Total trade days between (previous settlement date + 1) to (current settlement date). The NULL values are translated as zero.

**`days_to_cover`**: `float`

The number of days of average share volume it would require to buy all of the shares that were sold short during the reporting cycle. Formula: Short Interest / Average Daily Share Volume, Rounded to Hundredths. 1.00 will be displayed for any values equal or less than 1 (i.e., Average Daily Share is equal to or greater than Short Interest). N/A will be displayed If the days to cover is Zero (i.e., Average Daily Share Volume is Zero).

**`change`**: `float`

Change in Shares Short from Previous Cycle: Difference in short interest between the current cycle and the previous cycle.

**`change_pct`**: `float`

Change in Shares Short from Previous Cycle as a percent.

</TabItem>
</Tabs>



---

---
title: "short_volume"
description: "This documentation page provides information and usage instructions on  retrieving Fail-to-deliver (FTD) data using the Python library. Learn how to use  the `obb.equity.shorts.short_volume` function to fetch FTD data, including parameters,  return values, and data details such as date, market, volume, and more. The page  also covers the stockgrid provider, chart object, and metadata information about  the command execution."
keywords:
- Fail-to-deliver data
- FTD data
- Python library
- equity shorts
- short volume
- stockgrid provider
- data parameters
- data returns
- chart object
- metadata
- data
- date
- market
- short volume
- short exempt volume
- total volume
- close price
- short volume percentage
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="equity/shorts/short_volume - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get reported Fail-to-deliver (FTD) data.


Examples
--------

```python
from openbb import obb
obb.equity.shorts.short_volume(symbol='AAPL', provider='stockgrid')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='stockgrid' label='stockgrid'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ShortVolume]`

Serializable results.

---

**`provider`**: `Optional[Literal['stockgrid']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`market`**: `str`

Reporting Facility ID. N=NYSE TRF, Q=NASDAQ TRF Carteret, B=NASDAQ TRY Chicago, D=FINRA ADF

**`short_volume`**: `int`

Aggregate reported share volume of executed short sale and short sale exempt trades during regular trading hours

**`short_exempt_volume`**: `int`

Aggregate reported share volume of executed short sale exempt trades during regular trading hours

**`total_volume`**: `int`

Aggregate reported share volume of executed trades during regular trading hours

</TabItem>

<TabItem value='stockgrid' label='stockgrid'>

**`date`**: `Union[date, str]`

The date of the data.

**`market`**: `str`

Reporting Facility ID. N=NYSE TRF, Q=NASDAQ TRF Carteret, B=NASDAQ TRY Chicago, D=FINRA ADF

**`short_volume`**: `int`

Aggregate reported share volume of executed short sale and short sale exempt trades during regular trading hours

**`short_exempt_volume`**: `int`

Aggregate reported share volume of executed short sale exempt trades during regular trading hours

**`total_volume`**: `int`

Aggregate reported share volume of executed trades during regular trading hours

**`close`**: `float`

Closing price of the stock on the date.

**`short_volume_percent`**: `float`

Percentage of the total volume that was short volume.

</TabItem>
</Tabs>



---

---
title: "countries"
description: "Learn about ETF country weighting and how to retrieve country exposure  data using obb.etf.countries API endpoint."
keywords:
- ETF country weighting
- obb.etf.countries
- symbol
- provider
- etf
- data
- results
- chart
- metadata
- country exposure
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/countries - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

ETF Country weighting.


Examples
--------

```python
from openbb import obb
obb.etf.countries(symbol='VT', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, tmx.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfCountries]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`country`**: `str`

The country of the exposure.  Corresponding values are normalized percentage points.

</TabItem>
</Tabs>



---

---
title: "active"
description: "Learn how to get the most active ETFs using the ETF discovery API. This  page provides documentation for the parameters, returns, and data associated with  the API endpoint. Understand how to use the sorting, limiting, and provider parameters  and explore the returned results, chart object, and metadata. Find details about  the data fields including symbol, name, last price, percent change, net change,  volume, date, country, mantissa, type, and formatted values. Retrieve the source  url for additional information."
keywords:
- ETFs
- most active ETFs
- ETF discovery
- sort order
- limit parameter
- provider parameter
- results
- chart object
- metadata
- symbol
- name
- last price
- percent change
- net change
- volume
- date
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/discovery/active - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the most active ETFs.


Examples
--------

```python
from openbb import obb
# Get the most active ETFs.
obb.etf.discovery.active(provider='wsj')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ETFActive]`

Serializable results.

---

**`provider`**: `Optional[Literal['wsj']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

---
title: "gainers"
description: "Learn how to get the top ETF gainers using Python code. This documentation  includes details about the parameters, return values, and data format."
keywords:
- ETF gainers
- ETFGainers
- Python code
- parameters
- sort order
- limit
- provider
- returns
- results
- warnings
- chart
- metadata
- data
- symbol
- name
- last price
- percent change
- net change
- trading volume
- date
- bluegrass channel
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/discovery/gainers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the top ETF gainers.


Examples
--------

```python
from openbb import obb
# Get the top ETF gainers.
obb.etf.discovery.gainers(provider='wsj')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ETFGainers]`

Serializable results.

---

**`provider`**: `Optional[Literal['wsj']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`bluegrass_channel`**: `str`

Bluegrass channel.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

# Discovery

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="losers" description="Get the top ETF losers" url="/platform/reference/etf/discovery/losers" />
<ReferenceCard title="active" description="Get the most active ETFs" url="/platform/reference/etf/discovery/active" />
<ReferenceCard title="gainers" description="Get the top ETF gainers" url="/platform/reference/etf/discovery/gainers" />
</ul>



---

---
title: "losers"
description: "Learn how to get the top ETF losers using the OBB ETF Discovery API endpoint.  Explore the available parameters and the returned data, including symbols, names,  prices, percentage changes, and trading volumes."
keywords:
- ETF losers
- top ETF losers
- ETFLosers
- sort order
- data entries
- provider
- warnings
- chart
- metadata
- symbol
- name
- last price
- percent change
- net change
- trading volume
- date
- bluegrass channel
- country
- mantissa
- type
- formatted price
- formatted volume
- formatted price change
- formatted percent change
- source url
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/discovery/losers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the top ETF losers.


Examples
--------

```python
from openbb import obb
# Get the top ETF losers.
obb.etf.discovery.losers(provider='wsj')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>

<TabItem value='wsj' label='wsj'>

**`sort`**: `Literal['asc', 'desc']`

Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ETFLosers]`

Serializable results.

---

**`provider`**: `Optional[Literal['wsj']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='wsj' label='wsj'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the entity.

**`last_price`**: `float`

Last price.

**`percent_change`**: `float`

Percent change.

**`net_change`**: `float`

Net change.

**`volume`**: `float`

The trading volume.

**`date`**: `Union[date, str]`

The date of the data.

**`bluegrass_channel`**: `str`

Bluegrass channel.

**`country`**: `str`

Country of the entity.

**`mantissa`**: `int`

Mantissa.

**`type`**: `str`

Type of the entity.

**`formatted_price`**: `str`

Formatted price.

**`formatted_volume`**: `str`

Formatted volume.

**`formatted_price_change`**: `str`

Formatted price change.

**`formatted_percent_change`**: `str`

Formatted percent change.

**`url`**: `str`

The source url.

</TabItem>
</Tabs>



---

---
title: "equity_exposure"
description: "Get the exposure to ETFs for a specific stock"
keywords:
- etf
- equity_exposure
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/equity_exposure - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the exposure to ETFs for a specific stock.


Examples
--------

```python
from openbb import obb
obb.etf.equity_exposure(symbol='MSFT', provider='fmp')
# This function accepts multiple tickers.
obb.etf.equity_exposure(symbol='MSFT,AAPL', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (Stock) Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (Stock) Multiple items allowed for provider(s): fmp.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfEquityExposure]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`equity_symbol`**: `str`

The symbol of the equity requested.

**`etf_symbol`**: `str`

The symbol of the ETF with exposure to the requested equity.

**`shares`**: `float`

The number of shares held in the ETF.

**`weight`**: `float`

The weight of the equity in the ETF, as a normalized percent.

**`market_value`**: `Union[float, int]`

The market value of the equity position in the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`equity_symbol`**: `str`

The symbol of the equity requested.

**`etf_symbol`**: `str`

The symbol of the ETF with exposure to the requested equity.

**`shares`**: `float`

The number of shares held in the ETF.

**`weight`**: `float`

The weight of the equity in the ETF, as a normalized percent.

**`market_value`**: `Union[float, int]`

The market value of the equity position in the ETF.

</TabItem>
</Tabs>



---

---
title: "historical"
description: "Learn how to access historical market price data for ETFs with the OBB.etf.historical()  method. This method allows you to retrieve data such as the opening, high, low,  and closing prices, as well as the trading volume and adjusted closing price for  a specific ETF symbol during a given time period."
keywords:
- ETF Historical Market Price
- ETF historical data
- ETF symbol
- start date
- end date
- provider
- query results
- chart object
- metadata
- data
- open price
- high price
- low price
- close price
- volume
- adjusted close price
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

ETF Historical Market Price.


Examples
--------

```python
from openbb import obb
obb.etf.historical(symbol='SPY', provider='fmp')
obb.etf.historical(symbol='SPY', provider='yfinance')
# This function accepts multiple tickers.
obb.etf.historical(symbol='SPY,IWM,QQQ,DJIA', provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '60m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. 'splits_only' is not supported for intraday data.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID).

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '10m', '15m', '30m', '60m', '1h', '1d', '1W', '1M', '1Q', '1Y']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`start_time`**: `datetime.time`

Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`end_time`**: `datetime.time`

Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'.

 • *Optional:* `True`

---

**`timezone`**: `str`

Timezone of the data, in the IANA format (Continent/City).

 • *Default:* `America/New_York`

 • *Optional:* `True`

---

**`source`**: `Literal['realtime', 'delayed', 'nasdaq_basic']`

The source of the data.

 • *Default:* `realtime`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'unadjusted']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '5m', '15m', '30m', '90m', '1h', '2h', '4h', '1d', '1W', '1M', '1Y'], str]`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Union[Literal['1m', '2m', '5m', '15m', '30m', '60m', '1h', '1d', '1W', '1M'], str, int]`

Time interval of the data to return. Or, any integer (entered as a string) representing the number of minutes. Default is daily data. There is no extended hours data, and intraday data is limited to after April 12 2022.

 • *Default:* `day`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends', 'unadjusted']`

The adjustment factor to apply. Only valid for daily data.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>

<TabItem value='tradier' label='tradier'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '1d', '1W', '1M']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): alpha_vantage, cboe, fmp, polygon, tiingo, tmx, tradier, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`extended_hours`**: `bool`

Include Pre and Post market data.

 • *Default:* `False`

 • *Optional:* `True`

---

**`include_actions`**: `bool`

Include dividends and stock splits in results.

 • *Default:* `True`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor to apply. Default is splits only.

 • *Default:* `splits_only`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['alpha_vantage', 'cboe', 'fmp', 'intrinio', 'polygon', 'tiingo', 'tmx', 'tradier', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

</TabItem>

<TabItem value='alpha_vantage' label='alpha_vantage'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `Annotated[float, Gt(gt=0)]`

The adjusted close price.

**`dividend`**: `Annotated[float, Ge(ge=0)]`

Dividend amount, if a dividend was paid.

**`split_ratio`**: `Annotated[float, Ge(ge=0)]`

Split coefficient, if a split occurred.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`calls_volume`**: `int`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `int`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `int`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_close`**: `float`

The adjusted close price.

**`unadjusted_volume`**: `float`

Unadjusted volume of the symbol.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`average`**: `float`

Average trade price of an individual equity during the interval.

**`change`**: `float`

Change in the price of the symbol from the previous day.

**`change_percent`**: `float`

Percent change in the price of the symbol from the previous day.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`fifty_two_week_high`**: `float`

52 week high price for the symbol.

**`fifty_two_week_low`**: `float`

52 week low price for the symbol.

**`factor`**: `float`

factor by which to multiply equity prices before this date, in order to calculate historically-adjusted equity prices.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

**`close_time`**: `datetime`

The timestamp that represents the end of the interval span.

**`interval`**: `str`

The data time frequency.

**`intra_period`**: `bool`

If true, the equity price represents an unfinished period (be it day, week, quarter, month, or year), meaning that the close price is the latest price available, not the official close price for the period

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`adj_open`**: `float`

The adjusted open price.

**`adj_high`**: `float`

The adjusted high price.

**`adj_low`**: `float`

The adjusted low price.

**`adj_close`**: `float`

The adjusted close price.

**`adj_volume`**: `float`

The adjusted volume.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount, if a dividend was paid.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume weighted average price for the day.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price, as a normalized percentage.

**`transactions`**: `int`

Total number of transactions recorded.

**`transactions_value`**: `float`

Nominal value of recorded transactions.

</TabItem>

<TabItem value='tradier' label='tradier'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`last_price`**: `float`

The last price of the equity.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `Union[float, int]`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`split_ratio`**: `float`

Ratio of the equity split, if a split occurred.

**`dividend`**: `float`

Dividend amount (split-adjusted), if a dividend was paid.

</TabItem>
</Tabs>



---

---
title: "holdings"
description: "Learn how to get the holdings data for an individual ETF using the `obb.etf.holdings`  method. Understand the parameters like symbol, provider, date, and CIK. Explore  the returns, results, warnings, chart, and metadata. Dive into the data fields like  symbol, name, LEI, title, CUSIP, ISIN, balance, units, currency, value, weight,  payoff profile, asset category, issuer category, country, and more."
keywords:
- ETF holdings
- individual ETF holdings
- holdings data for ETF
- symbol
- provider
- date
- CIK
- returns
- results
- warnings
- chart
- metadata
- data
- name
- LEI
- title
- CUSIP
- ISIN
- balance
- units
- currency
- value
- weight
- payoff profile
- asset category
- issuer category
- country
- is restricted
- fair value level
- is cash collateral
- is non-cash collateral
- is loan by fund
- acceptance datetime
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/holdings - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the holdings for an individual ETF.


Examples
--------

```python
from openbb import obb
obb.etf.holdings(symbol='XLK', provider='fmp')
# Including a date (FMP, SEC) will return the holdings as per NPORT-P filings.
obb.etf.holdings(symbol='XLK', date=2022-03-31, provider='fmp')
# The same data can be returned from the SEC directly.
obb.etf.holdings(symbol='XLK', date=2022-03-31, provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], str]`

A specific date to get data for. Entering a date will attempt to return the NPORT-P filing for the entered date. This needs to be _exactly_ the date of the filing. Use the holdings_date command/endpoint to find available filing dates for the ETF.

 • *Optional:* `True`

---

**`cik`**: `str`

The CIK of the filing entity. Overrides symbol.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`date`**: `Union[Union[date, str], str]`

A specific date to get data for.  The date represents the period ending. The date entered will return the closest filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfHoldings]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'sec', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

**`lei`**: `str`

The LEI of the holding.

**`title`**: `str`

The title of the holding.

**`cusip`**: `str`

The CUSIP of the holding.

**`isin`**: `str`

The ISIN of the holding.

**`balance`**: `int`

The balance of the holding, in shares or units.

**`units`**: `Union[float, str]`

The type of units.

**`currency`**: `str`

The currency of the holding.

**`value`**: `float`

The value of the holding, in dollars.

**`weight`**: `float`

The weight of the holding, as a normalized percent.

**`payoff_profile`**: `str`

The payoff profile of the holding.

**`asset_category`**: `str`

The asset category of the holding.

**`issuer_category`**: `str`

The issuer category of the holding.

**`country`**: `str`

The country of the holding.

**`is_restricted`**: `str`

Whether the holding is restricted.

**`fair_value_level`**: `int`

The fair value level of the holding.

**`is_cash_collateral`**: `str`

Whether the holding is cash collateral.

**`is_non_cash_collateral`**: `str`

Whether the holding is non-cash collateral.

**`is_loan_by_fund`**: `str`

Whether the holding is loan by fund.

**`cik`**: `str`

The CIK of the filing.

**`acceptance_datetime`**: `str`

The acceptance datetime of the filing.

**`updated`**: `Union[date, datetime]`

The date the data was updated.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

The common name for the holding.

**`security_type`**: `str`

The type of instrument for this holding. Examples(Bond='BOND', Equity='EQUI')

**`isin`**: `str`

The International Securities Identification Number.

**`ric`**: `str`

The Reuters Instrument Code.

**`sedol`**: `str`

The Stock Exchange Daily Official list.

**`share_class_figi`**: `str`

The OpenFIGI symbol for the holding.

**`country`**: `str`

The country or region of the holding.

**`maturity_date`**: `date`

The maturity date for the debt security, if available.

**`contract_expiry_date`**: `date`

Expiry date for the futures contract held, if available.

**`coupon`**: `float`

The coupon rate of the debt security, if available.

**`balance`**: `Union[float, int]`

The number of units of the security held, if available.

**`unit`**: `str`

The units of the 'balance' field.

**`units_per_share`**: `float`

Number of units of the security held per share outstanding of the ETF, if available.

**`face_value`**: `float`

The face value of the debt security, if available.

**`derivatives_value`**: `float`

The notional value of derivatives contracts held.

**`value`**: `float`

The market value of the holding, on the 'as_of' date.

**`weight`**: `float`

The weight of the holding, as a normalized percent.

**`updated`**: `date`

The 'as_of' date for the holding.

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF holding.

**`lei`**: `str`

The LEI of the holding.

**`cusip`**: `str`

The CUSIP of the holding.

**`isin`**: `str`

The ISIN of the holding.

**`other_id`**: `str`

Internal identifier for the holding.

**`balance`**: `float`

The balance of the holding.

**`weight`**: `float`

The weight of the holding in ETF in %.

**`value`**: `float`

The value of the holding in USD.

**`payoff_profile`**: `str`

The payoff profile of the holding.

**`units`**: `Union[str, float]`

The units of the holding.

**`currency`**: `str`

The currency of the holding.

**`asset_category`**: `str`

The asset category of the holding.

**`issuer_category`**: `str`

The issuer category of the holding.

**`country`**: `str`

The country of the holding.

**`is_restricted`**: `str`

Whether the holding is restricted.

**`fair_value_level`**: `int`

The fair value level of the holding.

**`is_cash_collateral`**: `str`

Whether the holding is cash collateral.

**`is_non_cash_collateral`**: `str`

Whether the holding is non-cash collateral.

**`is_loan_by_fund`**: `str`

Whether the holding is loan by fund.

**`loan_value`**: `float`

The loan value of the holding.

**`issuer_conditional`**: `str`

The issuer conditions of the holding.

**`asset_conditional`**: `str`

The asset conditions of the holding.

**`maturity_date`**: `date`

The maturity date of the debt security.

**`coupon_kind`**: `str`

The type of coupon for the debt security.

**`rate_type`**: `str`

The type of rate for the debt security, floating or fixed.

**`annualized_return`**: `float`

The annualized return on the debt security.

**`is_default`**: `str`

If the debt security is defaulted.

**`in_arrears`**: `str`

If the debt security is in arrears.

**`is_paid_kind`**: `str`

If the debt security payments are paid in kind.

**`derivative_category`**: `str`

The derivative category of the holding.

**`counterparty`**: `str`

The counterparty of the derivative.

**`underlying_name`**: `str`

The name of the underlying asset associated with the derivative.

**`option_type`**: `str`

The type of option.

**`derivative_payoff`**: `str`

The payoff profile of the derivative.

**`expiry_date`**: `date`

The expiry or termination date of the derivative.

**`exercise_price`**: `float`

The exercise price of the option.

**`exercise_currency`**: `str`

The currency of the option exercise price.

**`shares_per_contract`**: `float`

The number of shares per contract.

**`delta`**: `Union[str, float]`

The delta of the option.

**`rate_type_rec`**: `str`

The type of rate for receivable portion of the swap.

**`receive_currency`**: `str`

The receive currency of the swap.

**`upfront_receive`**: `float`

The upfront amount received of the swap.

**`floating_rate_index_rec`**: `str`

The floating rate index for receivable portion of the swap.

**`floating_rate_spread_rec`**: `float`

The floating rate spread for reveivable portion of the swap.

**`rate_tenor_rec`**: `str`

The rate tenor for receivable portion of the swap.

**`rate_tenor_unit_rec`**: `Union[str, int]`

The rate tenor unit for receivable portion of the swap.

**`reset_date_rec`**: `str`

The reset date for receivable portion of the swap.

**`reset_date_unit_rec`**: `Union[str, int]`

The reset date unit for receivable portion of the swap.

**`rate_type_pmnt`**: `str`

The type of rate for payment portion of the swap.

**`payment_currency`**: `str`

The payment currency of the swap.

**`upfront_payment`**: `float`

The upfront amount received of the swap.

**`floating_rate_index_pmnt`**: `str`

The floating rate index for payment portion of the swap.

**`floating_rate_spread_pmnt`**: `float`

The floating rate spread for payment portion of the swap.

**`rate_tenor_pmnt`**: `str`

The rate tenor for payment portion of the swap.

**`rate_tenor_unit_pmnt`**: `Union[str, int]`

The rate tenor unit for payment portion of the swap.

**`reset_date_pmnt`**: `str`

The reset date for payment portion of the swap.

**`reset_date_unit_pmnt`**: `Union[str, int]`

The reset date unit for payment portion of the swap.

**`repo_type`**: `str`

The type of repo.

**`is_cleared`**: `str`

If the repo is cleared.

**`is_tri_party`**: `str`

If the repo is tri party.

**`principal_amount`**: `float`

The principal amount of the repo.

**`principal_currency`**: `str`

The currency of the principal amount.

**`collateral_type`**: `str`

The collateral type of the repo.

**`collateral_amount`**: `float`

The collateral amount of the repo.

**`collateral_currency`**: `str`

The currency of the collateral amount.

**`exchange_currency`**: `str`

The currency of the exchange rate.

**`exchange_rate`**: `float`

The exchange rate.

**`currency_sold`**: `str`

The currency sold in a Forward Derivative.

**`currency_amount_sold`**: `float`

The amount of currency sold in a Forward Derivative.

**`currency_bought`**: `str`

The currency bought in a Forward Derivative.

**`currency_amount_bought`**: `float`

The amount of currency bought in a Forward Derivative.

**`notional_amount`**: `float`

The notional amount of the derivative.

**`notional_currency`**: `str`

The currency of the derivative's notional amount.

**`unrealized_gain`**: `float`

The unrealized gain or loss on the derivative.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

The ticker symbol of the asset.

**`name`**: `str`

The name of the asset.

**`weight`**: `float`

The weight of the asset in the portfolio, as a normalized percentage.

**`shares`**: `Union[str, int]`

The value of the assets under management.

**`market_value`**: `Union[str, float]`

The market value of the holding.

**`currency`**: `str`

The currency of the holding.

**`share_percentage`**: `float`

The share percentage of the holding, as a normalized percentage.

**`share_change`**: `Union[str, float]`

The change in shares of the holding.

**`country`**: `str`

The country of the holding.

**`exchange`**: `str`

The exchange code of the holding.

**`type_id`**: `str`

The holding type ID of the asset.

**`fund_id`**: `str`

The fund ID of the asset.

</TabItem>
</Tabs>



---

---
title: "holdings_date"
description: "Learn how to retrieve the holdings filing date for an individual ETF  using the OBB.etf.holdings_date API. Explore the available parameters, such as symbol  and provider, and understand the returned results like results list, chart object,  and metadata info."
keywords:
- ETF holdings filing date
- get ETF holdings filing date
- ETF holdings date API
- symbol parameter
- provider parameter
- fmp provider
- cik parameter
- returns
- results
- warnings
- chart object
- metadata info
- data parameter
- date field
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/holdings_date - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Use this function to get the holdings dates, if available.


Examples
--------

```python
from openbb import obb
obb.etf.holdings_date(symbol='XLK', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`cik`**: `str`

The CIK of the filing entity. Overrides symbol.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfHoldingsDate]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

</TabItem>
</Tabs>



---

# Etf

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Discovery" description="losers, active, gainers" url="/platform/reference/etf/discovery" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="countries" description="ETF Country weighting" url="/platform/reference/etf/countries" />
<ReferenceCard title="search" description="Search for ETFs" url="/platform/reference/etf/search" />
<ReferenceCard title="price performance" description="Price performance as a return, over different periods" url="/platform/reference/etf/price_performance" />
<ReferenceCard title="historical" description="ETF Historical Market Price" url="/platform/reference/etf/historical" />
<ReferenceCard title="info" description="ETF Information Overview" url="/platform/reference/etf/info" />
<ReferenceCard title="equity exposure" description="Get the exposure to ETFs for a specific stock" url="/platform/reference/etf/equity_exposure" />
<ReferenceCard title="sectors" description="ETF Sector weighting" url="/platform/reference/etf/sectors" />
<ReferenceCard title="holdings" description="Get the holdings for an individual ETF" url="/platform/reference/etf/holdings" />
<ReferenceCard title="holdings date" description="Use this function to get the holdings dates, if available" url="/platform/reference/etf/holdings_date" />
</ul>



---

---
title: "info"
description: "Get an overview of ETF information using the `obb.etf.info` function.  Learn about the available parameters, returns, and data fields like name, inception  date, asset class, assets under management, average trading volume, CUSIP, description,  domicile, expense ratio, ISIN, net asset value, website link, and holdings count."
keywords:
- ETF Information Overview
- obb.etf.info
- parameters
- symbol
- provider
- returns
- data
- name
- inception date
- asset class
- assets under management
- average trading volume
- CUSIP
- description
- domicile
- expense ratio
- ISIN
- net asset value
- website link
- holdings count
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/info - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

ETF Information Overview.


Examples
--------

```python
from openbb import obb
obb.etf.info(symbol='SPY', provider='fmp')
# This function accepts multiple tickers.
obb.etf.info(symbol='SPY,IWM,QQQ,DJIA', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. (ETF) Multiple items allowed for provider(s): fmp, intrinio, tmx, yfinance.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfInfo]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`issuer`**: `str`

Company of the ETF.

**`cusip`**: `str`

CUSIP of the ETF.

**`isin`**: `str`

ISIN of the ETF.

**`domicile`**: `str`

Domicile of the ETF.

**`asset_class`**: `str`

Asset class of the ETF.

**`aum`**: `float`

Assets under management.

**`nav`**: `float`

Net asset value of the ETF.

**`nav_currency`**: `str`

Currency of the ETF's net asset value.

**`expense_ratio`**: `float`

The expense ratio, as a normalized percent.

**`holdings_count`**: `int`

Number of holdings.

**`avg_volume`**: `float`

Average daily trading volume.

**`website`**: `str`

Website of the issuer.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`fund_listing_date`**: `date`

The date on which the Exchange Traded Product (ETP) or share class of the ETP is listed on a specific exchange.

**`data_change_date`**: `date`

The last date on which there was a change in a classifications data field for this ETF.

**`etn_maturity_date`**: `date`

If the product is an ETN, this field identifies the maturity date for the ETN.

**`is_listed`**: `bool`

If true, the ETF is still listed on an exchange.

**`close_date`**: `date`

The date on which the ETF was de-listed if it is no longer listed.

**`exchange`**: `str`

The exchange Market Identifier Code (MIC).

**`isin`**: `str`

International Securities Identification Number (ISIN).

**`ric`**: `str`

Reuters Instrument Code (RIC).

**`sedol`**: `str`

Stock Exchange Daily Official list (SEDOL).

**`figi_symbol`**: `str`

Financial Instrument Global Identifier (FIGI) symbol.

**`share_class_figi`**: `str`

Financial Instrument Global Identifier (FIGI).

**`firstbridge_id`**: `str`

The FirstBridge unique identifier for the Exchange Traded Fund (ETF).

**`firstbridge_parent_id`**: `str`

The FirstBridge unique identifier for the parent Exchange Traded Fund (ETF), if applicable.

**`intrinio_id`**: `str`

Intrinio unique identifier for the security.

**`intraday_nav_symbol`**: `str`

Intraday Net Asset Value (NAV) symbol.

**`primary_symbol`**: `str`

The primary ticker field is used for Exchange Traded Products (ETPs) that have multiple listings and share classes. If an ETP has multiple listings or share classes, the same primary ticker is assigned to all the listings and share classes.

**`etp_structure_type`**: `str`

Classifies Exchange Traded Products (ETPs) into very broad categories based on its legal structure.

**`legal_structure`**: `str`

Legal structure of the fund.

**`issuer`**: `str`

Issuer of the ETF.

**`etn_issuing_bank`**: `str`

If the product is an Exchange Traded Note (ETN), this field identifies the issuing bank.

**`fund_family`**: `str`

This field identifies the fund family to which the ETF belongs, as categorized by the ETF Sponsor.

**`investment_style`**: `str`

Investment style of the ETF.

**`derivatives_based`**: `str`

This field is populated if the ETF holds either listed or over-the-counter derivatives in its portfolio.

**`income_category`**: `str`

Identifies if an Exchange Traded Fund (ETF) falls into a category that is specifically designed to provide a high yield or income

**`asset_class`**: `str`

Captures the underlying nature of the securities in the Exchanged Traded Product (ETP).

**`other_asset_types`**: `str`

If 'asset_class' field is classified as 'Other Asset Types' this field captures the specific category of the underlying assets.

**`single_category_designation`**: `str`

This categorization is created for those users who want every ETF to be 'forced' into a single bucket, so that the assets for all categories will always sum to the total market.

**`beta_type`**: `str`

This field identifies whether an ETF provides 'Traditional' beta exposure or 'Smart' beta exposure. ETFs that are active (i.e. non-indexed), leveraged / inverse or have a proprietary quant model (i.e. that don't provide indexed exposure to a targeted factor) are classified separately.

**`beta_details`**: `str`

This field provides further detail within the traditional and smart beta categories.

**`market_cap_range`**: `str`

Equity ETFs are classified as falling into categories based on the description of their investment strategy in the prospectus. Examples ('Mega Cap', 'Large Cap', 'Mid Cap', etc.)

**`market_cap_weighting_type`**: `str`

For ETFs that take the value 'Market Cap Weighted' in the 'index_weighting_scheme' field, this field provides detail on the market cap weighting type.

**`index_weighting_scheme`**: `str`

For ETFs that track an underlying index, this field provides detail on the index weighting type.

**`index_linked`**: `str`

This field identifies whether an ETF is index linked or active.

**`index_name`**: `str`

This field identifies the name of the underlying index tracked by the ETF, if applicable.

**`index_symbol`**: `str`

This field identifies the OpenFIGI ticker for the Index underlying the ETF.

**`parent_index`**: `str`

This field identifies the name of the parent index, which represents the broader universe from which the index underlying the ETF is created, if applicable.

**`index_family`**: `str`

This field identifies the index family to which the index underlying the ETF belongs. The index family is represented as categorized by the index provider.

**`broader_index_family`**: `str`

This field identifies the broader index family to which the index underlying the ETF belongs. The broader index family is represented as categorized by the index provider.

**`index_provider`**: `str`

This field identifies the Index provider for the index underlying the ETF, if applicable.

**`index_provider_code`**: `str`

This field provides the First Bridge code for each Index provider, corresponding to the index underlying the ETF if applicable.

**`replication_structure`**: `str`

The replication structure of the Exchange Traded Product (ETP).

**`growth_value_tilt`**: `str`

Classifies equity ETFs as either 'Growth' or Value' based on the stated style tilt in the ETF prospectus. Equity ETFs that do not have a stated style tilt are classified as 'Core / Blend'.

**`growth_type`**: `str`

For ETFs that are classified as 'Growth' in 'growth_value_tilt', this field further identifies those where the stocks in the ETF are both selected and weighted based on their growth (style factor) scores.

**`value_type`**: `str`

For ETFs that are classified as 'Value' in 'growth_value_tilt', this field further identifies those where the stocks in the ETF are both selected and weighted based on their value (style factor) scores.

**`sector`**: `str`

For equity ETFs that aim to provide targeted exposure to a sector or industry, this field identifies the Sector that it provides the exposure to.

**`industry`**: `str`

For equity ETFs that aim to provide targeted exposure to an industry, this field identifies the Industry that it provides the exposure to.

**`industry_group`**: `str`

For equity ETFs that aim to provide targeted exposure to a sub-industry, this field identifies the sub-Industry that it provides the exposure to.

**`cross_sector_theme`**: `str`

For equity ETFs that aim to provide targeted exposure to a specific investment theme that cuts across GICS sectors, this field identifies the specific cross-sector theme. Examples ('Agri-business', 'Natural Resources', 'Green Investing', etc.)

**`natural_resources_type`**: `str`

For ETFs that are classified as 'Natural Resources' in the 'cross_sector_theme' field, this field provides further detail on the type of Natural Resources exposure.

**`us_or_excludes_us`**: `str`

Takes the value of 'Domestic' for US exposure, 'International' for non-US exposure and 'Global' for exposure that includes all regions including the US.

**`developed_emerging`**: `str`

This field identifies the stage of development of the markets that the ETF provides exposure to.

**`specialized_region`**: `str`

This field is populated if the ETF provides targeted exposure to a specific type of geography-based grouping that does not fall into a specific country or continent grouping. Examples ('BRIC', 'Chindia', etc.)

**`continent`**: `str`

This field is populated if the ETF provides targeted exposure to a specific continent or country within that Continent.

**`latin_america_sub_group`**: `str`

For ETFs that are classified as 'Latin America' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`europe_sub_group`**: `str`

For ETFs that are classified as 'Europe' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`asia_sub_group`**: `str`

For ETFs that are classified as 'Asia' in the 'continent' field, this field provides further detail on the type of regional exposure.

**`specific_country`**: `str`

This field is populated if the ETF provides targeted exposure to a specific country.

**`china_listing_location`**: `str`

For ETFs that are classified as 'China' in the 'country' field, this field provides further detail on the type of exposure in the underlying securities.

**`us_state`**: `str`

Takes the value of a US state if the ETF provides targeted exposure to the municipal bonds or equities of companies.

**`real_estate`**: `str`

For ETFs that provide targeted real estate exposure, this field is populated if the ETF provides targeted exposure to a specific segment of the real estate market.

**`fundamental_weighting_type`**: `str`

For ETFs that take the value 'Fundamental Weighted' in the 'index_weighting_scheme' field, this field provides detail on the fundamental weighting methodology.

**`dividend_weighting_type`**: `str`

For ETFs that take the value 'Dividend Weighted' in the 'index_weighting_scheme' field, this field provides detail on the dividend weighting methodology.

**`bond_type`**: `str`

For ETFs where 'asset_class_type' is 'Bonds', this field provides detail on the type of bonds held in the ETF.

**`government_bond_types`**: `str`

For bond ETFs that take the value 'Treasury & Government' in 'bond_type', this field provides detail on the exposure.

**`municipal_bond_region`**: `str`

For bond ETFs that take the value 'Municipal' in 'bond_type', this field provides additional detail on the geographic exposure.

**`municipal_vrdo`**: `bool`

For bond ETFs that take the value 'Municipal' in 'bond_type', this field identifies those ETFs that specifically provide exposure to Variable Rate Demand Obligations.

**`mortgage_bond_types`**: `str`

For bond ETFs that take the value 'Mortgage' in 'bond_type', this field provides additional detail on the type of underlying securities.

**`bond_tax_status`**: `str`

For all US bond ETFs, this field provides additional detail on the tax treatment of the underlying securities.

**`credit_quality`**: `str`

For all bond ETFs, this field helps to identify if the ETF provides targeted exposure to securities of a specific credit quality range.

**`average_maturity`**: `str`

For all bond ETFs, this field helps to identify if the ETF provides targeted exposure to securities of a specific maturity range.

**`specific_maturity_year`**: `int`

For all bond ETFs that take the value 'Specific Maturity Year' in the 'average_maturity' field, this field specifies the calendar year.

**`commodity_types`**: `str`

For ETFs where 'asset_class_type' is 'Commodities', this field provides detail on the type of commodities held in the ETF.

**`energy_type`**: `str`

For ETFs where 'commodity_type' is 'Energy', this field provides detail on the type of energy exposure provided by the ETF.

**`agricultural_type`**: `str`

For ETFs where 'commodity_type' is 'Agricultural', this field provides detail on the type of agricultural exposure provided by the ETF.

**`livestock_type`**: `str`

For ETFs where 'commodity_type' is 'Livestock', this field provides detail on the type of livestock exposure provided by the ETF.

**`metal_type`**: `str`

For ETFs where 'commodity_type' is 'Gold & Metals', this field provides detail on the type of exposure provided by the ETF.

**`inverse_leveraged`**: `str`

This field is populated if the ETF provides inverse or leveraged exposure.

**`target_date_multi_asset_type`**: `str`

For ETFs where 'asset_class_type' is 'Target Date / MultiAsset', this field provides detail on the type of commodities held in the ETF.

**`currency_pair`**: `str`

This field is populated if the ETF's strategy involves providing exposure to the movements of a currency or involves hedging currency exposure.

**`social_environmental_type`**: `str`

This field is populated if the ETF's strategy involves providing exposure to a specific social or environmental theme.

**`clean_energy_type`**: `str`

This field is populated if the ETF has a value of 'Clean Energy' in the 'social_environmental_type' field.

**`dividend_type`**: `str`

This field is populated if the ETF has an intended investment objective of holding dividend-oriented stocks as stated in the prospectus.

**`regular_dividend_payor_type`**: `str`

This field is populated if the ETF has a value of'Dividend - Regular Payors' in the 'dividend_type' field.

**`quant_strategies_type`**: `str`

This field is populated if the ETF has either an index-linked or active strategy that is based on a proprietary quantitative strategy.

**`other_quant_models`**: `str`

For ETFs where 'quant_strategies_type' is 'Other Quant Model', this field provides the name of the specific proprietary quant model used as the underlying strategy for the ETF.

**`hedge_fund_type`**: `str`

For ETFs where 'other_asset_types' is 'Hedge Fund Replication', this field provides detail on the type of hedge fund replication strategy.

**`excludes_financials`**: `bool`

For equity ETFs, identifies those ETFs where the underlying fund holdings will not hold financials stocks, based on the funds intended objective.

**`excludes_technology`**: `bool`

For equity ETFs, identifies those ETFs where the underlying fund holdings will not hold technology stocks, based on the funds intended objective.

**`holds_only_nyse_stocks`**: `bool`

If true, the ETF is an equity ETF and holds only stocks listed on NYSE.

**`holds_only_nasdaq_stocks`**: `bool`

If true, the ETF is an equity ETF and holds only stocks listed on Nasdaq.

**`holds_mlp`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds MLPs as an intended part of its investment strategy.

**`holds_preferred_stock`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds preferred stock as an intended part of its investment strategy.

**`holds_closed_end_funds`**: `bool`

If true, the ETF's investment objective explicitly specifies that it holds closed end funds as an intended part of its investment strategy.

**`holds_adr`**: `bool`

If true, he ETF's investment objective explicitly specifies that it holds American Depositary Receipts (ADRs) as an intended part of its investment strategy.

**`laddered`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold bonds in a laddered structure, where the bonds are scheduled to mature in an annual, sequential structure.

**`zero_coupon`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold zero coupon Treasury Bills.

**`floating_rate`**: `bool`

For bond ETFs, this field identifies those ETFs that specifically hold floating rate bonds.

**`build_america_bonds`**: `bool`

For municipal bond ETFs, this field identifies those ETFs that specifically hold Build America Bonds.

**`dynamic_futures_roll`**: `bool`

If the product holds futures contracts, this field identifies those products where the roll strategy is dynamic (rather than entirely rules based), so as to minimize roll costs.

**`currency_hedged`**: `bool`

This field is populated if the ETF's strategy involves hedging currency exposure.

**`includes_short_exposure`**: `bool`

This field is populated if the ETF has short exposure in any of its holdings e.g. in a long/short or inverse ETF.

**`ucits`**: `bool`

If true, the Exchange Traded Product (ETP) is Undertakings for the Collective Investment in Transferable Securities (UCITS) compliant

**`registered_countries`**: `str`

The list of countries where the ETF is legally registered for sale. This may differ from where the ETF is domiciled or traded, particularly in Europe.

**`issuer_country`**: `str`

2 letter ISO country code for the country where the issuer is located.

**`domicile`**: `str`

2 letter ISO country code for the country where the ETP is domiciled.

**`listing_country`**: `str`

2 letter ISO country code for the country of the primary listing.

**`listing_region`**: `str`

Geographic region in the country of the primary listing falls.

**`bond_currency_denomination`**: `str`

For all bond ETFs, this field provides additional detail on the currency denomination of the underlying securities.

**`base_currency`**: `str`

Base currency in which NAV is reported.

**`listing_currency`**: `str`

listing currency of the Exchange Traded Product (ETP) in which it is traded. Reported using the 3-digit ISO currency code.

**`number_of_holdings`**: `int`

The number of holdings in the ETF.

**`month_end_assets`**: `float`

Net assets in millions of dollars as of the most recent month end.

**`net_expense_ratio`**: `float`

Gross expense net of Fee Waivers, as a percentage of net assets as published by the ETF issuer.

**`etf_portfolio_turnover`**: `float`

The percentage of positions turned over in the last 12 months.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

The description of the ETF.

**`inception_date`**: `str`

Inception date of the ETF.

**`issuer`**: `str`

The issuer of the ETF.

**`investment_style`**: `str`

The investment style of the ETF.

**`esg`**: `bool`

Whether the ETF qualifies as an ESG fund.

**`currency`**: `str`

The currency of the ETF.

**`unit_price`**: `float`

The unit price of the ETF.

**`close`**: `float`

The closing price of the ETF.

**`prev_close`**: `float`

The previous closing price of the ETF.

**`return_1m`**: `float`

The one-month return of the ETF, as a normalized percent

**`return_3m`**: `float`

The three-month return of the ETF, as a normalized percent.

**`return_6m`**: `float`

The six-month return of the ETF, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the ETF, as a normalized percent.

**`return_1y`**: `float`

The one-year return of the ETF, as a normalized percent.

**`return_3y`**: `float`

The three-year return of the ETF, as a normalized percent.

**`return_5y`**: `float`

The five-year return of the ETF, as a normalized percent.

**`return_10y`**: `float`

The ten-year return of the ETF, as a normalized percent.

**`return_from_inception`**: `float`

The return from inception of the ETF, as a normalized percent.

**`avg_volume`**: `int`

The average daily volume of the ETF.

**`avg_volume_30d`**: `int`

The 30-day average volume of the ETF.

**`aum`**: `float`

The AUM of the ETF.

**`pe_ratio`**: `float`

The price-to-earnings ratio of the ETF.

**`pb_ratio`**: `float`

The price-to-book ratio of the ETF.

**`management_fee`**: `float`

The management fee of the ETF, as a normalized percent.

**`mer`**: `float`

The management expense ratio of the ETF, as a normalized percent.

**`distribution_yield`**: `float`

The distribution yield of the ETF, as a normalized percent.

**`dividend_frequency`**: `str`

The dividend payment frequency of the ETF.

**`website`**: `str`

The website of the ETF.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `str`

Symbol representing the entity requested in the data. (ETF)

**`name`**: `str`

Name of the ETF.

**`description`**: `str`

Description of the fund.

**`inception_date`**: `str`

Inception date of the ETF.

**`fund_type`**: `str`

The legal type of fund.

**`fund_family`**: `str`

The fund family.

**`category`**: `str`

The fund category.

**`exchange`**: `str`

The exchange the fund is listed on.

**`exchange_timezone`**: `str`

The timezone of the exchange.

**`currency`**: `str`

The currency in which the fund is listed.

**`nav_price`**: `float`

The net asset value per unit of the fund.

**`total_assets`**: `int`

The total value of assets held by the fund.

**`trailing_pe`**: `float`

The trailing twelve month P/E ratio of the fund's assets.

**`dividend_yield`**: `float`

The dividend yield of the fund, as a normalized percent.

**`dividend_rate_ttm`**: `float`

The trailing twelve month annual dividend rate of the fund, in currency units.

**`dividend_yield_ttm`**: `float`

The trailing twelve month annual dividend yield of the fund, as a normalized percent.

**`year_high`**: `float`

The fifty-two week high price.

**`year_low`**: `float`

The fifty-two week low price.

**`ma_50d`**: `float`

50-day moving average price.

**`ma_200d`**: `float`

200-day moving average price.

**`return_ytd`**: `float`

The year-to-date return of the fund, as a normalized percent.

**`return_3y_avg`**: `float`

The three year average return of the fund, as a normalized percent.

**`return_5y_avg`**: `float`

The five year average return of the fund, as a normalized percent.

**`beta_3y_avg`**: `float`

The three year average beta of the fund.

**`volume_avg`**: `float`

The average daily trading volume of the fund.

**`volume_avg_10d`**: `float`

The average daily trading volume of the fund over the past ten days.

**`bid`**: `float`

The current bid price.

**`bid_size`**: `float`

The current bid size.

**`ask`**: `float`

The current ask price.

**`ask_size`**: `float`

The current ask size.

**`open`**: `float`

The open price of the most recent trading session.

**`high`**: `float`

The highest price of the most recent trading session.

**`low`**: `float`

The lowest price of the most recent trading session.

**`volume`**: `int`

The trading volume of the most recent trading session.

**`prev_close`**: `float`

The previous closing price.

</TabItem>
</Tabs>



---

---
title: "price_performance"
description: "Learn about price performance returns over different periods and how  to retrieve data for a given symbol. Find out how to analyze the time series data,  view the provider information, and access additional metadata and warnings."
keywords:
- price performance
- return
- periods
- symbol
- data
- time series
- chart
- provider
- metadata
- warnings
- one-day return
- week to date return
- one-week return
- month to date return
- one-month return
- quarter to date return
- three-month return
- six-month return
- year to date return
- one-year return
- three-year return
- five-year return
- ten-year return
- max return
- ticker symbol
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/price_performance - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Price performance as a return, over different periods.


Examples
--------

```python
from openbb import obb
obb.etf.price_performance(symbol='QQQ', provider='fmp')
obb.etf.price_performance(symbol='SPY,QQQ,IWM,DJIA', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): finviz, fmp, intrinio.

 • *Optional:* `False`

---

**`return_type`**: `Literal['trailing', 'calendar']`

The type of returns to return, a trailing or calendar window.

 • *Default:* `trailing`

 • *Optional:* `True`

---

**`adjustment`**: `Literal['splits_only', 'splits_and_dividends']`

The adjustment factor, 'splits_only' will return pure price performance.

 • *Default:* `splits_and_dividends`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfPricePerformance]`

Serializable results.

---

**`provider`**: `Optional[Literal['finviz', 'fmp', 'intrinio']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='finviz' label='finviz'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`volatility_week`**: `float`

One-week realized volatility, as a normalized percent.

**`volatility_month`**: `float`

One-month realized volatility, as a normalized percent.

**`price`**: `float`

Last Price.

**`volume`**: `float`

Current volume.

**`average_volume`**: `float`

Average daily volume.

**`relative_volume`**: `float`

Relative volume as a ratio of current volume to average volume.

**`analyst_recommendation`**: `float`

The analyst consensus, on a scale of 1-5 where 1 is a buy and 5 is a sell.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

The ticker symbol.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`one_day`**: `float`

One-day return.

**`wtd`**: `float`

Week to date return.

**`one_week`**: `float`

One-week return.

**`mtd`**: `float`

Month to date return.

**`one_month`**: `float`

One-month return.

**`qtd`**: `float`

Quarter to date return.

**`three_month`**: `float`

Three-month return.

**`six_month`**: `float`

Six-month return.

**`ytd`**: `float`

Year to date return.

**`one_year`**: `float`

One-year return.

**`two_year`**: `float`

Two-year return.

**`three_year`**: `float`

Three-year return.

**`four_year`**: `float`

Four-year

**`five_year`**: `float`

Five-year return.

**`ten_year`**: `float`

Ten-year return.

**`max`**: `float`

Return from the beginning of the time series.

**`max_annualized`**: `float`

Annualized rate of return from inception.

**`volatility_one_year`**: `float`

Trailing one-year annualized volatility.

**`volatility_three_year`**: `float`

Trailing three-year annualized volatility.

**`volatility_five_year`**: `float`

Trailing five-year annualized volatility.

**`volume`**: `int`

The trading volume.

**`volume_avg_30`**: `float`

The one-month average daily volume.

**`volume_avg_90`**: `float`

The three-month average daily volume.

**`volume_avg_180`**: `float`

The six-month average daily volume.

**`beta`**: `float`

Beta compared to the S&P 500.

**`nav`**: `float`

Net asset value per share.

**`year_high`**: `float`

The 52-week high price.

**`year_low`**: `float`

The 52-week low price.

**`market_cap`**: `float`

The market capitalization.

**`shares_outstanding`**: `int`

The number of shares outstanding.

**`updated`**: `date`

The date of the data.

</TabItem>
</Tabs>



---

---
title: "search"
description: "Learn how to search for ETFs with parameters like query, provider, exchange  code, and more. Retrieve key details about ETFs, including market cap, industry,  sector, beta, current price, annual dividend, trading volume, exchange, and country.  Find actively trading ETFs and their symbol representation."
keywords:
- search for ETFs
- ETF search query
- ETF provider
- ETF exchange code
- ETF trading volume
- ETF market cap
- ETF sector
- ETF industry
- ETF beta
- ETF current price
- ETF annual dividend
- ETF exchange
- ETF country
- actively trading ETF
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search for ETFs.

An empty query returns the full list of ETFs from the provider.


Examples
--------

```python
from openbb import obb
# An empty query returns the full list of ETFs from the provider.
obb.etf.search(provider='fmp')
# The query will return results from text-based fields containing the term.
obb.etf.search(query='commercial real estate', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`exchange`**: `Literal['AMEX', 'NYSE', 'NASDAQ', 'ETF', 'TSX', 'EURONEXT']`

The exchange code the ETF trades on.

 • *Optional:* `True`

---

**`is_active`**: `Literal[True, False]`

Whether the ETF is actively trading.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`exchange`**: `Literal['xnas', 'arcx', 'bats', 'xnys', 'bvmf', 'xshg', 'xshe', 'xhkg', 'xbom', 'xnse', 'xidx', 'tase', 'xkrx', 'xkls', 'xmex', 'xses', 'roco', 'xtai', 'xbkk', 'xist']`

Target a specific exchange by providing the MIC code.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`div_freq`**: `Literal['monthly', 'annually', 'quarterly']`

The dividend payment frequency.

 • *Optional:* `True`

---

**`sort_by`**: `Literal['aum', 'return_1m', 'return_3m', 'return_6m', 'return_1y', 'return_3y', 'return_ytd', 'beta_1y', 'volume_avg_daily', 'management_fee', 'distribution_yield', 'pb_ratio', 'pe_ratio']`

The column to sort by.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'intrinio', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`market_cap`**: `float`

The market cap of the ETF.

**`sector`**: `str`

The sector of the ETF.

**`industry`**: `str`

The industry of the ETF.

**`beta`**: `float`

The beta of the ETF.

**`price`**: `float`

The current price of the ETF.

**`last_annual_dividend`**: `float`

The last annual dividend paid.

**`volume`**: `float`

The current trading volume of the ETF.

**`exchange`**: `str`

The exchange code the ETF trades on.

**`exchange_name`**: `str`

The full name of the exchange the ETF trades on.

**`country`**: `str`

The country the ETF is registered in.

**`actively_trading`**: `Literal[True, False]`

Whether the ETF is actively trading.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`exchange`**: `str`

The exchange MIC code.

**`figi_ticker`**: `str`

The OpenFIGI ticker.

**`ric`**: `str`

The Reuters Instrument Code.

**`isin`**: `str`

The International Securities Identification Number.

**`sedol`**: `str`

The Stock Exchange Daily Official list.

**`intrinio_id`**: `str`

The unique Intrinio ID for the security.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.(ETF)

**`name`**: `str`

Name of the ETF.

**`short_name`**: `str`

The short name of the ETF.

**`inception_date`**: `str`

The inception date of the ETF.

**`issuer`**: `str`

The issuer of the ETF.

**`investment_style`**: `str`

The investment style of the ETF.

**`esg`**: `bool`

Whether the ETF qualifies as an ESG fund.

**`currency`**: `str`

The currency of the ETF.

**`unit_price`**: `float`

The unit price of the ETF.

**`close`**: `float`

The closing price of the ETF.

**`prev_close`**: `float`

The previous closing price of the ETF.

**`return_1m`**: `float`

The one-month return of the ETF, as a normalized percent.

**`return_3m`**: `float`

The three-month return of the ETF, as a normalized percent.

**`return_6m`**: `float`

The six-month return of the ETF, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the ETF, as a normalized percent.

**`return_1y`**: `float`

The one-year return of the ETF, as a normalized percent.

**`beta_1y`**: `float`

The one-year beta of the ETF, as a normalized percent.

**`return_3y`**: `float`

The three-year return of the ETF, as a normalized percent.

**`beta_3y`**: `float`

The three-year beta of the ETF, as a normalized percent.

**`return_5y`**: `float`

The five-year return of the ETF, as a normalized percent.

**`beta_5y`**: `float`

The five-year beta of the ETF, as a normalized percent.

**`return_10y`**: `float`

The ten-year return of the ETF, as a normalized percent.

**`beta_10y`**: `float`

The ten-year beta of the ETF.

**`beta_15y`**: `float`

The fifteen-year beta of the ETF.

**`return_from_inception`**: `float`

The return from inception of the ETF, as a normalized percent.

**`avg_volume`**: `int`

The average daily volume of the ETF.

**`avg_volume_30d`**: `int`

The 30-day average volume of the ETF.

**`aum`**: `float`

The AUM of the ETF.

**`pe_ratio`**: `float`

The price-to-earnings ratio of the ETF.

**`pb_ratio`**: `float`

The price-to-book ratio of the ETF.

**`management_fee`**: `float`

The management fee of the ETF, as a normalized percent.

**`mer`**: `float`

The management expense ratio of the ETF, as a normalized percent.

**`distribution_yield`**: `float`

The distribution yield of the ETF, as a normalized percent.

**`dividend_frequency`**: `str`

The dividend payment frequency of the ETF.

</TabItem>
</Tabs>



---

---
title: "sectors"
description: "Learn about ETF sector weighting using OBB.etf.sectors API. Find information  about the parameters, returns, and data, including sectors, weights, and exposure  levels in normalized percentage points."
keywords:
- ETF Sector weighting
- OBB.etf.sectors
- parameters
- symbol
- provider
- returns
- results
- etf sectors
- warnings
- chart
- metadata
- data
- sector
- weight
- exposure
- normalized percentage points
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="etf/sectors - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

ETF Sector weighting.


Examples
--------

```python
from openbb import obb
obb.etf.sectors(symbol='SPY', provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for. (ETF)

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All ETF data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 4 hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EtfSectors]`

Serializable results.

---

**`provider`**: `Optional[Literal['fmp', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sector`**: `str`

Sector of exposure.

**`weight`**: `float`

Exposure of the ETF to the sector in normalized percentage points.

</TabItem>
</Tabs>



---

---
title: "bond_indices"
description: "Bond Indices"
keywords:
- fixedincome
- bond_indices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/bond_indices - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Bond Indices.


Examples
--------

```python
from openbb import obb
# The default state for FRED are series for constructing the US Corporate Bond Yield Curve.
obb.fixedincome.bond_indices(provider='fred')
# Multiple indices, from within the same 'category', can be requested.
obb.fixedincome.bond_indices(category=high_yield, index=us,europe,emerging, index_type='total_return', provider='fred')
# From FRED, there are three main categories, 'high_yield', 'us', and 'emerging_markets'. Emerging markets is a broad category.
obb.fixedincome.bond_indices(category=emerging_markets, index=corporate,private_sector,public_sector, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'oas']`

The type of series. OAS is the option-adjusted spread. Default is yield.

 • *Default:* `yield`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'oas']`

The type of series. OAS is the option-adjusted spread. Default is yield.

 • *Default:* `yield`

 • *Optional:* `True`

---

**`category`**: `Literal['high_yield', 'us', 'emerging_markets']`

The type of index category. Used in conjunction with 'index', default is 'us'.

 • *Default:* `us`

 • *Optional:* `True`

---

**`index`**: `Union[str, list[str]]`

<details>
<summary mdxType="summary">Description</summary>

The specific index to query. Used in conjunction with 'category' and 'index_type', default is 'yield_curve'.<br/>
        Possible values are:<br/>
            corporate<br/>
            seasoned_corporate<br/>
            liquid_corporate<br/>
            yield_curve<br/>
            crossover<br/>
            public_sector<br/>
            private_sector<br/>
            non_financial<br/>
            high_grade<br/>
            high_yield<br/>
            liquid_emea<br/>
            emea<br/>
            liquid_asia<br/>
            asia<br/>
            liquid_latam<br/>
            latam<br/>
            liquid_aaa<br/>
            liquid_bbb<br/>
            aaa<br/>
            aa<br/>
            a<br/>
            bbb<br/>
            bb<br/>
            b<br/>
            ccc Multiple items allowed for provider(s): fred.

</details>

<details>
<summary mdxType="summary">Choices</summary>

- `a`
- `aa`
- `aaa`
- `asia`
- `b`
- `bb`
- `bbb`
- `ccc`
- `corporate`
- `crossover`
- `emea`
- `high_grade`
- `high_yield`
- `latam`
- `liquid_aaa`
- `liquid_asia`
- `liquid_bbb`
- `liquid_corporate`
- `liquid_emea`
- `liquid_latam`
- `non_financial`
- `private_sector`
- `public_sector`
- `seasoned_corporate`
- `yield_curve`
</details>

 • *Default:* `yield_curve`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set, default is 'avg'.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Default:* `avg`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BondIndices]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Index values.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`value`**: `float`

Index values.

**`maturity`**: `str`

The maturity range of the bond index. Only applicable when 'index' is 'yield_curve'.

**`title`**: `str`

The title of the index.

</TabItem>
</Tabs>



---

---
title: "bond_prices"
description: "Corporate Bond Prices"
keywords:
- fixedincome
- corporate
- bond_prices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/bond_prices - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Corporate Bond Prices.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.bond_prices(provider='tmx')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`country`**: `str`

The country to get data. Matches partial name.

 • *Optional:* `True`

---

**`issuer_name`**: `str`

Name of the issuer.  Returns partial matches and is case insensitive.

 • *Optional:* `True`

---

**`isin`**: `Union[list, str]`

International Securities Identification Number(s) of the bond(s).

 • *Optional:* `True`

---

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

 • *Optional:* `True`

---

**`currency`**: `Union[list, str]`

Currency of the bond. Formatted as the 3-letter ISO 4217 code (e.g. GBP, EUR, USD).

 • *Optional:* `True`

---

**`coupon_min`**: `float`

Minimum coupon rate of the bond.

 • *Optional:* `True`

---

**`coupon_max`**: `float`

Maximum coupon rate of the bond.

 • *Optional:* `True`

---

**`issued_amount_min`**: `int`

Minimum issued amount of the bond.

 • *Optional:* `True`

---

**`issued_amount_max`**: `str`

Maximum issued amount of the bond.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Minimum maturity date of the bond.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Maximum maturity date of the bond.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`country`**: `str`

The country to get data. Matches partial name.

 • *Optional:* `True`

---

**`issuer_name`**: `str`

Name of the issuer.  Returns partial matches and is case insensitive.

 • *Optional:* `True`

---

**`isin`**: `Union[list, str]`

International Securities Identification Number(s) of the bond(s).

 • *Optional:* `True`

---

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

 • *Optional:* `True`

---

**`currency`**: `Union[list, str]`

Currency of the bond. Formatted as the 3-letter ISO 4217 code (e.g. GBP, EUR, USD).

 • *Optional:* `True`

---

**`coupon_min`**: `float`

Minimum coupon rate of the bond.

 • *Optional:* `True`

---

**`coupon_max`**: `float`

Maximum coupon rate of the bond.

 • *Optional:* `True`

---

**`issued_amount_min`**: `int`

Minimum issued amount of the bond.

 • *Optional:* `True`

---

**`issued_amount_max`**: `str`

Maximum issued amount of the bond.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Minimum maturity date of the bond.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Maximum maturity date of the bond.

 • *Optional:* `True`

---

**`issue_date_min`**: `date`

Filter by the minimum original issue date.

 • *Optional:* `True`

---

**`issue_date_max`**: `date`

Filter by the maximum original issue date.

 • *Optional:* `True`

---

**`last_traded_min`**: `date`

Filter by the minimum last trade date.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

All bond data is sourced from a single JSON file that is updated daily. The file is cached for one day to eliminate downloading more than once. Caching will significantly speed up subsequent queries. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[BondPrices]`

Serializable results.

---

**`provider`**: `Optional[Literal['tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`isin`**: `str`

International Securities Identification Number of the bond.

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

**`figi`**: `str`

FIGI of the bond.

**`cusip`**: `str`

CUSIP of the bond.

**`coupon_rate`**: `float`

Coupon rate of the bond.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`isin`**: `str`

International Securities Identification Number of the bond.

**`lei`**: `str`

Legal Entity Identifier of the issuing entity.

**`figi`**: `str`

FIGI of the bond.

**`cusip`**: `str`

CUSIP of the bond.

**`coupon_rate`**: `float`

Coupon rate of the bond.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate. Values are returned as a normalized percent.

**`price`**: `float`

The last price for the bond.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_traded_date`**: `date`

Last traded date of the bond.

**`maturity_date`**: `date`

Maturity date of the bond.

**`issue_date`**: `date`

Issue date of the bond. This is the date when the bond first accrues interest.

**`issuer_name`**: `str`

Name of the issuing entity.

</TabItem>
</Tabs>



---

---
title: "commercial_paper"
description: "Learn about commercial paper, a form of short-term promissory notes issued  primarily by corporations. Discover how it can help raise cash for current transactions  and serve as a lower-cost alternative to bank loans. Explore the parameters and  data returned by the commercial paper API endpoint."
keywords:
- commercial paper
- short-term promissory notes
- corporations
- raise cash
- lower-cost alternative
- start_date
- end_date
- maturity
- category
- grade
- provider
- results
- warnings
- chart
- metadata
- data
- date
- rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/commercial_paper - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Commercial Paper.

Commercial paper (CP) consists of short-term, promissory notes issued primarily by corporations.
Maturities range up to 270 days but average about 30 days.
Many companies use CP to raise cash needed for current transactions,
and many find it to be a lower-cost alternative to bank loans.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.commercial_paper(provider='fred')
obb.fixedincome.corporate.commercial_paper(category=all, maturity=15d, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[str, Literal['all', 'overnight', '7d', '15d', '30d', '60d', '90d']], list[Union[str, Literal['all', 'overnight', '7d', '15d', '30d', '60d', '90d']]]]`

A target maturity. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`category`**: `Union[Union[str, Literal['all', 'asset_backed', 'financial', 'nonfinancial', 'a2p2']], list[Union[str, Literal['all', 'asset_backed', 'financial', 'nonfinancial', 'a2p2']]]]`

The category of asset. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CommercialPaper]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

**`asset_type`**: `Literal['asset_backed', 'financial', 'nonfinancial', 'a2p2']`

The category of asset.

</TabItem>
</Tabs>



---

---
title: "hqm"
description: "Learn about the HQM yield curve and the high quality corporate bond market.  Get information on AAA, AA, and A bonds, market-weighted average quality, corporate  bond rates, maturity, yield curve type, provider, and data."
keywords:
- HQM yield curve
- high quality corporate bond market
- AAA bonds
- AA bonds
- A bonds
- market-weighted average quality
- corporate bond rates
- maturity
- yield curve type
- provider
- fred
- data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/hqm - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

High Quality Market Corporate Bond.

The HQM yield curve represents the high quality corporate bond market, i.e.,
corporate bonds rated AAA, AA, or A.  The HQM curve contains two regression terms.
These terms are adjustment factors that blend AAA, AA, and A bonds into a single HQM yield curve
that is the market-weighted average (MWA) quality of high quality bonds.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.hqm(provider='fred')
obb.fixedincome.corporate.hqm(yield_curve=par, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. Multiple items allowed for provider(s): fred.

 • *Optional:* `True`

---

**`yield_curve`**: `Literal['spot', 'par']`

The yield curve type.

 • *Default:* `spot`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[HighQualityMarketCorporateBond]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Interest rate.

**`maturity`**: `str`

Maturity.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Interest rate.

**`maturity`**: `str`

Maturity.

</TabItem>
</Tabs>



---

---
title: "ice_bofa"
description: "Learn about ICE BofA US Corporate Bond Indices, including the ICE BofA  US Corporate Index and parameters for the `obb.fixedincome.corporate.ice_bofa` function.  Find out how to retrieve historical data and explore the available categories and  areas."
keywords:
- ICE BofA US Corporate Bond Indices
- ICE BofA US Corporate Index
- US dollar denominated investment grade corporate debt
- Moody's
- S&P
- Fitch
- investment grade rating
- final maturity
- rebalance date
- fixed coupon schedule
- minimum amount outstanding
- US Corporate Master Index
- start date
- end date
- index type
- provider
- fred
- category
- area
- grade
- options
- returns
- results
- warnings
- chart
- metadata
- data
- rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/ice_bofa - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint is deprecated; use `/fixedincome/bond_indices` instead. Deprecated in OpenBB Platform V4.2 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

ICE BofA US Corporate Bond Indices.

The ICE BofA US Corporate Index tracks the performance of US dollar denominated investment grade corporate debt
publicly issued in the US domestic market. Qualifying securities must have an investment grade rating (based on an
average of Moody’s, S&P and Fitch), at least 18 months to final maturity at the time of issuance, at least one year
remaining term to final maturity as of the rebalance date, a fixed coupon schedule and a minimum amount
outstanding of $250 million. The ICE BofA US Corporate Index is a component of the US Corporate Master Index.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.ice_bofa(provider='fred')
obb.fixedincome.corporate.ice_bofa(index_type='yield_to_worst', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'spread']`

The type of series.

 • *Default:* `yield`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['yield', 'yield_to_worst', 'total_return', 'spread']`

The type of series.

 • *Default:* `yield`

 • *Optional:* `True`

---

**`category`**: `Literal['all', 'duration', 'eur', 'usd']`

The type of category.

 • *Default:* `all`

 • *Optional:* `True`

---

**`area`**: `Literal['asia', 'emea', 'eu', 'ex_g10', 'latin_america', 'us']`

The type of area.

 • *Default:* `us`

 • *Optional:* `True`

---

**`grade`**: `Literal['a', 'aa', 'aaa', 'b', 'bb', 'bbb', 'ccc', 'crossover', 'high_grade', 'high_yield', 'non_financial', 'non_sovereign', 'private_sector', 'public_sector']`

The type of grade.

 • *Default:* `non_sovereign`

 • *Optional:* `True`

---

**`options`**: `bool`

Whether to include options in the results.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[ICEBofA]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

ICE BofA US Corporate Bond Indices Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

ICE BofA US Corporate Bond Indices Rate.

</TabItem>
</Tabs>



---

# Corporate

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="spot rates" description="Spot Rates" url="/platform/reference/fixedincome/corporate/spot_rates" />
<ReferenceCard title="bond prices" description="Corporate Bond Prices" url="/platform/reference/fixedincome/corporate/bond_prices" />
<ReferenceCard title="commercial paper" description="Commercial Paper" url="/platform/reference/fixedincome/corporate/commercial_paper" />
<ReferenceCard title="moody" description="Moody Corporate Bond Index" url="/platform/reference/fixedincome/corporate/moody" />
<ReferenceCard title="hqm" description="High Quality Market Corporate Bond" url="/platform/reference/fixedincome/corporate/hqm" />
<ReferenceCard title="ice bofa" description="ICE BofA US Corporate Bond Indices" url="/platform/reference/fixedincome/corporate/ice_bofa" />
</ul>



---

---
title: "moody"
description: "Moody Corporate Bond Index"
keywords:
- fixedincome
- corporate
- moody
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/moody - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint is deprecated; use `/fixedincome/bond_indices` instead. Set `category` to `us` and `index` to `seasoned_corporate`. Deprecated in OpenBB Platform V4.2 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Moody Corporate Bond Index.

Moody's Aaa and Baa are investment bonds that acts as an index of
the performance of all bonds given an Aaa or Baa rating by Moody's Investors Service respectively.
These corporate bonds often are used in macroeconomics as an alternative to the federal ten-year
Treasury Bill as an indicator of the interest rate.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.moody(provider='fred')
obb.fixedincome.corporate.moody(index_type='baa', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['aaa', 'baa']`

The type of series.

 • *Default:* `aaa`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index_type`**: `Literal['aaa', 'baa']`

The type of series.

 • *Default:* `aaa`

 • *Optional:* `True`

---

**`spread`**: `Literal['treasury', 'fed_funds']`

The type of spread.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[MoodyCorporateBondIndex]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Moody Corporate Bond Index Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Moody Corporate Bond Index Rate.

</TabItem>
</Tabs>



---

---
title: "spot_rates"
description: "Learn about spot rates and how they are used to calculate the yield on  a bond. Understand the concept of discounting and its application in evaluating  pension liabilities. Explore the parameters needed to query and retrieve spot rate  data. Get the serializable results, provider information, warnings, chart, and metadata  associated with the query. Access the spot rate data including the date and rate."
keywords:
- spot rates
- yield
- bond
- zero coupon bond
- interest rate
- discounting
- pension liability
- maturities
- query
- results
- provider
- warnings
- chart
- metadata
- data
- date
- rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/corporate/spot_rates - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Spot Rates.

The spot rates for any maturity is the yield on a bond that provides a single payment at that maturity.
This is a zero coupon bond.
Because each spot rate pertains to a single cashflow, it is the relevant interest rate
concept for discounting a pension liability at the same maturity.


Examples
--------

```python
from openbb import obb
obb.fixedincome.corporate.spot_rates(provider='fred')
obb.fixedincome.corporate.spot_rates(maturity='10,20,30,50', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[float, str], list[Union[float, str]]]`

Maturities in years. Multiple items allowed for provider(s): fred.

 • *Default:* `10.0`

 • *Optional:* `True`

---

**`category`**: `Union[str, list[str]]`

Rate category. Options: spot_rate, par_yield. Multiple items allowed for provider(s): fred.

<details>
<summary mdxType="summary">Choices</summary>

- `par_yield`
- `spot_rate`
</details>

 • *Default:* `spot_rate`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[float, str], list[Union[float, str]]]`

Maturities in years. Multiple items allowed for provider(s): fred.

 • *Default:* `10.0`

 • *Optional:* `True`

---

**`category`**: `Union[str, list[str]]`

Rate category. Options: spot_rate, par_yield. Multiple items allowed for provider(s): fred.

<details>
<summary mdxType="summary">Choices</summary>

- `par_yield`
- `spot_rate`
</details>

 • *Default:* `spot_rate`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SpotRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Spot Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Spot Rate.

</TabItem>
</Tabs>



---

# Government

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="treasury prices" description="Government Treasury Prices by date" url="/platform/reference/fixedincome/government/treasury_prices" />
<ReferenceCard title="yield curve" description="Get yield curve data by country and date" url="/platform/reference/fixedincome/government/yield_curve" />
<ReferenceCard title="treasury rates" description="Government Treasury Rates" url="/platform/reference/fixedincome/government/treasury_rates" />
<ReferenceCard title="treasury auctions" description="Government Treasury Auctions" url="/platform/reference/fixedincome/government/treasury_auctions" />
<ReferenceCard title="tips yields" description="Get current Treasury inflation-protected securities yields" url="/platform/reference/fixedincome/government/tips_yields" />
</ul>



---

---
title: "tips_yields"
description: "Get current Treasury inflation-protected securities yields"
keywords:
- fixedincome
- government
- tips_yields
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/government/tips_yields - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get current Treasury inflation-protected securities yields.


Examples
--------

```python
from openbb import obb
obb.fixedincome.government.tips_yields(provider='fred')
obb.fixedincome.government.tips_yields(maturity=10, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['5', '10', '20', '30']`

The maturity of the security in years - 5, 10, 20, 30 - defaults to all. Note that the maturity is the tenor of the security, not the time to maturity.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert high frequency data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TipsYields]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`due`**: `date`

The due date (maturation date) of the security.

**`name`**: `str`

The name of the security.

**`value`**: `float`

The yield value.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`due`**: `date`

The due date (maturation date) of the security.

**`name`**: `str`

The name of the security.

**`value`**: `float`

The yield value.

</TabItem>
</Tabs>



---

---
title: "treasury_auctions"
description: "Government Treasury Auctions"
keywords:
- fixedincome
- government
- treasury_auctions
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/government/treasury_auctions - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Government Treasury Auctions.


Examples
--------

```python
from openbb import obb
obb.fixedincome.government.treasury_auctions(provider='government_us')
obb.fixedincome.government.treasury_auctions(security_type='Bill', start_date='2022-01-01', end_date='2023-01-01', provider='government_us')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`security_type`**: `Literal['bill', 'note', 'bond', 'cmb', 'tips', 'frn']`

Used to only return securities of a particular type.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter securities by CUSIP.

 • *Optional:* `True`

---

**`page_size`**: `int`

Maximum number of results to return; you must also include pagenum when using pagesize.

 • *Optional:* `True`

---

**`page_num`**: `int`

The first page number to display results for; used in combination with page size.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. The default is 90 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. The default is today.

 • *Optional:* `True`

</TabItem>

<TabItem value='government_us' label='government_us'>

**`security_type`**: `Literal['bill', 'note', 'bond', 'cmb', 'tips', 'frn']`

Used to only return securities of a particular type.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter securities by CUSIP.

 • *Optional:* `True`

---

**`page_size`**: `int`

Maximum number of results to return; you must also include pagenum when using pagesize.

 • *Optional:* `True`

---

**`page_num`**: `int`

The first page number to display results for; used in combination with page size.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. The default is 90 days ago.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format. The default is today.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TreasuryAuctions]`

Serializable results.

---

**`provider`**: `Optional[Literal['government_us']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`cusip`**: `str`

CUSIP of the Security.

**`issue_date`**: `date`

The issue date of the security.

**`security_type`**: `Literal['Bill', 'Note', 'Bond', 'CMB', 'TIPS', 'FRN']`

The type of security.

**`security_term`**: `str`

The term of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`interest_rate`**: `float`

The interest rate of the security.

**`cpi_on_issue_date`**: `float`

Reference CPI rate on the issue date of the security.

**`cpi_on_dated_date`**: `float`

Reference CPI rate on the dated date of the security.

**`announcement_date`**: `date`

The announcement date of the security.

**`auction_date`**: `date`

The auction date of the security.

**`auction_date_year`**: `int`

The auction date year of the security.

**`dated_date`**: `date`

The dated date of the security.

**`first_payment_date`**: `date`

The first payment date of the security.

**`accrued_interest_per_100`**: `float`

Accrued interest per $100.

**`accrued_interest_per_1000`**: `float`

Accrued interest per $1000.

**`adjusted_accrued_interest_per_100`**: `float`

Adjusted accrued interest per $100.

**`adjusted_accrued_interest_per_1000`**: `float`

Adjusted accrued interest per $1000.

**`adjusted_price`**: `float`

Adjusted price.

**`allocation_percentage`**: `float`

Allocation percentage, as normalized percentage points.

**`allocation_percentage_decimals`**: `float`

The number of decimals in the Allocation percentage.

**`announced_cusip`**: `str`

The announced CUSIP of the security.

**`auction_format`**: `str`

The auction format of the security.

**`avg_median_discount_rate`**: `float`

The average median discount rate of the security.

**`avg_median_investment_rate`**: `float`

The average median investment rate of the security.

**`avg_median_price`**: `float`

The average median price paid for the security.

**`avg_median_discount_margin`**: `float`

The average median discount margin of the security.

**`avg_median_yield`**: `float`

The average median yield of the security.

**`back_dated`**: `Literal['Yes', 'No']`

Whether the security is back dated.

**`back_dated_date`**: `date`

The back dated date of the security.

**`bid_to_cover_ratio`**: `float`

The bid to cover ratio of the security.

**`call_date`**: `date`

The call date of the security.

**`callable`**: `Literal['Yes', 'No']`

Whether the security is callable.

**`called_date`**: `date`

The called date of the security.

**`cash_management_bill`**: `Literal['Yes', 'No']`

Whether the security is a cash management bill.

**`closing_time_competitive`**: `str`

The closing time for competitive bids on the security.

**`closing_time_non_competitive`**: `str`

The closing time for non-competitive bids on the security.

**`competitive_accepted`**: `int`

The accepted value for competitive bids on the security.

**`competitive_accepted_decimals`**: `int`

The number of decimals in the Competitive Accepted.

**`competitive_tendered`**: `int`

The tendered value for competitive bids on the security.

**`competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether competitive tenders are accepted on the security.

**`corp_us_cusip`**: `str`

The CUSIP of the security.

**`cpi_base_reference_period`**: `str`

The CPI base reference period of the security.

**`currently_outstanding`**: `int`

The currently outstanding value on the security.

**`direct_bidder_accepted`**: `int`

The accepted value from direct bidders on the security.

**`direct_bidder_tendered`**: `int`

The tendered value from direct bidders on the security.

**`est_amount_of_publicly_held_maturing_security`**: `int`

The estimated amount of publicly held maturing securities on the security.

**`fima_included`**: `Literal['Yes', 'No']`

Whether the security is included in the FIMA (Foreign and International Money Authorities).

**`fima_non_competitive_accepted`**: `int`

The non-competitive accepted value on the security from FIMAs.

**`fima_non_competitive_tendered`**: `int`

The non-competitive tendered value on the security from FIMAs.

**`first_interest_period`**: `str`

The first interest period of the security.

**`first_interest_payment_date`**: `date`

The first interest payment date of the security.

**`floating_rate`**: `Literal['Yes', 'No']`

Whether the security is a floating rate.

**`frn_index_determination_date`**: `date`

The FRN index determination date of the security.

**`frn_index_determination_rate`**: `float`

The FRN index determination rate of the security.

**`high_discount_rate`**: `float`

The high discount rate of the security.

**`high_investment_rate`**: `float`

The high investment rate of the security.

**`high_price`**: `float`

The high price of the security at auction.

**`high_discount_margin`**: `float`

The high discount margin of the security.

**`high_yield`**: `float`

The high yield of the security at auction.

**`index_ratio_on_issue_date`**: `float`

The index ratio on the issue date of the security.

**`indirect_bidder_accepted`**: `int`

The accepted value from indirect bidders on the security.

**`indirect_bidder_tendered`**: `int`

The tendered value from indirect bidders on the security.

**`interest_payment_frequency`**: `str`

The interest payment frequency of the security.

**`low_discount_rate`**: `float`

The low discount rate of the security.

**`low_investment_rate`**: `float`

The low investment rate of the security.

**`low_price`**: `float`

The low price of the security at auction.

**`low_discount_margin`**: `float`

The low discount margin of the security.

**`low_yield`**: `float`

The low yield of the security at auction.

**`maturing_date`**: `date`

The maturing date of the security.

**`max_competitive_award`**: `int`

The maximum competitive award at auction.

**`max_non_competitive_award`**: `int`

The maximum non-competitive award at auction.

**`max_single_bid`**: `int`

The maximum single bid at auction.

**`min_bid_amount`**: `int`

The minimum bid amount at auction.

**`min_strip_amount`**: `int`

The minimum strip amount at auction.

**`min_to_issue`**: `int`

The minimum to issue at auction.

**`multiples_to_bid`**: `int`

The multiples to bid at auction.

**`multiples_to_issue`**: `int`

The multiples to issue at auction.

**`nlp_exclusion_amount`**: `int`

The NLP exclusion amount at auction.

**`nlp_reporting_threshold`**: `int`

The NLP reporting threshold at auction.

**`non_competitive_accepted`**: `int`

The accepted value from non-competitive bidders on the security.

**`non_competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the auction accepted non-competitive tenders.

**`offering_amount`**: `int`

The offering amount at auction.

**`original_cusip`**: `str`

The original CUSIP of the security.

**`original_dated_date`**: `date`

The original dated date of the security.

**`original_issue_date`**: `date`

The original issue date of the security.

**`original_security_term`**: `str`

The original term of the security.

**`pdf_announcement`**: `str`

The PDF filename for the announcement of the security.

**`pdf_competitive_results`**: `str`

The PDF filename for the competitive results of the security.

**`pdf_non_competitive_results`**: `str`

The PDF filename for the non-competitive results of the security.

**`pdf_special_announcement`**: `str`

The PDF filename for the special announcements.

**`price_per_100`**: `float`

The price per 100 of the security.

**`primary_dealer_accepted`**: `int`

The primary dealer accepted value on the security.

**`primary_dealer_tendered`**: `int`

The primary dealer tendered value on the security.

**`reopening`**: `Literal['Yes', 'No']`

Whether or not the auction was reopened.

**`security_term_day_month`**: `str`

The security term in days or months.

**`security_term_week_year`**: `str`

The security term in weeks or years.

**`series`**: `str`

The series name of the security.

**`soma_accepted`**: `int`

The SOMA accepted value on the security.

**`soma_holdings`**: `int`

The SOMA holdings on the security.

**`soma_included`**: `Literal['Yes', 'No']`

Whether or not the SOMA (System Open Market Account) was included on the security.

**`soma_tendered`**: `int`

The SOMA tendered value on the security.

**`spread`**: `float`

The spread on the security.

**`standard_payment_per_1000`**: `float`

The standard payment per 1000 of the security.

**`strippable`**: `Literal['Yes', 'No']`

Whether or not the security is strippable.

**`term`**: `str`

The term of the security.

**`tiin_conversion_factor_per_1000`**: `float`

The TIIN conversion factor per 1000 of the security.

**`tips`**: `Literal['Yes', 'No']`

Whether or not the security is TIPS.

**`total_accepted`**: `int`

The total accepted value at auction.

**`total_tendered`**: `int`

The total tendered value at auction.

**`treasury_retail_accepted`**: `int`

The accepted value on the security from retail.

**`treasury_retail_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the tender offers from retail are accepted

**`type`**: `str`

The type of issuance.  This might be different than the security type.

**`unadjusted_accrued_interest_per_1000`**: `float`

The unadjusted accrued interest per 1000 of the security.

**`unadjusted_price`**: `float`

The unadjusted price of the security.

**`updated_timestamp`**: `datetime`

The updated timestamp of the security.

**`xml_announcement`**: `str`

The XML filename for the announcement of the security.

**`xml_competitive_results`**: `str`

The XML filename for the competitive results of the security.

**`xml_special_announcement`**: `str`

The XML filename for special announcements.

**`tint_cusip1`**: `str`

Tint CUSIP 1.

**`tint_cusip2`**: `str`

Tint CUSIP 2.

</TabItem>

<TabItem value='government_us' label='government_us'>

**`cusip`**: `str`

CUSIP of the Security.

**`issue_date`**: `date`

The issue date of the security.

**`security_type`**: `Literal['Bill', 'Note', 'Bond', 'CMB', 'TIPS', 'FRN']`

The type of security.

**`security_term`**: `str`

The term of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`interest_rate`**: `float`

The interest rate of the security.

**`cpi_on_issue_date`**: `float`

Reference CPI rate on the issue date of the security.

**`cpi_on_dated_date`**: `float`

Reference CPI rate on the dated date of the security.

**`announcement_date`**: `date`

The announcement date of the security.

**`auction_date`**: `date`

The auction date of the security.

**`auction_date_year`**: `int`

The auction date year of the security.

**`dated_date`**: `date`

The dated date of the security.

**`first_payment_date`**: `date`

The first payment date of the security.

**`accrued_interest_per_100`**: `float`

Accrued interest per $100.

**`accrued_interest_per_1000`**: `float`

Accrued interest per $1000.

**`adjusted_accrued_interest_per_100`**: `float`

Adjusted accrued interest per $100.

**`adjusted_accrued_interest_per_1000`**: `float`

Adjusted accrued interest per $1000.

**`adjusted_price`**: `float`

Adjusted price.

**`allocation_percentage`**: `float`

Allocation percentage, as normalized percentage points.

**`allocation_percentage_decimals`**: `float`

The number of decimals in the Allocation percentage.

**`announced_cusip`**: `str`

The announced CUSIP of the security.

**`auction_format`**: `str`

The auction format of the security.

**`avg_median_discount_rate`**: `float`

The average median discount rate of the security.

**`avg_median_investment_rate`**: `float`

The average median investment rate of the security.

**`avg_median_price`**: `float`

The average median price paid for the security.

**`avg_median_discount_margin`**: `float`

The average median discount margin of the security.

**`avg_median_yield`**: `float`

The average median yield of the security.

**`back_dated`**: `Literal['Yes', 'No']`

Whether the security is back dated.

**`back_dated_date`**: `date`

The back dated date of the security.

**`bid_to_cover_ratio`**: `float`

The bid to cover ratio of the security.

**`call_date`**: `date`

The call date of the security.

**`callable`**: `Literal['Yes', 'No']`

Whether the security is callable.

**`called_date`**: `date`

The called date of the security.

**`cash_management_bill`**: `Literal['Yes', 'No']`

Whether the security is a cash management bill.

**`closing_time_competitive`**: `str`

The closing time for competitive bids on the security.

**`closing_time_non_competitive`**: `str`

The closing time for non-competitive bids on the security.

**`competitive_accepted`**: `int`

The accepted value for competitive bids on the security.

**`competitive_accepted_decimals`**: `int`

The number of decimals in the Competitive Accepted.

**`competitive_tendered`**: `int`

The tendered value for competitive bids on the security.

**`competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether competitive tenders are accepted on the security.

**`corp_us_cusip`**: `str`

The CUSIP of the security.

**`cpi_base_reference_period`**: `str`

The CPI base reference period of the security.

**`currently_outstanding`**: `int`

The currently outstanding value on the security.

**`direct_bidder_accepted`**: `int`

The accepted value from direct bidders on the security.

**`direct_bidder_tendered`**: `int`

The tendered value from direct bidders on the security.

**`est_amount_of_publicly_held_maturing_security`**: `int`

The estimated amount of publicly held maturing securities on the security.

**`fima_included`**: `Literal['Yes', 'No']`

Whether the security is included in the FIMA (Foreign and International Money Authorities).

**`fima_non_competitive_accepted`**: `int`

The non-competitive accepted value on the security from FIMAs.

**`fima_non_competitive_tendered`**: `int`

The non-competitive tendered value on the security from FIMAs.

**`first_interest_period`**: `str`

The first interest period of the security.

**`first_interest_payment_date`**: `date`

The first interest payment date of the security.

**`floating_rate`**: `Literal['Yes', 'No']`

Whether the security is a floating rate.

**`frn_index_determination_date`**: `date`

The FRN index determination date of the security.

**`frn_index_determination_rate`**: `float`

The FRN index determination rate of the security.

**`high_discount_rate`**: `float`

The high discount rate of the security.

**`high_investment_rate`**: `float`

The high investment rate of the security.

**`high_price`**: `float`

The high price of the security at auction.

**`high_discount_margin`**: `float`

The high discount margin of the security.

**`high_yield`**: `float`

The high yield of the security at auction.

**`index_ratio_on_issue_date`**: `float`

The index ratio on the issue date of the security.

**`indirect_bidder_accepted`**: `int`

The accepted value from indirect bidders on the security.

**`indirect_bidder_tendered`**: `int`

The tendered value from indirect bidders on the security.

**`interest_payment_frequency`**: `str`

The interest payment frequency of the security.

**`low_discount_rate`**: `float`

The low discount rate of the security.

**`low_investment_rate`**: `float`

The low investment rate of the security.

**`low_price`**: `float`

The low price of the security at auction.

**`low_discount_margin`**: `float`

The low discount margin of the security.

**`low_yield`**: `float`

The low yield of the security at auction.

**`maturing_date`**: `date`

The maturing date of the security.

**`max_competitive_award`**: `int`

The maximum competitive award at auction.

**`max_non_competitive_award`**: `int`

The maximum non-competitive award at auction.

**`max_single_bid`**: `int`

The maximum single bid at auction.

**`min_bid_amount`**: `int`

The minimum bid amount at auction.

**`min_strip_amount`**: `int`

The minimum strip amount at auction.

**`min_to_issue`**: `int`

The minimum to issue at auction.

**`multiples_to_bid`**: `int`

The multiples to bid at auction.

**`multiples_to_issue`**: `int`

The multiples to issue at auction.

**`nlp_exclusion_amount`**: `int`

The NLP exclusion amount at auction.

**`nlp_reporting_threshold`**: `int`

The NLP reporting threshold at auction.

**`non_competitive_accepted`**: `int`

The accepted value from non-competitive bidders on the security.

**`non_competitive_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the auction accepted non-competitive tenders.

**`offering_amount`**: `int`

The offering amount at auction.

**`original_cusip`**: `str`

The original CUSIP of the security.

**`original_dated_date`**: `date`

The original dated date of the security.

**`original_issue_date`**: `date`

The original issue date of the security.

**`original_security_term`**: `str`

The original term of the security.

**`pdf_announcement`**: `str`

The PDF filename for the announcement of the security.

**`pdf_competitive_results`**: `str`

The PDF filename for the competitive results of the security.

**`pdf_non_competitive_results`**: `str`

The PDF filename for the non-competitive results of the security.

**`pdf_special_announcement`**: `str`

The PDF filename for the special announcements.

**`price_per_100`**: `float`

The price per 100 of the security.

**`primary_dealer_accepted`**: `int`

The primary dealer accepted value on the security.

**`primary_dealer_tendered`**: `int`

The primary dealer tendered value on the security.

**`reopening`**: `Literal['Yes', 'No']`

Whether or not the auction was reopened.

**`security_term_day_month`**: `str`

The security term in days or months.

**`security_term_week_year`**: `str`

The security term in weeks or years.

**`series`**: `str`

The series name of the security.

**`soma_accepted`**: `int`

The SOMA accepted value on the security.

**`soma_holdings`**: `int`

The SOMA holdings on the security.

**`soma_included`**: `Literal['Yes', 'No']`

Whether or not the SOMA (System Open Market Account) was included on the security.

**`soma_tendered`**: `int`

The SOMA tendered value on the security.

**`spread`**: `float`

The spread on the security.

**`standard_payment_per_1000`**: `float`

The standard payment per 1000 of the security.

**`strippable`**: `Literal['Yes', 'No']`

Whether or not the security is strippable.

**`term`**: `str`

The term of the security.

**`tiin_conversion_factor_per_1000`**: `float`

The TIIN conversion factor per 1000 of the security.

**`tips`**: `Literal['Yes', 'No']`

Whether or not the security is TIPS.

**`total_accepted`**: `int`

The total accepted value at auction.

**`total_tendered`**: `int`

The total tendered value at auction.

**`treasury_retail_accepted`**: `int`

The accepted value on the security from retail.

**`treasury_retail_tenders_accepted`**: `Literal['Yes', 'No']`

Whether or not the tender offers from retail are accepted

**`type`**: `str`

The type of issuance.  This might be different than the security type.

**`unadjusted_accrued_interest_per_1000`**: `float`

The unadjusted accrued interest per 1000 of the security.

**`unadjusted_price`**: `float`

The unadjusted price of the security.

**`updated_timestamp`**: `datetime`

The updated timestamp of the security.

**`xml_announcement`**: `str`

The XML filename for the announcement of the security.

**`xml_competitive_results`**: `str`

The XML filename for the competitive results of the security.

**`xml_special_announcement`**: `str`

The XML filename for special announcements.

**`tint_cusip1`**: `str`

Tint CUSIP 1.

**`tint_cusip2`**: `str`

Tint CUSIP 2.

</TabItem>
</Tabs>



---

---
title: "treasury_prices"
description: "Government Treasury Prices by date"
keywords:
- fixedincome
- government
- treasury_prices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/government/treasury_prices - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Government Treasury Prices by date.


Examples
--------

```python
from openbb import obb
obb.fixedincome.government.treasury_prices(provider='government_us')
obb.fixedincome.government.treasury_prices(date='2019-02-05', provider='government_us')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

</TabItem>

<TabItem value='government_us' label='government_us'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

---

**`cusip`**: `str`

Filter by CUSIP.

 • *Optional:* `True`

---

**`security_type`**: `Literal['bill', 'note', 'bond', 'tips', 'frn']`

Filter by security type.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[date, str]`

A specific date to get data for. Defaults to the last business day.

 • *Optional:* `True`

---

**`govt_type`**: `Literal['federal', 'provincial', 'municipal']`

The level of government issuer.

 • *Default:* `federal`

 • *Optional:* `True`

---

**`issue_date_min`**: `date`

Filter by the minimum original issue date.

 • *Optional:* `True`

---

**`issue_date_max`**: `date`

Filter by the maximum original issue date.

 • *Optional:* `True`

---

**`last_traded_min`**: `date`

Filter by the minimum last trade date.

 • *Optional:* `True`

---

**`maturity_date_min`**: `date`

Filter by the minimum maturity date.

 • *Optional:* `True`

---

**`maturity_date_max`**: `date`

Filter by the maximum maturity date.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

All bond data is sourced from a single JSON file that is updated daily. The file is cached for one day to eliminate downloading more than once. Caching will significantly speed up subsequent queries. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TreasuryPrices]`

Serializable results.

---

**`provider`**: `Optional[Literal['government_us', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>

<TabItem value='government_us' label='government_us'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`issuer_name`**: `str`

Name of the issuing entity.

**`cusip`**: `str`

CUSIP of the security.

**`isin`**: `str`

ISIN of the security.

**`security_type`**: `str`

The type of Treasury security - i.e., Bill, Note, Bond, TIPS, FRN.

**`issue_date`**: `date`

The original issue date of the security.

**`maturity_date`**: `date`

The maturity date of the security.

**`call_date`**: `date`

The call date of the security.

**`bid`**: `float`

The bid price of the security.

**`offer`**: `float`

The offer price of the security.

**`eod_price`**: `float`

The end-of-day price of the security.

**`last_traded_date`**: `date`

The last trade date of the security.

**`total_trades`**: `int`

Total number of trades on the last traded date.

**`last_price`**: `float`

The last price of the security.

**`highest_price`**: `float`

The highest price for the bond on the last traded date.

**`lowest_price`**: `float`

The lowest price for the bond on the last traded date.

**`rate`**: `float`

The annualized interest rate or coupon of the security.

**`ytm`**: `float`

Yield to maturity (YTM) is the rate of return anticipated on a bond if it is held until the maturity date. It takes into account the current market price, par value, coupon rate and time to maturity. It is assumed that all coupons are reinvested at the same rate.

</TabItem>
</Tabs>



---

---
title: "treasury_rates"
description: "Government Treasury Rates"
keywords:
- fixedincome
- government
- treasury_rates
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/government/treasury_rates - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Government Treasury Rates.


Examples
--------

```python
from openbb import obb
obb.fixedincome.government.treasury_rates(provider='fmp')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TreasuryRates]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve', 'fmp']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`week_4`**: `float`

4 week Treasury bills rate (secondary market).

**`month_1`**: `float`

1 month Treasury rate.

**`month_2`**: `float`

2 month Treasury rate.

**`month_3`**: `float`

3 month Treasury rate.

**`month_6`**: `float`

6 month Treasury rate.

**`year_1`**: `float`

1 year Treasury rate.

**`year_2`**: `float`

2 year Treasury rate.

**`year_3`**: `float`

3 year Treasury rate.

**`year_5`**: `float`

5 year Treasury rate.

**`year_7`**: `float`

7 year Treasury rate.

**`year_10`**: `float`

10 year Treasury rate.

**`year_20`**: `float`

20 year Treasury rate.

**`year_30`**: `float`

30 year Treasury rate.

</TabItem>
</Tabs>



---

---
title: "yield_curve"
description: "Get yield curve data by country and date"
keywords:
- fixedincome
- government
- yield_curve
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/government/yield_curve - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get yield curve data by country and date.


Examples
--------

```python
from openbb import obb
obb.fixedincome.government.yield_curve(provider='federal_reserve')
obb.fixedincome.government.yield_curve(date='2023-05-01,2024-05-01', provider='fmp')
obb.fixedincome.government.yield_curve(date='2023-05-01', country=united_kingdom, provider='econdb')
obb.fixedincome.government.yield_curve(provider='ecb', yield_curve_type=par_yield)
obb.fixedincome.government.yield_curve(provider='fred', yield_curve_type=real, date='2023-05-01,2024-05-01')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`rating`**: `Literal['aaa', 'all_ratings']`

The rating type, either 'aaa' or 'all_ratings'.

 • *Default:* `aaa`

 • *Optional:* `True`

---

**`yield_curve_type`**: `Literal['spot_rate', 'instantaneous_forward', 'par_yield']`

The yield curve type.

 • *Default:* `spot_rate`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If true, cache the request for four hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`country`**: `Union[str, list[str]]`

The country to get data. New Zealand, Mexico, Singapore, and Thailand have only monthly data. The nearest date to the requested one will be used. Multiple items allowed for provider(s): econdb.

<details>
<summary mdxType="summary">Choices</summary>

- `australia`
- `canada`
- `china`
- `ecb_instantaneous_forward`
- `ecb_par_yield`
- `ecb_spot_rate`
- `hong_kong`
- `india`
- `japan`
- `mexico`
- `new_zealand`
- `russia`
- `saudi_arabia`
- `singapore`
- `south_africa`
- `south_korea`
- `taiwan`
- `thailand`
- `united_kingdom`
- `united_states`
</details>

 • *Default:* `united_states`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

If true, cache the request for four hours.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[Union[date, str], list[Union[date, str]]]`

A specific date to get data for. By default is the current data. Multiple items allowed for provider(s): ecb, econdb, federal_reserve, fmp, fred.

 • *Optional:* `True`

---

**`yield_curve_type`**: `Literal['nominal', 'real', 'breakeven', 'treasury_minus_fed_funds', 'corporate_spot', 'corporate_par']`

Yield curve type. Nominal and Real Rates are available daily, others are monthly. The closest date to the requested date will be returned.

 • *Default:* `nominal`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[YieldCurve]`

Serializable results.

---

**`provider`**: `Optional[Literal['ecb', 'econdb', 'federal_reserve', 'fmp', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='ecb' label='ecb'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='econdb' label='econdb'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`maturity`**: `str`

Maturity length of the security.

</TabItem>
</Tabs>



---

# Fixedincome

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Corporate" description="spot_rates, bond_prices, commercial_paper, moody, hqm, ice_bofa" url="/platform/reference/fixedincome/corporate" />
<ReferenceCard title="Government" description="treasury_prices, yield_curve, treasury_rates, treasury_auctions, tips_yields" url="/platform/reference/fixedincome/government" />
<ReferenceCard title="Rate" description="effr_forecast, ecb, estr, iorb, overnight_bank_funding, effr, ameribor, sonia,..." url="/platform/reference/fixedincome/rate" />
<ReferenceCard title="Spreads" description="tcm, treasury_effr, tcm_effr" url="/platform/reference/fixedincome/spreads" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="bond indices" description="Bond Indices" url="/platform/reference/fixedincome/bond_indices" />
<ReferenceCard title="mortgage indices" description="Mortgage Indices" url="/platform/reference/fixedincome/mortgage_indices" />
<ReferenceCard title="sofr" description="Secured Overnight Financing Rate" url="/platform/reference/fixedincome/sofr" />
</ul>



---

---
title: "mortgage_indices"
description: "Mortgage Indices"
keywords:
- fixedincome
- mortgage_indices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/mortgage_indices - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Mortgage Indices.


Examples
--------

```python
from openbb import obb
# The default state for FRED are the primary mortgage indices from Optimal Blue.
obb.fixedincome.mortgage_indices(provider='fred')
# Multiple indices can be requested.
obb.fixedincome.mortgage_indices(index=jumbo_30y,conforming_30y,conforming_15y, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`index`**: `Union[Union[Literal['primary', 'ltv_lte_80', 'ltv_gt_80', 'conforming_30y', 'conforming_30y_na', 'jumbo_30y', 'fha_30y', 'va_30y', 'usda_30y', 'conforming_15y', 'ltv_lte80_fico_ge740', 'ltv_lte80_fico_a720b739', 'ltv_lte80_fico_a700b719', 'ltv_lte80_fico_a680b699', 'ltv_lte80_fico_lt680', 'ltv_gt80_fico_ge740', 'ltv_gt80_fico_a720b739', 'ltv_gt80_fico_a700b719', 'ltv_gt80_fico_a680b699', 'ltv_gt80_fico_lt680'], str], list[Union[Literal['primary', 'ltv_lte_80', 'ltv_gt_80', 'conforming_30y', 'conforming_30y_na', 'jumbo_30y', 'fha_30y', 'va_30y', 'usda_30y', 'conforming_15y', 'ltv_lte80_fico_ge740', 'ltv_lte80_fico_a720b739', 'ltv_lte80_fico_a700b719', 'ltv_lte80_fico_a680b699', 'ltv_lte80_fico_lt680', 'ltv_gt80_fico_ge740', 'ltv_gt80_fico_a720b739', 'ltv_gt80_fico_a700b719', 'ltv_gt80_fico_a680b699', 'ltv_gt80_fico_lt680'], str]]]`

The specific index, or index group, to query. Default is the 'primary' group. Multiple items allowed for provider(s): fred.

 • *Default:* `primary`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'd', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            None = No change<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            d = Daily<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        This parameter has no affect if the frequency parameter is not set, default is 'avg'.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Default:* `avg`

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[MortgageIndices]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`rate`**: `float`

Mortgage rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`rate`**: `float`

Mortgage rate.

</TabItem>
</Tabs>



---

---
title: "ameribor"
description: "Ameribor"
keywords:
- fixedincome
- rate
- ameribor
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/ameribor - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

AMERIBOR.

AMERIBOR (short for the American interbank offered rate) is a benchmark interest rate that reflects the true cost of
short-term interbank borrowing. This rate is based on transactions in overnight unsecured loans conducted on the
American Financial Exchange (AFX).


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.ameribor(provider='fred')
# The change from one year ago is applied with the transform parameter.
obb.fixedincome.rate.ameribor(maturity=all, transform=pc1, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Union[Union[Literal['all', 'overnight', 'average_30d', 'average_90d', 'term_30d', 'term_90d'], str], list[Union[Literal['all', 'overnight', 'average_30d', 'average_90d', 'term_30d', 'term_90d'], str]]]`

Period of AMERIBOR rate. Multiple items allowed for provider(s): fred.

 • *Default:* `all`

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Ameribor]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`maturity`**: `str`

Maturity length of the item.

**`rate`**: `float`

Interest rate.

**`title`**: `str`

Title of the series.

</TabItem>
</Tabs>



---

---
title: "dpcredit"
description: "Discount Window Primary Credit Rate"
keywords:
- fixedincome
- rate
- dpcredit
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/dpcredit - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Discount Window Primary Credit Rate.

A bank rate is the interest rate a nation's central bank charges to its domestic banks to borrow money.
The rates central banks charge are set to stabilize the economy.
In the United States, the Federal Reserve System's Board of Governors set the bank rate,
also known as the discount rate.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.dpcredit(provider='fred')
obb.fixedincome.rate.dpcredit(start_date='2023-02-01', end_date='2023-05-01', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`parameter`**: `Literal['daily_excl_weekend', 'monthly', 'weekly', 'daily', 'annual']`

FRED series ID of DWPCR data.

 • *Default:* `daily_excl_weekend`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[DiscountWindowPrimaryCreditRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Discount Window Primary Credit Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Discount Window Primary Credit Rate.

</TabItem>
</Tabs>



---

---
title: "ecb"
description: "Learn about the key interest rates set by the European Central Bank (ECB)  for the Euro area. Explore the Python API for accessing European Central Bank interest  rate data and understand the available parameters to customize your queries."
keywords:
- European Central Bank interest rates
- ECB key interest rates
- ECB refinancing operations
- deposit facility rate
- marginal lending facility rate
- Python OBB fixed income API
- start date parameter
- end date parameter
- interest rate type parameter
- provider parameter
- European Central Bank Interest Rates data
- European Central Bank Interest Rates API
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/ecb - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

European Central Bank Interest Rates.

The Governing Council of the ECB sets the key interest rates for the euro area:

- The interest rate on the main refinancing operations (MRO), which provide
the bulk of liquidity to the banking system.
- The rate on the deposit facility, which banks may use to make overnight deposits with the Eurosystem.
- The rate on the marginal lending facility, which offers overnight credit to banks from the Eurosystem.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.ecb(provider='fred')
obb.fixedincome.rate.ecb(interest_rate_type='refinancing', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interest_rate_type`**: `Literal['deposit', 'lending', 'refinancing']`

The type of interest rate.

 • *Default:* `lending`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interest_rate_type`**: `Literal['deposit', 'lending', 'refinancing']`

The type of interest rate.

 • *Default:* `lending`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EuropeanCentralBankInterestRates]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

European Central Bank Interest Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

European Central Bank Interest Rate.

</TabItem>
</Tabs>



---

---
title: "effr"
description: "Fed Funds Rate"
keywords:
- fixedincome
- rate
- effr
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/effr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Fed Funds Rate.

Get Effective Federal Funds Rate data. A bank rate is the interest rate a nation's central bank charges to its
domestic banks to borrow money. The rates central banks charge are set to stabilize the economy.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.effr(provider='fred')
obb.fixedincome.rate.effr(effr_only=True, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

---

**`effr_only`**: `bool`

Return data without quantiles, target ranges, and volume.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[FederalFundsRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`intraday_low`**: `float`

Intraday low. This field is only present for data before 2016.

**`intraday_high`**: `float`

Intraday high. This field is only present for data before 2016.

**`standard_deviation`**: `float`

Standard deviation. This field is only present for data before 2016.

**`revision_indicator`**: `str`

Indicates a revision of the data for that date.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`target_range_upper`**: `float`

Upper bound of the target range.

**`target_range_lower`**: `float`

Lower bound of the target range.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>
</Tabs>



---

---
title: "effr_forecast"
description: "Fed Funds Rate Projections"
keywords:
- fixedincome
- rate
- effr_forecast
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/effr_forecast - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Fed Funds Rate Projections.

The projections for the federal funds rate are the value of the midpoint of the
projected appropriate target range for the federal funds rate or the projected
appropriate target level for the federal funds rate at the end of the specified
calendar year or over the longer run.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.effr_forecast(provider='fred')
obb.fixedincome.rate.effr_forecast(long_run=True, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='fred' label='fred'>

**`long_run`**: `bool`

Flag to show long run projections

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[PROJECTIONS]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`range_high`**: `float`

High projection of rates.

**`central_tendency_high`**: `float`

Central tendency of high projection of rates.

**`median`**: `float`

Median projection of rates.

**`range_midpoint`**: `float`

Midpoint projection of rates.

**`central_tendency_midpoint`**: `float`

Central tendency of midpoint projection of rates.

**`range_low`**: `float`

Low projection of rates.

**`central_tendency_low`**: `float`

Central tendency of low projection of rates.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`range_high`**: `float`

High projection of rates.

**`central_tendency_high`**: `float`

Central tendency of high projection of rates.

**`median`**: `float`

Median projection of rates.

**`range_midpoint`**: `float`

Midpoint projection of rates.

**`central_tendency_midpoint`**: `float`

Central tendency of midpoint projection of rates.

**`range_low`**: `float`

Low projection of rates.

**`central_tendency_low`**: `float`

Central tendency of low projection of rates.

</TabItem>
</Tabs>



---

---
title: "estr"
description: "Euro Short-Term Rate"
keywords:
- fixedincome
- rate
- estr
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/estr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Euro Short-Term Rate.

The euro short-term rate (€STR) reflects the wholesale euro unsecured overnight borrowing costs of banks located in
the euro area. The €STR is published on each TARGET2 business day based on transactions conducted and settled on
the previous TARGET2 business day (the reporting date “T”) with a maturity date of T+1 which are deemed to have been
executed at arm's length and thus reflect market rates in an unbiased way.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.estr(provider='fred')
obb.fixedincome.rate.estr(transform=ch1, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
        <br/>
    a = Annual<br/>
        <br/>
    q = Quarterly<br/>
        <br/>
    m = Monthly<br/>
        <br/>
    w = Weekly<br/>
        <br/>
    d = Daily<br/>
        <br/>
    wef = Weekly, Ending Friday<br/>
        <br/>
    weth = Weekly, Ending Thursday<br/>
        <br/>
    wew = Weekly, Ending Wednesday<br/>
        <br/>
    wetu = Weekly, Ending Tuesday<br/>
        <br/>
    wem = Weekly, Ending Monday<br/>
        <br/>
    wesu = Weekly, Ending Sunday<br/>
        <br/>
    wesa = Weekly, Ending Saturday<br/>
        <br/>
    bwew = Biweekly, Ending Wednesday<br/>
        <br/>
    bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
        <br/>
    avg = Average<br/>
        <br/>
    sum = Sum<br/>
        <br/>
    eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
        <br/>
    None = No transformation<br/>
        <br/>
    chg = Change<br/>
        <br/>
    ch1 = Change from Year Ago<br/>
        <br/>
    pch = Percent Change<br/>
        <br/>
    pc1 = Percent Change from Year Ago<br/>
        <br/>
    pca = Compounded Annual Rate of Change<br/>
        <br/>
    cch = Continuously Compounded Rate of Change<br/>
        <br/>
    cca = Continuously Compounded Annual Rate of Change<br/>
        <br/>
    log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[EuroShortTermRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Volume-weighted trimmed mean rate.

**`percentile_25`**: `float`

Rate at 25th percentile of volume.

**`percentile_75`**: `float`

Rate at 75th percentile of volume.

**`volume`**: `float`

The trading volume. (Millions of €EUR).

**`transactions`**: `int`

Number of transactions.

**`number_of_banks`**: `int`

Number of active banks.

**`large_bank_share_of_volume`**: `float`

The percent of volume attributable to the 5 largest active banks.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Volume-weighted trimmed mean rate.

**`percentile_25`**: `float`

Rate at 25th percentile of volume.

**`percentile_75`**: `float`

Rate at 75th percentile of volume.

**`volume`**: `float`

The trading volume. (Millions of €EUR).

**`transactions`**: `int`

Number of transactions.

**`number_of_banks`**: `int`

Number of active banks.

**`large_bank_share_of_volume`**: `float`

The percent of volume attributable to the 5 largest active banks.

</TabItem>
</Tabs>



---

# Rate

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="effr forecast" description="Fed Funds Rate Projections" url="/platform/reference/fixedincome/rate/effr_forecast" />
<ReferenceCard title="ecb" description="European Central Bank Interest Rates" url="/platform/reference/fixedincome/rate/ecb" />
<ReferenceCard title="estr" description="Euro Short-Term Rate" url="/platform/reference/fixedincome/rate/estr" />
<ReferenceCard title="iorb" description="Interest on Reserve Balances" url="/platform/reference/fixedincome/rate/iorb" />
<ReferenceCard title="overnight bank funding" description="Overnight Bank Funding" url="/platform/reference/fixedincome/rate/overnight_bank_funding" />
<ReferenceCard title="effr" description="Fed Funds Rate" url="/platform/reference/fixedincome/rate/effr" />
<ReferenceCard title="ameribor" description="AMERIBOR" url="/platform/reference/fixedincome/rate/ameribor" />
<ReferenceCard title="sonia" description="Sterling Overnight Index Average" url="/platform/reference/fixedincome/rate/sonia" />
<ReferenceCard title="sofr" description="Secured Overnight Financing Rate" url="/platform/reference/fixedincome/rate/sofr" />
<ReferenceCard title="dpcredit" description="Discount Window Primary Credit Rate" url="/platform/reference/fixedincome/rate/dpcredit" />
</ul>



---

---
title: "iorb"
description: "Interest on Reserve Balances"
keywords:
- fixedincome
- rate
- iorb
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/iorb - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Interest on Reserve Balances.

Get Interest Rate on Reserve Balances data A bank rate is the interest rate a nation's central bank charges to its
domestic banks to borrow money. The rates central banks charge are set to stabilize the economy. In the
United States, the Federal Reserve System's Board of Governors set the bank rate, also known as the discount rate.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.iorb(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IORB]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

IORB rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

IORB rate.

</TabItem>
</Tabs>



---

---
title: "overnight_bank_funding"
description: "Overnight Bank Funding"
keywords:
- fixedincome
- rate
- overnight_bank_funding
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/overnight_bank_funding - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Overnight Bank Funding.

For the United States, the overnight bank funding rate (OBFR) is calculated as a volume-weighted median of
overnight federal funds transactions and Eurodollar transactions reported in the
FR 2420 Report of Selected Money Market Rates.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.overnight_bank_funding(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OvernightBankFundingRate]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`revision_indicator`**: `str`

Indicates a revision of the data for that date.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Overnight Bank Funding Rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>
</Tabs>



---

---
title: "sofr"
description: "Secured Overnight Financing Rate"
keywords:
- fixedincome
- rate
- sofr
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/sofr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Secured Overnight Financing Rate.

The Secured Overnight Financing Rate (SOFR) is a broad measure of the cost of
borrowing cash overnight collateralizing by Treasury securities.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.sofr(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SOFR]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`average_30d`**: `float`

30-Day Average SOFR

**`average_90d`**: `float`

90-Day Average SOFR

**`average_180d`**: `float`

180-Day Average SOFR

**`index`**: `float`

SOFR index as 2018-04-02 = 1

</TabItem>
</Tabs>



---

---
title: "sonia"
description: "Sterling Overnight Index Average"
keywords:
- fixedincome
- rate
- sonia
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/rate/sonia - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Sterling Overnight Index Average.

SONIA (Sterling Overnight Index Average) is an important interest rate benchmark. SONIA is based on actual
transactions and reflects the average of the interest rates that banks pay to borrow sterling overnight from other
financial institutions and other institutional investors.


Examples
--------

```python
from openbb import obb
obb.fixedincome.rate.sonia(provider='fred')
obb.fixedincome.rate.sonia(parameter=total_nominal_value, provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`parameter`**: `Literal['rate', 'index', '10th_percentile', '25th_percentile', '75th_percentile', '90th_percentile', 'total_nominal_value']`

Period of SONIA rate.

 • *Default:* `rate`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SONIA]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SONIA rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SONIA rate.

</TabItem>
</Tabs>



---

---
title: "sofr"
description: "Learn about the Secured Overnight Financing Rate (SOFR), a measure of  the cost of borrowing cash overnight collateralized by Treasury securities. Explore  the SOFR Python function parameters, data returns, and more."
keywords:
- Secured Overnight Financing Rate
- SOFR
- borrowing cash overnight
- collateralizing by Treasury securities
- SOFR python function
- SOFR parameters
- start_date
- end_date
- provider
- SOFR period
- returns
- results
- provider name
- warnings
- chart
- metadata
- data
- date
- rate
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/sofr - Reference | OpenBB Platform Docs" />

:::caution Deprecated
This endpoint is deprecated; use `/fixedincome/rate/sofr` instead. Deprecated in OpenBB Platform V4.2 to be removed in V4.5.
:::

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Secured Overnight Financing Rate.

The Secured Overnight Financing Rate (SOFR) is a broad measure of the cost of
borrowing cash overnight collateralizing by Treasury securities.


Examples
--------

```python
from openbb import obb
obb.fixedincome.sofr(provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`frequency`**: `Literal['a', 'q', 'm', 'w', 'wef', 'weth', 'wew', 'wetu', 'wem', 'wesu', 'wesa', 'bwew', 'bwem']`

<details>
<summary mdxType="summary">Description</summary>

Frequency aggregation to convert daily data to lower frequency.<br/>
            a = Annual<br/>
            q = Quarterly<br/>
            m = Monthly<br/>
            w = Weekly<br/>
            wef = Weekly, Ending Friday<br/>
            weth = Weekly, Ending Thursday<br/>
            wew = Weekly, Ending Wednesday<br/>
            wetu = Weekly, Ending Tuesday<br/>
            wem = Weekly, Ending Monday<br/>
            wesu = Weekly, Ending Sunday<br/>
            wesa = Weekly, Ending Saturday<br/>
            bwew = Biweekly, Ending Wednesday<br/>
            bwem = Biweekly, Ending Monday

</details>

 • *Optional:* `True`

---

**`aggregation_method`**: `Literal['avg', 'sum', 'eop']`

<details>
<summary mdxType="summary">Description</summary>

A key that indicates the aggregation method used for frequency aggregation.<br/>
            avg = Average<br/>
            sum = Sum<br/>
            eop = End of Period

</details>

 • *Optional:* `True`

---

**`transform`**: `Literal['chg', 'ch1', 'pch', 'pc1', 'pca', 'cch', 'cca', 'log']`

<details>
<summary mdxType="summary">Description</summary>

Transformation type<br/>
            None = No transformation<br/>
            chg = Change<br/>
            ch1 = Change from Year Ago<br/>
            pch = Percent Change<br/>
            pc1 = Percent Change from Year Ago<br/>
            pca = Compounded Annual Rate of Change<br/>
            cch = Continuously Compounded Rate of Change<br/>
            cca = Continuously Compounded Annual Rate of Change<br/>
            log = Natural Log

</details>

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SOFR]`

Serializable results.

---

**`provider`**: `Optional[Literal['federal_reserve', 'fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='federal_reserve' label='federal_reserve'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Effective federal funds rate.

**`percentile_1`**: `float`

1st percentile of the distribution.

**`percentile_25`**: `float`

25th percentile of the distribution.

**`percentile_75`**: `float`

75th percentile of the distribution.

**`percentile_99`**: `float`

99th percentile of the distribution.

**`volume`**: `float`

The trading volume.The notional volume of transactions (Billions of $).

**`average_30d`**: `float`

30-Day Average SOFR

**`average_90d`**: `float`

90-Day Average SOFR

**`average_180d`**: `float`

180-Day Average SOFR

**`index`**: `float`

SOFR index as 2018-04-02 = 1

</TabItem>
</Tabs>



---

# Spreads

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="tcm" description="Treasury Constant Maturity" url="/platform/reference/fixedincome/spreads/tcm" />
<ReferenceCard title="treasury effr" description="Select Treasury Bill" url="/platform/reference/fixedincome/spreads/treasury_effr" />
<ReferenceCard title="tcm effr" description="Select Treasury Constant Maturity" url="/platform/reference/fixedincome/spreads/tcm_effr" />
</ul>



---

---
title: "tcm"
description: "Treasury Constant Maturity"
keywords:
- fixedincome
- spreads
- tcm
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/spreads/tcm - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Treasury Constant Maturity.

Get data for 10-Year Treasury Constant Maturity Minus Selected Treasury Constant Maturity.
Constant maturity is the theoretical value of a U.S. Treasury that is based on recent values of auctioned U.S.
Treasuries. The value is obtained by the U.S. Treasury on a daily basis through interpolation of the Treasury
yield curve which, in turn, is based on closing bid-yields of actively-traded Treasury securities.


Examples
--------

```python
from openbb import obb
obb.fixedincome.spreads.tcm(provider='fred')
obb.fixedincome.spreads.tcm(maturity='2y', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '2y']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '2y']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[TreasuryConstantMaturity]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

TreasuryConstantMaturity Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

TreasuryConstantMaturity Rate.

</TabItem>
</Tabs>



---

---
title: "tcm_effr"
description: "Select Treasury Constant Maturity"
keywords:
- fixedincome
- spreads
- tcm_effr
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/spreads/tcm_effr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Select Treasury Constant Maturity.

Get data for Selected Treasury Constant Maturity Minus Federal Funds Rate
Constant maturity is the theoretical value of a U.S. Treasury that is based on recent values of auctioned U.S.
Treasuries. The value is obtained by the U.S. Treasury on a daily basis through interpolation of the Treasury
yield curve which, in turn, is based on closing bid-yields of actively-traded Treasury securities.


Examples
--------

```python
from openbb import obb
obb.fixedincome.spreads.tcm_effr(provider='fred')
obb.fixedincome.spreads.tcm_effr(maturity='10y', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['10y', '5y', '1y', '6m', '3m']`

The maturity

 • *Default:* `10y`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['10y', '5y', '1y', '6m', '3m']`

The maturity

 • *Default:* `10y`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SelectedTreasuryConstantMaturity]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Selected Treasury Constant Maturity Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

Selected Treasury Constant Maturity Rate.

</TabItem>
</Tabs>



---

---
title: "treasury_effr"
description: "This documentation page provides information about Treasury Bill data,  including the selected Treasury Bill rate minus Federal Funds Rate. It explains  the concept of constant maturity and the Treasury yield curve. The page also covers  the parameters, returns, and data associated with the `obb.fixedincome.spreads.treasury_effr`  function."
keywords:
- Treasury Bill
- Selected Treasury Bill
- Federal Funds Rate
- Constant Maturity
- Treasury yield curve
- bid-yields
- US Treasuries
- obb.fixedincome.spreads.treasury_effr
- start_date
- end_date
- maturity
- provider
- results
- warnings
- chart
- metadata
- rate
- data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="fixedincome/spreads/treasury_effr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Select Treasury Bill.

Get Selected Treasury Bill Minus Federal Funds Rate.
Constant maturity is the theoretical value of a U.S. Treasury that is based on recent values of
auctioned U.S. Treasuries.
The value is obtained by the U.S. Treasury on a daily basis through interpolation of the Treasury
yield curve which, in turn, is based on closing bid-yields of actively-traded Treasury securities.


Examples
--------

```python
from openbb import obb
obb.fixedincome.spreads.treasury_effr(provider='fred')
obb.fixedincome.spreads.treasury_effr(maturity='6m', provider='fred')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '6m']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>

<TabItem value='fred' label='fred'>

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`maturity`**: `Literal['3m', '6m']`

The maturity

 • *Default:* `3m`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SelectedTreasuryBill]`

Serializable results.

---

**`provider`**: `Optional[Literal['fred']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SelectedTreasuryBill Rate.

</TabItem>

<TabItem value='fred' label='fred'>

**`date`**: `Union[date, str]`

The date of the data.

**`rate`**: `float`

SelectedTreasuryBill Rate.

</TabItem>
</Tabs>



---

---
title: "available"
description: "Available Indices"
keywords:
- index
- available
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/available - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

All indices available from a given provider.


Examples
--------

```python
from openbb import obb
obb.index.available(provider='fmp')
obb.index.available(provider='yfinance')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='cboe' label='cboe'>

**`use_cache`**: `bool`

When True, the Cboe Index directory will be cached for 24 hours. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

</TabItem>

<TabItem value='tmx' label='tmx'>

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[AvailableIndices]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'fmp', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`symbol`**: `str`

Symbol for the index.

**`description`**: `str`

Description for the index. Valid only for US indices.

**`data_delay`**: `int`

Data delay for the index. Valid only for US indices.

**`open_time`**: `datetime.time`

Opening time for the index. Valid only for US indices.

**`close_time`**: `datetime.time`

Closing time for the index. Valid only for US indices.

**`time_zone`**: `str`

Time zone for the index. Valid only for US indices.

**`tick_days`**: `str`

The trading days for the index. Valid only for US indices.

**`tick_frequency`**: `str`

The frequency of the index ticks. Valid only for US indices.

**`tick_period`**: `str`

The period of the index ticks. Valid only for US indices.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`stock_exchange`**: `str`

Stock exchange where the index is listed.

**`exchange_short_name`**: `str`

Short name of the stock exchange where the index is listed.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`symbol`**: `str`

The ticker symbol of the index.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency the index is traded in.

**`code`**: `str`

ID code for keying the index in the OpenBB Terminal.

**`symbol`**: `str`

Symbol for the index.

</TabItem>
</Tabs>



---

---
title: "constituents"
description: "Learn how to fetch constituents of an index using the OBB library in  Python. Get detailed information such as symbol, name, sector, sub-sector, headquarters,  date of first addition, CIK, and founding year of the constituent companies in the  index."
keywords:
- index constituents
- fetch constituents
- index constituents parameters
- index constituents returns
- index constituents data
- index constituents symbol
- index constituents name
- index constituents sector
- index constituents sub-sector
- index constituents headquarters
- index constituents date first added
- index constituents cik
- index constituents founding year
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/constituents - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Index Constituents.


Examples
--------

```python
from openbb import obb
obb.index.constituents(symbol='dowjones', provider='fmp')
# Providers other than FMP will use the ticker symbol.
obb.index.constituents(symbol='BEP50P', provider='cboe')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Literal['BAT20P', 'BBE20P', 'BCH20P', 'BCHM30P', 'BDE40P', 'BDEM50P', 'BDES50P', 'BDK25P', 'BEP50P', 'BEPACP', 'BEPBUS', 'BEPCNC', 'BEPCONC', 'BEPCONS', 'BEPENGY', 'BEPFIN', 'BEPHLTH', 'BEPIND', 'BEPNEM', 'BEPTEC', 'BEPTEL', 'BEPUTL', 'BEPXUKP', 'BES35P', 'BEZ50P', 'BEZACP', 'BFI25P', 'BFR40P', 'BFRM20P', 'BIE20P', 'BIT40P', 'BNL25P', 'BNLM25P', 'BNO25G', 'BNORD40P', 'BPT20P', 'BSE30P', 'BUK100P', 'BUK250P', 'BUK350P', 'BUKAC', 'BUKBISP', 'BUKBUS', 'BUKCNC', 'BUKCONC', 'BUKCONS', 'BUKENGY', 'BUKFIN', 'BUKHI50P', 'BUKHLTH', 'BUKIND', 'BUKLO50P', 'BUKMINP', 'BUKNEM', 'BUKSC', 'BUKTEC', 'BUKTEL', 'BUKUTL']`

None

 • *Default:* `BUK100P`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Literal['dowjones', 'sp500', 'nasdaq']`

None

 • *Default:* `dowjones`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IndexConstituents]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'fmp', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`security_type`**: `str`

The type of security represented.

**`last_price`**: `float`

Last price for the symbol.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`tick`**: `str`

Whether the last sale was an up or down tick.

**`last_trade_time`**: `datetime`

Last trade timestamp for the symbol.

**`asset_type`**: `str`

Type of asset.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`sector`**: `str`

Sector the constituent company in the index belongs to.

**`sub_sector`**: `str`

Sub-sector the constituent company in the index belongs to.

**`headquarter`**: `str`

Location of the headquarter of the constituent company in the index.

**`date_first_added`**: `Union[date, str]`

Date the constituent company was added to the index.

**`cik`**: `int`

Central Index Key (CIK) for the requested entity.

**`founded`**: `Union[date, str]`

Founding year of the constituent company in the index.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the constituent company in the index.

**`market_value`**: `float`

The quoted market value of the asset.

</TabItem>
</Tabs>



---

# Index

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Price" description="historical" url="/platform/reference/index/price" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="search" description="Filter indices for rows containing the query" url="/platform/reference/index/search" />
<ReferenceCard title="available" description="All indices available from a given provider" url="/platform/reference/index/available" />
<ReferenceCard title="sp500 multiples" description="Get historical S&P 500 multiples and Shiller PE ratios" url="/platform/reference/index/sp500_multiples" />
<ReferenceCard title="sectors" description="Get Index Sectors" url="/platform/reference/index/sectors" />
<ReferenceCard title="snapshots" description="Index Snapshots" url="/platform/reference/index/snapshots" />
<ReferenceCard title="constituents" description="Get Index Constituents" url="/platform/reference/index/constituents" />
</ul>



---

---
title: "historical"
description: "Historical Index Levels"
keywords:
- index
- price
- historical
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/price/historical - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Historical Index Levels.


Examples
--------

```python
from openbb import obb
obb.index.price.historical(symbol='^GSPC', provider='fmp')
# Not all providers have the same symbols.
obb.index.price.historical(symbol='SPX', provider='intrinio')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '1d']`

Time interval of the data to return. The most recent trading day is not including in daily historical data. Intraday data is only available for the most recent trading day at 1 minute intervals.

 • *Default:* `1d`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the company directories will be cached for 24 hours and are used to validate symbols. The results of the function are not cached. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '5m', '15m', '30m', '1h', '4h', '1d']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `10000`

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `str`

Time interval of the data to return. The numeric portion of the interval can be any positive integer. The letter portion can be one of the following: s, m, h, d, W, M, Q, Y

 • *Default:* `1d`

 • *Optional:* `True`

---

**`sort`**: `Literal['asc', 'desc']`

Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date.

 • *Default:* `asc`

 • *Optional:* `True`

---

**`limit`**: `int`

The number of data entries to return.

 • *Default:* `49999`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.

 • *Optional:* `False`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`interval`**: `Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1W', '1M', '1Q']`

Time interval of the data to return.

 • *Default:* `1d`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IndexHistorical]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'fmp', 'intrinio', 'polygon', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`calls_volume`**: `float`

Number of calls traded during the most recent trading period. Only valid if interval is 1m.

**`puts_volume`**: `float`

Number of puts traded during the most recent trading period. Only valid if interval is 1m.

**`total_options_volume`**: `float`

Total number of options traded during the most recent trading period. Only valid if interval is 1m.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`vwap`**: `float`

Volume Weighted Average Price over the period.

**`change`**: `float`

Change in the price from the previous close.

**`change_percent`**: `float`

Change in the price from the previous close, as a normalized percent.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

**`transactions`**: `Annotated[int, Gt(gt=0)]`

Number of transactions for the symbol in the time period.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[Union[date, datetime], str]`

The date of the data.

**`open`**: `Annotated[float, Strict(strict=True)]`

The open price.

**`high`**: `Annotated[float, Strict(strict=True)]`

The high price.

**`low`**: `Annotated[float, Strict(strict=True)]`

The low price.

**`close`**: `Annotated[float, Strict(strict=True)]`

The close price.

**`volume`**: `int`

The trading volume.

</TabItem>
</Tabs>



---

# Price

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="historical" description="Historical Index Levels" url="/platform/reference/index/price/historical" />
</ul>



---

---
title: "search"
description: "Learn how to perform index search and retrieve index data using this  Python API. Understand the different parameters and their defaults, and get detailed  information about index symbols, names, and additional attributes such as ISIN code,  region, description, currency, and trading times."
keywords:
- index search
- search indices
- Python search query
- index data
- index symbol
- index name
- European indices
- US indices
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Filter indices for rows containing the query.


Examples
--------

```python
from openbb import obb
obb.index.search(provider='cboe')
obb.index.search(query='SPX', provider='cboe')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`is_symbol`**: `bool`

Whether to search by ticker symbol.

 • *Default:* `False`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

When True, the Cboe Index directory will be cached for 24 hours. Set as False to bypass.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IndexSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`description`**: `str`

Description for the index.

**`data_delay`**: `int`

Data delay for the index. Valid only for US indices.

**`currency`**: `str`

Currency for the index.

**`time_zone`**: `str`

Time zone for the index. Valid only for US indices.

**`open_time`**: `datetime.time`

Opening time for the index. Valid only for US indices.

**`close_time`**: `datetime.time`

Closing time for the index. Valid only for US indices.

**`tick_days`**: `str`

The trading days for the index. Valid only for US indices.

**`tick_frequency`**: `str`

Tick frequency for the index. Valid only for US indices.

**`tick_period`**: `str`

Tick period for the index. Valid only for US indices.

</TabItem>
</Tabs>



---

---
title: "sectors"
description: "Get Index Sectors"
keywords:
- index
- sectors
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/sectors - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Index Sectors. Sector weighting of an index.


Examples
--------

```python
from openbb import obb
obb.index.sectors(symbol='^TX60', provider='tmx')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether to use a cached request. All Index data comes from a single JSON file that is updated daily. To bypass, set to False. If True, the data will be cached for 1 day.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IndexSectors]`

Serializable results.

---

**`provider`**: `Optional[Literal['tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`sector`**: `str`

The sector name.

**`weight`**: `float`

The weight of the sector in the index.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`sector`**: `str`

The sector name.

**`weight`**: `float`

The weight of the sector in the index.

</TabItem>
</Tabs>



---

---
title: "snapshots"
description: "Index Snapshots documentation page with information on current levels  for all indices from a specific provider, and details on parameters, query, returns,  and data."
keywords:
- index snapshots
- current levels
- provider
- parameters
- region
- query
- returns
- data
- symbol
- name
- currency
- price
- open
- high
- low
- close
- prev close
- change
- change percent
- isin code
- last trade timestamp
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/snapshots - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Index Snapshots. Current levels for all indices from a provider, grouped by `region`.


Examples
--------

```python
from openbb import obb
obb.index.snapshots(provider='tmx')
obb.index.snapshots(region='us', provider='cboe')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`region`**: `str`

The region of focus for the data - i.e., us, eu.

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='cboe' label='cboe'>

**`region`**: `Literal['us', 'eu']`

None

 • *Default:* `us`

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`region`**: `Literal['ca', 'us']`

None

 • *Default:* `ca`

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether to use a cached request. Index data is from a single JSON file, updated each day after close. It is cached for one day. To bypass, set to False.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[IndexSnapshots]`

Serializable results.

---

**`provider`**: `Optional[Literal['cboe', 'tmx']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in value of the index.

**`change_percent`**: `float`

Change, in normalized percentage points, of the index.

</TabItem>

<TabItem value='cboe' label='cboe'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in price.

**`change_percent`**: `float`

Change in price as a normalized percentage.

**`bid`**: `float`

Current bid price.

**`ask`**: `float`

Current ask price.

**`last_trade_time`**: `datetime`

Last trade timestamp for the symbol.

**`status`**: `str`

Status of the market, open or closed.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`name`**: `str`

Name of the index.

**`currency`**: `str`

Currency of the index.

**`price`**: `float`

Current price of the index.

**`open`**: `float`

The open price.

**`high`**: `float`

The high price.

**`low`**: `float`

The low price.

**`close`**: `float`

The close price.

**`volume`**: `int`

The trading volume.

**`prev_close`**: `float`

The previous close price.

**`change`**: `float`

Change in value of the index.

**`change_percent`**: `float`

Change, in normalized percentage points, of the index.

**`year_high`**: `float`

The 52-week high of the index.

**`year_low`**: `float`

The 52-week low of the index.

**`return_mtd`**: `float`

The month-to-date return of the index, as a normalized percent.

**`return_qtd`**: `float`

The quarter-to-date return of the index, as a normalized percent.

**`return_ytd`**: `float`

The year-to-date return of the index, as a normalized percent.

**`total_market_value`**: `float`

The total quoted market value of the index.

**`number_of_constituents`**: `int`

The number of constituents in the index.

**`constituent_average_market_value`**: `float`

The average quoted market value of the index constituents.

**`constituent_median_market_value`**: `float`

The median quoted market value of the index constituents.

**`constituent_top10_market_value`**: `float`

The sum of the top 10 quoted market values of the index constituents.

**`constituent_largest_market_value`**: `float`

The largest quoted market value of the index constituents.

**`constituent_largest_weight`**: `float`

The largest weight of the index constituents, as a normalized percent.

**`constituent_smallest_market_value`**: `float`

The smallest quoted market value of the index constituents.

**`constituent_smallest_weight`**: `float`

The smallest weight of the index constituents, as a normalized percent.

</TabItem>
</Tabs>



---

---
title: "sp500_multiples"
description: "Learn about S&P 500 multiples and Shiller PE ratios. Use the `index.sp500_multiples`  query to retrieve historical data on various financial metrics such as PE Ratio,  Dividend, Earnings, Inflation Adjusted Price, Sales, Price to Sales Ratio, and Book  Value per Share. Specify query parameters such as start date, end date, and provider.  Collapse the frequency or transform the time series. Get results, charts, metadata,  and more."
keywords:
- S&P 500 multiples
- Shiller PE ratios
- SP500Multiples
- index.sp500_multiples
- historical data
- PE Ratio
- Dividend
- Earnings
- Inflation Adjusted Price
- Sales
- Price to Sales Ratio
- Book Value per Share
- query parameters
- start date
- end date
- provider
- collapse
- transform
- results
- chart
- metadata
- data
- date
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="index/sp500_multiples - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get historical S&P 500 multiples and Shiller PE ratios.


Examples
--------

```python
from openbb import obb
obb.index.sp500_multiples(provider='multpl')
obb.index.sp500_multiples(series_name='shiller_pe_year', provider='multpl')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`series_name`**: `Union[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str], list[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str]]]`

The name of the series. Defaults to 'pe_month'. Multiple items allowed for provider(s): multpl.

 • *Default:* `pe_month`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='multpl' label='multpl'>

**`series_name`**: `Union[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str], list[Union[Literal['shiller_pe_month', 'shiller_pe_year', 'pe_year', 'pe_month', 'dividend_year', 'dividend_month', 'dividend_growth_quarter', 'dividend_growth_year', 'dividend_yield_year', 'dividend_yield_month', 'earnings_year', 'earnings_month', 'earnings_growth_year', 'earnings_growth_quarter', 'real_earnings_growth_year', 'real_earnings_growth_quarter', 'earnings_yield_year', 'earnings_yield_month', 'real_price_year', 'real_price_month', 'inflation_adjusted_price_year', 'inflation_adjusted_price_month', 'sales_year', 'sales_quarter', 'sales_growth_year', 'sales_growth_quarter', 'real_sales_year', 'real_sales_quarter', 'real_sales_growth_year', 'real_sales_growth_quarter', 'price_to_sales_year', 'price_to_sales_quarter', 'price_to_book_value_year', 'price_to_book_value_quarter', 'book_value_year', 'book_value_quarter'], str]]]`

The name of the series. Defaults to 'pe_month'. Multiple items allowed for provider(s): multpl.

 • *Default:* `pe_month`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SP500Multiples]`

Serializable results.

---

**`provider`**: `Optional[Literal['multpl']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`name`**: `str`

Name of the series.

**`value`**: `Union[int, float]`

Value of the series.

</TabItem>

<TabItem value='multpl' label='multpl'>

**`date`**: `Union[date, str]`

The date of the data.

**`name`**: `str`

Name of the series.

**`value`**: `Union[int, float]`

Value of the series.

</TabItem>
</Tabs>



---

# Reference

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

<ul className="grid grid-cols-1 gap-4 -ml-6">
<ReferenceCard
    title="Commodity"
    description="petroleum_status_report, short_term_energy_outlook, spot"
    url="/platform/reference/commodity"
/>
<ReferenceCard
    title="Crypto"
    description="search, historical"
    url="/platform/reference/crypto"
/>
<ReferenceCard
    title="Currency"
    description="search, reference_rates, snapshots, historical"
    url="/platform/reference/currency"
/>
<ReferenceCard
    title="Derivatives"
    description="instruments, historical, curve, info, chains, snapshots, unusual"
    url="/platform/reference/derivatives"
/>
<ReferenceCard
    title="Econometrics"
    description="panel_fixed, panel_between, ols_regression_summary, residual_autocorrelation, correlation_matrix, panel_pooled, causality, cointegration,..."
    url="/platform/reference/econometrics"
/>
<ReferenceCard
    title="Economy"
    description="primary_dealer_fails, pce, long_term_interest_rate, balance_of_payments, risk_premium, calendar, primary_dealer_positioning, immediate_interest_rate,..."
    url="/platform/reference/economy"
/>
<ReferenceCard
    title="Equity"
    description="search, screener, profile, market_snapshots, historical_market_cap, peers, company_facts, groups,..."
    url="/platform/reference/equity"
/>
<ReferenceCard
    title="Etf"
    description="countries, search, price_performance, historical, info, equity_exposure, sectors, holdings,..."
    url="/platform/reference/etf"
/>
<ReferenceCard
    title="Fixedincome"
    description="bond_indices, mortgage_indices, sofr, tcm, treasury_effr, tcm_effr, effr_forecast, ecb,..."
    url="/platform/reference/fixedincome"
/>
<ReferenceCard
    title="Index"
    description="search, available, sp500_multiples, sectors, snapshots, constituents, historical"
    url="/platform/reference/index"
/>
<ReferenceCard
    title="News"
    description="company, world"
    url="/platform/reference/news"
/>
<ReferenceCard
    title="Quantitative"
    description="normality, summary, capm, unitroot_test, stdev, kurtosis, skew, mean,..."
    url="/platform/reference/quantitative"
/>
<ReferenceCard
    title="Regulators"
    description="cot_search, cot, filing_headers, htm_file, cik_map, sic_search, rss_litigation, symbol_map,..."
    url="/platform/reference/regulators"
/>
<ReferenceCard
    title="Technical"
    description="adosc, clenow, atr, rsi, ad, donchian, fisher, hma,..."
    url="/platform/reference/technical"
/>
</ul>


---

---
title: "company"
description: "Get company news for one or more companies using various providers. This  API allows you to retrieve news articles along with metadata such as date, title,  image, text, and URL. The available providers include Benzinga, FMP, Intrinio, Polygon,  Ultima, and Yfinance."
keywords:
- company news
- news for companies
- news API
- API parameters
- benzinga provider
- fmp provider
- polygon provider
- intrinio provider
- ultima provider
- yfinance provider
- data entries
- metadata
- company news results
- company news warnings
- company news chart
- data date
- data title
- data image
- data text
- data URL
- benzinga data
- fmp data
- intrinio data
- polygon data
- ultima data
- yfinance data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="news/company - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Company News. Get news for one or more companies.


Examples
--------

```python
from openbb import obb
obb.news.company(provider='benzinga')
obb.news.company(limit=100, provider='benzinga')
# Get news on the specified dates.
obb.news.company(symbol='AAPL', start_date='2024-02-01', end_date='2024-02-07', provider='intrinio')
# Display the headlines of the news.
obb.news.company(symbol='AAPL', display=headline, provider='benzinga')
# Get news for multiple symbols.
obb.news.company(symbol='aapl,tsla', provider='fmp')
# Get news company's ISIN.
obb.news.company(symbol='NVDA', isin=US0378331005, provider='benzinga')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`display`**: `Literal['headline', 'abstract', 'full']`

Specify headline only (headline), headline + teaser (abstract), or headline + full body (full).

 • *Default:* `full`

 • *Optional:* `True`

---

**`updated_since`**: `int`

Number of seconds since the news was updated.

 • *Optional:* `True`

---

**`published_since`**: `int`

Number of seconds since the news was published.

 • *Optional:* `True`

---

**`sort`**: `Literal['id', 'created', 'updated']`

Key to sort the news by.

 • *Default:* `created`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order to sort the news by.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`isin`**: `str`

The company's ISIN.

 • *Optional:* `True`

---

**`cusip`**: `str`

The company's CUSIP.

 • *Optional:* `True`

---

**`channels`**: `str`

Channels of the news to retrieve.

 • *Optional:* `True`

---

**`topics`**: `str`

Topics of the news to retrieve.

 • *Optional:* `True`

---

**`authors`**: `str`

Authors of the news to retrieve.

 • *Optional:* `True`

---

**`content_types`**: `str`

Content types of the news to retrieve.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`page`**: `int`

Page number of the results. Use in combination with limit.

 • *Default:* `0`

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`source`**: `Literal['yahoo', 'moody', 'moody_us_news', 'moody_us_press_releases']`

The source of the news article.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['positive', 'neutral', 'negative']`

Return news only from this source.

 • *Optional:* `True`

---

**`language`**: `str`

Filter by language. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`topic`**: `str`

Filter by topic. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_greater_than`**: `int`

News stories will have a word count greater than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_less_than`**: `int`

News stories will have a word count less than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`is_spam`**: `bool`

Filter whether it is marked as spam or not. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`business_relevance_greater_than`**: `float`

News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

---

**`business_relevance_less_than`**: `float`

News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

</TabItem>

<TabItem value='polygon' label='polygon'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Sort order of the articles.

 • *Default:* `desc`

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`offset`**: `int`

Page offset, used in conjunction with limit.

 • *Default:* `0`

 • *Optional:* `True`

---

**`source`**: `Union[str, list[str]]`

A comma-separated list of the domains requested. Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>

<TabItem value='tmx' label='tmx'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`page`**: `int`

The page number to start from. Use with limit.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`symbol`**: `Union[str, list[str]]`

Symbol to get data for. Multiple items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, tmx, yfinance.

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`limit`**: `Annotated[int, Ge(ge=0)]`

The number of data entries to return.

 • *Default:* `2500`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CompanyNews]`

Serializable results.

---

**`provider`**: `Optional[Literal['benzinga', 'fmp', 'intrinio', 'polygon', 'tiingo', 'tmx', 'yfinance']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

URL to the images of the news.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`id`**: `str`

Article ID.

**`author`**: `str`

Author of the article.

**`teaser`**: `str`

Teaser of the news.

**`channels`**: `str`

Channels associated with the news.

**`stocks`**: `str`

Stocks associated with the news.

**`tags`**: `str`

Tags associated with the news.

**`updated`**: `datetime`

Updated date of the news.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Name of the news source.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

The source of the news article.

**`summary`**: `str`

The summary of the news article.

**`topics`**: `str`

The topics related to the news article.

**`word_count`**: `int`

The word count of the news article.

**`business_relevance`**: `float`

How strongly correlated the news article is to the business

**`sentiment`**: `str`

The sentiment of the news article - i.e, negative, positive.

**`sentiment_confidence`**: `float`

The confidence score of the sentiment rating.

**`language`**: `str`

The language of the news article.

**`spam`**: `bool`

Whether the news article is spam.

**`copyright`**: `str`

The copyright notice of the news article.

**`id`**: `str`

Article ID.

**`security`**: `IntrinioSecurity`

The Intrinio Security object. Contains the security details related to the news article.

</TabItem>

<TabItem value='polygon' label='polygon'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the article.

**`tags`**: `str`

Keywords/tags in the article

**`id`**: `str`

Article ID.

**`amp_url`**: `str`

AMP URL.

**`publisher`**: `PolygonPublisher`

Publisher of the article.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`tags`**: `str`

Tags associated with the news article.

**`article_id`**: `int`

Unique ID of the news article.

**`source`**: `str`

News source.

**`crawl_date`**: `datetime`

Date the news article was crawled.

</TabItem>

<TabItem value='tmx' label='tmx'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the news.

</TabItem>

<TabItem value='yfinance' label='yfinance'>

**`date`**: `Union[datetime, str]`

The date of the data. Here it is the published date of the article.

**`title`**: `str`

Title of the article.

**`text`**: `str`

Text/body of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Symbols associated with the article.

**`source`**: `str`

Source of the news article

</TabItem>
</Tabs>



---

# News

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="company" description="Company News" url="/platform/reference/news/company" />
<ReferenceCard title="world" description="World News" url="/platform/reference/news/world" />
</ul>



---

---
title: "world"
description: "Learn how to retrieve global news data using the obb.news.world API.  This documentation covers the parameters, returns, and data structures used in the  API, including details on how to set the limit and provider, and how to filter the  news by date, author, channels, and more. Explore the different data fields such  as date, title, images, text, and URL, and understand the structure of the returned  results, warnings, chart, and metadata."
keywords:
- Global News
- global news data
- obb.news.world
- parameters
- limit
- provider
- default
- benzinga
- biztoc
- fmp
- intrinio
- display
- date
- start_date
- end_date
- updated_since
- published_since
- sort
- order
- isin
- cusip
- channels
- topics
- authors
- content_types
- returns
- results
- provider
- warnings
- chart
- metadata
- data
- date
- title
- images
- text
- url
- id
- author
- teaser
- stocks
- tags
- updated
- favicon
- score
- site
- company
- datetime
- list
- dict
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="news/world - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

World News. Global news data.


Examples
--------

```python
from openbb import obb
obb.news.world(provider='fmp')
obb.news.world(limit=100, provider='intrinio')
# Get news on the specified dates.
obb.news.world(start_date='2024-02-01', end_date='2024-02-07', provider='intrinio')
# Display the headlines of the news.
obb.news.world(display=headline, provider='benzinga')
# Get news by topics.
obb.news.world(topics=finance, provider='benzinga')
# Get news by source using 'tingo' as provider.
obb.news.world(provider='tiingo', source=bloomberg)
# Filter aticles by term using 'biztoc' as provider.
obb.news.world(provider='biztoc', term=apple)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`date`**: `Union[date, str]`

A specific date to get data for.

 • *Optional:* `True`

---

**`display`**: `Literal['headline', 'abstract', 'full']`

Specify headline only (headline), headline + teaser (abstract), or headline + full body (full).

 • *Default:* `full`

 • *Optional:* `True`

---

**`updated_since`**: `int`

Number of seconds since the news was updated.

 • *Optional:* `True`

---

**`published_since`**: `int`

Number of seconds since the news was published.

 • *Optional:* `True`

---

**`sort`**: `Literal['id', 'created', 'updated']`

Key to sort the news by.

 • *Default:* `created`

 • *Optional:* `True`

---

**`order`**: `Literal['asc', 'desc']`

Order to sort the news by.

 • *Default:* `desc`

 • *Optional:* `True`

---

**`isin`**: `str`

The ISIN of the news to retrieve.

 • *Optional:* `True`

---

**`cusip`**: `str`

The CUSIP of the news to retrieve.

 • *Optional:* `True`

---

**`channels`**: `str`

Channels of the news to retrieve.

 • *Optional:* `True`

---

**`topics`**: `str`

Topics of the news to retrieve.

 • *Optional:* `True`

---

**`authors`**: `str`

Authors of the news to retrieve.

 • *Optional:* `True`

---

**`content_types`**: `str`

Content types of the news to retrieve.

 • *Optional:* `True`

</TabItem>

<TabItem value='biztoc' label='biztoc'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`term`**: `str`

Search term to filter articles by. This overrides all other filters.

 • *Optional:* `True`

---

**`source`**: `str`

Filter by a specific publisher. Only valid when filter is set to source.

 • *Optional:* `True`

</TabItem>

<TabItem value='fmp' label='fmp'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`source`**: `Literal['yahoo', 'moody', 'moody_us_news', 'moody_us_press_releases']`

The source of the news article.

 • *Optional:* `True`

---

**`sentiment`**: `Literal['positive', 'neutral', 'negative']`

Return news only from this source.

 • *Optional:* `True`

---

**`language`**: `str`

Filter by language. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`topic`**: `str`

Filter by topic. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_greater_than`**: `int`

News stories will have a word count greater than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`word_count_less_than`**: `int`

News stories will have a word count less than this value. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`is_spam`**: `bool`

Filter whether it is marked as spam or not. Unsupported for yahoo source.

 • *Optional:* `True`

---

**`business_relevance_greater_than`**: `float`

News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

---

**`business_relevance_less_than`**: `float`

News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1.

 • *Optional:* `True`

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`limit`**: `int`

The number of data entries to return. The number of articles to return.

 • *Default:* `2500`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`offset`**: `int`

Page offset, used in conjunction with limit.

 • *Default:* `0`

 • *Optional:* `True`

---

**`source`**: `Union[str, list[str]]`

A comma-separated list of the domains requested. Multiple items allowed for provider(s): tiingo.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[WorldNews]`

Serializable results.

---

**`provider`**: `Optional[Literal['benzinga', 'biztoc', 'fmp', 'intrinio', 'tiingo']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

</TabItem>

<TabItem value='benzinga' label='benzinga'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`id`**: `str`

Article ID.

**`author`**: `str`

Author of the news.

**`teaser`**: `str`

Teaser of the news.

**`channels`**: `str`

Channels associated with the news.

**`stocks`**: `str`

Stocks associated with the news.

**`tags`**: `str`

Tags associated with the news.

**`updated`**: `datetime`

Updated date of the news.

</TabItem>

<TabItem value='biztoc' label='biztoc'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[dict[str, str]]`

Images for the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`tags`**: `list[str]`

Tags for the article.

**`score`**: `float`

Search relevance score for the article.

</TabItem>

<TabItem value='fmp' label='fmp'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`site`**: `str`

News source.

</TabItem>

<TabItem value='intrinio' label='intrinio'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`source`**: `str`

The source of the news article.

**`summary`**: `str`

The summary of the news article.

**`topics`**: `str`

The topics related to the news article.

**`word_count`**: `int`

The word count of the news article.

**`business_relevance`**: `float`

How strongly correlated the news article is to the business

**`sentiment`**: `str`

The sentiment of the news article - i.e, negative, positive.

**`sentiment_confidence`**: `float`

The confidence score of the sentiment rating.

**`language`**: `str`

The language of the news article.

**`spam`**: `bool`

Whether the news article is spam.

**`copyright`**: `str`

The copyright notice of the news article.

**`id`**: `str`

Article ID.

**`company`**: `IntrinioCompany`

The Intrinio Company object. Contains details company reference data.

**`security`**: `IntrinioSecurity`

The Intrinio Security object. Contains the security details related to the news article.

</TabItem>

<TabItem value='tiingo' label='tiingo'>

**`date`**: `Union[datetime, str]`

The date of the data. The published date of the article.

**`title`**: `str`

Title of the article.

**`images`**: `list[Dict[str, str]]`

Images associated with the article.

**`text`**: `str`

Text/body of the article.

**`url`**: `str`

URL to the article.

**`symbols`**: `str`

Ticker tagged in the fetched news.

**`article_id`**: `int`

Unique ID of the news article.

**`site`**: `str`

News source.

**`tags`**: `str`

Tags associated with the news article.

**`crawl_date`**: `datetime`

Date the news article was crawled.

</TabItem>
</Tabs>



---

---
title: "capm"
description: "Learn about the Capital Asset Pricing Model (CAPM), a widely-used finance  theory for determining an investment's expected return based on its risk. Understand  how CAPM can be used as an investment strategy to evaluate and select securities."
keywords:
- capital asset pricing model
- CAPM
- finance
- investment strategy
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/capm - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Capital Asset Pricing Model (CAPM).

 CAPM offers a streamlined way to assess the expected return on an investment while accounting for its risk relative
 to the market. It's a cornerstone of modern financial theory that helps investors understand the trade-off between
 risk and return, guiding more informed investment choices.


Examples
--------

```python
from openbb import obb
# Get Capital Asset Pricing Model (CAPM).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.quantitative.capm(data=stock_data, target='close')
obb.quantitative.capm(target='close', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}, {'date': '2023-01-07', 'open': 128.33, 'high': 140.0, 'low': 116.67, 'close': 134.17, 'volume': 11666.67}, {'date': '2023-01-08', 'open': 125.71, 'high': 137.14, 'low': 114.29, 'close': 131.43, 'volume': 11428.57}, {'date': '2023-01-09', 'open': 123.75, 'high': 135.0, 'low': 112.5, 'close': 129.38, 'volume': 11250.0}, {'date': '2023-01-10', 'open': 122.22, 'high': 133.33, 'low': 111.11, 'close': 127.78, 'volume': 11111.11}, {'date': '2023-01-11', 'open': 121.0, 'high': 132.0, 'low': 110.0, 'close': 126.5, 'volume': 11000.0}, {'date': '2023-01-12', 'open': 120.0, 'high': 130.91, 'low': 109.09, 'close': 125.45, 'volume': 10909.09}, {'date': '2023-01-13', 'open': 119.17, 'high': 130.0, 'low': 108.33, 'close': 124.58, 'volume': 10833.33}, {'date': '2023-01-14', 'open': 118.46, 'high': 129.23, 'low': 107.69, 'close': 123.85, 'volume': 10769.23}, {'date': '2023-01-15', 'open': 117.86, 'high': 128.57, 'low': 107.14, 'close': 123.21, 'volume': 10714.29}, {'date': '2023-01-16', 'open': 117.33, 'high': 128.0, 'low': 106.67, 'close': 122.67, 'volume': 10666.67}, {'date': '2023-01-17', 'open': 116.88, 'high': 127.5, 'low': 106.25, 'close': 122.19, 'volume': 10625.0}, {'date': '2023-01-18', 'open': 116.47, 'high': 127.06, 'low': 105.88, 'close': 121.76, 'volume': 10588.24}, {'date': '2023-01-19', 'open': 116.11, 'high': 126.67, 'low': 105.56, 'close': 121.39, 'volume': 10555.56}, {'date': '2023-01-20', 'open': 115.79, 'high': 126.32, 'low': 105.26, 'close': 121.05, 'volume': 10526.32}, {'date': '2023-01-21', 'open': 115.5, 'high': 126.0, 'low': 105.0, 'close': 120.75, 'volume': 10500.0}, {'date': '2023-01-22', 'open': 115.24, 'high': 125.71, 'low': 104.76, 'close': 120.48, 'volume': 10476.19}, {'date': '2023-01-23', 'open': 115.0, 'high': 125.45, 'low': 104.55, 'close': 120.23, 'volume': 10454.55}, {'date': '2023-01-24', 'open': 114.78, 'high': 125.22, 'low': 104.35, 'close': 120.0, 'volume': 10434.78}, {'date': '2023-01-25', 'open': 114.58, 'high': 125.0, 'low': 104.17, 'close': 119.79, 'volume': 10416.67}, {'date': '2023-01-26', 'open': 114.4, 'high': 124.8, 'low': 104.0, 'close': 119.6, 'volume': 10400.0}, {'date': '2023-01-27', 'open': 114.23, 'high': 124.62, 'low': 103.85, 'close': 119.42, 'volume': 10384.62}, {'date': '2023-01-28', 'open': 114.07, 'high': 124.44, 'low': 103.7, 'close': 119.26, 'volume': 10370.37}, {'date': '2023-01-29', 'open': 113.93, 'high': 124.29, 'low': 103.57, 'close': 119.11, 'volume': 10357.14}, {'date': '2023-01-30', 'open': 113.79, 'high': 124.14, 'low': 103.45, 'close': 118.97, 'volume': 10344.83}, {'date': '2023-01-31', 'open': 113.67, 'high': 124.0, 'low': 103.33, 'close': 118.83, 'volume': 10333.33}, {'date': '2023-02-01', 'open': 113.55, 'high': 123.87, 'low': 103.23, 'close': 118.71, 'volume': 10322.58}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CAPMModel]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='CAPMModel' label='CAPMModel'>

**`market_risk`**: `float`



**`systematic_risk`**: `float`



**`idiosyncratic_risk`**: `float`



</TabItem>
</Tabs>



---

# Quantitative

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Performance" description="sortino_ratio, sharpe_ratio, omega_ratio" url="/platform/reference/quantitative/performance" />
<ReferenceCard title="Rolling" description="stdev, kurtosis, skew, mean, quantile, variance" url="/platform/reference/quantitative/rolling" />
<ReferenceCard title="Stats" description="stdev, kurtosis, skew, mean, quantile, variance" url="/platform/reference/quantitative/stats" />
</ul>

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="normality" description="Get Normality Statistics" url="/platform/reference/quantitative/normality" />
<ReferenceCard title="summary" description="Get Summary Statistics" url="/platform/reference/quantitative/summary" />
<ReferenceCard title="capm" description="Get Capital Asset Pricing Model (CAPM)" url="/platform/reference/quantitative/capm" />
<ReferenceCard title="unitroot test" description="Get Unit Root Test" url="/platform/reference/quantitative/unitroot_test" />
</ul>



---

---
title: "normality"
description: "Learn about normality statistics and their significance in data analysis.  Discover different techniques such as kurtosis, skewness, Jarque-Bera, Shapiro-Wilk,  and Kolmogorov-Smirnov for evaluating normality in time series data. Explore how  these tests can help determine if a data sample follows a normal distribution."
keywords:
- normality statistics
- kurtosis
- skewness
- Jarque-Bera
- Shapiro-Wilk
- Kolmogorov-Smirnov
- time series data
- target column
- normality tests
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/normality - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Normality Statistics.

 - **Kurtosis**: whether the kurtosis of a sample differs from the normal distribution.
 - **Skewness**: whether the skewness of a sample differs from the normal distribution.
 - **Jarque-Bera**: whether the sample data has the skewness and kurtosis matching a normal distribution.
 - **Shapiro-Wilk**: whether a random sample comes from a normal distribution.
 - **Kolmogorov-Smirnov**: whether two underlying one-dimensional probability distributions differ.


Examples
--------

```python
from openbb import obb
# Get Normality Statistics.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.quantitative.normality(data=stock_data, target='close')
obb.quantitative.normality(target='close', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}, {'date': '2023-01-07', 'open': 128.33, 'high': 140.0, 'low': 116.67, 'close': 134.17, 'volume': 11666.67}, {'date': '2023-01-08', 'open': 125.71, 'high': 137.14, 'low': 114.29, 'close': 131.43, 'volume': 11428.57}, {'date': '2023-01-09', 'open': 123.75, 'high': 135.0, 'low': 112.5, 'close': 129.38, 'volume': 11250.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[NormalityModel]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='NormalityModel' label='NormalityModel'>

**`kurtosis`**: `TestModel`



**`skewness`**: `TestModel`



**`jarque_bera`**: `TestModel`



**`shapiro_wilk`**: `TestModel`



**`kolmogorov_smirnov`**: `TestModel`



</TabItem>
</Tabs>



---

# Performance

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="sortino ratio" description="Get rolling Sortino Ratio" url="/platform/reference/quantitative/performance/sortino_ratio" />
<ReferenceCard title="sharpe ratio" description="Get Rolling Sharpe Ratio" url="/platform/reference/quantitative/performance/sharpe_ratio" />
<ReferenceCard title="omega ratio" description="Calculate the Omega Ratio" url="/platform/reference/quantitative/performance/omega_ratio" />
</ul>



---

---
title: "omega_ratio"
description: "Calculate the Omega Ratio"
keywords:
- quantitative
- performance
- omega_ratio
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/performance/omega_ratio - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Omega Ratio.

 The Omega Ratio is a sophisticated metric that goes beyond traditional performance measures by considering the
 probability of achieving returns above a given threshold. It offers a more nuanced view of risk and reward,
 focusing on the likelihood of success rather than just average outcomes.


Examples
--------

```python
from openbb import obb
# Get Omega Ratio.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.performance.omega_ratio(data=returns, target="close")
obb.quantitative.performance.omega_ratio(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

---

**`threshold_start`**: `float`

Start threshold, by default 0.0

 • *Optional:* `True`

---

**`threshold_end`**: `float`

End threshold, by default 1.5

 • *Default:* `1.5`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[OmegaModel]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='OmegaModel' label='OmegaModel'>

**`threshold`**: `float`



**`omega`**: `float`



</TabItem>
</Tabs>



---

---
title: "sharpe_ratio"
description: "Get Rolling Sharpe Ratio"
keywords:
- quantitative
- performance
- sharpe_ratio
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/performance/sharpe_ratio - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Rolling Sharpe Ratio.

 This function calculates the Sharpe Ratio, a metric used to assess the return of an investment compared to its risk.
 By factoring in the risk-free rate, it helps you understand how much extra return you're getting for the extra
 volatility that you endure by holding a riskier asset. The Sharpe Ratio is essential for investors looking to
 compare the efficiency of different investments, providing a clear picture of potential rewards in relation to their
 risks over a specified period. Ideal for gauging the effectiveness of investment strategies, it offers insights into
 optimizing your portfolio for maximum return on risk.


Examples
--------

```python
from openbb import obb
# Get Rolling Sharpe Ratio.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.performance.sharpe_ratio(data=returns, target="close")
obb.quantitative.performance.sharpe_ratio(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

---

**`rfr`**: `float`

Risk-free rate, by default 0.0

 • *Optional:* `True`

---

**`window`**: `int`

Window size, by default 252

 • *Default:* `252`

 • *Optional:* `True`

---

**`index`**: `str`

 

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "sortino_ratio"
description: "Get rolling Sortino Ratio"
keywords:
- quantitative
- performance
- sortino_ratio
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/performance/sortino_ratio - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get rolling Sortino Ratio.

 The Sortino Ratio enhances the evaluation of investment returns by distinguishing harmful volatility
 from total volatility. Unlike other metrics that treat all volatility as risk, this command specifically assesses
 the volatility of negative returns relative to a target or desired return.
 It's particularly useful for investors who are more concerned with downside risk than with overall volatility.
 By calculating the Sortino Ratio, investors can better understand the risk-adjusted return of their investments,
 focusing on the likelihood and impact of negative returns.
 This approach offers a more nuanced tool for portfolio optimization, especially in strategies aiming
 to minimize the downside.

 For method & terminology see:
 http://www.redrockcapital.com/Sortino__A__Sharper__Ratio_Red_Rock_Capital.pdf


Examples
--------

```python
from openbb import obb
# Get Rolling Sortino Ratio.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.performance.sortino_ratio(data=stock_data, target="close")
obb.quantitative.performance.sortino_ratio(data=stock_data, target="close", target_return=0.01, window=126, adjusted=True)
obb.quantitative.performance.sortino_ratio(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

---

**`target_return`**: `float`

Target return, by default 0.0

 • *Optional:* `True`

---

**`window`**: `int`

Window size, by default 252

 • *Default:* `252`

 • *Optional:* `True`

---

**`adjusted`**: `bool`

Adjust sortino ratio to compare it to sharpe ratio, by default False

 • *Optional:* `True`

---

**`index`**: `str`

Index column for input data

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

# Rolling

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="stdev" description="Calculate the rolling standard deviation of a target column within a given window size" url="/platform/reference/quantitative/rolling/stdev" />
<ReferenceCard title="kurtosis" description="Calculate the rolling kurtosis of a target column within a given window size" url="/platform/reference/quantitative/rolling/kurtosis" />
<ReferenceCard title="skew" description="Get Rolling Skew" url="/platform/reference/quantitative/rolling/skew" />
<ReferenceCard title="mean" description="Calculate the rolling average of a target column within a given window size" url="/platform/reference/quantitative/rolling/mean" />
<ReferenceCard title="quantile" description="Calculate the rolling quantile of a target column within a given window size at a specified quantile percentage" url="/platform/reference/quantitative/rolling/quantile" />
<ReferenceCard title="variance" description="Calculate the rolling variance of a target column within a given window size" url="/platform/reference/quantitative/rolling/variance" />
</ul>



---

---
title: "kurtosis"
description: "Calculate the rolling kurtosis of a target column within a given window size"
keywords:
- quantitative
- rolling
- kurtosis
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/kurtosis - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling kurtosis of a target column within a given window size.

 Kurtosis measures the "tailedness" of the probability distribution of a real-valued random variable.
 High kurtosis indicates a distribution with heavy tails (outliers), suggesting a higher risk of extreme outcomes.
 Low kurtosis indicates a distribution with lighter tails (less outliers), suggesting less risk of extreme outcomes.
 This function helps in assessing the risk of outliers in financial returns or other time series data over a specified
 rolling window.


Examples
--------

```python
from openbb import obb
# Get Rolling Kurtosis.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.kurtosis(data=returns, target="close", window=252)
obb.quantitative.rolling.kurtosis(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate kurtosis.

 • *Optional:* `False`

---

**`window`**: `int`

The number of observations used for calculating the rolling measure.

 • *Default:* `21`

 • *Optional:* `True`

---

**`index`**: `str`

The name of the index column, default is 'date'.

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "mean"
description: "Calculate the rolling average of a target column within a given window size"
keywords:
- quantitative
- rolling
- mean
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/mean - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling average of a target column within a given window size.

 The rolling mean is a simple moving average that calculates the average of a target variable over a specified window.
 This function is widely used in financial analysis to smooth short-term fluctuations and highlight longer-term trends
 or cycles in time series data.


Examples
--------

```python
from openbb import obb
# Get Rolling Mean.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.mean(data=returns, target="close", window=252)
obb.quantitative.rolling.mean(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate the mean.

 • *Optional:* `False`

---

**`window`**: `int`

The number of observations used for calculating the rolling measure.

 • *Default:* `21`

 • *Optional:* `True`

---

**`index`**: `str`

The name of the index column, default is 'date'.

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "quantile"
description: "Calculate the rolling quantile of a target column within a given window size at a specified quantile percentage"
keywords:
- quantitative
- rolling
- quantile
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/quantile - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling quantile of a target column within a given window size at a specified quantile percentage.

 Quantiles are points dividing the range of a probability distribution into intervals with equal probabilities,
 or dividing the sample in the same way. This function is useful for understanding the distribution of data
 within a specified window, allowing for analysis of trends, identification of outliers, and assessment of risk.


Examples
--------

```python
from openbb import obb
# Get Rolling Quantile.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.quantile(data=returns, target="close", window=252, quantile_pct=0.25)
obb.quantitative.rolling.quantile(data=returns, target="close", window=252, quantile_pct=0.75)
obb.quantitative.rolling.quantile(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate the quantile.

 • *Optional:* `False`

---

**`window`**: `int`

The number of observations used for calculating the rolling measure.

 • *Default:* `21`

 • *Optional:* `True`

---

**`quantile_pct`**: `float`

The quantile percentage to calculate (e.g., 0.5 for median), default is 0.5.

 • *Default:* `0.5`

 • *Optional:* `True`

---

**`index`**: `str`

The name of the index column, default is 'date'.

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "skew"
description: "Get Rolling Skew"
keywords:
- quantitative
- rolling
- skew
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/skew - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Rolling Skew.

 Skew is a statistical measure that reveals the degree of asymmetry of a distribution around its mean.
 Positive skewness indicates a distribution with an extended tail to the right, while negative skewness shows a tail
 that stretches left. Understanding skewness can provide insights into potential biases in data and help anticipate
 the nature of future data points. It's particularly useful for identifying the likelihood of extreme outcomes in
 financial returns, enabling more informed decision-making based on the distribution's shape over a specified period.


Examples
--------

```python
from openbb import obb
# Get Rolling Mean.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.skew(data=returns, target="close")
obb.quantitative.rolling.skew(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

---

**`window`**: `int`

Window size.

 • *Default:* `21`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "stdev"
description: "Calculate the rolling standard deviation of a target column within a given window size"
keywords:
- quantitative
- rolling
- stdev
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/stdev - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling standard deviation of a target column within a given window size.

 Standard deviation is a measure of the amount of variation or dispersion of a set of values.
 It is widely used to assess the risk and volatility of financial returns or other time series data
 over a specified rolling window. It is the square root of the variance.


Examples
--------

```python
from openbb import obb
# Get Rolling Standard Deviation.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.stdev(data=returns, target="close", window=252)
obb.quantitative.rolling.stdev(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate standard deviation.

 • *Optional:* `False`

---

**`window`**: `int`

The number of observations used for calculating the rolling measure.

 • *Default:* `21`

 • *Optional:* `True`

---

**`index`**: `str`

The name of the index column, default is 'date'.

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "variance"
description: "Calculate the rolling variance of a target column within a given window size"
keywords:
- quantitative
- rolling
- variance
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/rolling/variance - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling variance of a target column within a given window size.

 Variance measures the dispersion of a set of data points around their mean. It is a key metric for
 assessing the volatility and stability of financial returns or other time series data over a specified rolling window.


Examples
--------

```python
from openbb import obb
# Get Rolling Variance.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.rolling.variance(data=returns, target="close", window=252)
obb.quantitative.rolling.variance(target='close', window=2, data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate variance.

 • *Optional:* `False`

---

**`window`**: `int`

The number of observations used for calculating the rolling measure.

 • *Default:* `21`

 • *Optional:* `True`

---

**`index`**: `str`

The name of the index column, default is 'date'.

 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

# Stats

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="stdev" description="Calculate the rolling standard deviation of a target column" url="/platform/reference/quantitative/stats/stdev" />
<ReferenceCard title="kurtosis" description="Calculate the rolling kurtosis of a target column" url="/platform/reference/quantitative/stats/kurtosis" />
<ReferenceCard title="skew" description="Get the skew of the data set" url="/platform/reference/quantitative/stats/skew" />
<ReferenceCard title="mean" description="Calculate the average of a target column" url="/platform/reference/quantitative/stats/mean" />
<ReferenceCard title="quantile" description="Calculate the quantile of a target column at a specified quantile percentage" url="/platform/reference/quantitative/stats/quantile" />
<ReferenceCard title="variance" description="Calculate the variance of a target column" url="/platform/reference/quantitative/stats/variance" />
</ul>



---

---
title: "kurtosis"
description: "Calculate the rolling kurtosis of a target column"
keywords:
- quantitative
- stats
- kurtosis
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/kurtosis - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling kurtosis of a target column.

 Kurtosis measures the "tailedness" of the probability distribution of a real-valued random variable.
 High kurtosis indicates a distribution with heavy tails (outliers), suggesting a higher risk of extreme outcomes.
 Low kurtosis indicates a distribution with lighter tails (less outliers), suggesting less risk of extreme outcomes.
 This function helps in assessing the risk of outliers in financial returns or other time series data.


Examples
--------

```python
from openbb import obb
# Get Kurtosis.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.kurtosis(data=returns, target="close")
obb.quantitative.stats.kurtosis(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate kurtosis.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "mean"
description: "Calculate the average of a target column"
keywords:
- quantitative
- stats
- mean
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/mean - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the average of a target column.

 The rolling mean is a simple moving average that calculates the average of a target variable.
 This function is widely used in financial analysis to smooth short-term fluctuations and highlight longer-term trends
 or cycles in time series data.


Examples
--------

```python
from openbb import obb
# Get Mean.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.mean(data=returns, target="close")
obb.quantitative.stats.mean(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate the mean.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "quantile"
description: "Calculate the quantile of a target column at a specified quantile percentage"
keywords:
- quantitative
- stats
- quantile
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/quantile - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the quantile of a target column at a specified quantile percentage.

 Quantiles are points dividing the range of a probability distribution into intervals with equal probabilities,
 or dividing the sample in the same way.


Examples
--------

```python
from openbb import obb
# Get Quantile.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.quantile(data=returns, target="close", quantile_pct=0.75)
obb.quantitative.stats.quantile(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate the quantile.

 • *Optional:* `False`

---

**`quantile_pct`**: `float`

The quantile percentage to calculate (e.g., 0.5 for median), default is 0.5.

 • *Default:* `0.5`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "skew"
description: "Get the skew of the data set"
keywords:
- quantitative
- stats
- skew
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/skew - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the skew of the data set.

 Skew is a statistical measure that reveals the degree of asymmetry of a distribution around its mean.
 Positive skewness indicates a distribution with an extended tail to the right, while negative skewness shows a tail
 that stretches left. Understanding skewness can provide insights into potential biases in data and help anticipate
 the nature of future data points. It's particularly useful for identifying the likelihood of extreme outcomes in
 financial returns, enabling more informed decision-making based on the distribution's shape over a specified period.


Examples
--------

```python
from openbb import obb
# Get Skewness.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.skew(data=returns, target="close")
obb.quantitative.stats.skew(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "stdev"
description: "Calculate the rolling standard deviation of a target column"
keywords:
- quantitative
- stats
- stdev
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/stdev - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the rolling standard deviation of a target column.

 Standard deviation is a measure of the amount of variation or dispersion of a set of values.
 It is widely used to assess the risk and volatility of financial returns or other time series data
 It is the square root of the variance.


Examples
--------

```python
from openbb import obb
# Get Standard Deviation.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.stdev(data=returns, target="close")
obb.quantitative.stats.stdev(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate standard deviation.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "variance"
description: "Calculate the variance of a target column"
keywords:
- quantitative
- stats
- variance
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/stats/variance - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the variance of a target column.

 Variance measures the dispersion of a set of data points around their mean. It is a key metric for
 assessing the volatility and stability of financial returns or other time series data.


Examples
--------

```python
from openbb import obb
# Get Variance.
stock_data = obb.equity.price.historical(symbol="TSLA", start_date="2023-01-01", provider="fmp").to_df()
returns = stock_data["close"].pct_change().dropna()
obb.quantitative.stats.variance(data=returns, target="close")
obb.quantitative.stats.variance(target='close', data='[{'date': '2023-01-02', 'close': 0.05}, {'date': '2023-01-03', 'close': 0.08}, {'date': '2023-01-04', 'close': 0.07}, {'date': '2023-01-05', 'close': 0.06}, {'date': '2023-01-06', 'close': 0.06}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The time series data as a list of data points.

 • *Optional:* `False`

---

**`target`**: `str`

The name of the column for which to calculate variance.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "summary"
description: "Learn how to get summary statistics on time series data using Python.  This documentation page provides information on the parameters and return value  of the function."
keywords:
- summary statistics
- get summary statistics
- summary table
- python
- time series data
- target column
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/summary - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Summary Statistics.

 The summary that offers a snapshot of its central tendencies, variability, and distribution.
 This command calculates essential statistics, including mean, standard deviation, variance,
 and specific percentiles, to provide a detailed profile of your target column. B
 y examining these metrics, you gain insights into the data's overall behavior, helping to identify patterns,
 outliers, or anomalies. The summary table is an invaluable tool for initial data exploration,
 ensuring you have a solid foundation for further analysis or reporting.


Examples
--------

```python
from openbb import obb
# Get Summary Statistics.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.quantitative.summary(data=stock_data, target='close')
obb.quantitative.summary(target='close', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SummaryModel]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='SummaryModel' label='SummaryModel'>

**`count`**: `int`



**`mean`**: `float`



**`std`**: `float`



**`var`**: `float`



**`min`**: `float`



**`max`**: `float`



**`p_25`**: `float`



**`p_50`**: `float`



**`p_75`**: `float`



</TabItem>
</Tabs>



---

---
title: "unitroot_test"
description: "Learn about the Unit Root Test function in Python, including the Augmented  Dickey-Fuller test and the Kwiatkowski-Phillips-Schmidt-Shin test. Explore the parameters,  such as data, target, fuller_reg, and kpss_reg, and understand how to interpret  the unit root tests summary."
keywords:
- Unit Root Test
- Augmented Dickey-Fuller test
- Kwiatkowski-Phillips-Schmidt-Shin test
- data
- target
- fuller_reg
- kpss_reg
- Time series data
- unit root tests
- unit root tests summary
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="quantitative/unitroot_test - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Unit Root Test.

 This function applies two renowned tests to assess whether your data series is stationary or if it contains a unit
 root, indicating it may be influenced by time-based trends or seasonality. The Augmented Dickey-Fuller (ADF) test
 helps identify the presence of a unit root, suggesting that the series could be non-stationary and potentially
 unpredictable over time. On the other hand, the Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test checks for the
 stationarity of the series, where failing to reject the null hypothesis indicates a stable, stationary series.
 Together, these tests provide a comprehensive view of your data's time series properties, essential for
 accurate modeling and forecasting.


Examples
--------

```python
from openbb import obb
# Get Unit Root Test.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp').to_df()
obb.quantitative.unitroot_test(data=stock_data, target='close')
obb.quantitative.unitroot_test(target='close', data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

Time series data.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Optional:* `False`

---

**`fuller_reg`**: `Literal['c', 'ct', 'ctt', 'nc']`

Regression type for ADF test.

 • *Default:* `c`

 • *Optional:* `True`

---

**`kpss_reg`**: `Literal['c', 'ct']`

Regression type for KPSS test.

 • *Default:* `c`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[UnitRootModel]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='UnitRootModel' label='UnitRootModel'>

**`adf`**: `ADFTestModel`



**`kpss`**: `KPSSTestModel`



</TabItem>
</Tabs>



---

---
title: "cot"
description: "Learn how to lookup Commitment of Traders Reports by series ID and view  the results, metadata, warnings, and charts associated with the reports. Understand  the available parameters such as default report, provider, data type, legacy format,  report type, measure, start date, end date, and transform."
keywords:
- Commitment of Traders Reports
- lookup
- series ID
- CFTC
- regulators
- default report
- provider
- data type
- legacy format
- report type
- measure
- start date
- end date
- transform
- results
- metadata
- warnings
- chart
- traders
- date
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/cftc/cot - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get Commitment of Traders Reports.


Examples
--------

```python
from openbb import obb
# Get the latest report for all items classified as, GOLD.
obb.regulators.cftc.cot(id='gold', provider='cftc')
# Enter the entire history for a single CFTC Market Contract Code.
obb.regulators.cftc.cot(id='088691', provider='cftc')
# Get the report for futures only.
obb.regulators.cftc.cot(id='088691', futures_only=True, provider='cftc')
# Get the most recent Commodity Index Traders Supplemental Report.
obb.regulators.cftc.cot(id='all', report_type=supplemental, provider='cftc')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`id`**: `str`

A string with the CFTC market code or other identifying string, such as the contract market name, commodity name, or commodity group - i.e, 'gold' or 'japanese yen'.Default report is Fed Funds Futures. Use the 'cftc_market_code' for an exact match.

 • *Default:* `045601`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Default is the most recent report.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

</TabItem>

<TabItem value='cftc' label='cftc'>

**`id`**: `str`

A string with the CFTC market code or other identifying string, such as the contract market name, commodity name, or commodity group - i.e, 'gold' or 'japanese yen'.Default report is Fed Funds Futures. Use the 'cftc_market_code' for an exact match.

 • *Default:* `045601`

 • *Optional:* `True`

---

**`start_date`**: `Union[date, str]`

Start date of the data, in YYYY-MM-DD format. Default is the most recent report.

 • *Optional:* `True`

---

**`end_date`**: `Union[date, str]`

End date of the data, in YYYY-MM-DD format.

 • *Optional:* `True`

---

**`report_type`**: `Literal['legacy', 'disaggregated', 'financial', 'supplemental']`

<details>
<summary mdxType="summary">Description</summary>

The type of report to retrieve. Set `id` as 'all' to return all items in the report<br/>
            type (default date range returns the latest report). The Legacy report is broken down by exchange<br/>
            with reported open interest further broken down into three trader classifications: commercial,<br/>
            non-commercial and non-reportable. The Disaggregated reports are broken down by Agriculture and<br/>
            Natural Resource contracts. The Disaggregated reports break down reportable open interest positions<br/>
            into four classifications: Producer/Merchant, Swap Dealers, Managed Money and Other Reportables.<br/>
            The Traders in Financial Futures (TFF) report includes financial contracts. The TFF report breaks<br/>
            down the reported open interest into five classifications: Dealer, Asset Manager, Leveraged Money,<br/>
            Other Reportables and Non-Reportables.

</details>

 • *Default:* `legacy`

 • *Optional:* `True`

---

**`futures_only`**: `bool`

Returns the futures-only report. Default is False, for the combined report.

 • *Default:* `False`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[COT]`

Serializable results.

---

**`provider`**: `Optional[Literal['cftc']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`date`**: `Union[date, str]`

The date of the data.

**`report_week`**: `str`

Report week for the year.

**`market_and_exchange_names`**: `str`

Market and exchange names.

**`cftc_contract_market_code`**: `str`

CFTC contract market code.

**`cftc_market_code`**: `str`

CFTC market code.

**`cftc_region_code`**: `str`

CFTC region code.

**`cftc_commodity_code`**: `str`

CFTC commodity code.

**`cftc_contract_market_code_quotes`**: `str`

CFTC contract market code quotes.

**`cftc_market_code_quotes`**: `str`

CFTC market code quotes.

**`cftc_commodity_code_quotes`**: `str`

CFTC commodity code quotes.

**`cftc_subgroup_code`**: `str`

CFTC subgroup code.

**`commodity`**: `str`

Commodity.

**`commodity_group`**: `str`

Commodity group name.

**`commodity_subgroup`**: `str`

Commodity subgroup name.

**`futonly_or_combined`**: `str`

If the report is futures-only or combined.

**`contract_units`**: `str`

Contract units.

</TabItem>

<TabItem value='cftc' label='cftc'>

**`date`**: `Union[date, str]`

The date of the data.

**`report_week`**: `str`

Report week for the year.

**`market_and_exchange_names`**: `str`

Market and exchange names.

**`cftc_contract_market_code`**: `str`

CFTC contract market code.

**`cftc_market_code`**: `str`

CFTC market code.

**`cftc_region_code`**: `str`

CFTC region code.

**`cftc_commodity_code`**: `str`

CFTC commodity code.

**`cftc_contract_market_code_quotes`**: `str`

CFTC contract market code quotes.

**`cftc_market_code_quotes`**: `str`

CFTC market code quotes.

**`cftc_commodity_code_quotes`**: `str`

CFTC commodity code quotes.

**`cftc_subgroup_code`**: `str`

CFTC subgroup code.

**`commodity`**: `str`

Commodity.

**`commodity_group`**: `str`

Commodity group name.

**`commodity_subgroup`**: `str`

Commodity subgroup name.

**`futonly_or_combined`**: `str`

If the report is futures-only or combined.

**`contract_units`**: `str`

Contract units.

</TabItem>
</Tabs>



---

---
title: "cot_search"
description: "Learn about curated Commitment of Traders Reports series information  and how to perform a search for specific data. Find details on the parameters,  data returned, and available CFTC codes."
keywords:
- Commitment of Traders Reports
- curated COT Reports series
- CFTC Code
- underlying asset
- search query
- provider
- results
- warnings
- chart object
- metadata info
- CFTC
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/cftc/cot_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the current Commitment of Traders Reports.

Search a list of the current Commitment of Traders Reports series information.


Examples
--------

```python
from openbb import obb
obb.regulators.cftc.cot_search(provider='cftc')
obb.regulators.cftc.cot_search(query='gold', provider='cftc')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='cftc' label='cftc'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[COTSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['cftc']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`code`**: `str`

CFTC market contract code of the report.

**`name`**: `str`

Name of the underlying asset.

**`category`**: `str`

Category of the underlying asset.

**`subcategory`**: `str`

Subcategory of the underlying asset.

**`units`**: `str`

The units for one contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>

<TabItem value='cftc' label='cftc'>

**`code`**: `str`

CFTC market contract code of the report.

**`name`**: `str`

Name of the underlying asset.

**`category`**: `str`

Category of the underlying asset.

**`subcategory`**: `str`

Subcategory of the underlying asset.

**`units`**: `str`

The units for one contract.

**`symbol`**: `str`

Symbol representing the entity requested in the data.

**`commodity`**: `str`

Name of the commodity.

</TabItem>
</Tabs>



---

# Cftc

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="cot search" description="Get the current Commitment of Traders Reports" url="/platform/reference/regulators/cftc/cot_search" />
<ReferenceCard title="cot" description="Get Commitment of Traders Reports" url="/platform/reference/regulators/cftc/cot" />
</ul>



---

# Regulators

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Menus
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="Cftc" description="cot_search, cot" url="/platform/reference/regulators/cftc" />
<ReferenceCard title="Sec" description="filing_headers, htm_file, cik_map, sic_search, rss_litigation, symbol_map, schema_files, institutions_search" url="/platform/reference/regulators/sec" />
</ul>



---

---
title: "cik_map"
description: "Learn how to retrieve the CIK number corresponding to a ticker symbol  using the python obb.regulators.sec.cik_map function. Understand the available parameters,  return values, and data structure."
keywords:
- CIK number
- ticker symbol
- python obb.regulators.sec.cik_map function
- get data for symbol
- provider parameter
- returns
- results
- warnings
- chart object
- metadata info
- data
- central index key
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/cik_map - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Map a ticker symbol to a CIK number.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.cik_map(symbol='MSFT', provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol to get data for.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache for the request, default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[CikMap]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

</TabItem>

<TabItem value='sec' label='sec'>

**`cik`**: `Union[str, int]`

Central Index Key (CIK) for the requested entity.

</TabItem>
</Tabs>



---

---
title: "filing_headers"
description: "Download the index headers, and cover page if available, for any SEC filing"
keywords:
- regulators
- sec
- filing_headers
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/filing_headers - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Download the index headers, and cover page if available, for any SEC filing.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.filing_headers(url=https://www.sec.gov/Archives/edgar/data/317540/000119312524076556/d645509ddef14a.htm, provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL for the SEC filing. The specific URL is not directly used or downloaded, but is used to generate the base URL for the filing. e.g. https://www.sec.gov/Archives/edgar/data/317540/000031754024000045/coke-20240731.htm and https://www.sec.gov/Archives/edgar/data/317540/000031754024000045/ are both valid URLs for the same filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Use cache for the index headers and cover page. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SecFiling]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`base_url`**: `str`

Base URL of the filing.

**`name`**: `str`

Name of the entity filing.

**`cik`**: `str`

Central Index Key.

**`trading_symbols`**: `list`

Trading symbols, if available.

**`sic`**: `str`

Standard Industrial Classification.

**`sic_organization_name`**: `str`

SIC Organization Name.

**`filing_date`**: `date`

Filing date.

**`period_ending`**: `date`

Date of the ending period for the filing, if available.

**`fiscal_year_end`**: `str`

Fiscal year end of the entity, if available. Format: MM-DD

**`document_type`**: `str`

Specific SEC filing type.

**`has_cover_page`**: `bool`

True if the filing has a cover page.

**`description`**: `str`

Description of attached content, mostly applicable to 8-K filings.

**`cover_page`**: `dict`

Cover page information, if available.

**`document_urls`**: `list`

list of files associated with the filing.

</TabItem>
</Tabs>



---

---
title: "htm_file"
description: "Download a raw HTML object from the SEC website"
keywords:
- regulators
- sec
- htm_file
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/htm_file - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Download a raw HTML object from the SEC website.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.htm_file(url=https://www.sec.gov/Archives/edgar/data/1723690/000119312525030074/d866336dex991.htm, provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL for the SEC filing.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Cache the file for use later. Default is True.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SecHtmFile]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`url`**: `str`

URL of the downloaded file.

**`content`**: `str`

Raw content of the HTM/HTML file.

</TabItem>
</Tabs>



---

# Sec

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="filing headers" description="Download the index headers, and cover page if available, for any SEC filing" url="/platform/reference/regulators/sec/filing_headers" />
<ReferenceCard title="htm file" description="Download a raw HTML object from the SEC website" url="/platform/reference/regulators/sec/htm_file" />
<ReferenceCard title="cik map" description="Map a ticker symbol to a CIK number" url="/platform/reference/regulators/sec/cik_map" />
<ReferenceCard title="sic search" description="Search for Industry Titles, Reporting Office, and SIC Codes" url="/platform/reference/regulators/sec/sic_search" />
<ReferenceCard title="rss litigation" description="Get the RSS feed that provides links to litigation releases concerning civil lawsuits brought by the Commission in federal court" url="/platform/reference/regulators/sec/rss_litigation" />
<ReferenceCard title="symbol map" description="Map a CIK number to a ticker symbol, leading 0s can be omitted or included" url="/platform/reference/regulators/sec/symbol_map" />
<ReferenceCard title="schema files" description="Use tool for navigating the directory of SEC XML schema files by year" url="/platform/reference/regulators/sec/schema_files" />
<ReferenceCard title="institutions search" description="Search SEC-regulated institutions by name and return a list of results with CIK numbers" url="/platform/reference/regulators/sec/institutions_search" />
</ul>



---

---
title: "institutions_search"
description: "Learn how to use the OBB.regulators.sec.institutions_search() method  to look up institutions regulated by the SEC. This method allows you to search for  institutions based on various parameters such as the query and provider. It returns  a list of search results and provides additional attributes like warnings, chart,  and metadata. Explore the attributes like name and cik for more details on the institution."
keywords:
- institutions regulated by the SEC
- SEC regulated institutions lookup
- SEC regulated institutions search
- SEC institutions search query
- OBB regulator
- InstitutionsSearch class
- provider parameter
- query parameter
- use_cache parameter
- results attribute
- warnings attribute
- chart attribute
- metadata attribute
- name attribute
- cik attribute
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/institutions_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search SEC-regulated institutions by name and return a list of results with CIK numbers.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.institutions_search(provider='sec')
obb.regulators.sec.institutions_search(query='blackstone real estate', provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[InstitutionsSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`name`**: `str`

The name of the institution.

**`cik`**: `Union[str, int]`

Central Index Key (CIK)

</TabItem>
</Tabs>



---

---
title: "rss_litigation"
description: "Learn how to use the RSS feed to access litigation releases, including  civil lawsuits brought by the Commission in federal court. This documentation provides  details about the 'obb.regulators.sec.rss_litigation' python function, its parameters  and return values, as well as the data structure used for the releases."
keywords:
- RSS feed
- litigation releases
- civil lawsuits
- Commission
- federal court
- python
- obb.regulators.sec.rss_litigation
- provider
- parameters
- returns
- data
- published
- title
- summary
- id
- link
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/rss_litigation - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Get the RSS feed that provides links to litigation releases concerning civil lawsuits brought by the Commission in federal court.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.rss_litigation(provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RssLitigation]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`published`**: `datetime`

The date of publication.

**`title`**: `str`

The title of the release.

**`summary`**: `str`

Short summary of the release.

**`id`**: `str`

The identifier associated with the release.

**`link`**: `str`

URL to the release.

</TabItem>
</Tabs>



---

---
title: "schema_files"
description: "Get lists of SEC XML schema files by year with the OBBect function. Returns  serializable results, provider name, warnings list, chart object, metadata info,  and data including a list of URLs to SEC Schema Files."
keywords:
- SEC XML schema files
- SEC XML schema files by year
- get SEC XML schema files
- OBBect
- Serializable results
- provider name
- warnings list
- chart object
- metadata info
- fetch URL path
- data
- list of URLs to SEC Schema Files
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/schema_files - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Use tool for navigating the directory of SEC XML schema files by year.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.schema_files(provider='sec')
# Get a list of schema files.
data = obb.regulators.sec.schema_files().results
data.files[0]
'https://xbrl.fasb.org/us-gaap/'
# The directory structure can be navigated by constructing a URL from the 'results' list.
url = data.files[0]+data.files[-1]
# The URL base will always be the 0 position in the list, feed  the URL back in as a parameter.
obb.regulators.sec.schema_files(url=url).results.files
['https://xbrl.fasb.org/us-gaap/2024/'
'USGAAP2024Filelist.xml'
'dis/'
'dqcrules/'
'ebp/'
'elts/'
'entire/'
'meta/'
'stm/'
'us-gaap-2024.zip']
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`url`**: `str`

Enter an optional URL path to fetch the next level.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SchemaFiles]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`files`**: `list[str]`

Dictionary of URLs to SEC Schema Files

</TabItem>
</Tabs>



---

---
title: "sic_search"
description: "Learn how to perform a search for industry titles, reporting office,  and SIC codes using Python. Explore the parameters, returns, and data associated  with the `obb.regulators.sec.sic_search` function."
keywords:
- search
- industry titles
- reporting office
- SIC codes
- Python
- search query
- provider
- cache
- results
- warnings
- chart
- metadata
- data
- sector industrial code
- industry title
- reporting office
- Corporate Finance Office
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/sic_search - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Search for Industry Titles, Reporting Office, and SIC Codes. An empty query string returns all results.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.sic_search(provider='sec')
obb.regulators.sec.sic_search(query='real estate investment trusts', provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `True`

---

**`use_cache`**: `bool`

Whether or not to use cache.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SicSearch]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`sic`**: `int`

Sector Industrial Code (SIC)

**`industry`**: `str`

Industry title.

**`office`**: `str`

Reporting office within the Corporate Finance Office

</TabItem>
</Tabs>



---

---
title: "symbol_map"
description: "Retrieve the ticker symbol corresponding to a company CIK using the  OBB API endpoint. This function allows you to perform a search query and get the  results along with additional metadata, warnings, and optional chart data."
keywords:
- ticker symbol
- CIK
- company
- ticker mapping
- search query
- provider
- results
- warnings
- chart
- metadata
- data
- symbol
- entity
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="regulators/sec/symbol_map - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Map a CIK number to a ticker symbol, leading 0s can be omitted or included.


Examples
--------

```python
from openbb import obb
obb.regulators.sec.symbol_map(query='0000789019', provider='sec')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`query`**: `str`

Search query.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache. If True, cache will store for seven days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>

<TabItem value='sec' label='sec'>

**`query`**: `str`

Search query.

 • *Optional:* `False`

---

**`use_cache`**: `bool`

Whether or not to use cache. If True, cache will store for seven days.

 • *Default:* `True`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[SymbolMap]`

Serializable results.

---

**`provider`**: `Optional[Literal['sec']]`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='standard' label='standard'>

</TabItem>

<TabItem value='sec' label='sec'>

**`symbol`**: `str`

Symbol representing the entity requested in the data.

</TabItem>
</Tabs>



---

---
title: "ad"
description: "Learn about the Accumulation/Distribution Line and how it is interpreted  to detect trends in price movement. Explore its parameters, usage, and see code  examples."
keywords:
- Accumulation/Distribution Line
- On Balance Volume
- CLV
- divergence
- price
- trending upward
- flat
- flattening of the price
- Parameters
- data
- index
- offset
- Returns
- Examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/ad - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Accumulation/Distribution Line.

 Similar to the On Balance Volume (OBV).
 Sums the volume times +1/-1 based on whether the close is higher than the previous
 close. The Accumulation/Distribution indicator, however multiplies the volume by the
 close location value (CLV). The CLV is based on the movement of the issue within a
 single bar and can be +1, -1 or zero.


 The Accumulation/Distribution Line is interpreted by looking for a divergence in
 the direction of the indicator relative to price. If the Accumulation/Distribution
 Line is trending upward it indicates that the price may follow. Also, if the
 Accumulation/Distribution Line becomes flat while the price is still rising (or falling)
 then it signals an impending flattening of the price.


Examples
--------

```python
from openbb import obb
# Get the Accumulation/Distribution Line.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
ad_data = obb.technical.ad(data=stock_data.results, offset=0)
obb.technical.ad(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset of the AD, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "adosc"
description: "Learn about the Accumulation/Distribution Oscillator, also known as the  Chaikin Oscillator. This momentum indicator examines the strength of price moves  and underlying buying and selling pressure. Discover how divergence between the  indicator and price signals market turning points. Explore the parameters, data,  and examples for using this oscillator in your analysis."
keywords:
- Accumulation/Distribution Oscillator
- Chaikin Oscillator
- momentum indicator
- Accumulation-Distribution line
- buying pressure
- selling pressure
- divergence
- market turning points
- parameters
- data
- fast calculation
- slow calculation
- offset
- returns
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/adosc - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Accumulation/Distribution Oscillator.

 Also known as the Chaikin Oscillator.

 Essentially a momentum indicator, but of the Accumulation-Distribution line
 rather than merely price. It looks at both the strength of price moves and the
 underlying buying and selling pressure during a given time period. The oscillator
 reading above zero indicates net buying pressure, while one below zero registers
 net selling pressure. Divergence between the indicator and pure price moves are
 the most common signals from the indicator, and often flag market turning points.


Examples
--------

```python
from openbb import obb
# Get the Accumulation/Distribution Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
adosc_data = obb.technical.adosc(data=stock_data.results, fast=3, slow=10, offset=0)
obb.technical.adosc(fast=2, slow=4, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`fast`**: `int`

Number of periods to be used for the fast calculation, by default 3.

 • *Default:* `3`

 • *Optional:* `True`

---

**`slow`**: `int`

Number of periods to be used for the slow calculation, by default 10.

 • *Default:* `10`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset to be used for the calculation, by default 0.

 • *Optional:* `True`

---

**`index`**: `str`



 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "adx"
description: "Learn about ADX, a Welles Wilder style moving average of the Directional  Movement Index. Understand its calculation, interpretation, and usage with stock  data. Explore examples for implementation."
keywords:
- ADX
- Welles Wilder
- moving average
- Directional Movement Index
- trend
- calculation
- data
- index column
- length
- scalar value
- drift
- interpretation
- stock data
- historical data
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/adx - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Average Directional Index (ADX).

 The ADX is a Welles Wilder style moving average of the Directional Movement Index (DX).
 The values range from 0 to 100, but rarely get above 60. To interpret the ADX, consider
 a high number to be a strong trend, and a low number, a weak trend.


Examples
--------

```python
from openbb import obb
# Get the Average Directional Index (ADX).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
adx_data = obb.technical.adx(data=stock_data.results, length=50, scalar=100.0, drift=1)
obb.technical.adx(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods for the ADX, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`scalar`**: `float`

Scalar value for the ADX, by default 100.0.

 • *Default:* `100.0`

 • *Optional:* `True`

---

**`drift`**: `int`

Drift value for the ADX, by default 1.

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "aroon"
description: "Learn about the Aroon Indicator, a trend indicator in technical analysis.  Understand how the Aroon Up and Down lines can help identify upward and downward  trends, and how to calculate and use the Aroon Indicator. Includes examples and  parameters."
keywords:
- Aroon Indicator
- Aroon Up and Down
- Aroon Indicator explanation
- trend indicator
- technical analysis
- Aroon Indicator usage
- Aroon Indicator examples
- Aroon Indicator parameters
- Aroon Indicator calculation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/aroon - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Aroon Indicator.

 The word aroon is Sanskrit for "dawn's early light." The Aroon
 indicator attempts to show when a new trend is dawning. The indicator consists
 of two lines (Up and Down) that measure how long it has been since the highest
 high/lowest low has occurred within an n period range.

 When the Aroon Up is staying between 70 and 100 then it indicates an upward trend.
 When the Aroon Down is staying between 70 and 100 then it indicates an downward trend.
 A strong upward trend is indicated when the Aroon Up is above 70 while the Aroon Down is below 30.
 Likewise, a strong downward trend is indicated when the Aroon Down is above 70 while
 the Aroon Up is below 30. Also look for crossovers. When the Aroon Down crosses above
 the Aroon Up, it indicates a weakening of the upward trend (and vice versa).


Examples
--------

```python
from openbb import obb
# Get the Chande Momentum Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
aaron_data = obb.technical.aroon(data=stock_data.results, length=25, scalar=100)
obb.technical.aroon(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods to be used for the calculation, by default 25.

 • *Default:* `25`

 • *Optional:* `True`

---

**`scalar`**: `float`

Scalar to be used for the calculation, by default 100.

 • *Default:* `100`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "atr"
description: "Learn about the Average True Range indicator used to measure volatility  in financial data and how to apply it with examples."
keywords:
- Average True Range
- volatility measurement
- gaps
- limit moves
- data
- index column
- length
- moving average mode
- difference period
- offset
- OBBject
- List
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/atr - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Average True Range.

 Used to measure volatility, especially volatility caused by gaps or limit moves.
 The ATR metric helps understand how much the values in your data change on average,
 giving insights into the stability or unpredictability during a certain period.
 It's particularly useful for spotting trends of increase or decrease in variations,
 without getting into technical trading details.
 The method considers not just the day-to-day changes but also accounts for any
 sudden jumps or drops, ensuring you get a comprehensive view of movement.


Examples
--------

```python
from openbb import obb
# Get the Average True Range.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
atr_data = obb.technical.atr(data=stock_data.results)
obb.technical.atr(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to apply the indicator to.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

It's period, by default 14

 • *Default:* `14`

 • *Optional:* `True`

---

**`mamode`**: `Literal['rma', 'ema', 'sma', 'wma']`

Moving average mode, by default 'rma'

 • *Default:* `rma`

 • *Optional:* `True`

---

**`drift`**: `int`

The difference period, by default 1

 • *Default:* `1`

 • *Optional:* `True`

---

**`offset`**: `int`

How many periods to offset the result, by default 0

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "bbands"
description: "Learn about Bollinger Bands, a popular trading indicator used to identify  volatility, overbought or oversold conditions, support and resistance levels, and  price targets. Understand how they work, their parameters, and how to use them effectively  in your trading strategy."
keywords:
- Bollinger Bands
- trading indicator
- volatility
- buy or sell signals
- overbought or oversold conditions
- support or resistance level
- price targets
- moving average
- standard deviation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/bbands - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Bollinger Bands.

 Consist of three lines. The middle band is a simple moving average (generally 20
 periods) of the typical price (TP). The upper and lower bands are F standard
 deviations (generally 2) above and below the middle band.
 The bands widen and narrow when the volatility of the price is higher or lower,
 respectively.

 Bollinger Bands do not, in themselves, generate buy or sell signals;
 they are an indicator of overbought or oversold conditions. When the price is near the
 upper or lower band it indicates that a reversal may be imminent. The middle band
 becomes a support or resistance level. The upper and lower bands can also be
 interpreted as price targets. When the price bounces off of the lower band and crosses
 the middle band, then the upper band becomes the price target.


Examples
--------

```python
from openbb import obb
# Get the Chande Momentum Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
bbands_data = obb.technical.bbands(data=stock_data.results, target='close', length=50, std=2, mamode='sma')
obb.technical.bbands(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods to be used for the calculation, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`std`**: `float`

Standard deviation to be used for the calculation, by default 2.

 • *Default:* `2`

 • *Optional:* `True`

---

**`mamode`**: `Literal['sma', 'ema', 'wma', 'rma']`

Moving average mode to be used for the calculation, by default 'sma'.

 • *Default:* `sma`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset to be used for the calculation, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "cci"
description: "Learn about the Commodity Channel Index (CCI) and how it can be used  to detect market trends, overbought or oversold conditions, and price divergence.  This documentation provides an overview of the CCI, its parameters, and its calculation,  along with an explanation of the CCI data it returns."
keywords:
- Commodity Channel Index
- CCI
- market trends
- trading range
- overbought
- oversold
- price divergence
- price correction
- data
- index column
- length
- scalar
- CCI calculation
- CCI data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/cci - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Commodity Channel Index (CCI).

 The CCI is designed to detect beginning and ending market trends.
 The range of 100 to -100 is the normal trading range. CCI values outside of this
 range indicate overbought or oversold conditions. You can also look for price
 divergence in the CCI. If the price is making new highs, and the CCI is not,
 then a price correction is likely.


Examples
--------

```python
from openbb import obb
# Get the Commodity Channel Index (CCI).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
cci_data = obb.technical.cci(data=stock_data.results, length=14, scalar=0.015)
obb.technical.cci(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the CCI calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the CCI, by default 14.

 • *Default:* `14`

 • *Optional:* `True`

---

**`scalar`**: `float`

The scalar of the CCI, by default 0.015.

 • *Default:* `0.015`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "cg"
description: "Learn about the Center of Gravity (COG) indicator, how it predicts price  movements and reversals, and its use in range-bound markets. Explore the parameters,  examples, and how to calculate COG data with OpenBB for technical analysis."
keywords:
- center of gravity
- COG indicator
- price movements
- price reversals
- oscillators
- range-bound markets
- upcoming price change
- asset trading
- data
- COG calculation
- index column
- length
- COG data
- openbb
- equity price historical
- stock data
- symbol
- start date
- provider
- technical analysis
- TSLA
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/cg - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Center of Gravity.

 The Center of Gravity indicator, in short, is used to anticipate future price movements
 and to trade on price reversals as soon as they happen. However, just like other oscillators,
 the COG indicator returns the best results in range-bound markets and should be avoided when
 the price is trending. Traders who use it will be able to closely speculate the upcoming
 price change of the asset.


Examples
--------

```python
from openbb import obb
# Get the Center of Gravity (CG).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
cg_data = obb.technical.cg(data=stock_data.results, length=14)
obb.technical.cg(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the COG calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the COG, by default 14

 • *Default:* `14`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "clenow"
description: "Learn about Clenow Volatility Adjusted Momentum and how to calculate  it using Python code with openbb library. Explore the parameters, examples, and  returns of this technical analysis function."
keywords:
- Clenow Volatility Adjusted Momentum
- Clenow
- momentum
- data
- index column
- target column
- period
- calculation
- examples
- Python code
- openbb
- equity
- price
- historical
- symbol
- start date
- provider
- technical analysis
- stock data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/clenow - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Clenow Volatility Adjusted Momentum.

 The Clenow Volatility Adjusted Momentum is a sophisticated approach to understanding market momentum with a twist.
 It adjusts for volatility, offering a clearer picture of true momentum by considering how price movements are
 influenced by their volatility over a set period. It helps in identifying stronger, more reliable trends.


Examples
--------

```python
from openbb import obb
# Get the Clenow Volatility Adjusted Momentum.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
clenow_data = obb.technical.clenow(data=stock_data.results, period=90)
obb.technical.clenow(period=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`target`**: `str`

Target column name, by default 'close'.

 • *Default:* `close`

 • *Optional:* `True`

---

**`period`**: `int`

Number of periods for the momentum, by default 90.

 • *Default:* `90`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "cones"
description: "Calculate realized volatility quantiles over rolling windows of time  using different volatility models. Understand the parameters and their effects,  such as index, quantile values, and is_crypto. Examples and code snippets provided."
keywords:
- realized volatility quantiles
- rolling windows of time
- calculate volatility
- parameter data
- quantile value
- volatility models
- standard deviation
- Parkinson volatility
- Garman-Klass volatility
- Hodges-Tompkins volatility
- Rogers-Satchell volatility
- Yang-Zhang volatility
- is_crypto
- cones data
- code example
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/cones - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the realized volatility quantiles over rolling windows of time.

 The cones indicator is designed to map out the ebb and flow of price movements through a detailed analysis of
 volatility quantiles. By examining the range of volatility within specific time frames, it offers a nuanced view of
 market behavior, highlighting periods of stability and turbulence.

 The model for calculating volatility is selectable and can be one of the following:
 - Standard deviation
 - Parkinson
 - Garman-Klass
 - Hodges-Tompkins
 - Rogers-Satchell
 - Yang-Zhang

 Read more about it in the model parameter description.


Examples
--------

```python
from openbb import obb
# Realized Volatility Cones.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='yfinance')
cones_data = obb.technical.cones(data=stock_data.results, lower_q=0.25, upper_q=0.75, model='std')
obb.technical.cones(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`lower_q`**: `float`

The lower quantile value for calculations

 • *Default:* `0.25`

 • *Optional:* `True`

---

**`upper_q`**: `float`

The upper quantile value for calculations

 • *Default:* `0.75`

 • *Optional:* `True`

---

**`model`**: `Literal['std', 'parkinson', 'garman_klass', 'hodges_tompkins', 'rogers_satchell', 'yang_zhang']`

The model used to calculate realized volatility

 • *Default:* `std`

 • *Optional:* `True`

---

**`is_crypto`**: `bool`

Whether the data is crypto or not. If True, volatility is calculated for 365 days instead of 252

 • *Optional:* `True`

---

**`trading_periods`**: `int`

Number of trading periods in a year.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "demark"
description: "Learn how to use the Demark sequential indicator function in the OBBject  library to analyze stock market data and calculate specific values. See examples  of its implementation with the OpenBB package."
keywords:
- Demark sequential indicator
- data
- index
- target
- show_all
- asint
- offset
- OBBject
- List[Data]
- calculated data
- examples
- openbb
- equity
- price
- historical
- symbol
- start_date
- provider
- fmp
- technical
- demark
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/demark - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Demark sequential indicator.

 This indicator offers a strategic way to spot potential reversals in market trends.
 It's designed to highlight moments when the current trend may be running out of steam,
 suggesting a possible shift in direction. By focusing on specific patterns in price movements, it provides
 valuable insights for making informed decisions on future changes and identifies trend exhaustion points
 with precision.


Examples
--------

```python
from openbb import obb
# Get the Demark Sequential Indicator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
demark_data = obb.technical.demark(data=stock_data.results, offset=0)
obb.technical.demark(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`target`**: `str`

Target column name, by default 'close'.

 • *Default:* `close`

 • *Optional:* `True`

---

**`show_all`**: `bool`

Show 1 - 13. If set to False, show 6 - 9

 • *Default:* `True`

 • *Optional:* `True`

---

**`asint`**: `bool`

If True, fill NAs with 0 and change type to int, by default True.

 • *Default:* `True`

 • *Optional:* `True`

---

**`offset`**: `int`

How many periods to offset the result

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "donchian"
description: "Learn about Donchian Channels, an indicator formed by upper and lower  bands around a midrange or median band. Explore the parameters, returns, and examples."
keywords:
- Donchian Channels
- indicator
- upper band
- lower band
- moving average
- security
- N periods
- Donchian Channel
- parameters
- data
- index column
- lower length
- upper length
- offset
- returns
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/donchian - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Donchian Channels.

 Three lines generated by moving average calculations that comprise an indicator
 formed by upper and lower bands around a midrange or median band. The upper band
 marks the highest price of a security over N periods while the lower band
 marks the lowest price of a security over N periods. The area
 between the upper and lower bands represents the Donchian Channel.


Examples
--------

```python
from openbb import obb
# Get the Donchian Channels.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
donchian_data = obb.technical.donchian(data=stock_data.results, lower_length=20, upper_length=20, offset=0)
obb.technical.donchian(lower_length=1, upper_length=3, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`lower_length`**: `int`

Number of periods for the lower band, by default 20.

 • *Default:* `20`

 • *Optional:* `True`

---

**`upper_length`**: `int`

Number of periods for the upper band, by default 20.

 • *Default:* `20`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset of the Donchian Channel, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "ema"
description: "Learn how to calculate the Exponential Moving Average (EMA) in Python  using the openbb library. Understand its benefits as a cumulative calculation and  how it maintains data responsiveness. Find details on parameters like data, target  column, index column, length, and offset. Get code examples to implement EMA calculations  in your projects."
keywords:
- Exponential Moving Average
- EMA
- cumulative calculation
- moving average
- data responsiveness
- parameters
- target column
- index column
- length
- offset
- calculated data
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/ema - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Exponential Moving Average (EMA).

 EMA is a cumulative calculation, including all data. Past values have
 a diminishing contribution to the average, while more recent values have a greater
 contribution. This method allows the moving average to be more responsive to changes
 in the data.


Examples
--------

```python
from openbb import obb
# Get the Exponential Moving Average (EMA).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
ema_data = obb.technical.ema(data=stock_data.results, target='close', length=50, offset=0)
obb.technical.ema(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the calculation, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`offset`**: `int`

The offset of the calculation, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "fib"
description: "Learn how to create Fibonacci Retracement Levels using the openbb Python  library for technical analysis. Apply the Fibonacci indicator to stock data and  visualize the results."
keywords:
- Fibonacci Retracement Levels
- Fibonacci indicator
- technical analysis
- stock data
- Python
- data visualization
- open source library
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/fib - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Create Fibonacci Retracement Levels.

 This method draws from a classic technique to pinpoint significant price levels
 that often indicate where the market might find support or resistance.
 It's a tool used to gauge potential turning points in the data by applying a
 mathematical approach rooted in nature's patterns. Is used to get insights into
 where prices could head next, based on historical movements.


Examples
--------

```python
from openbb import obb
# Get the Bollinger Band Width.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
fib_data = obb.technical.fib(data=stock_data.results, period=120)
obb.technical.fib(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to apply the indicator to.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`period`**: `int`

Period to calculate the indicator, by default 120

 • *Default:* `120`

 • *Optional:* `True`

---

**`close_column`**: `Literal['close', 'adj_close']`



 • *Default:* `close`

 • *Optional:* `True`

---

**`start_date`**: `str`



 • *Optional:* `True`

---

**`end_date`**: `str`



 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "fisher"
description: "Learn about the Fisher Transform, a technical indicator created by John  F. Ehlers that converts prices into a Gaussian normal distribution. This indicator  can help identify extreme prices and turning points in asset prices. Discover how  to use the Fisher Transform with examples and parameter explanations."
keywords:
- Fisher Transform
- John F. Ehlers
- technical indicator
- Gaussian normal distribution
- extreme prices
- turning points
- price waves
- trend isolation
- indicator parameters
- data
- index column
- Fisher period
- Fisher Signal period
- indicator application
- OBBject
- example
- stock data
- equity
- historical price
- symbol
- start date
- data provider
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/fisher - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Perform the Fisher Transform.

 A technical indicator created by John F. Ehlers that converts prices into a Gaussian
 normal distribution. The indicator highlights when prices have moved to an extreme,
 based on recent prices.
 This may help in spotting turning points in the price of an asset. It also helps
 show the trend and isolate the price waves within a trend.


Examples
--------

```python
from openbb import obb
# Perform the Fisher Transform.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
fisher_data = obb.technical.fisher(data=stock_data.results, length=14, signal=1)
obb.technical.fisher(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to apply the indicator to.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Fisher period, by default 14

 • *Default:* `14`

 • *Optional:* `True`

---

**`signal`**: `int`

Fisher Signal period, by default 1

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "hma"
description: "Learn about the Hull Moving Average (HMA), a responsive and smooth moving  average indicator. Understand how to use the HMA, its parameters, and see examples  using the OBBject library."
keywords:
- Hull Moving Average
- moving average
- lag
- smoothing
- data
- target column
- index column
- length
- offset
- OBBject
- examples
- openbb
- equity
- price
- historical
- symbol
- start date
- provider
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/hma - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Hull Moving Average (HMA).

 Solves the age old dilemma of making a moving average more responsive to current
 price activity whilst maintaining curve smoothness.
 In fact the HMA almost eliminates lag altogether and manages to improve smoothing
 at the same time.


Examples
--------

```python
from openbb import obb
# Calculate HMA with historical stock data.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
hma_data = obb.technical.hma(data=stock_data.results, target='close', length=50, offset=0)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods for the HMA, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset of the HMA, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "ichimoku"
description: "Learn about Ichimoku Cloud, a versatile indicator that defines support  and resistance, identifies trend direction, gauges momentum, and provides trading  signals. Explore its parameters and usage in Python."
keywords:
- Ichimoku Cloud
- Ichimoku Kinko Hyo
- versatile indicator
- support and resistance
- trend direction
- momentum
- trading signals
- conversion line
- base line
- lagging span
- Chikou Span Column
- data leak
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/ichimoku - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Ichimoku Cloud.

 Also known as Ichimoku Kinko Hyo, is a versatile indicator that defines support and
 resistance, identifies trend direction, gauges momentum and provides trading
 signals. Ichimoku Kinko Hyo translates into "one look equilibrium chart". With
 one look, chartists can identify the trend and look for potential signals within
 that trend.


Examples
--------

```python
from openbb import obb
# Get the Ichimoku Cloud.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
ichimoku_data = obb.technical.ichimoku(data=stock_data.results, conversion=9, base=26, lookahead=False)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`conversion`**: `int`

Number of periods for the conversion line, by default 9.

 • *Default:* `9`

 • *Optional:* `True`

---

**`base`**: `int`

Number of periods for the base line, by default 26.

 • *Default:* `26`

 • *Optional:* `True`

---

**`lagging`**: `int`

Number of periods for the lagging span, by default 52.

 • *Default:* `52`

 • *Optional:* `True`

---

**`offset`**: `int`

Number of periods for the offset, by default 26.

 • *Default:* `26`

 • *Optional:* `True`

---

**`lookahead`**: `bool`

drops the Chikou Span Column to prevent potential data leak

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

# Technical

import ReferenceCard from '@site/src/components/General/NewReferenceCard';

### Commands
<ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 -ml-6">
<ReferenceCard title="adosc" description="Calculate the Accumulation/Distribution Oscillator" url="/platform/reference/technical/adosc" />
<ReferenceCard title="clenow" description="Calculate the Clenow Volatility Adjusted Momentum" url="/platform/reference/technical/clenow" />
<ReferenceCard title="atr" description="Calculate the Average True Range" url="/platform/reference/technical/atr" />
<ReferenceCard title="rsi" description="Calculate the Relative Strength Index (RSI)" url="/platform/reference/technical/rsi" />
<ReferenceCard title="ad" description="Calculate the Accumulation/Distribution Line" url="/platform/reference/technical/ad" />
<ReferenceCard title="donchian" description="Calculate the Donchian Channels" url="/platform/reference/technical/donchian" />
<ReferenceCard title="fisher" description="Perform the Fisher Transform" url="/platform/reference/technical/fisher" />
<ReferenceCard title="hma" description="Calculate the Hull Moving Average (HMA)" url="/platform/reference/technical/hma" />
<ReferenceCard title="macd" description="Calculate the Moving Average Convergence Divergence (MACD)" url="/platform/reference/technical/macd" />
<ReferenceCard title="ema" description="Calculate the Exponential Moving Average (EMA)" url="/platform/reference/technical/ema" />
<ReferenceCard title="cci" description="Calculate the Commodity Channel Index (CCI)" url="/platform/reference/technical/cci" />
<ReferenceCard title="cg" description="Calculate the Center of Gravity" url="/platform/reference/technical/cg" />
<ReferenceCard title="kc" description="Calculate the Keltner Channels" url="/platform/reference/technical/kc" />
<ReferenceCard title="obv" description="Calculate the On Balance Volume (OBV)" url="/platform/reference/technical/obv" />
<ReferenceCard title="relative rotation" description="Calculate the Relative Strength Ratio and Relative Strength Momentum for a group of symbols against a benchmark" url="/platform/reference/technical/relative_rotation" />
<ReferenceCard title="vwap" description="Calculate the Volume Weighted Average Price (VWAP)" url="/platform/reference/technical/vwap" />
<ReferenceCard title="sma" description="Calculate the Simple Moving Average (SMA)" url="/platform/reference/technical/sma" />
<ReferenceCard title="cones" description="Calculate the realized volatility quantiles over rolling windows of time" url="/platform/reference/technical/cones" />
<ReferenceCard title="aroon" description="Calculate the Aroon Indicator" url="/platform/reference/technical/aroon" />
<ReferenceCard title="ichimoku" description="Calculate the Ichimoku Cloud" url="/platform/reference/technical/ichimoku" />
<ReferenceCard title="bbands" description="Calculate the Bollinger Bands" url="/platform/reference/technical/bbands" />
<ReferenceCard title="zlma" description="Calculate the zero lag exponential moving average (ZLEMA)" url="/platform/reference/technical/zlma" />
<ReferenceCard title="wma" description="Calculate the Weighted Moving Average (WMA)" url="/platform/reference/technical/wma" />
<ReferenceCard title="demark" description="Calculate the Demark sequential indicator" url="/platform/reference/technical/demark" />
<ReferenceCard title="fib" description="Create Fibonacci Retracement Levels" url="/platform/reference/technical/fib" />
<ReferenceCard title="stoch" description="Calculate the Stochastic Oscillator" url="/platform/reference/technical/stoch" />
<ReferenceCard title="adx" description="Calculate the Average Directional Index (ADX)" url="/platform/reference/technical/adx" />
</ul>



---

---
title: "kc"
description: "Learn how to use Keltner Channels, volatility-based bands used to determine  the direction of a trend. This documentation covers the Keltner Channels calculation,  breakout signals, and parameters like the moving average mode, length, scalar value,  and offset."
keywords:
- Keltner Channels
- volatility-based bands
- direction of a trend
- average true range
- ATR
- breakout signals
- Keltner Channels calculation
- moving average mode
- length of Keltner Channels
- scalar value for Keltner Channels
- offset for Keltner Channels
- Keltner Channels data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/kc - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Keltner Channels.

 Keltner Channels are volatility-based bands that are placed
 on either side of an asset's price and can aid in determining
 the direction of a trend.The Keltner channel uses the average
 true range (ATR) or volatility, with breaks above or below the top
 and bottom barriers signaling a continuation.


Examples
--------

```python
from openbb import obb
# Get the Keltner Channels.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
kc_data = obb.technical.kc(data=stock_data.results, length=20, scalar=20, mamode='ema', offset=0)
obb.technical.kc(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the Keltner Channels calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the Keltner Channels, by default 20

 • *Default:* `20`

 • *Optional:* `True`

---

**`scalar`**: `float`

The scalar to use for the Keltner Channels, by default 20

 • *Default:* `20`

 • *Optional:* `True`

---

**`mamode`**: `Literal['ema', 'sma', 'wma', 'hma', 'zlma']`

The moving average mode to use for the Keltner Channels, by default 'ema'

 • *Default:* `ema`

 • *Optional:* `True`

---

**`offset`**: `int`

The offset to use for the Keltner Channels, by default 0

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "macd"
description: "Learn about the Moving Average Convergence Divergence (MACD), a powerful  technical indicator used in financial analysis. Understand how the MACD signals  trend changes, identifies overbought and oversold conditions, and generates buy/sell  signals. Explore the parameters and see examples of how to use this indicator in  Python."
keywords:
- Moving Average Convergence Divergence
- MACD
- Exponential Moving Averages
- Signal line
- trend changes
- overbought conditions
- oversold conditions
- divergence with price
- buy signal
- sell signal
- zero line
- parameters
- data
- target column
- fast EMA
- slow EMA
- signal EMA
- calculated data
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/macd - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Moving Average Convergence Divergence (MACD).

 Difference between two Exponential Moving Averages. The Signal line is an
 Exponential Moving Average of the MACD.

 The MACD signals trend changes and indicates the start of new trend direction.
 High values indicate overbought conditions, low values indicate oversold conditions.
 Divergence with the price indicates an end to the current trend, especially if the
 MACD is at extreme high or low values. When the MACD line crosses above the
 signal line a buy signal is generated. When the MACD crosses below the signal line a
 sell signal is generated. To confirm the signal, the MACD should be above zero for a buy,
 and below zero for a sell.


Examples
--------

```python
from openbb import obb
# Get the Moving Average Convergence Divergence (MACD).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
macd_data = obb.technical.macd(data=stock_data.results, target='close', fast=12, slow=26, signal=9)
# Example with mock data.
obb.technical.macd(fast=2, slow=3, signal=1, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`fast`**: `int`

Number of periods for the fast EMA, by default 12.

 • *Default:* `12`

 • *Optional:* `True`

---

**`slow`**: `int`

Number of periods for the slow EMA, by default 26.

 • *Default:* `26`

 • *Optional:* `True`

---

**`signal`**: `int`

Number of periods for the signal EMA, by default 9.

 • *Default:* `9`

 • *Optional:* `True`

---

**`index`**: `str`



 • *Default:* `date`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "obv"
description: "Learn about On Balance Volume (OBV), a cumulative volume indicator that  helps to interpret price moves, identify trends, and determine market trends. This  documentation page provides an explanation of how OBV works, its parameters, and  a Python example."
keywords:
- On Balance Volume
- OBV
- cumulative volume
- up and down volume
- running total
- price moves
- non-confirmed move
- rising peaks
- falling troughs
- strong trend
- flat OBV
- interpret OBV
- how to use OBV
- Python example
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/obv - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the On Balance Volume (OBV).

 Is a cumulative total of the up and down volume. When the close is higher than the
 previous close, the volume is added to the running total, and when the close is
 lower than the previous close, the volume is subtracted from the running total.

 To interpret the OBV, look for the OBV to move with the price or precede price moves.
 If the price moves before the OBV, then it is a non-confirmed move. A series of rising peaks,
 or falling troughs, in the OBV indicates a strong trend. If the OBV is flat, then the market
 is not trending.


Examples
--------

```python
from openbb import obb
# Get the On Balance Volume (OBV).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
obv_data = obb.technical.obv(data=stock_data.results, offset=0)
obb.technical.obv(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to apply the indicator to.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`offset`**: `int`

How many periods to offset the result, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "relative_rotation"
description: "Calculate the Relative Strength Ratio and Relative Strength Momentum for a group of symbols against a benchmark"
keywords:
- technical
- relative_rotation
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/relative_rotation - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Relative Strength Ratio and Relative Strength Momentum for a group of symbols against a benchmark.


Examples
--------

```python
from openbb import obb
# Calculate the Relative Strength Ratio and Relative Strength Momentum for a group of symbols against a benchmark.
stock_data = obb.equity.price.historical(symbol='AAPL,MSFT,GOOGL,META,AMZN,TSLA,SPY', start_date='2022-01-01', provider='yfinance')
rr_data = obb.technical.relative_rotation(data=stock_data.results, benchmark='SPY')
rs_ratios = rr_data.results.rs_ratios
rs_momentum = rr_data.results.rs_momentum
# When the assets are not traded 252 days per year,adjust the momentum and volatility periods accordingly.
crypto_data = obb.crypto.price.historical( symbol='BTCUSD,ETHUSD,SOLUSD', start_date='2021-01-01', provider='yfinance')
rr_data = obb.technical.relative_rotation(data=crypto_data.results, benchmark='BTC-USD', long_period=365, short_period=30, window=30, trading_periods=365)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to be used for the relative rotation calculations.

 • *Optional:* `False`

---

**`benchmark`**: `str`

The symbol to be used as the benchmark.

 • *Optional:* `False`

---

**`study`**: `Literal['price', 'volume', 'volatility']`

The data point for the calculations. If 'price', the closing price will be used.

 • *Default:* `price`

 • *Optional:* `True`

---

**`long_period`**: `int`

The length of the long period for momentum calculation, by default 252.

 • *Default:* `252`

 • *Optional:* `True`

---

**`short_period`**: `int`

The length of the short period for momentum calculation, by default 21.

 • *Default:* `21`

 • *Optional:* `True`

---

**`window`**: `int`

The length of window for the standard deviation calculation, by default 21.

 • *Default:* `21`

 • *Optional:* `True`

---

**`trading_periods`**: `int`

The number of trading periods per year, for the standard deviation calculation, by default 252.

 • *Default:* `252`

 • *Optional:* `True`

---

**`chart_params`**: `dict[str, Any]`

Additional parameters to pass when `chart=True` and the `openbb-charting` extension is installed.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[RelativeRotationData]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



## Data

<Tabs>

<TabItem value='RelativeRotationData' label='RelativeRotationData'>

**`symbols`**: `list[str]`

The symbols that are being compared against the benchmark.

**`benchmark`**: `str`

The benchmark symbol, as entered by the user.

**`study`**: `Literal['price', 'volume', 'volatility']`

The data point for the study, as entered by the user.

**`long_period`**: `int`

The length of the long period for momentum calculation, as entered by the user.

**`short_period`**: `int`

The length of the short period for momentum calculation, as entered by the user.

**`window`**: `int`

The length of window for the standard deviation calculation, as entered by the user.

**`trading_periods`**: `int`

The number of trading periods per year, for the standard deviation calculation, as entered by the user.

**`start_date`**: `str`

The start date of the data after adjusting the length of the data for the calculations.

**`end_date`**: `str`

The end date of the data.

**`symbols_data`**: `list[Data]`

The data representing the selected 'study' for each symbol.

**`benchmark_data`**: `list[Data]`

The data representing the selected 'study' for the benchmark.

**`rs_ratios`**: `list[Data]`

The normalized relative strength ratios data.

**`rs_momentum`**: `list[Data]`

The normalized relative strength momentum data.

</TabItem>
</Tabs>



---

---
title: "rsi"
description: "Learn about Relative Strength Index (RSI) and how to calculate it. Understand  its interpretation as an overbought/oversold indicator and its relevance in identifying  price movements and reversals. Explore the various parameters involved in the RSI  calculation with practical examples."
keywords:
- Relative Strength Index
- RSI
- oversold indicator
- overbought indicator
- divergence
- price movements
- reversal
- parameters
- data
- target
- index
- length
- scalar
- drift
- examples
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/rsi - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Relative Strength Index (RSI).

 RSI calculates a ratio of the recent upward price movements to the absolute price
 movement. The RSI ranges from 0 to 100.
 The RSI is interpreted as an overbought/oversold indicator when
 the value is over 70/below 30. You can also look for divergence with price. If
 the price is making new highs/lows, and the RSI is not, it indicates a reversal.


Examples
--------

```python
from openbb import obb
# Get the Relative Strength Index (RSI).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
rsi_data = obb.technical.rsi(data=stock_data.results, target='close', length=14, scalar=100.0, drift=1)
obb.technical.rsi(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the RSI calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the RSI, by default 14

 • *Default:* `14`

 • *Optional:* `True`

---

**`scalar`**: `float`

The scalar to use for the RSI, by default 100.0

 • *Default:* `100.0`

 • *Optional:* `True`

---

**`drift`**: `int`

The drift to use for the RSI, by default 1

 • *Default:* `1`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "sma"
description: "Learn about the Simple Moving Average and how it can be used to smooth  data, eliminate noise, and identify trends. Gain insights into the simple form of  moving averages, equal weighting, responsiveness to changes, and filtering data.  Understand the parameters involved in the calculation, such as length and offset."
keywords:
- Simple Moving Average
- moving averages
- smoothing data
- identify trends
- noise elimination
- simplest form of moving average
- equal weight
- responsive to changes
- filtering data
- data calculation
- length parameter
- offset parameter
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/sma - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Simple Moving Average (SMA).

 Moving Averages are used to smooth the data in an array to
 help eliminate noise and identify trends. The Simple Moving Average is literally
 the simplest form of a moving average. Each output value is the average of the
 previous n values. In a Simple Moving Average, each value in the time period carries
 equal weight, and values outside of the time period are not included in the average.
 This makes it less responsive to recent changes in the data, which can be useful for
 filtering out those changes.


Examples
--------

```python
from openbb import obb
# Get the Chande Momentum Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
sma_data = obb.technical.sma(data=stock_data.results, target='close', length=50, offset=0)
obb.technical.sma(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods to be used for the calculation, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset from the current period, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "stoch"
description: "Learn about the Stochastic Oscillator and its calculation. Understand  the parameters, returns, and see examples of how to use it with OpenBB. Improve  your page's SEO with this well-researched content."
keywords:
- stochastic oscillator
- close
- trading range
- '%D values'
- overbought condition
- oversold condition
- buy signal
- sell signal
- raw %K
- crossover signals
- parameters
- data
- index
- fast %K period
- slow %D period
- slow %K period
- returns
- stochastic oscillator data
- examples
- openbb
- equity
- price
- historical
- symbol
- start date
- provider
- stock data
- stoch data
- well-researched
- improve page's SEO
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/stoch - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Stochastic Oscillator.

 The Stochastic Oscillator measures where the close is in relation
 to the recent trading range. The values range from zero to 100. %D values over 75
 indicate an overbought condition; values under 25 indicate an oversold condition.
 When the Fast %D crosses above the Slow %D, it is a buy signal; when it crosses
 below, it is a sell signal. The Raw %K is generally considered too erratic to use
 for crossover signals.


Examples
--------

```python
from openbb import obb
# Get the Stochastic Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
stoch_data = obb.technical.stoch(data=stock_data.results, fast_k_period=14, slow_d_period=3, slow_k_period=3)
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the Stochastic Oscillator calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`fast_k_period`**: `int`

The fast %K period, by default 14.

 • *Default:* `14`

 • *Optional:* `True`

---

**`slow_d_period`**: `int`

The slow %D period, by default 3.

 • *Default:* `3`

 • *Optional:* `True`

---

**`slow_k_period`**: `int`

The slow %K period, by default 3.

 • *Default:* `3`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "vwap"
description: "Learn about the Volume Weighted Average Price (VWAP) and how it measures  the average typical price by volume. Discover how it can be used with intraday charts  to identify general direction. Explore Python examples using the OpenBB OBB package."
keywords:
- Volume Weighted Average Price
- average typical price by volume
- intraday charts
- general direction identification
- timeseries offset aliases
- python examples
- openbb obb package
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/vwap - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Volume Weighted Average Price (VWAP).

 Measures the average typical price by volume.
 It is typically used with intraday charts to identify general direction.
 It helps to understand the true average price factoring in the volume of transactions,
 and serves as a benchmark for assessing the market's direction over short periods, such as a single trading day.


Examples
--------

```python
from openbb import obb
# Get the Volume Weighted Average Price (VWAP).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
vwap_data = obb.technical.vwap(data=stock_data.results, anchor='D', offset=0)
obb.technical.vwap(data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`anchor`**: `str`

Anchor period to use for the calculation, by default 'D'.

 • *Default:* `D`

 • *Optional:* `True`

---

**`https`**: `//pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases`

offset : int, optional

 • *Optional:* `False`

---

**`offset`**: `int`



 • *Default:* `0`

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "wma"
description: "Learn about the Weighted Moving Average (WMA) and how it is used to give  more weight to recent data. Understand its unique calculation and how it compares  to the Simple Moving Average. Find out the parameters for the WMA function, such  as the target and index column names, length, and offset. See an example of using  the WMA function in Python with the OpenBB library to calculate WMA data for historical  stock prices."
keywords:
- weighted moving average
- WMA
- moving average
- weighting factor
- price
- data
- calculation
- simple moving average
- parameters
- target column
- index column
- length
- offset
- returns
- examples
- python
- openbb
- equity
- price
- historical
- symbol
- start date
- provider
- wma data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/wma - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the Weighted Moving Average (WMA).

 A Weighted Moving Average puts more weight on recent data and less on past data.
 This is done by multiplying each bar's price by a weighting factor. Because of its
 unique calculation, WMA will follow prices more closely than a corresponding Simple
 Moving Average.


Examples
--------

```python
from openbb import obb
# Get the Average True Range (ATR).
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
wma_data = obb.technical.wma(data=stock_data.results, target='close', length=50, offset=0)
obb.technical.wma(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

The data to use for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

The length of the WMA, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`offset`**: `int`

The offset of the WMA, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: "zlma"
description: "Learn about the zero lag exponential moving average (ZLEMA) and how it  can be used to perform EMA calculations on de-lagged data. Explore the parameters  and get examples of implementing ZLEMA in Python."
keywords:
- zero lag exponential moving average
- ZLEMA
- EMA calculation
- de-lagged data
- moving average
- lagged data
- cumulative effect
- parameters
- target column
- index column
- length
- offset
- calculation
- calculated data
- example
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="technical/zlma - Reference | OpenBB Platform Docs" />

<!-- markdownlint-disable MD012 MD031 MD033 -->

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Calculate the zero lag exponential moving average (ZLEMA).

 Created by John Ehlers and Ric Way. The idea is do a
 regular exponential moving average (EMA) calculation but
 on a de-lagged data instead of doing it on the regular data.
 Data is de-lagged by removing the data from "lag" days ago
 thus removing (or attempting to) the cumulative effect of
 the moving average.


Examples
--------

```python
from openbb import obb
# Get the Chande Momentum Oscillator.
stock_data = obb.equity.price.historical(symbol='TSLA', start_date='2023-01-01', provider='fmp')
zlma_data = obb.technical.zlma(data=stock_data.results, target='close', length=50, offset=0)
obb.technical.zlma(length=2, data='[{'date': '2023-01-02', 'open': 110.0, 'high': 120.0, 'low': 100.0, 'close': 115.0, 'volume': 10000.0}, {'date': '2023-01-03', 'open': 165.0, 'high': 180.0, 'low': 150.0, 'close': 172.5, 'volume': 15000.0}, {'date': '2023-01-04', 'open': 146.67, 'high': 160.0, 'low': 133.33, 'close': 153.33, 'volume': 13333.33}, {'date': '2023-01-05', 'open': 137.5, 'high': 150.0, 'low': 125.0, 'close': 143.75, 'volume': 12500.0}, {'date': '2023-01-06', 'open': 132.0, 'high': 144.0, 'low': 120.0, 'close': 138.0, 'volume': 12000.0}]')
```



## Parameters

<Tabs>

<TabItem value='standard' label='standard'>

**`data`**: `list[openbb_core.provider.abstract.data.Data]`

list of data to be used for the calculation.

 • *Optional:* `False`

---

**`target`**: `str`

Target column name.

 • *Default:* `close`

 • *Optional:* `True`

---

**`index`**: `str`

Index column name to use with `data`, by default 'date'.

 • *Default:* `date`

 • *Optional:* `True`

---

**`length`**: `int`

Number of periods to be used for the calculation, by default 50.

 • *Default:* `50`

 • *Optional:* `True`

---

**`offset`**: `int`

Offset to be used for the calculation, by default 0.

 • *Optional:* `True`

</TabItem>
</Tabs>

---

## Returns

**`results`**: `list[Data]`

Serializable results.

---

**`provider`**: `None`

Provider name.

---

**`warnings`**: `Optional[list[Warning_]]`

list of warnings.

---

**`chart`**: `Optional[Chart]`

Chart object.

---

**`extra`**: `dict[str, Any]`

Extra info.

---



---

---
title: Environment Variables
sidebar_position: 3
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="User Settings & Environment Variables | OpenBB Platform Docs" />

Environment variables are defined in a `.env` file. If this file does not exist, create it inside the same folder `user_settings.json` is located.

- `OPENBB_DEBUG_MODE`: enables verbosity while running the program
- `OPENBB_DEV_MODE`: applicable to the API; exposes, /system and /user, paths.
- `OPENBB_AUTO_BUILD`: enables automatic SDK package build on import
- `OPENBB_API_AUTH_EXTENSION`: specifies which API authentication extension to use
- `OPENBB_API_AUTH`: enables API authentication for command endpoints
- `OPENBB_API_USERNAME`: sets API username
- `OPENBB_API_PASSWORD`: sets API password

Variables can be defined for current session only.

```python
import os
os.environ["OPENBB_DEBUG_MODE"] = "True"
from openbb import obb
```

### Proxy Networks

:::info
See [System Settings](/platform/settings/system_settings#http) for information on configuring global settings and the session object.
:::


---

---
title: System Settings
sidebar_position: 2
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="User Settings & Environment Variables | OpenBB Platform Docs" />

An additional configuration file, `system_settings.json`, is located in the same folder as `user_settings.json`, and can be created manually if it does not exist. The items below can be configured via this file, as a JSON dictionary.

## Logging Service

OpenBB Platform has a logging service which can be enabled (default is off) in `system_settings.json`.

When active, it logs commands executed, with their parameters, and any errors to a file.
The files will be stored in the `OpenBBUserData\logs` folder, with each session assigned a UUID and logged in a separate file.

Add this entry to `system_settings.json`:

```json
{
    "logging_suppress": false,
}
```

With the configuration set, the logger can be retrieved by name in the code.

```python
logger = logging.getLogger("openbb.logging_service")
```

## API Settings

The, `"api_settings"`, key is a nested dictionary, and is passed to the instance of FastAPI. 

```json
{
    "api_settings": {
        "version": "1",
        "title": "OpenBB Platform API",
        "description": "This is the OpenBB Platform API.",
        "terms_of_service": "http://example.com/terms/",
        "contact_name": "OpenBB Team",
        "contact_url": "https://openbb.co",
        "contact_email": "hello@openbb.co",
        "license_name": "AGPLv3",
        "license_url": "https://github.com/OpenBB-finance/OpenBB/blob/develop/LICENSE",
        "servers": [
            {
                "url": "",
                "description": "Local OpenBB development server"
            }
        ],
        "cors": {
            "allow_origins": [
                "*"
            ],
            "allow_methods": [
                "*"
            ],
            "allow_headers": [
                "*"
            ]
        },
        "prefix": "/api/v1"
    }
}
```

## Python Settings

The `python_settings` key is a nested dictionary. It contains configurations for the docstring elements within the Python interface, as well as global HTTP and Uvicorn settings.

Additional keys and values can be supplied, however, unless they are specifically implemented by custom code, they will be ignored.

### Docstring Sections

This configuration allows the user to include specific elements of the docstrings. Useful for reducing the context length when incorporating LLMs and function calling. The settings below are for the complete docstring, and are the default state.

```json
{
    "python_settings": {
        "docstring_sections": ["description", "parameters", "returns", "examples"],
        "docstring_max_length": null
    }
}
```

### HTTP

:::important
This section refers to settings available beginning OpenBB v4.4.0
:::

Configurations within, `python_settings["http"]`, apply to both, the requests, and aiohttp, libraries.

The settings are passed into the `requests.Session` object and the `aiohttp.ClientSession` object by:
- `openbb_core.provider.utils.helpers.make_request` - Sync
- `openbb_core.provider.utils.helpers.amake_request` - Async
- `openbb_core.provider.utils.helpers.amake_requests` - Async (multiple requests)
- Inserted to use with YFinance & Finviz library implementations.

Return a session object with the settings applied by:
- `openbb_core.provider.utils.helpers.get_requests_session`
- `openbb_core.provider.utils.helpers.get_async_requests_session`

:::tip
Pass the session object, returned by `get_requests_session`, to use this configuration directly with the yFinance library.

```python
import yfinance as yf
from openbb_core.provider.utils.helpers import get_requests_session

session = get_requests_session()
ticker = yf.Ticker("AAPL", session=session)
```
:::

#### Available settings:

| Key | Type | Description |
|:----|:----:|------------:|
|cafile| str | Path to a CA certificate file.|
|certfile| str | Path to a client certificate file.|
|keyfile| str | Path to a client key file.|
|password| str | Password for the client key file (aiohttp only).|
|verify_ssl| bool | Verify SSL certificates.|
|fingerprint| str | SSL fingerprint (aiohttp only).|
|proxy| str | Proxy URL.|
|proxy_auth| str, list | Proxy basic authentication (aiohttp only).|
|proxy_headers| dict | Proxy headers (aiohttp only).|
|timeout| int | Request timeout.|
|auth| str, list | Basic authentication.|
|headers| dict | Request headers.|
|cookies| dict | Dictionary of session cookies.|

Any additional keys supplied will be ignored unless explicitly implemented via custom code.

### Uvicorn

The, `python_settings["uvicorn"]`, key covers the launch of FastAPI when using the following entry points:

- Running the FastAPI as a Python module script.
    - python -m openbb_core.api.rest_api
- Running the `openbb-api` command.
    - openbb-api

All settings are passed directly to `uvicorn.run`, and can be found in the Uvicorn [documentation](https://www.uvicorn.org/settings/)

:::important
Keyword arguments supplied to the command line will take priority over the settings in this configuration.
:::


---

---
title: Credentials
sidebar_position: 1
description: An overview for setting up the OpenBB Platform Python client and Fast API with data provider API keys.
keywords:
- tutorial
- OpenBB Platform
- Python client
- Fast API
- getting started
- authorization
- data providers
- OpenBB Hub
- local environment
- environment variables
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="API Keys & Credentials | OpenBB Platform Docs" />

By default, authorization is not required to initialize and use the core services. Most data providers, however, require an API key to access their data. Keys can be stored locally and they can also be securely saved to your OpenBB Hub [account](https://my.openbb.co/app/hub) for convenient remote access.

### OpenBB Hub

:::info
The OpenBB Hub is only accessible via the Python Interface. For REST API, store credentials and preferences in the `user_settings.json` file [local](api_keys#local-environment) to the deployment.
:::

Data provider credentials and user preferences can be securely stored on the OpenBB Hub and accessed in Python using a revokable Personal Access Token (PAT). Login to the [Hub](https://my.openbb.co/) to manage this method of remote authorization.

The OpenBB Hub is a convenient solution for accessing data in temporary Python environments, like Google Colab ([example notebook](https://github.com/OpenBB-finance/OpenBBTerminal/blob/develop/examples/googleColab.ipynb)). Login with:

```python
from openbb import obb

# Login with personal access token
obb.account.login(pat="my_pat", remember_me=True)

# Alternatively, login with email and password
obb.account.login(email="my_email", password="my_password", remember_me=True)

# Change a credential
obb.user.credentials.polygon_api_key = "my_api_key"

# Save account changes to the Hub
obb.account.save()

# Refresh account with latest changes
obb.account.refresh()

# Logout
obb.account.logout()
```

Set `remember_me` as `False` to discard all credentials at the end of the session.

:::tip
With `remember_me=True`, credentials will be permanently stored in the environment.
Wrapping this sequence before deploying an API server is one (insecure) way to authorize data providers for remote access.
:::

### Local Environment

Credentials and user preferences are stored locally, `~/.openbb_platform/`, as a JSON file, `user_settings.json`. It is read upon initializing the Python client, or when the Fast API is authorized. If the file does not exist, it will be created on the first run. The schema below can be copy/pasted as a template:

```json
{
  "credentials": {
    "fmp_api_key": "REPLACE",
    "polygon_api_key": "REPLACE",
    "benzinga_api_key": "REPLACE",
    "fred_api_key": "REPLACE",
    "nasdaq_api_key": "REPLACE",
    "intrinio_api_key": "REPLACE",
    "alpha_vantage_api_key": "REPLACE",
    "biztoc_api_key": "REPLACE",
    "tradier_api_key": "REPLACE",
    "tradier_account_type": "sandbox OR live",
    "tradingeconomics_api_key": "REPLACE",
    "tiingo_token": "REPLACE"
  }
}
```

To set keys from the Python client for the current session only, access the Credentials class:

```python
obb.user.credentials.intrinio_api_key = "my_api_key"
```

:::info
See [Environment Variables](/platform/settings/environment_variables) & [System Settings](/platform/settings/system_settings) for more information on configuring the installation via `user_settings.json`.

See [Extensions](/platform/usage/extensions/overview) for a current list of data provider extensions.
:::


---

---
title: Defaults
sidebar_position: 3
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Defaults | OpenBB Platform Docs" />

In the defaults section you can define provider defaults, and other parameters, for Python commands, if no argument is explicitly sent when the command runs. For 'provider', there are two formatting options:

1. **Single provider**: this provider will be selected by default for the given command.
2. **Priority list**: the first provider in the list with all required credentials setup will be used.

```json
{
    ...
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "yfinance"
            },
            "/equity/fundamental/balance": {
                "provider": [
                    "yfinance",
                    "fmp",
                    "polygon"
                ]
            },
        }
    }
}
```

:::note

- If no configuration is specified the command will use the default priority list. This is the list of available providers for the command sorted alphabetically.

:::

#### Query Parameters

Individual parameters can also be defined in `user_settings.json`, and the values supplied will applied at runtime.
The default will be ignored when the parameter is passed in the function call.

```json
{
    ...
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "yfinance",
                "chart": true,
                "chart_params": {
                    "heikin_ashi": true,
                    "indicators": {
                        "sma": {
                            "length": [
                                21,
                                50
                            ]
                        },
                        "ema": {
                            "length": 150
                        }
                    }
                }
            },
            "/economy/cpi": {
                "provider": "oecd"
            }
        }
    }
}
```

:::important

- Default parameters are somewhat limited in the FastAPI. Apart from 'provider', they are applicable only where parameters have been defined as Optional, with a default value of None.

- Command docstrings and descriptions will not change according to items defined here.

  :::


---

---
title: Preferences
sidebar_position: 2
description: This section details configuring the OpenBB Platform settings and environment variables.
keywords:
  - OpenBB Platform
  - Python client
  - getting started
  - OpenBB Hub
  - local environment
  - environment variables
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Preferences | OpenBB Platform Docs" />

User settings are stored locally, `~/.openbb_platform/`, as a JSON file, `user_settings.json`. It is read upon initializing the Python client, or when the Fast API is authorized. If the file does not exist, it will be created on the first run.

This file stores:

- [credentials](api_keys#local-environment)
- [preferences](#preferences)
- [defaults](defaults)

This is an example of how it might look after setup:

```json
{
    "credentials": {
        "fmp_api_key": "REPLACE",
        "polygon_api_key": "REPLACE",
    },
    "preferences": {
        "data_directory": "~/OpenBBUserData",
        "export_directory": "~/OpenBBUserData/exports",
        "metadata": true,
        "output_type": "OBBject"
    },
    "defaults": {
        "commands": {
            "/equity/price/historical": {
                "provider": "fmp"
            },
            "/equity/fundamental/balance": {
                "provider": [
                    "intrinio",
                    "fmp",
                    "polygon"
                ]
            },
        }
    }
}
```

### Preferences

| **Preference**        | **Default**                      | **Options**                                                         | **Description**                                                                                                                                                                                                                                                                                                          |
| --------------------- | -------------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| data_directory        | /home/OpenBBUserData             | Any path.                                                           | When launching the application for the first time this directory will be created. It serves as the default location where the application stores usage artifacts such as logs and exports.                                                                                                                               |
| export_directory      | /home/OpenBBUserData/exports     | Any path.                                                           | The OpenBB Charting Extension provides the capability to export images in various formats. This is the directory where it attempts to save such exports.                                                                                                                                                                 |
| cache_directory       | /home/OpenBBUserData/cache       | Any path.                                                           | The directory where http requests and database caches are stored, for functions with caching.                                                                                                                                                                                                                            |
| user_styles_directory | /home/OpenBBUserData/styles/user | Any path.                                                           | The OpenBB Charting Extension supports custom stylization. This directory is the location where it looks for user-defined styles. If no user styles are found in this directory the application will proceed with the default styles.                                                                                    |
| charting_extension    | openbb_charting                  | ["openbb_charting"]                                                 | Name of the charting extension to be used with the application.                                                                                                                                                                                                                                                          |
| chart_style           | dark                             | ["dark", "light"]                                                   | The default color style to use with the OpenBB Charting Extension plots. Options include "dark", and "light".                                                                                                                                                                                                             |
| table_style           | dark                             | ["dark", "light"]                                                   | "The default color style to use with the OpenBB Charting Extension tables. Options are "dark", and "light""                                                                                                                                                                                                               |
| metadata              | true                             | [true, false]                                                       | Enables or disables the collection of metadata which provides information about operations including arguments duration route and timestamp. Disabling this feature may improve performance in cases where contextual information is not needed, or when the additional computation time and storage space are a concern. |
| output_type           | OBBject                          | ["OBBject", "dataframe", "numpy", "dict", "chart", "polars", "llm"] | Specifies the type of data the application will output when a command or endpoint is accessed. Note that choosing data formats only available in Python such as `dataframe`, `numpy`, or `polars` will render the application's API non-functional.                                                                       |
| show_warnings         | false                             | [true, false]                                                       | Enables or disables the display of warnings.                                                                                                                                                                                                                                                                             |

:::note

- If an `OpenBBUserData` folder is not in the home directory, the application will create one on first run. The user preferences with paths all default to this folder - exports, styles, or data - and can be changed at any time to suit.
- The `OpenBBUserData` will still be created even if preferences are not pointing to it, this is because the application needs a place to store logs and other artifacts.
- One way to export files or images from the OpenBB Platform is to leverage that functionality from the OpenBB Charting Extension. The `export_directory` preference is the location where the extension will attempt to save CSV and image files.

:::


---

---
title: Commitments of Traders
sidebar_position: 22
description: This page provides details on the accessing Commitments of Traders reports with the OpenBB Platform, published by the CFTC weekly. There are explanations of the query parameters and data response, as well as examples for use.
keywords:
- futures
- commodities
- index
- indices
- positioning
- dealer
- hedge
- open interest
- CFTC
- commitments of traders
- COT
- Treasury Note
- currency
- currencies
- equity
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Commitments of Traders - User Guides | OpenBB Platform Docs" />

Commitments of Traders (COT) reports are published on Fridays, by the [CFTC](https://www.cftc.gov/MarketReports/CommitmentsofTraders/index.htm). CFTC COT reports provide a breakdown of each Tuesday’s open interest for futures and options on futures markets in which 20 or more traders hold positions equal to or above the reporting levels established by the CFTC.

## Regulators Module

The `obb.regulators` module contains data published by industry regulators and agencies. The data will not be specific to any particular asset class, and the information is available to the general public. The COT reports have two end points:

- `obb.regulators.cftc.cot()`
- `obb.regulators.cfc.cot_search()`

The `openbb-cftc` extension (included with `pip install openbb`) provides programmatic access to the complete history of reports, dating as far back as 1995.

## `cot_search()`

<details>
<summary mdxType="summary">COT Search</summary>

The `obb.regulators.cftc.cot_search()` endpoint is a curated list of current reports. The list can be searched by partial match - i.e., "resources" - and they are classified under categories and subcategories. Get the whole list with an empty query.

Indices - S&P 500, Nasdaq 100, Dow Jones Industrial Average, Russell 1000 & 2000, VIX, Bloomberg Commodity Index, etc. - can be found with the keyword "index".

The example below shows all the S&P reports.

```python
reports = obb.regulators.cftc.cot_search("s&p").to_df()
```

| code   | name                           | commodity_name                | category              | subcategory   |
|:-------|:-------------------------------|:------------------------------|:----------------------|:--------------|
| 43874A | S&P 500 ANNUAL DIVIDEND INDEX  | DIVIDEND INDICES              | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 43874Q | S&P 500 QUARTERLY DIVIDEND IND | DIVIDEND INDICES              | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874I | E-MINI S&P TECHNOLOGY INDEX    | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 138748 | E-MINI S&P CONSU STAPLES INDEX | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874A | E-MINI S&P 500                 | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 138749 | E-MINI S&P ENERGY INDEX        | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874W | ADJUSTED INT RATE S&P 500 TOTL | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874+ | S&P 500 Consolidated           | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874C | E-MINI S&P FINANCIAL INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 33874A | E-MINI S&P 400 STOCK INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874U | MICRO E-MINI S&P 500 INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874J | E-MINI S&P UTILITIES INDEX     | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |
| 13874R | E-MINI S&P REAL ESTATE INDEX   | S&P BROAD BASED STOCK INDICES | FINANCIAL INSTRUMENTS | STOCK INDICES |

</details>

## `cot()`

<details>
<summary mdxType="summary">Overview</summary>

The weekly reports are returned as a flat timeseries. The `id` parameter accepts a flexible input, using the "code" provides an exact match returning the complete history. See the Parameters section below for more information on entering symbols.

```python
sp = obb.regulators.cftc.cot("13874+")

# Display the change in open interest from the previous week, limiting to the last 5 reports.
sp.to_df().T.filter(like="change_in", axis=0).iloc[:,-5:]
```

|                             |   2024-10-15 |   2024-10-22 |   2024-10-29 |   2024-11-05 |   2024-11-12 |
|:----------------------------|-------------:|-------------:|-------------:|-------------:|-------------:|
| change_in_open_interest_all |        88416 |       -95881 |        35345 |       -28290 |       242306 |
| change_in_noncomm_long_all  |        22828 |        11329 |         7547 |        11680 |         -900 |
| change_in_noncomm_short_all |        -6723 |         3364 |       -43078 |       -44221 |        82742 |
| change_in_noncomm_spead_all |        29860 |       -46828 |        48684 |       -12005 |        83965 |
| change_in_comm_long_all     |        23939 |       -48592 |       -30357 |       -28563 |       140423 |
| change_in_comm_short_all    |        65620 |       -47838 |        38124 |        29856 |        76404 |
| change_in_tot_rept_long_all |        76627 |       -84092 |        25874 |       -28888 |       223488 |
| change_in_tot_rept_short    |        88757 |       -91302 |        43730 |       -26370 |       243111 |
| change_in_nonrept_long_all  |        11789 |       -11790 |         9471 |          598 |        18818 |
| change_in_nonrept_short_all |         -341 |        -4579 |        -8385 |        -1921 |         -805 |

</details>

<details>
<summary mdxType="summary">Parameters</summary>

The parameters here will alter the type of report returned. Use `start_date` and `end_date` to request specific historical windows.

<details>
<summary mdxType="summary">`id: str`</summary>

The `id` parameter will accept different inputs:

- A "code" - i.e, "13874A" - which can be mapped using `cot_search()`, and can be any valid CFTC market contract code. This should be an exact match.
- A commodity name, category, or subcategory - i.e, "precious metals" for palladium, platinum, silver, and gold.
- A partial name match - i.e, "russell", "nasdaq", "japanese yen"
- "all" - returns all reports associated with the `report_type`, for the most recent date.

</details>

<details>
<summary mdxType="summary">`futures_only: bool = False`</summary>

When `True`, returns the futures-only report. Default is False, for the combined (futures and options) report.

</details>

<details>
<summary mdxType="summary">`report_type: Literal["legacy", "disaggregated", "financial", "supplemental"] = "legacy"`</summary>

The Legacy report is broken down by exchange with reported open interest by three trader classifications:
- commercial
- non-commercial
- non-reportable

Disaggregated reports are broken down by Agriculture and Natural Resource contracts, groups reportable open interest positions into four classifications:
- Producer/Merchant
- Swap Dealers
- Managed Money
- Other Reportables

The Traders in Financial Futures (TFF) report includes financial contracts, and the reported open interest has five classifications:
- Dealer
- Asset Manager
- Leveraged Money
- Other Reportables
- Non-Reportables

<details>
<summary mdxType="summary">Supplemental Explanation</summary>

:::info
Excerpt below is from the explanatory notes on the CFTC's [website](https://www.cftc.gov/MarketReports/CommitmentsofTraders/ExplanatoryNotes/index.htm)
:::

Based on the information contained in the report of futures-and-options combined in the short format, the Supplemental report shows an additional category of “Index Traders” in selected agricultural markets. These traders are drawn from the noncommercial and commercial categories. The noncommercial category includes positions of managed funds, pension funds, and other investors that are generally seeking exposure to a broad index of commodity prices as an asset class in an unleveraged and passively-managed manner. The commercial category includes positions for entities whose trading predominantly reflects hedging of over-the-counter transactions involving commodity indices—for example, a swap dealer holding long futures positions to hedge a short commodity index exposure opposite institutional traders, such as pension funds.

All of these traders—whether coming from the noncommercial or commercial categories—are generally replicating a commodity index by establishing long futures positions in the component markets and then rolling those positions forward from future to future using a fixed methodology. Some traders assigned to the Index Traders category are engaged in other futures activity that could not be disaggregated. As a result, the Index Traders category, which is typically made up of traders with long-only futures positions replicating an index, will include some long and short positions where traders have multi-dimensional trading activities, the preponderance of which is index trading. Likewise, the Index Traders category will not include some traders who are engaged in index trading, but for whom it does not represent a substantial part of their overall trading activity.

</details>

</details>

</details>

<details>
<summary mdxType="summary">Data Response</summary>

:::info
The number of fields returned will vary greatly (up to nearly 200) depending on the type of report and CFTC market contract. Numbers are generally categorized as below, in brackets is a key for isolating each group.

- Positions ('positions')
- Percent of open interest ('pct')
- Change in open interest ('change')
- Number of traders ('traders')
- Concentration Ratios ('conc')

See the CFTC's [website](https://www.cftc.gov/MarketReports/CommitmentsofTraders/ExplanatoryNotes/index.htm) for a detailed explanation of each.
:::

<details>
<summary mdxType="summary">Legacy Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "noncomm_positions_long_all",
    "noncomm_positions_short_all",
    "noncomm_postions_spread_all",
    "comm_positions_long_all",
    "comm_positions_short_all",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "open_interest_old",
    "noncomm_positions_long_old",
    "noncomm_positions_short_old",
    "noncomm_positions_spread",
    "comm_positions_long_old",
    "comm_positions_short_old",
    "tot_rept_positions_long_old",
    "tot_rept_positions_short_1",
    "nonrept_positions_long_old",
    "nonrept_positions_short_old",
    "open_interest_other",
    "noncomm_positions_long_other",
    "noncomm_positions_short_other",
    "noncomm_positions_spread_1",
    "comm_positions_long_other",
    "comm_positions_short_other",
    "tot_rept_positions_long_other",
    "tot_rept_positions_short_2",
    "nonrept_positions_long_other",
    "nonrept_positions_short_other",
    "change_in_open_interest_all",
    "change_in_noncomm_long_all",
    "change_in_noncomm_short_all",
    "change_in_noncomm_spead_all",
    "change_in_comm_long_all",
    "change_in_comm_short_all",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_noncomm_long_all",
    "pct_of_oi_noncomm_short_all",
    "pct_of_oi_noncomm_spread",
    "pct_of_oi_comm_long_all",
    "pct_of_oi_comm_short_all",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "pct_of_open_interest_old",
    "pct_of_oi_noncomm_long_old",
    "pct_of_oi_noncomm_short_old",
    "pct_of_oi_noncomm_spread_1",
    "pct_of_oi_comm_long_old",
    "pct_of_oi_comm_short_old",
    "pct_of_oi_tot_rept_long_old",
    "pct_of_oi_tot_rept_short_1",
    "pct_of_oi_nonrept_long_old",
    "pct_of_oi_nonrept_short_old",
    "pct_of_open_interest_other",
    "pct_of_oi_noncomm_long_other",
    "pct_of_oi_noncomm_short_other",
    "pct_of_oi_noncomm_spread_2",
    "pct_of_oi_comm_long_other",
    "pct_of_oi_comm_short_other",
    "pct_of_oi_tot_rept_long_other",
    "pct_of_oi_tot_rept_short_2",
    "pct_of_oi_nonrept_long_other",
    "pct_of_oi_nonrept_short_other",
    "traders_tot_all",
    "traders_noncomm_long_all",
    "traders_noncomm_short_all",
    "traders_noncomm_spread_all",
    "traders_comm_long_all",
    "traders_comm_short_all",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "traders_tot_old",
    "traders_noncomm_long_old",
    "traders_noncomm_short_old",
    "traders_noncomm_spead_old",
    "traders_comm_long_old",
    "traders_comm_short_old",
    "traders_tot_rept_long_old",
    "traders_tot_rept_short_old",
    "traders_tot_other",
    "traders_noncomm_long_other",
    "traders_noncomm_short_other",
    "traders_noncomm_spread_other",
    "traders_comm_long_other",
    "traders_comm_short_other",
    "traders_tot_rept_long_other",
    "traders_tot_rept_short_other",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "conc_gross_le_4_tdr_long_1",
    "conc_gross_le_4_tdr_short_1",
    "conc_gross_le_8_tdr_long_1",
    "conc_gross_le_8_tdr_short_1",
    "conc_net_le_4_tdr_long_old",
    "conc_net_le_4_tdr_short_old",
    "conc_net_le_8_tdr_long_old",
    "conc_net_le_8_tdr_short_old",
    "conc_gross_le_4_tdr_long_2",
    "conc_gross_le_4_tdr_short_2",
    "conc_gross_le_8_tdr_long_2",
    "conc_gross_le_8_tdr_short_2",
    "conc_net_le_4_tdr_long_other",
    "conc_net_le_4_tdr_short_other",
    "conc_net_le_8_tdr_long_other",
    "conc_net_le_8_tdr_short_other",
]
```
</details>

<details>
<summary mdxType="summary">Disaggregated Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "cftc_subgroup_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "prod_merc_positions_long",
    "prod_merc_positions_short",
    "swap_positions_long_all",
    "swap_positions_short_all",
    "swap_positions_spread_all",
    "m_money_positions_long_all",
    "m_money_positions_short_all",
    "m_money_positions_spread",
    "other_rept_positions_long",
    "other_rept_positions_short",
    "other_rept_positions_spread",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "open_interest_old",
    "prod_merc_positions_long_1",
    "prod_merc_positions_short_1",
    "swap_positions_long_old",
    "swap_positions_short_old",
    "swap_positions_spread_old",
    "m_money_positions_long_old",
    "m_money_positions_short_old",
    "m_money_positions_spread_1",
    "other_rept_positions_long_1",
    "other_rept_positions_short_1",
    "other_rept_positions_spread_1",
    "tot_rept_positions_long_old",
    "tot_rept_positions_short_1",
    "nonrept_positions_long_old",
    "nonrept_positions_short_old",
    "open_interest_other",
    "prod_merc_positions_long_2",
    "prod_merc_positions_short_2",
    "swap_positions_long_other",
    "swap_positions_short_other",
    "swap_positions_spread_other",
    "m_money_positions_long_other",
    "m_money_positions_short_other",
    "m_money_positions_spread_2",
    "other_rept_positions_long_2",
    "other_rept_positions_short_2",
    "other_rept_positions_spread_2",
    "tot_rept_positions_long_other",
    "tot_rept_positions_short_2",
    "nonrept_positions_long_other",
    "nonrept_positions_short_other",
    "change_in_open_interest_all",
    "change_in_prod_merc_long",
    "change_in_prod_merc_short",
    "change_in_swap_long_all",
    "change_in_swap_short_all",
    "change_in_swap_spread_all",
    "change_in_m_money_long_all",
    "change_in_m_money_short_all",
    "change_in_m_money_spread",
    "change_in_other_rept_long",
    "change_in_other_rept_short",
    "change_in_other_rept_spread",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_prod_merc_long",
    "pct_of_oi_prod_merc_short",
    "pct_of_oi_swap_long_all",
    "pct_of_oi_swap_short_all",
    "pct_of_oi_swap_spread_all",
    "pct_of_oi_m_money_long_all",
    "pct_of_oi_m_money_short_all",
    "pct_of_oi_m_money_spread",
    "pct_of_oi_other_rept_long",
    "pct_of_oi_other_rept_short",
    "pct_of_oi_other_rept_spread",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "pct_of_open_interest_old",
    "pct_of_oi_prod_merc_long_1",
    "pct_of_oi_prod_merc_short_1",
    "pct_of_oi_swap_long_old",
    "pct_of_oi_swap_short_old",
    "pct_of_oi_swap_spread_old",
    "pct_of_oi_m_money_long_old",
    "pct_of_oi_m_money_short_old",
    "pct_of_oi_m_money_spread_1",
    "pct_of_oi_other_rept_long_1",
    "pct_of_oi_other_rept_short_1",
    "pct_of_oi_other_rept_spread_1",
    "pct_of_oi_tot_rept_long_old",
    "pct_of_oi_tot_rept_short_1",
    "pct_of_oi_nonrept_long_old",
    "pct_of_oi_nonrept_short_old",
    "pct_of_open_interest_other",
    "pct_of_oi_prod_merc_long_2",
    "pct_of_oi_prod_merc_short_2",
    "pct_of_oi_swap_long_other",
    "pct_of_oi_swap_short_other",
    "pct_of_oi_swap_spread_other",
    "pct_of_oi_m_money_long_other",
    "pct_of_oi_m_money_short_other",
    "pct_of_oi_m_money_spread_2",
    "pct_of_oi_other_rept_long_2",
    "pct_of_oi_other_rept_short_2",
    "pct_of_oi_other_rept_spread_2",
    "pct_of_oi_tot_rept_long_other",
    "pct_of_oi_tot_rept_short_2",
    "pct_of_oi_nonrept_long_other",
    "pct_of_oi_nonrept_short_other",
    "traders_tot_all",
    "traders_prod_merc_long_all",
    "traders_prod_merc_short_all",
    "traders_swap_short_all",
    "traders_m_money_short_all",
    "traders_m_money_spread_all",
    "traders_other_rept_long_all",
    "traders_other_rept_spread",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "traders_tot_old",
    "traders_prod_merc_long_old",
    "traders_prod_merc_short_old",
    "traders_swap_short_old",
    "traders_m_money_short_old",
    "traders_m_money_spread_old",
    "traders_other_rept_long_old",
    "traders_other_rept_spread_1",
    "traders_tot_rept_long_old",
    "traders_tot_rept_short_old",
    "traders_tot_other",
    "traders_prod_merc_long_other",
    "traders_prod_merc_short_other",
    "traders_swap_long_other",
    "traders_swap_short_other",
    "traders_swap_spread_other",
    "traders_m_money_long_other",
    "traders_m_money_short_other",
    "traders_m_money_spread_other",
    "traders_other_rept_long_other",
    "traders_other_rept_short_2",
    "traders_other_rept_spread_2",
    "traders_tot_rept_long_other",
    "traders_tot_rept_short_other",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "conc_gross_le_4_tdr_long_1",
    "conc_gross_le_4_tdr_short_1",
    "conc_gross_le_8_tdr_long_1",
    "conc_gross_le_8_tdr_short_1",
    "conc_net_le_4_tdr_long_old",
    "conc_net_le_4_tdr_short_old",
    "conc_net_le_8_tdr_long_old",
    "conc_net_le_8_tdr_short_old",
    "conc_gross_le_4_tdr_long_2",
    "conc_gross_le_4_tdr_short_2",
    "conc_gross_le_8_tdr_long_2",
    "conc_gross_le_8_tdr_short_2",
    "conc_net_le_4_tdr_long_other",
    "conc_net_le_4_tdr_short_other",
    "conc_net_le_8_tdr_long_other",
    "conc_net_le_8_tdr_short_other",
    "traders_swap_long_all",
    "traders_swap_spread_all",
    "traders_m_money_long_all",
    "traders_other_rept_short",
    "traders_swap_long_old",
    "traders_swap_spread_old",
    "traders_m_money_long_old",
    "traders_other_rept_short_1",
]
```
</details>

<details>
<summary mdxType="summary">Financial Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "cftc_subgroup_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "futonly_or_combined",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "dealer_positions_long_all",
    "dealer_positions_short_all",
    "dealer_positions_spread_all",
    "asset_mgr_positions_long",
    "asset_mgr_positions_short",
    "asset_mgr_positions_spread",
    "lev_money_positions_long",
    "lev_money_positions_short",
    "lev_money_positions_spread",
    "other_rept_positions_long",
    "other_rept_positions_short",
    "other_rept_positions_spread",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "change_in_open_interest_all",
    "change_in_dealer_long_all",
    "change_in_dealer_short_all",
    "change_in_dealer_spread_all",
    "change_in_asset_mgr_long",
    "change_in_asset_mgr_short",
    "change_in_asset_mgr_spread",
    "change_in_lev_money_long",
    "change_in_lev_money_short",
    "change_in_lev_money_spread",
    "change_in_other_rept_long",
    "change_in_other_rept_short",
    "change_in_other_rept_spread",
    "change_in_tot_rept_long_all",
    "change_in_tot_rept_short",
    "change_in_nonrept_long_all",
    "change_in_nonrept_short_all",
    "pct_of_open_interest_all",
    "pct_of_oi_dealer_long_all",
    "pct_of_oi_dealer_short_all",
    "pct_of_oi_dealer_spread_all",
    "pct_of_oi_asset_mgr_long",
    "pct_of_oi_asset_mgr_short",
    "pct_of_oi_asset_mgr_spread",
    "pct_of_oi_lev_money_long",
    "pct_of_oi_lev_money_short",
    "pct_of_oi_lev_money_spread",
    "pct_of_oi_other_rept_long",
    "pct_of_oi_other_rept_short",
    "pct_of_oi_other_rept_spread",
    "pct_of_oi_tot_rept_long_all",
    "pct_of_oi_tot_rept_short",
    "pct_of_oi_nonrept_long_all",
    "pct_of_oi_nonrept_short_all",
    "traders_tot_all",
    "traders_dealer_short_all",
    "traders_dealer_spread_all",
    "traders_asset_mgr_long_all",
    "traders_lev_money_long_all",
    "traders_lev_money_short_all",
    "traders_lev_money_spread",
    "traders_other_rept_long_all",
    "traders_other_rept_short",
    "traders_tot_rept_long_all",
    "traders_tot_rept_short_all",
    "conc_gross_le_4_tdr_long",
    "conc_gross_le_4_tdr_short",
    "conc_gross_le_8_tdr_long",
    "conc_gross_le_8_tdr_short",
    "conc_net_le_4_tdr_long_all",
    "conc_net_le_4_tdr_short_all",
    "conc_net_le_8_tdr_long_all",
    "conc_net_le_8_tdr_short_all",
    "traders_dealer_long_all",
    "traders_asset_mgr_short_all",
    "traders_asset_mgr_spread",
    "traders_other_rept_spread",
]
```
</details>

<details>
<summary mdxType="summary">Supplemental Report Fields</summary>

```python
[
    "date",
    "report_week",
    "market_and_exchange_names",
    "cftc_contract_market_code",
    "cftc_market_code",
    "cftc_region_code",
    "cftc_commodity_code",
    "commodity",
    "commodity_group",
    "commodity_subgroup",
    "contract_units",
    "id",
    "contract_market_name",
    "open_interest_all",
    "ncomm_postions_long_all_nocit",
    "ncomm_postions_short_all_nocit",
    "ncomm_postions_spread_all_nocit",
    "comm_positions_long_all_nocit",
    "comm_positions_short_all_nocit",
    "tot_rept_positions_long_all",
    "tot_rept_positions_short",
    "nonrept_positions_long_all",
    "nonrept_positions_short_all",
    "cit_positions_long_all",
    "cit_positions_short_all",
    "change_open_interest_all",
    "change_noncomm_long_all_nocit",
    "change_noncomm_short_all_nocit",
    "change_noncomm_spead_all_nocit",
    "change_comm_long_all_nocit",
    "change_comm_short_all_nocit",
    "change_tot_rept_long_all",
    "change_tot_rept_short_all",
    "change_nonrept_long_all",
    "change_nonrept_short_all",
    "change_cit_long_all",
    "change_cit_short_all",
    "pct_open_interest_all",
    "pct_oi_noncomm_long_all_nocit",
    "pct_oi_noncomm_short_all_nocit",
    "pct_oi_noncomm_spread_all_nocit",
    "pct_oi_comm_long_all_nocit",
    "pct_oi_comm_short_all_nocit",
    "pct_oi_tot_rept_long_all_nocit",
    "pct_oi_tot_rept_short_all_nocit",
    "pct_oi_nonrept_long_all_nocit",
    "pct_oi_nonrept_short_all_nocit",
    "pct_oi_cit_long_all",
    "pct_oi_cit_short_all",
    "traders_tot_all",
    "traders_noncomm_long_all_nocit",
    "traders_noncomm_short_all_nocit",
    "traders_noncomm_spread_all_nocit",
    "traders_comm_long_all_nocit",
    "traders_comm_short_all_nocit",
    "traders_tot_rept_long_all_nocit",
    "traders_tot_rept_short_all_nocit",
    "traders_cit_long_all",
    "traders_cit_short_all",
]
```
</details>

</details>

## Example

```python
import pandas as pd
from openbb import obb

pd.set_option("plotting.backend", "plotly")

cot = obb.regulators.cftc.cot("S&P 500 Consolidated", start_date="2014-01-01").to_df()
oi_change = cot[["open_interest_all"]]
sp_price = obb.equity.price.historical("SPY", start_date="2014-01-01", interval="1d", provider="yfinance")
sp_df = sp_price.to_df()[["close"]]

df = oi_change.join(sp_df).pct_change().multiply(100).round(4).dropna()
df.iloc[0, :] = 0
df.columns = ["Change in Open Interest", "Change in Price"]

fig = df.plot()

fig.show(config={"scrollZoom": True})
```

!["S&P Price Change vs. CFTC Open Interest"](https://github.com/user-attachments/assets/cddb9c0a-19ad-482d-82a3-515cd82ec1a1)



---

---
title: Economic Indicators
sidebar_position: 7
description: This page provides a tutorial for getting started using the `obb.economy.indicators` endpoint,
  with the `openbb-econdb` provider extension. The command provides access to over 100 standardized indicator
  symbols, covering countries around the world.
keywords:
- tutorial
- provider
- econdb
- economy
- usage
- indicators
- economic
- CPI
- CORE
- GDP
- transform
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Economic Indicators - User Guides | OpenBB Platform Docs" />

This page provides a tutorial for getting started using the `obb.economy.indicators` endpoint, with the `openbb-econdb` and `openbb-imf` provider extensions.


## IMF

There are currently two IMF databases accessible by this command, and a third (Direction of Trade) is available via `obb.economy.direction_of_trade`.

- International Reserves & Foreign Currency Liquidity
- Financial Soundness Indicators

<details>
<summary mdxType="summary">IMF Indicators</summary>

The `obb.economy.indicators` endpoint provides direct access to over 2600 IMF time series, allowing selection of both multiple series and countries.

### Available Symbols

The complete list of individual series is returned by the `available_indicators` endpoint.

It allows a text query, where ";" is an AND operator and "|" is an OR operator.

```python
obb.economy.available_indicators(provider="imf", query="gold")
```

<details>
<summary mdxType="summary">Results</summary>

| symbol        | symbol_root   | description                                                                                                                                          | dataset   | table                              |   level |   order | children                                                  | unit   |
|:--------------|:--------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:-----------------------------------|--------:|--------:|:----------------------------------------------------------|:-------|
| RAFA_USD      | RAF_USD       | Official Reserve Assets, US Dollars                                                                                                                  | IRFCL     | reserve_assets_and_other_fx_assets |       2 |       2 | RAFAFX_USD,RAFAIMF_USD,RAFASDR_USD,RAFAGOLD_USD,RAFAO_USD | usd    |
| RAFAGOLD_USD  | RAFA_USD      | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped) , US Dollars                                               | IRFCL     | reserve_assets_and_other_fx_assets |       3 |      14 | RAFAGOLDV_OZT                                             | usd    |
| RAFAGOLDV_OZT | RAFAGOLD_USD  | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped), Volume in Millions of Fine Troy Ounces , Fine Troy Ounces | IRFCL     | reserve_assets_and_other_fx_assets |       4 |      15 | -                                                       | ozt    |
| RAOFAG_USD    | RAOFA_USD     | Other Foreign Currency Assets (Specify), Gold Not Included in Official Reserve Assets, US Dollars                                                    | IRFCL     | reserve_assets_and_other_fx_assets |       3 |      25 | -                                                       | usd    |

</details>

```python
obb.economy.available_indicators(provider="imf", query="gold|gdp;usd")
```

<details>
<summary mdxType="summary">Results</summary>

| symbol                      | symbol_root   | description                                                                                                                                                                                                                                                                         | dataset   | table                              |   level | order   | children                                                  | unit   |
|:----------------------------|:--------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:-----------------------------------|--------:|:--------|:----------------------------------------------------------|:-------|
| RAFA_USD                    | RAF_USD       | Official Reserve Assets, US Dollars                                                                                                                                                                                                                                                 | IRFCL     | reserve_assets_and_other_fx_assets |       2 | 2.0     | RAFAFX_USD,RAFAIMF_USD,RAFASDR_USD,RAFAGOLD_USD,RAFAO_USD | usd    |
| RAFAGOLD_USD                | RAFA_USD      | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped) , US Dollars                                                                                                                                                                              | IRFCL     | reserve_assets_and_other_fx_assets |       3 | 14.0    | RAFAGOLDV_OZT                                             | usd    |
| RAFAGOLDV_OZT               | RAFAGOLD_USD  | Official Reserve Assets, Gold (Including Gold Deposits and, If Appropriate, Gold Swapped), Volume in Millions of Fine Troy Ounces , Fine Troy Ounces                                                                                                                                | IRFCL     | reserve_assets_and_other_fx_assets |       4 | 15.0    | -                                                         | ozt    |
| RAOFAG_USD                  | RAOFA_USD     | Other Foreign Currency Assets (Specify), Gold Not Included in Official Reserve Assets, US Dollars                                                                                                                                                                                   | IRFCL     | reserve_assets_and_other_fx_assets |       3 | 25.0    | -                                                         | usd    |
| FSDHG_USD                   | -             | Financial, Financial Soundness Indicators, Encouraged Set, Households, Household Debt to GDP, Gross Domestic Product (GDP), US Dollars                                                                                                                                              | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FSNFAG_USD                  | -             | Financial, Financial Soundness Indicators, Encouraged Set, Other Financial Corporations, Assets to Gross Domestic Product (GDP), Assets, US Dollars                                                                                                                                 | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FSDFAG_USD                  | -             | Financial, Financial Soundness Indicators, Encouraged Set, Other Financial Corporations, Assets to Gross Domestic Product (GDP), Gross Domestic Product (GDP), US Dollars                                                                                                           | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_NFC_LD_FSTDGDP_USD       | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Non-financial corporations, Balance Sheet, Liabilities, Debt, Total debt to GDP, US Dollars                                                                                  | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_IPF_IC_A_FSGDPIC_USD | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Insurance corporations, OFCs assets to gross domestic product: Insurance Corporations, US Dollars | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_MMF_A_FSGDPMMF_USD   | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Money market funds, OFCs assets to gross domestic product:  Money Market funds, US Dollars        | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| FS_OFM_IPF_PF_A_FSGDPPF_USD | -             | Monetary and Financial Accounts, Financial Soundness Indicators, Balance Sheets and Income Statements, Other financial corporations, Total financial system assets, Total Assets, Pension funds, OFCs assets to gross domestic product: Pension Funds, US Dollars                   | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |
| NGDP_USD                    | -             | National Accounts, Expenditure, Gross Domestic Product, US Dollars                                                                                                                                                                                                                  | FSI       | fsi_other                          |       2 | -       | -                                                         | usd    |

</details>


### Presets

Presets are a collection of symbols, typically complete tables from sections of each database.

- 'IRFCL': All the data from the set of indicators. Not compatible with multiple countries.
- 'irfcl_top_lines': The default, top line items from the IRFCL data. Compatible with multiple countries.
- 'reserve_assets_and_other_fx_assets': Table I of the IRFCL data. Not compatible with multiple countries.
- 'predetermined_drains_on_fx_assets': Table II of the IRFCL data. Not compatible with multiple countries.
- 'contingent_drains_fx_assets': Table III of the IRFCL data. Not compatible with multiple countries.
- 'memorandum_items': The memorandum items table of the IRFCL data. Not compatible with multiple countries.
- 'gold_reserves': Gold reserves as value in USD and Fine Troy Ounces. Compatible with multiple countries.
- 'derivative_assets': Net derivative assets as value in USD. Compatible with multipile countries.
- 'fsi_core': The core Financial Soundness Indicators. Compatible with multiple countries.
- 'fsi_core_underlying': The core FSIs underlying series data. Not compatible with country='all'.
- 'fsi_encouraged_set': The encouraged set of Financial Soundness Indicators. Not compatible with country='all'.
- 'fsi_other': The other Financial Soundness Indicators. Not compatible with country='all'.
- 'fsi_balance_sheets': Data categorized as Balance Sheets and Income Statements. Not compatible with country='all'.
- 'fsi_all': All the Financial Soundness Indicators. Not compatible with multiple countries.

### Entering Countries

Countries can be entered as a list, or a comma-separated string. A country can be either, the full name in lower_snake_case, or the two-letter ISO country code.

```python
obb.economy.indicators(provider="imf", symbol="irfcl_top_lines", country="us,italy,france,DE")
```

When the number of symbols being requested is low, setting the parameter to, "all", will return all countries available for each symbol.

</details>



## EconDB

:::note
**OpenBB is not affiliated with EconDB. All service is provided "AS IS" and without warranty.**
:::

The `obb.economy.indicators` function provides access to over 100 standardized indicator symbols, covering countries around the world.


## Authorization

This command requires an API key. You can create an account [here](https://econdb.com), and enter the key assigned.

Leaving the key as None will attempt to retrieve a temporary token that is assigned when downloading the data as a CSV file from a browser.
This is a workaround and can be blocked by Cloudflare. In this instance, the temporary token can be viewed by opening any indicator in your browser,
then selecting 'Python' from the 'Export' drop-down.

![Temporary Token](https://github.com/OpenBB-finance/OpenBB/assets/85772166/d2d4c6a7-e8b1-4345-b28f-0693ddb8dcf1)

The best method is to support the service by registering an account.

```python
from openbb import obb
obb.user.credentials.econdb_api_key = REPLACE_WITH_KEY
```

See the [API keys](/platform/settings/user_settings/api_keys) page for more information on credentials.

## Important Considerations

**Carefully inspect data before conducting analysis and arriving at conclusions.**

EconDB sources data directly from national agencies, or other reputable sources such as the IMF, but the data itself may not be directly comparable between collections of countries. For example, some countries will have GDP data as 'annualized' (North America) while others report the values for the period.

These factors can be considered as "known-unknowns", the metadata will not contain this information.

:::important
- This function will not attempt to normalize the values for cross-country comparison. Some values should be manually adjusted, post-request, to accommodate.

- Transforming levels as USD, or % of GDP, may have unexpected results where values are not appropriate for this conversion. Do not attempt to apply these transformations universally.

- Values that are scaled to, or transformed as, a percent are returned as a normalized value - i.e, 1% = 0.01. It will have a multiplier value of 1, which is not indicative of display values.

- Contextual information is contained within metadata, returned under the "extra" attribute of the function response.
:::

## Available Indicators

EconDB has a list of "main" indicators, which are standardized base symbols across the available countries for each.

```python
from openbb import obb

indicators = obb.economy.available_indicators(provider="econdb").to_df()

indicators.iloc[0]
```

| symbol_root           | POLIR                      |
|:----------------------|:---------------------------|
| symbol                | POLIREA                    |
| country               | Euro area                  |
| iso                   | EA                         |
| description           | Policy rate - short term   |
| frequency             | D                          |
| currency              | PERCENT                    |
| scale                 | Units                      |
| multiplier            | 1                          |
| transformation        | Period level               |
| source                | European Central Bank      |
| first_date            | 1999-01-01                 |
| last_date             | 2024-04-08                 |
| last_insert_timestamp | 2024-04-08 12:27:05.089860 |

:::tip
Metadata is returned in the command response to the 'extra' attribute.
:::


```python
data = obb.economy.indicators("POLIR", country="EA")
data.extra["results_metadata"]
```

```python
{'POLIREA': {'title': 'Euro area - Policy rate - short term',
  'country': 'Euro area',
  'frequency': 'D',
  'dataset': 'ECBFM',
  'transformation': None,
  'units': 'PERCENT',
  'scale': 'Units',
  'multiplier': 1,
  'additional_info': {'FREQ:Frequency': 'D:Daily',
   'REF_AREA:Reference area': 'U2:Euro area (Member States and Institutions of the Euro Area) changing composition',
   'CURRENCY:Currency': 'EUR:Euro',
   'PROVIDER_FM:Financial market provider': '4F:ECB',
   'INSTRUMENT_FM:Financial market instrument': 'KR:Key interest rate',
   'PROVIDER_FM_ID:Financial market provider identifier': 'MRR_FR:ECB Main refinancing operations - fixed rate tenders (fixed rate) (date of changes)',
   'DATA_TYPE_FM:Financial market data type': 'LEV:Level'}}}
```

<details>
<summary mdxType="summary">Basic Descriptions</summary>


Basic descriptions of the base symbols can be imported from within the extension module helpers.

```python
from openbb_econdb.utils.helpers import INDICATORS_DESCRIPTIONS
```

:::important
This list should not be considered as the absolute source of truth. The metadata for the indicator will be returned in the command response, under the `extras` attribute.
:::

| ACPOP     | Active population                                  |
|:----------|:---------------------------------------------------|
| CA        | Current account balance                            |
| CAR       | Passenger car sales                                |
| CBAL      | Commercial balance (goods + services)              |
| CI        | Change in inventories                              |
| CKA       | Net foreign investment                             |
| CLAIMS    | Weekly unemployment insurance claims               |
| CLI       | OECD CLI                                           |
| CON       | Total consumption                                  |
| CONF      | Consumer confidence index                          |
| CORE      | Core consumer price index                          |
| CP        | Construction production                            |
| CPI       | Consumer price index                               |
| CRED      | Domestic credit                                    |
| CREDEA    | Domestic credit                                    |
| DWPE      | Dwelling permits                                   |
| ELE       | Production electricity                             |
| EMP       | Total employment                                   |
| EMRATIO   | Employment to working age population               |
| EQYCAP    | Market capitalization                              |
| EXP       | Exports of goods and services                      |
| EXPMON    | Monthly exports                                    |
| GASDEM    | Gas demand                                         |
| GASODEM   | Gasoline demand                                    |
| GASOPROD  | Gasoline production                                |
| GASPROD   | Gas production                                     |
| GBAL      | Government balance                                 |
| GCF       | Gross capital formation                            |
| GDEBT     | Government debt                                    |
| GDEBTN    | Government net debt                                |
| GDP       | Gross domestic product                             |
| GDPDEF    | GDP deflator                                       |
| GDPPC     | GDP per capita                                     |
| GFCF      | Gross fixed capital formation                      |
| GREV      | General government total revenue                   |
| GSPE      | General government total expenditure               |
| HHDIR     | Household debt to income ratio                     |
| HHS       | Household saving                                   |
| HOU       | House price                                        |
| IBD1      | Interbank lending overnight rate                   |
| IIPA      | International investment position: Assets          |
| IIPL      | International investment position: Liabilities     |
| IMP       | Imports of goods and services                      |
| IMPMON    | Monthly imports                                    |
| INVER     | Investment rate                                    |
| IP        | Industrial production                              |
| JHR       | Job hires rate                                     |
| JLR       | Job layoffs rate                                   |
| JQR       | Job quits rate                                     |
| JVR       | Job vacancy rate                                   |
| KA        | Capital account                                    |
| LE00      | Life expectancy at birth                           |
| LMICS     | Low and Middle Income Commodity Index (World Bank) |
| M3        | Money supply                                       |
| M3YD      | 3 month yield                                      |
| MB        | Monetary base                                      |
| NCT       | Net current transfers (Secondary Income)           |
| NFCI      | Non-financial corporations investment rate         |
| NFCLOAN   | Lending to non-financial corporations              |
| NIIP      | Net international investment position              |
| NPL       | Non performing loans                               |
| NY        | Net income from abroad (Primary Income)            |
| OILDEM    | Oil demand                                         |
| OILPROD   | Oil production                                     |
| PALUM     | Aluminum                                           |
| PAPPLE    | Non-Citrus Fruit, Apple                            |
| PART      | Participation rate                                 |
| PBANSOP   | Bananas                                            |
| PBARL     | Barley                                             |
| PBEEF     | Beef                                               |
| PCE       | Personal consumption expenditure price index       |
| PCHANA    | Legumes, Chickpea                                  |
| PCHROM    | Chromium                                           |
| PCOALAU   | Coal, Australia                                    |
| PCOALSA   | Coal, South Africa                                 |
| PCOBA     | Cobalt                                             |
| PCOCO     | Cocoa                                              |
| PCOFFOTM  | Coffee, Other Mild Arabica                         |
| PCOFFROB  | Coffee, Robustas                                   |
| PCOIL     | Coconut Oil                                        |
| PCOPP     | Copper                                             |
| PCOTTIND  | Cotton                                             |
| PDAP      | Diammonium phosphate                               |
| PFSHMEAL  | Fish Meal                                          |
| PGASO     | Gasoline                                           |
| PGNUTS    | Groundnuts                                         |
| PGOLD     | Gold                                               |
| PHEATOIL  | Heating Oil                                        |
| PHIDE     | Hides                                              |
| PIORECR   | Iron                                               |
| PLAMB     | Lamb                                               |
| PLEAD     | Lead                                               |
| PLITH     | Lithium                                            |
| PLMMODY   | Molybdenum                                         |
| PLOGORE   | Soft Logs                                          |
| PLOGSK    | Hard Logs, Import Price Japan                      |
| PMAIZMT   | Corn                                               |
| PMANGELE  | Manganese                                          |
| PMILK     | Dairy Products, Milk                               |
| PNGASEU   | Natural gas, EU                                    |
| PNGASJP   | LNG, Asia                                          |
| PNGASUS   | Natural Gas, US Henry Hub Gas                      |
| PNICK     | Nickel                                             |
| POATS     | Oats                                               |
| POILAPSP  | APSP crude oil($/bbl)                              |
| POILBRE   | Brent Crude                                        |
| POILDUB   | Dubai Crude                                        |
| POILWTI   | WTI Crude                                          |
| POLIR     | Policy rate - short term                           |
| POLVOIL   | Olive Oil                                          |
| POP       | Population                                         |
| PORANG    | Orange                                             |
| PPALLA    | Palladium                                          |
| PPI       | Producer price index                               |
| PPLAT     | Platinum                                           |
| PPOIL     | Palm Oil                                           |
| PPORK     | Swine                                              |
| PPOTASH   | Potassium Fertilizer                               |
| PPOULT    | Poultry                                            |
| PPROPANE  | Propane                                            |
| PRC       | Private consumption                                |
| PREODOM   | Rare Earth Elements                                |
| PRICENPQ  | Rice, Thailand                                     |
| PRIDEBT   | Private debt                                       |
| PROIL     | Rapeseed Oil                                       |
| PRUBB     | Rubber                                             |
| PSALM     | Fish                                               |
| PSAWMAL   | Hard Sawnwood, Dark Red Meranti                    |
| PSAWORE   | Soft Sawnwood, Average of Softwoods,               |
| PSHRI     | Shrimp                                             |
| PSILLUMP  | Silicon                                            |
| PSILVER   | Silver                                             |
| PSMEA     | Soybean Meal                                       |
| PSOIL     | Soybeans Oil                                       |
| PSORG     | Sorghum                                            |
| PSOYB     | Soybeans                                           |
| PSUGAISA  | Sugar, No. 11, World                               |
| PSUGAUSA  | Sugar, No. 16, US                                  |
| PSUNO     | Sunflower Oil                                      |
| PTEA      | Tea, Kenyan                                        |
| PTEAINDIA | Tea, Kolkata                                       |
| PTEAMOM   | Tea, Mombasa                                       |
| PTEASL    | Tea, Colombo                                       |
| PTIN      | Tin                                                |
| PTOMATO   | Vegetables, Tomato                                 |
| PUC       | Public consumption                                 |
| PURAN     | Uranium                                            |
| PUREA     | Urea                                               |
| PVANPENT  | Vanadium                                           |
| PWHEAMT   | Wheat                                              |
| PWOOLC    | Wool, Coarse                                       |
| PWOOLF    | Wool, Fine                                         |
| PZINC     | Zinc                                               |
| RCI       | Real change in inventories                         |
| RCON      | Real total consumption                             |
| REER      | Real effective exchange rate                       |
| REEREA    | Real effective exchange rate                       |
| RETA      | Retail trade                                       |
| REXP      | Real exports of goods and services                 |
| RGCF      | Real gross capital formation                       |
| RGDP      | Real gross domestic product                        |
| RGDPPC    | Real GDP per capita                                |
| RGFCF     | Real gross fixed capital formation                 |
| RIMP      | Real imports of goods and services                 |
| RPRC      | Real private consumption                           |
| RPUC      | Real public consumption                            |
| SEI       | Stock exchange index                               |
| SENT      | Sentiment index                                    |
| TB        | Trade balance                                      |
| URATE     | Unemployment                                       |
| UTIL      | Utilization rate                                   |
| WAGE      | Wages/Earnings                                     |
| WAGEMAN   | Hourly wage manufacturing                          |
| Y10YD     | Long term yield                                    |

</details>

## Countries


<details>

The `country` parameter will accept the ISO country code, or the country name. Regional groups listed below are also valid:

- all
- africa
- central_asia
- east_asia
- europe
- g7
- g20
- latin_america
- middle_east
- north_america
- oceania
- south_asia
- southeast_asia

:::note
Some symbols do not have a country - e.g., commodity items - and they will ignore any supplied values to the parameter.
Not every indicator has data for every country. Items with no results will be communicated via the `warnings` attribute of the response object.

```python
obb.economy.indicators("POLIR", country="southeast_asia")
```
```console
OBBject

id: 0661ac07-ab9c-7ebf-8000-849fef1202bc
results: [{'date': datetime.date(2013, 4, 29), 'symbol': 'POLIRSG', 'country': 'Sin...
provider: econdb
warnings: [{'category': 'UserWarning', 'message': "Invalid country code for...
chart: None
extra: {'results_metadata': {'POLIRID': {'title': 'Indonesia - Policy rate - short ...
```

:::

### Countries By Indicator

In addition to filtering the `available_indicators` data locally, countries by indicator can be imported as a utility function from the `openbb_econdb.utils.helpers` module.

```python
from openbb_econdb.utils.helpers import get_indicator_countries

get_indicator_countries("GDPPC")  # returns a list of two-letter ISO country codes
```
</details>


## How To Enter Symbols

<details>

The three parameters - symbol, country, transform - all work together.

- Symbol (base symbol)
  - CPI, GDP, CORE, etc
  - Multiple items allowed
- Country
  - ISO country code, or name
  - Multiple items allowed
- Transform
  - `tpop`: Percent change from previous period
  - `toya`: Percent change from year ago
  - `tusd`: Values as US dollars
  - `tpgp`: Values as a percent of GDP

The `transform` will apply to all combinations of `symbol` and `country`.

:::warning
If you attempt to pass a base symbol (excluding commodity and world indicators) with no country, it will raise an error.
:::

<details>
<summary mdxType="summary">Example - One Indicator & Country</summary>

M3 Money Supply

```python
data = obb.economy.indicators("M3", country="us")

data.to_df().tail(12)
```

| date       | symbol_root   | symbol   | country       |   value |
|:-----------|:--------------|:---------|:--------------|--------:|
| 2023-03-01 | M3            | M3US     | United States |   21027 |
| 2023-04-01 | M3            | M3US     | United States |   20843 |
| 2023-05-01 | M3            | M3US     | United States |   20711 |
| 2023-06-01 | M3            | M3US     | United States |   20749 |
| 2023-07-01 | M3            | M3US     | United States |   20724 |
| 2023-08-01 | M3            | M3US     | United States |   20695 |
| 2023-09-01 | M3            | M3US     | United States |   20669 |
| 2023-10-01 | M3            | M3US     | United States |   20636 |
| 2023-11-01 | M3            | M3US     | United States |   20723 |
| 2023-12-01 | M3            | M3US     | United States |   20890 |
| 2024-01-01 | M3            | M3US     | United States |   20862 |
| 2024-02-01 | M3            | M3US     | United States |   20788 |

```python
data.extra.get("results_metadata")
```
```python
{'M3US': {'title': 'United States - Money supply',
  'country': 'United States',
  'frequency': 'M',
  'dataset': 'FRB_H6_M2',
  'transform': None,
  'units': 'DOMESTIC',
  'scale': 'Billions',
  'multiplier': 1000000000,
  'additional_info': {'ADJUSTED:Seasonal Adjustment': 'NSA:Not seasonally adjusted',
   'CURRENCY:Currency': 'USD:United States / United States Dollar',
   'FREQ:Frequency': '129:Monthly',
   'SERIES_NAME:Series name (FRB)': 'M2_N.M:M2_N.M',
   'UNIT:Units': 'CURRENCY:Currency'}}}
```
</details>

<details>
<summary mdxType="summary">Example - One Indicator & Country With Transform</summary>

US PPI - Change from one year ago.

```python
data = obb.economy.indicators("PPI", country="us", transform="toya")

data.to_df().tail(12)
```

| date       | symbol_root   | symbol     | country       |    value |
|:-----------|:--------------|:-----------|:--------------|---------:|
| 2023-04-01 | PPI           | PPIUS~TOYA | United States | 0.022995 |
| 2023-05-01 | PPI           | PPIUS~TOYA | United States | 0.011822 |
| 2023-06-01 | PPI           | PPIUS~TOYA | United States | 0.001912 |
| 2023-07-01 | PPI           | PPIUS~TOYA | United States | 0.008722 |
| 2023-08-01 | PPI           | PPIUS~TOYA | United States | 0.016003 |
| 2023-09-01 | PPI           | PPIUS~TOYA | United States | 0.021542 |
| 2023-10-01 | PPI           | PPIUS~TOYA | United States | 0.013481 |
| 2023-11-01 | PPI           | PPIUS~TOYA | United States | 0.008465 |
| 2023-12-01 | PPI           | PPIUS~TOYA | United States | 0.00948  |
| 2024-01-01 | PPI           | PPIUS~TOYA | United States | 0.008222 |
| 2024-02-01 | PPI           | PPIUS~TOYA | United States | 0.015153 |
| 2024-03-01 | PPI           | PPIUS~TOYA | United States | 0.020896 |

```python
data.extra.get("results_metadata")
```
```
{'PPIUS~TOYA': {'title': 'United States - Producer price index',
  'country': 'United States',
  'frequency': 'M',
  'dataset': 'BLS_PPI00',
  'transform': 'Change from one year ago',
  'units': 'INDEX',
  'scale': 'PERCENT',
  'multiplier': 1,
  'additional_info': {'DATA_DOMAIN:Data Domain': 'PPI:Producer price indices',
   'REF_AREA:Reference country or area': 'US:United States',
   'INDICATOR:Economic Indicator': 'PPPI_SA_IX:Prices, Producer Price Index, All Commodities, Seasonally adjusted, Index',
   'COUNTERPART_AREA:Counterpart country or area': '_Z:Not applicable',
   'FREQ:Frequency': 'M:Monthly',
   'UNIT_MULT:Unit multiplier': '0:Units'}}}
```
</details>

<details>
<summary mdxType="summary">Example - Commodity Indicator</summary>

Values are always in USD.

```python
lead = obb.economy.indicators("plead")

lead.to_df().tail(4)
```

| date       | symbol_root   | symbol   | country   |   value |
|:-----------|:--------------|:---------|:----------|--------:|
| 2023-10-01 | PLEAD         | PLEAD    | World     |  2131.4 |
| 2023-11-01 | PLEAD         | PLEAD    | World     |  2188.5 |
| 2023-12-01 | PLEAD         | PLEAD    | World     |  2027.2 |
| 2024-01-01 | PLEAD         | PLEAD    | World     |  2087.4 |

```python
lead.extra["results_metadata"]
```
```python
{'PLEAD': {'title': 'World - Lead',
  'country': 'World',
  'frequency': 'M',
  'dataset': 'IMF_PCPS',
  'transform': None,
  'units': 'USD',
  'scale': 'Units',
  'multiplier': 1,
  'additional_info': {'FREQ:Frequency': 'M:Monthly',
   'REF_AREA:Reference Area': 'W00:All Countries, excluding the IO',
   'COMMODITY:Commodity': 'PLEAD:Primary Commodity Prices, Lead',
   'UNIT_MEASURE:Unit of Measure': 'USD:US Dollars',
   'UNIT_MULT:Scale': '0:Units'}}}
```
</details>

<details>
<summary mdxType="summary">Example - Multiple Indicators & Countries With Transform</summary>

```python
params = {"symbol": "core,cpi", "country": "us,de,jp", "transform": "toya"}
data = obb.economy.indicators(**params)
df = data.to_df().filter(like="2024", axis=0)

df
```

| date       | symbol_root   | symbol      | country       |    value |
|:-----------|:--------------|:------------|:--------------|---------:|
| 2024-01-01 | CORE          | COREDE~TOYA | Germany       | 0.03394  |
| 2024-01-01 | CORE          | COREJP~TOYA | Japan         | 0.03523  |
| 2024-01-01 | CORE          | COREUS~TOYA | United States | 0.03875  |
| 2024-01-01 | CPI           | CPIDE~TOYA  | Germany       | 0.02887  |
| 2024-01-01 | CPI           | CPIJP~TOYA  | Japan         | 0.021012 |
| 2024-01-01 | CPI           | CPIUS~TOYA  | United States | 0.03106  |
| 2024-02-01 | CORE          | COREDE~TOYA | Germany       | 0.03454  |
| 2024-02-01 | CORE          | COREJP~TOYA | Japan         | 0.03216  |
| 2024-02-01 | CORE          | COREUS~TOYA | United States | 0.03762  |
| 2024-02-01 | CPI           | CPIDE~TOYA  | Germany       | 0.02517  |
| 2024-02-01 | CPI           | CPIJP~TOYA  | Japan         | 0.02788  |
| 2024-02-01 | CPI           | CPIUS~TOYA  | United States | 0.03166  |
| 2024-03-01 | CORE          | COREUS~TOYA | United States | 0.03797  |
| 2024-03-01 | CPI           | CPIDE~TOYA  | Germany       | 0.021533 |
| 2024-03-01 | CPI           | CPIUS~TOYA  | United States | 0.03475  |
</details>

<details>
<summary mdxType="summary">Example - All Countries</summary>

Setting the country to "all" will retrieve data for all available countries.

```python
data = obb.economy.indicators("ny", country="all", transform="tusd")

data.to_df().filter(like="2024", axis=0)
```
| date       | symbol_root   | symbol    | country    |    value |
|:-----------|:--------------|:----------|:-----------|---------:|
| 2024-01-01 | NY            | NYBE~TUSD | Belgium    |  1132.6  |
| 2024-01-01 | NY            | NYBG~TUSD | Bulgaria   |   -78.79 |
| 2024-01-01 | NY            | NYHR~TUSD | Croatia    |    31.99 |
| 2024-01-01 | NY            | NYCZ~TUSD | Czechia    |  -676.3  |
| 2024-01-01 | NY            | NYDK~TUSD | Denmark    |  1323.6  |
| 2024-01-01 | NY            | NYEE~TUSD | Estonia    |  -131.74 |
| 2024-01-01 | NY            | NYFI~TUSD | Finland    |   626.4  |
| 2024-01-01 | NY            | NYFR~TUSD | France     |  8570    |
| 2024-01-01 | NY            | NYDE~TUSD | Germany    | 13656    |
| 2024-01-01 | NY            | NYGR~TUSD | Greece     |   451.5  |
| 2024-01-01 | NY            | NYHU~TUSD | Hungary    |  -528.7  |
| 2024-01-01 | NY            | NYIT~TUSD | Italy      |  -509.5  |
| 2024-01-01 | NY            | NYLV~TUSD | Latvia     |    53.57 |
| 2024-01-01 | NY            | NYLT~TUSD | Lithuania  |  -111.62 |
| 2024-01-01 | NY            | NYLU~TUSD | Luxembourg | -3791    |
| 2024-01-01 | NY            | NYMT~TUSD | Malta      |  -218.54 |
| 2024-01-01 | NY            | NYPL~TUSD | Poland     | -3029    |
| 2024-01-01 | NY            | NYPT~TUSD | Portugal   |    28.42 |
| 2024-01-01 | NY            | NYRO~TUSD | Romania    |  -410.1  |
| 2024-01-01 | NY            | NYSK~TUSD | Slovakia   |  -342.7  |
| 2024-01-01 | NY            | NYSI~TUSD | Slovenia   |   -82.76 |
| 2024-01-01 | NY            | NYSE~TUSD | Sweden     |  2334.1  |


```python
data.extra.get("results_metadata")["NYSE~TUSD"]
```
```
{'title': 'Sweden - Net income from abroad (Primary Income)',
 'country': 'Sweden',
 'frequency': 'M',
 'dataset': 'BOP_C6_M',
 'transform': 'Values as US dollars',
 'units': 'USD',
 'scale': 'Units',
 'multiplier': 1000000,
 'additional_info': {'GEO:Geopolitical entity (reporting)': 'SE:Sweden',
  'PARTNER:Geopolitical entity (partner)': 'WRL_REST:Rest of the world',
  'SECTPART:Sector (ESA 2010)': 'S1:Total economy',
  'SECTOR10:Sector (ESA 2010)': 'S1:Total economy',
  'FREQ:Frequency': 'M:Monthly',
  'STK_FLOW:Stock or flow': 'BAL:Balance',
  'CURRENCY:Currency': 'MIO_NAC:Million units of national currency',
  'BOP_ITEM:BOP_item': 'IN1:Primary income'}}
```
</details>

</details>

## Advanced Symbols

<details>

The grouping behaviour can be overridden. This will allow multiple transformations, or for a specific symbol to ignore the supplied `country` and `transform` parameters.

<details>
<summary mdxType="summary">Example - Bypass Group Parameters</summary>

The "~" character is used to separate the base symbol + 2-letter ISO country code, and the transformation.
It works as a flag to exclude from the other parameters.

```python
obb.economy.indicators("CPIUS~").to_df().tail(2)
```

| date       | symbol_root   | symbol   | country       |   value |
|:-----------|:--------------|:---------|:--------------|--------:|
| 2024-02-01 | CPI           | CPIUS    | United States |   311.1 |
| 2024-03-01 | CPI           | CPIUS    | United States |   312.2 |

Without "~", symbols are assumed to be a base symbol, and require a country parameter. An error (or warning where at least one symbol supplied was valid) is raised if the condition is not met.

```python
obb.economy.indicators("CPIUS")
```

```console
OpenBBError: No valid combination of indicator symbols and countries were supplied.
Valid countries for 'CPIUS' are: None
If the symbol - CPIUS - is missing a country code. Please add the two-letter country code or use the country parameter.
If already included, add '~' to the end of the symbol.
```

This example bypasses the transformation for US data, applying it only to France.

```python
obb.economy.indicators(symbol=["CPIUS~","CPI"], country="fr", transform="toya").to_df().tail(2)
```

| date       | symbol_root   | symbol     | country       |      value |
|:-----------|:--------------|:-----------|:--------------|-----------:|
| 2024-03-01 | CPI           | CPIFR~TOYA | France        |   0.022947 |
| 2024-03-01 | CPI           | CPIUS      | United States | 312.2      |

</details>

<details>
<summary mdxType="summary">Example - Non-Standard Symbols</summary>

The `symbol` parameter can also be used to access non-standard series. These are specific to reporting entities, like the Ministry of Finance, Japan.
These symbols are not searchable, but the structure will be familiar if you have worked with the particular source before.
For this purpose, enter each symbol ending with, "~".

:::important
Non-standard symbols will not have transformations, standardized metadata, or normalized percent values.
:::

Japan Yield Curve

```python
symbols = [
  "MFJP_IR.1Y.D.JP~",
  "MFJP_IR.2Y.D.JP~",
  "MFJP_IR.3Y.D.JP~",
  "MFJP_IR.4Y.D.JP~",
  "MFJP_IR.5Y.D.JP~",
  "MFJP_IR.6Y.D.JP~",
  "MFJP_IR.7Y.D.JP~",
  "MFJP_IR.8Y.D.JP~",
  "MFJP_IR.9Y.D.JP~",
  "MFJP_IR.10Y.D.JP~",
  "MFJP_IR.15Y.D.JP~",
  "MFJP_IR.20Y.D.JP~",
  "MFJP_IR.25Y.D.JP~",
  "MFJP_IR.30Y.D.JP~",
  "MFJP_IR.40Y.D.JP~",
]
data = obb.economy.indicators(symbol=symbols)

curve = data.to_df().filter(like="2024-04-11", axis=0)

curve
```

| date       | symbol_root   | symbol           | country   |   value |
|:-----------|:--------------|:-----------------|:----------|--------:|
| 2024-04-11 |               | MFJP_IR.1Y.D.JP  | Japan     |   0.068 |
| 2024-04-11 |               | MFJP_IR.2Y.D.JP  | Japan     |   0.27  |
| 2024-04-11 |               | MFJP_IR.3Y.D.JP  | Japan     |   0.28  |
| 2024-04-11 |               | MFJP_IR.4Y.D.JP  | Japan     |   0.37  |
| 2024-04-11 |               | MFJP_IR.5Y.D.JP  | Japan     |   0.485 |
| 2024-04-11 |               | MFJP_IR.6Y.D.JP  | Japan     |   0.508 |
| 2024-04-11 |               | MFJP_IR.7Y.D.JP  | Japan     |   0.592 |
| 2024-04-11 |               | MFJP_IR.8Y.D.JP  | Japan     |   0.68  |
| 2024-04-11 |               | MFJP_IR.9Y.D.JP  | Japan     |   0.757 |
| 2024-04-11 |               | MFJP_IR.10Y.D.JP | Japan     |   0.854 |
| 2024-04-11 |               | MFJP_IR.15Y.D.JP | Japan     |   1.289 |
| 2024-04-11 |               | MFJP_IR.20Y.D.JP | Japan     |   1.625 |
| 2024-04-11 |               | MFJP_IR.25Y.D.JP | Japan     |   1.78  |
| 2024-04-11 |               | MFJP_IR.30Y.D.JP | Japan     |   1.907 |
| 2024-04-11 |               | MFJP_IR.40Y.D.JP | Japan     |   2.065 |

```python
data.extra["results_metadata"].get("MFJP_IR.5Y.D.JP")
```

```python
{'title': 'Japan - Japanese Government Bonds - 5Y yield',
 'country': 'Japan',
 'frequency': 'D',
 'dataset': 'MFJP_IR',
 'transform': None,
 'units': None,
 'scale': None,
 'multiplier': 1,
 'additional_info': {'3:Indicator': '8:Japanese Government Bonds - 5Y yield',
  'GEO:None': '107:None'}}
```
</details>
</details>


---

---
title: Introduction to Financial Statements
sidebar_position: 5
description: This page provides an introduction to financial statement data available in the OpenBB Platform. This includes quarterly and annual reports, along with metrics and ratios by company. This guide provides examples for using the variety of sources.
keywords:
- stocks
- companies
- earnings
- dividends
- expectations
- dividend yield
- analyst consensus
- EPS
- assets
- total assets
- financial statements
- cash flow statement
- income statement
- balance sheet
- ratios
- quick ratio
- dividends
- market cap
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Financial Statements - Usage | OpenBB Platform Docs" />

OpenBB Platform data extensions provide access to financial statements as quarterly or annual.

There are also endpoints for ratios and other common non-GAAP metrics.

Most data providers require a subscription to access all data, refer to the website of a specific provider for details on entitlements and coverage.

Financial statement functions are grouped under the `obb.equity.fundamental` module.

:::info
To begin, import the OpenBB Platform into a Python session:

```python
from openbb import obb
```

:::

## Financial Statements

The typical financial statements consist of three endpoints:

- Balance Sheet: `obb.equity.fundamental.balance()`
- Income Statement: `obb.equity.fundamental.income()`
- Cash Flow Statement: `obb.equity.fundamental.cash()`

The main parameters are:

- `symbol`: The company's ticker symbol.
- `period`: 'annual' or 'quarter'. Default is 'annual'.
- `limit`: Limit the number of results returned, from the latest. Default is 5. For perspective, 150 will go back to 1985. The amount of historical records varies by provider.

<details>
<summary mdxType="summary">Field Names</summary>

:::info

- Every data provider has their own way of parsing and organizing the three financial statements.
- Items within each statement will vary by source and by the type of company reporting.
- Names of line items will vary by source.
- "Date" values may differ because they are from the period starting/ending or date of reporting.

:::

This example highlights how different providers will have different labels for company facts.

```python
import pandas as pd

df = pd.DataFrame()

df["yfinance"] = (
  obb.equity.fundamental.balance("TGT", provider="yfinance", limit=3)
  .to_df().get("total_assets")
)

df["fmp"] = (
  obb.equity.fundamental.balance("TGT", provider="fmp", limit=3)
  .to_df().get("total_assets")
)

df["intrinio"] = (
  obb.equity.fundamental.balance("TGT", provider="intrinio", limit=3)
  .to_df().get("total_assets")
)

df["polygon"] = (
  obb.equity.fundamental.balance("TGT", provider="polygon", limit=3)
  .to_df().get("total_assets")
)

df
```

|    |    yfinance |         fmp |    intrinio |     polygon |
|---:|------------:|------------:|------------:|------------:|
|  0 | 42779000000 | 42779000000 | 42779000000 | 42779000000 |
|  1 | 51248000000 | 51248000000 | 51248000000 | 51248000000 |
|  2 | 53811000000 | 53811000000 | 53811000000 | 53811000000 |
|  3 | 53335000000 | 53335000000 | 53335000000 | 53335000000 |

</details>

<details>
<summary mdxType="summary">Weighted Average Shares Outstanding</summary>

This key metric will be found under the income statement. It might also be called, 'basic', and the numbers do not include authorized but unissued shares.

A declining count over time is a sign that the company is returning capital to shareholders in the form of buy backs. Under ideal circumstances, it is more capital-efficient, for both company and shareholders, because distributions are double-taxed.

The company pays income tax on dividends paid, and the beneficiary pays income tax again on receipt.

A company will disclose how many shares are outstanding at the end of the period  as a weighted average over the reporting period - three months.

Let's take a look at Target. To make the numbers easier to read, we'll divide the entire column by one million.

```python
data = (
  obb.equity.fundamental.income("TGT", provider='fmp', limit=150, period="quarter")
  .to_df()
)

shares = data["weighted_average_basic_shares_outstanding"]/1000000
```

Where this data starts,

```python
shares.head(1)
```

| date       |   weighted_average_basic_shares_outstanding |
|:--------------------|--------------------------------------:|
| 1986-07-31 |                           1168.82 |

versus currently,

```python
shares.tail(1)
```

| date       |   weighted_average_basic_shares_outstanding |
|:--------------------|--------------------------------------:|
| 2023-10-31 |                           461.6 |

Thirty-seven years later, the share count is approaching a two-thirds reduction. That is 12.2% over the past five years.

```python
shares.pct_change(20).iloc[-1]
```

```console
-0.12
```

In four reporting periods, 1.3 million shares have been taken out of the float.

```python
shares.iloc[-4] - shares.iloc[-1]
```

```console
-1.3
```

With an average closing price of $144.27, that represents approximately $190M in buy backs.

```python
price = (
  obb.equity.price.historical("TGT", start_date="2022-10-01", provider="fmp")
  .to_df()
)

round((price["close"].mean()*1300000)/1000000, 2)
```

```console
187.55
```
</details>

<details>
<summary mdxType="summary">Dividends Paid</summary>

Dividends paid is in the cash flow statement. We can calculate the amount-per-share with the reported data.

```python
dividends = (
  obb.equity.fundamental.cash("TGT", provider='fmp', limit=150, period="quarter")
  .to_df()[["payment_of_dividends"]]
)

dividends["shares"] = data[["weighted_average_basic_shares_outstanding"]]
dividends["div_per_share"] = abs(dividends["payment_of_dividends"]/dividends["shares"])

dividends["div_per_share"].tail(4)
```

| date          |   div_per_share |
|:--------------|----------------:|
| 2023-01-28  |        -1.07973 |
| 2023-04-29  |        -1.07833 |
| 2023-07-29  |        -1.08102 |
| 2023-10-31  |        -1.09835 |

This can be compared against the real amounts paid to common share holders, as announced.

:::note
The dates immediately above represent the report date, dividends paid are attributed to the quarter they were paid in. The value from "2023-01-28" equates to the fourth quarter of 2022.
:::

```python
data = (
  obb.equity.fundamental.dividends("TGT", provider="fmp")
  .to_df()
  [["ex_dividend_date", "amount"]]
)
data.ex_dividend_date = data.ex_dividend_date.astype(str)
data.set_index("ex_dividend_date").loc["2023-08-15": "2022-11-15"]
```

| ex_dividend_date |   dividend |
|:--------------|-----------:|
| 2022-11-15  |       1.08 |
| 2023-02-14  |       1.08 |
| 2023-05-16  |       1.08 |
| 2023-08-15  |       1.1  |

The numbers check out, and the $2B paid to investors over four quarters is more than ten times the $190M returned through share buy backs.
</details>

<details>
<summary mdxType="summary">Financial Attributes</summary>

The `openbb-intrinio` data extension has an endpoint for extracting a single fact from financial statements.

There is a helper function for looking up the correct `tag`.

#### Search Financial Attributes

Search attributes by keyword.

```python
obb.equity.fundamental.search_attributes("marketcap").to_df().head(1)
```

|    | id         | name                  | tag       | statement_code   | statement_type   | parent_name   |   sequence | factor   | transaction   | type      | unit   |
|---:|:-----------|:----------------------|:----------|:-----------------|:-----------------|:--------------|-----------:|:---------|:--------------|:----------|:-------|
|  0 | tag_BgkbWy | Market Capitalization | marketcap | calculations     | industrial       |               |        nan |          |               | valuation | usd    |

The `tag` is what we need, in this case it is what we searched for.

```python
marketcap = (
  obb.equity.fundamental.historical_attributes(symbol="TGT", tag = "marketcap", frequency="quarterly")
  .to_df()
)

marketcap.tail(5)
```

| date          |       value |
|:--------------|------------:|
| 2022-12-31  | 66929627287 |
| 2023-03-31  | 75023699391 |
| 2023-06-30  | 59916953938 |
| 2023-09-30  | 50614370690 |
| 2023-11-22  |  60495000000 |

Doing some quick math, and ignoring the most recent value, we can see that the market cap of Target was down nearly a quarter over the last four reporting periods.

```python
marketcap.index = marketcap.index.astype(str)
(
    (marketcap.loc["2023-09-30"].value - marketcap.loc["2022-12-31"].value)/marketcap.loc["2022-12-31"].value
)
```

```console
-0.24
```
</details>

## Ratios and Other Metrics

<details>
Other valuation functions are derivatives of the financial statements, but the data provider does the math.

Values are typically ratios between line items, on a per-share basis, or as a percent growth.

This data set is where you can find EPS, FCF, P/B, EBIT, quick ratio, etc.

<details>
<summary mdxType="summary">Quick Ratio</summary>

Target's quick ratio could be one reason why its share price is losing traction against the market. Its ability to pay current obligations is not optimistically reflected in a 0.27 score, approximately 50% below the historical median.

```python
ratios = (
  obb.equity.fundamental.ratios("TGT", limit=50, provider="fmp")
  .to_df()
)

display(f"Current Quick Ratio: {ratios['quick_ratio'].iloc[-1]}")
display(f"Median Quick Ratio: {ratios['quick_ratio'].median()}")
```

```console
Current Quick Ratio: 0.27
Median Quick Ratio: 0.58
```
</details>

<details>
<summary mdxType="summary">Free Cash Flow Yield</summary>

The `metrics` endpoint, with the `openbb-fmp` data extension, has a field for free cash flow yield. It is calculated by taking the free cash flow per share divided by the current share price. We could arrive at this answer by writing some code, but these types of endpoints do the work so we don't have to. This is part of the value-add that API data distributors provide, they allow you to get straight to work with data.

We'll use this endpoint to extract the data, and compare with some of Target's competition over the last ten years.

```python
# List of other retail chains
tickers = ["COST", "BJ", "DLTR", "DG", "WMT", "BIG", "M", "KSS", "TJX"]
# Create a dictionary of tickers and company names.
names = {
    ticker: obb.equity.profile(ticker, provider="fmp").results[0].name
    for ticker in tickers
}
# Create a column for each.
fcf_yield = pd.DataFrame()
for ticker in tickers:
    fcf_yield[names[ticker]] = (
        obb.equity.fundamental.metrics(ticker, provider="fmp", period="annual", limit=10)
        .to_df()
        .reset_index()
        .set_index("calendar_year")
        .sort_index(ascending=False)
        ["free_cash_flow_yield"]
    )
fcf_yield.transpose()
```

|                                    |        2023 |        2022 |      2021 |      2020 |      2019 |       2018 |      2017 |       2016 |      2015 |        2014 |
|:-----------------------------------|------------:|------------:|----------:|----------:|----------:|-----------:|----------:|-----------:|----------:|------------:|
| Costco Wholesale Corporation       |   0.0279218 |  0.0148596  | 0.0265818 | 0.0393512 | 0.0259061 |  0.0274379 | 0.0608836 | 0.00894059 | 0.0307414 |   0.0374833 |
| BJ's Wholesale Club Holdings, Inc. | nan         |  0.0447092  | 0.0672128 | 0.113551  | 0.0566305 |  0.0911069 | 0.0261863 | 0.0658713  | 0.0169474 | nan         |
| Dollar Tree, Inc.                  | nan         |  0.010756   | 0.013957  | 0.075627  | 0.040338  |  0.0412519 | 0.0340694 | 0.0634655  | 0.0166025 |   0.0410471 |
| Dollar General Corporation         | nan         |  0.00825589 | 0.0375074 | 0.0589731 | 0.0369217 |  0.0461971 | 0.0426088 | 0.0507761  | 0.0395241 |   0.0460518 |
| Walmart Inc.                       |   0.0312425 |  0.028372   | 0.0654622 | 0.0445913 | 0.062023  |  0.0572749 | 0.101038  | 0.0735059  | 0.0597117 |   0.0415436 |
| Big Lots, Inc.                     | nan         | -0.550469   | 0.0252616 | 0.115757  | 0.0694642 | -0.111853  | 0.037219  | 0.100721   | 0.110443  |   0.089253  |
| Macy's, Inc.                       | nan         |  0.0504726  | 0.27098   | 0.0391114 | 0.0913008 |  0.101426  | 0.155761  | 0.098993   | 0.0656336 |   0.072322  |
| Kohl's Corporation                 | nan         | -0.143961   | 0.189677  | 0.147968  | 0.119492  |  0.139799  | 0.0961367 | 0.19879    | 0.0816518 |   0.110697  |
| The TJX Companies, Inc.            |   0.0271588 |  0.0234975  | 0.0517687 | 0.0401668 | 0.0488266 |  0.0399352 | 0.0536965 | 0.0433279  | 0.0464416 |   0.0406432 |

Explore the rest of the `fundamental` module under the [Reference](/platform/reference/equity/fundamental) section.
</details>

</details>


---

---
title: Finding Ticker Symbols
sidebar_position: 3
description: This page provides comprehensive information about finding stocks in the with the OpenBB Platform. Search companies from different sources, and filter results. This guide is intended to introduce some methods for searching, screening, and discovery.
keywords:
- stocks
- companies
- how to find
- stocks from India
- countries
- regions
- screen
- search
- ticker
- sector
- industry
- market caps
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Finding Symbols - Usage | OpenBB Platform Docs" />

Finding the ticker symbol, security identifier, the sector, and other metadata is easy if you know where to look. This guide is intended to introduce some methods for searching, screening, and discovery.

:::note
For maximum coverage and functionality, install OpenBB with `[all]` packages.

The examples on this page will assume that the OpenBB Platform has been installed, the environment is active, and it has been imported into a Python session.

```python
from openbb import obb
```

If the installation is fresh, or an extension was just installed, the Python interface will need to be rebuilt. It will only take a few moments to complete.
:::

The simplest way to find tickers is with a basic text query.

## Search Nasdaq

<details>

```python
obb.equity.search("JPMorgan", provider="nasdaq").to_df().head(3)
```

|    | symbol   | name                                                             | nasdaq_traded   | exchange   | market_category   | etf   |   round_lot_size | test_issue   | financial_status   | cqs_symbol   | nasdaq_symbol   | next_shares   |
|---:|:---------|:-----------------------------------------------------------------|:----------------|:-----------|:------------------|:------|-----------------:|:-------------|:-------------------|:-------------|:----------------|:--------------|
|  0 | AMJB     | JPMorgan Chase & Co. Alerian MLP Index ETNs due January 28, 2044 | Y               | P          |                   | Y     |              100 | N            |                    | AMJB         | AMJB            | N             |
|  1 | BBAG     | JPMorgan BetaBuilders U.S. Aggregate Bond ETF                    | Y               | P          |                   | Y     |              100 | N            |                    | BBAG         | BBAG            | N             |
|  2 | BBAX     | JPMorgan BetaBuilders Developed Asia Pacific-ex Japan ETF        | Y               | Z          |                   | Y     |              100 | N            |                    | BBAX         | BBAX            | N             |

</details>

## Search Cboe

<details>

```python
obb.index.search("SPX", provider="cboe").to_df().tail(5)
```

|    | symbol   | name                                  | description                                                                                                                                              |   data_delay | currency   | time_zone       | open_time   | close_time   | tick_days   | tick_frequency   | tick_period   |
|---:|:---------|:--------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------|-------------:|:-----------|:----------------|:------------|:-------------|:------------|:-----------------|:--------------|
| 32 | SPXVIV   | PROSHARES S&P 500 EX-HEALTH CARE ETF  | PROSHARES S&P 500 EX-HEALTH CARE ETF                                                                                                                     |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 33 | VIX1D    | Cboe 1-Day Volatility Index®          | Estimates expected volatility by aggregating the weighted prices of P.M.-settled S&P 500 Index (SPX℠) puts and calls over a wide range of strike prices. |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 34 | VIX3M    | Cboe S&P 500 3 Month Volatility Index | The Cboe 3-Month Volatility Index (VIX3M) is designed to be a constant measure of 3-month implied volatility of the S&P 500? (SPX) Index options.        |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 35 | WPUT     | Cboe S&P 500 One-Week PutWrite Index  | Tracks the value of a portfolio that overlays a short weekly SPX put  on one-month Treasury bills                                                        |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |
| 36 | XSPAM    | Mini SPX Index (AM Settlement)        | Mini SPX Index (AM Settlement)                                                                                                                           |           15 | USD        | America/Chicago | 08:00:00    | 16:00:00     | MonToFri    | C                | Regular       |

</details>

## Search ETFs


<details>

```python
obb.etf.search("gold", provider="tmx").to_df().iloc[-5:]
```

|                       | VALT.B                         | VALT.U                         | XGD                                    | ZGD                                     | ZJG                        |
|:----------------------|:---------------------------|:---------------------------|:--------------------------------------|:---------------------------------------|:--------------------------|
| name                  | CI Gold Bullion Fund       | CI Gold Bullion Fund       | iShares S&P/TSX Global Gold Index ETF | BMO Equal Weight Global Gold Index ETF | BMO Junior Gold Index ETF |
| short_name            | VALT.B:CA                  | CI Gold Bullion            | iShares S&P/TSX                       | BMO Equal Weight                       | BMO Junior Gold           |
| inception_date        | 2021-03-17                 | 2021-01-06                 | 2001-03-23                            | 2012-11-14                             | 2010-01-19                |
| issuer                | CI Global Asset Management | CI Global Asset Management | RBC iShares                           | BMO ETF                                | BMO ETF                   |
| investment_style      | Gold                       | Gold                       | Mid Cap Growth                        | Mid Cap Blend                          | Small Cap Blend           |
| esg                   | False                      | False                      | False                                 | False                                  | True                      |
| currency              | CAD                        | USD                        | CAD                                   | CAD                                    | CAD                       |
| unit_price            | 27.23                      | 20.25                      | 15.15                                 | 65.3                                   | 57.9                      |
| close                 | 27.31                      | 20.22                      | 15.15                                 | 63.9                                   | 58.1                      |
| prev_close            | 27.35                      | 20.26                      | 15.44                                 | 65.3                                   | 59.16                     |
| return_1m             | 0.0008210000000000001      | -0.012248000000000002      | -0.080416                             | -0.077245                              | -0.052842                 |
| return_3m             | -0.010862                  | 0.027784                   | -0.023677                             | -0.009352000000000001                  | 0.000172                  |
| return_6m             | 0.056706000000000006       | 0.041046                   | -0.082551                             | -0.07498                               | -0.048376                 |
| return_ytd            | -0.003618                  | -0.007048                  | -0.074745                             | -0.067335                              | -0.04167099999999999      |
| return_1y             | 0.06689300000000001        | 0.06554299999999999        | -0.129462                             | -0.0836                                | -0.08241899999999999      |
| beta_1y               | 0.57958                    | 0.725625                   | 0.372225                              | 0.469185                               | 0.433886                  |
| return_3y             | nan                        | 0.030979999999999997       | -0.033076                             | -0.021792                              | -0.028114                 |
| beta_3y               | 0.681245                   | 0.699766                   | 0.515024                              | 0.671806                               | 0.654367                  |
| return_5y             | nan                        | nan                        | 0.076559                              | 0.08920299999999999                    | 0.068623                  |
| beta_5y               | -0.008613                  | 0.233721                   | 0.738329                              | 0.997267                               | 1.103204                  |
| return_10y            | nan                        | nan                        | 0.044696999999999994                  | 0.05585                                | 0.041349                  |
| beta_10y              | 0.633314                   | 0.633314                   | 0.38428                               | 0.445404                               | 0.452332                  |
| beta_15y              | nan                        | nan                        | 0.395464                              | nan                                    | nan                       |
| return_from_inception | 0.08311199999999999        | nan                        | 0.069155                              | -0.006563                              | -0.022995                 |
| avg_volume            | 430                        | 690                        | 456399                                | 436                                    | 511                       |
| avg_volume_30d        | 1428                       | 4747                       | 1194453                               | 3417                                   | 1491                      |
| aum                   | 14976500.0                 | 28147500.0                 | 986265000.0                           | 41396935.0                             | 52271541.0                |
| pe_ratio              | nan                        | nan                        | 26.4436                               | 17.2285                                | 26.8283                   |
| pb_ratio              | nan                        | nan                        | 1.909                                 | 1.3891                                 | 1.531                     |
| management_fee        | 0.00155                    | 0.00155                    | 0.0060999999999999995                 | 0.0055000000000000005                  | 0.0055000000000000005     |
| mer                   | nan                        | nan                        | 0.0060999999999999995                 | 0.0062                                 | 0.0060999999999999995     |
| distribution_yield    | 0.015347                   | 0.016145                   | 0.016212999999999998                  | 0.008305                               | 0.009537                  |
| dividend_frequency    | Annually                   | Annually                   | Semi-Annually                         | Annually                               | Annually                  |
| beta_20y              | nan                        | nan                        | 0.560996                              | nan                                    | nan                       |


</details>

## Search the SEC


<details>

Use an empty string, `""`, to return the complete list - over 10,000.

```python
all_companies = obb.equity.search("", provider="sec")

len(all_companies.results)
```

```bash
Out: 10840
```

The SEC sorts this list by market cap.  Applying the `to_df()` method to `all_companies` will show Apple on top

```python
all_companies.to_df().head(10)
```

| symbol   | name                   |     cik |
|:---------|:-----------------------|--------:|
| AAPL     | Apple Inc.             |  320193 |
| MSFT     | MICROSOFT CORP         |  789019 |
| GOOGL    | Alphabet Inc.          | 1652044 |
| AMZN     | AMAZON COM INC         | 1018724 |
| NVDA     | NVIDIA CORP            | 1045810 |
| META     | Meta Platforms, Inc.   | 1326801 |
| BRK-B    | BERKSHIRE HATHAWAY INC | 1067983 |
| TSLA     | Tesla, Inc.            | 1318605 |
| LLY      | ELI LILLY & Co         |   59478 |
| V        | VISA INC.              | 1403161 |

:::tip
This endpoint can be used to map a ticker symbol to a CIK number.
:::

### Find an Institution

Some reporting companies, like investment trusts and insurance companies, do not have a ticker symbol directly associated with them. Filers in the US will have a CIK number, used to retrieve documents from the SEC.

```python
obb.regulators.sec.institutions_search("Berkshire Hathaway").to_df()
```

| name                                             |        cik |
|:-------------------------------------------------|-----------:|
| BERKSHIRE HATHAWAY ENERGY CO                     | 0001081316 |
| BERKSHIRE HATHAWAY FINANCE CORP                  | 0001274791 |
| BERKSHIRE HATHAWAY HOME STATE INSURANCE CO.       | 0000829771 |
| BERKSHIRE HATHAWAY INC /DE/                      | 0000109694 |
| BERKSHIRE HATHAWAY INC/DE                        | 0000109694 |
| BERKSHIRE HATHAWAY INC                           | 0001067983 |
| BERKSHIRE HATHAWAY LIFE INSURANCE CO OF NEBRASKA | 0001015867 |
| LMZ & BERKSHIRE HATHAWAY CO                      | 0001652795 |

### Find a Filing

Search for filings by CIK or ticker symbol.

```python
homestate_filings = obb.equity.fundamental.filings(cik="0000829771", provider="sec")

homestate_filings.to_df().iloc[-1]
```

|                         | 2023-11-14                                                                                  |
|:------------------------|:-----------------------------------------------------------------------------------------------------|
| type                    | 13F-NT                                                                                               |
| link                    | https://www.sec.gov/Archives/edgar/data/0000829771/000095012323010929/xslForm13F_X02/primary_doc.xml |
| report_date             | 2023-09-30                                                                                           |
| accepted_date           | 2023-11-14 16:15:06+00:00                                                                            |
| act                     | 34                                                                                                   |
| primary_doc_description |                                                                                                      |
| primary_doc             | xslForm13F_X02/primary_doc.xml                                                                       |
| accession_number        | 0000950123-23-010929                                                                                 |
| file_number             | 028-02226                                                                                            |
| film_number             | 231406391                                                                                            |
| is_inline_xbrl          | 0                                                                                                    |
| is_xbrl                 | 0                                                                                                    |
| size                    | 2960                                                                                                 |
| complete_submission_url | https://www.sec.gov/Archives/edgar/data/0000829771/0000950123-23-010929.txt                          |
| filing_detail_url       | https://www.sec.gov/Archives/edgar/data/0000829771/0000950123-23-010929-index.htm                    |

Or, search by form type.

```python
obb.equity.fundamental.filings("AAPL", type="4", provider="sec").to_df().iloc[-1]
```

|                         | 2023-11-14                                                                                    |
|:------------------------|:---------------------------------------------------------------------------------------------------------|
| type                    | 4                                                                                                        |
| link                    | https://www.sec.gov/Archives/edgar/data/0000320193/000032019323000109/xslF345X05/wk-form4_1700004649.xml |
| report_date             | 2023-11-10                                                                                               |
| accepted_date           | 2023-11-14 18:31:09+00:00                                                                                |
| primary_doc_description | FORM 4                                                                                                   |
| primary_doc             | xslF345X05/wk-form4_1700004649.xml                                                                       |
| accession_number        | 0000320193-23-000109                                                                                     |
| is_inline_xbrl          | 0                                                                                                        |
| is_xbrl                 | 0                                                                                                        |
| size                    | 5066                                                                                                     |
| complete_submission_url | https://www.sec.gov/Archives/edgar/data/0000320193/0000320193-23-000109.txt                              |
| filing_detail_url       | https://www.sec.gov/Archives/edgar/data/0000320193/0000320193-23-000109-index.htm                        |

</details>

## Screen Markets


<details>

Screeners provide a targeted search, a tool for comparison and discovery. Find stocks from around the world with the screener endpoint, and the `openbb-fmp` provider.

### Find Stocks From India

```python
results = obb.equity.screener(country="IN", provider="fmp").to_df()
len(results)
```

```bash
Out: 1821
```

### Search by Sector

```python
results = obb.equity.screener(country="IN", sector="Financial Services", provider="fmp").to_df()
len(results)
```

```bash
Out: 190
```

```python
results.iloc[0]
```

| symbol               | HDFCBANK.NS                      |
|:---------------------|:---------------------------------|
| name                 | HDFC Bank Limited                |
| market_cap           | 11344796293939                   |
| sector               | Financial Services               |
| industry             | Banks—Regional                   |
| beta                 | 0.714285                         |
| price                | 1505.1                           |
| last_annual_dividend | 19.0                             |
| volume               | 11850413                         |
| exchange             | NSE                              |
| exchange_name        | National Stock Exchange of India |
| country              | IN                               |
| is_etf               | False                            |
| actively_trading     | True                             |

### Search by Industry

```python
results = obb.equity.screener(country="IN", industry="manufacturing").to_df()
len(results)
```

```bash
Out: 119
```

```python
results.iloc[0]
```

| symbol               | PAGEIND.NS                       |
|:---------------------|:---------------------------------|
| name                 | Page Industries Limited          |
| market_cap           | 418222172840                     |
| sector               | Consumer Cyclical                |
| industry             | Apparel Manufacturing            |
| beta                 | 0.462                            |
| price                | 37495.6                          |
| last_annual_dividend | 300.0                            |
| volume               | 12166                            |
| exchange             | NSE                              |
| exchange_name        | National Stock Exchange of India |
| country              | IN                               |
| is_etf               | False                            |
| actively_trading     | True                             |

### Search by Exchange

Some countries, like America, have multiple exchanges. Narrow the search by combining two or more parameters. The example below finds the companies listed on the American Stock Exchange (AMEX) that are domiciled in China.

```python
obb.equity.screener(exchange="amex", country="CN").to_df()
```

| symbol   | name                              |   market_cap | sector             | industry                               |   beta |   price |   volume | exchange   | exchange_name           | country   | is_etf   | actively_trading   |
|:---------|:----------------------------------|-------------:|:-------------------|:---------------------------------------|-------:|--------:|---------:|:-----------|:------------------------|:----------|:---------|:-------------------|
| AMBO     | Ambow Education Holding Ltd.      |      4041842 | Consumer Defensive | Education & Training Services          |  0.448 |  0.1425 |   203994 | AMEX       | American Stock Exchange | CN        | False    | True               |
| ITP      | IT Tech Packaging, Inc.           |      2945282 | Basic Materials    | Paper & Paper Products                 | -0.1   |  0.2926 |    14954 | AMEX       | American Stock Exchange | CN        | False    | True               |
| DXF      | Dunxin Financial Holdings Limited |      1291625 | Financial Services | Credit Services                        |  1.632 |  0.325  |  2829238 | AMEX       | American Stock Exchange | CN        | False    | True               |
| CPHI     | China Pharma Holdings, Inc.       |      1024379 | Healthcare         | Drug Manufacturers—Specialty & Generic |  0.875 |  0.0896 |   539863 | AMEX       | American Stock Exchange | CN        | False    | True               |

### Filter by Metric

Applying some filters refines and targets the search. The example below finds listing on the NYSE domiciled in the USA, with a market cap between $100-300 billion, and exhibiting a beta value of less than 0.5

```python
obb.equity.screener(
  exchange="nyse",
  mktcap_min=100000000000,
  mktcap_max=300000000000,
  country="us",
  beta_max=0.5,
  provider="fmp",
).to_df()
```

| symbol   | name                        |   market_cap | sector                 | industry                   |   beta |   price |   last_annual_dividend |   volume | exchange   | exchange_name           | country   | is_etf   | actively_trading   |
|:---------|:----------------------------|-------------:|:-----------------------|:---------------------------|-------:|--------:|-----------------------:|---------:|:-----------|:------------------------|:----------|:---------|:-------------------|
| MRK      | Merck & Co., Inc.           | 258192673024 | Healthcare             | Drug Manufacturers—General |  0.375 |  101.75 |                   2.92 |  6760568 | NYSE       | New York Stock Exchange | US        | False    | True               |
| VZ       | Verizon Communications Inc. | 152314546478 | Communication Services | Telecom Services           |  0.391 |   36.23 |                   2.66 | 14960968 | NYSE       | New York Stock Exchange | US        | False    | True               |

</details>

## Get Available Indices

<details>

List all indices from a source with:

```python
indices = obb.index.available(provider="yfinance").to_df()

len(indices)
```

```bash
Out: 274
```

Filter the list down by querying the DataFrame.

```python
indices[indices["name"].str.contains("ASX 200")]
```

| name                                                  | code              | symbol   |
|:------------------------------------------------------|:------------------|:---------|
| S&P/ASX 200 Index (AUD)                               | au_asx200         | ^AXJO    |
| S&P/ASX 200 Energy Sector Index (AUD)                 | au_energy         | ^AXEJ    |
| S&P/ASX 200 Resources Sector Index (AUD)              | au_resources      | ^AXJR    |
| S&P/ASX 200 Materials Sector Index (AUD)              | au_materials      | ^AXMJ    |
| S&P/ASX 200 Industrials Sector Index (AUD)            | au_industrials    | ^AXNJ    |
| S&P/ASX 200 Consumer Discretionary Sector Index (AUD) | au_discretionary  | ^AXDJ    |
| S&P/ASX 200 Consumer Staples Sector Index (AUD)       | au_staples        | ^AXSJ    |
| S&P/ASX 200 Health Care Sector Index (AUD)            | au_health         | ^AXHJ    |
| S&P/ASX 200 Financials Sector Index (AUD)             | au_financials     | ^AXFJ    |
| S&P/ASX 200 A-REIT Industry Index (AUD)               | au_reit           | ^AXPJ    |
| S&P/ASX 200 Info Tech Sector Index (AUD)              | au_tech           | ^AXIJ    |
| S&P/ASX 200 Communications Sector Index (AUD)         | au_communications | ^AXTJ    |
| S&P/ASX 200 Utilities Sector Index (AUD)              | au_utilities      | ^AXUJ    |

:::tip
With the `openbb-yfinance` extension, index time series can be loaded using the ticker symbol or short code.  Non-American indices have a code beginning with the two-letter country code.

```python
(
    obb.index.price.historical("au_utilities", provider="yfinance").to_df().tail(1)
    == obb.index.price.historical("^AXUJ", provider="yfinance").to_df().tail(1)
)
```

| date                |   open |   high |   low |   close |   volume |
|:--------------------|-------:|-------:|------:|--------:|---------:|
| 2023-11-17 |  True |  True |  True |  True |  True |

:::

The examples above show demonstrate the most basic ways to find ticker symbols with the OpenBB Platform. Create your own custom scripts for discovery by combining these with other methods.

</details>


---

---
title: Loading Historical Price Data
sidebar_position: 4
description: This page provides an introduction to historical prices, including how to access and use them in the OpenBB Platform.
keywords:
- stocks
- companies
- prices
- historical
- ohlc
- intraday
- intervals
- market data
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Historical Prices - Usage | OpenBB Platform Docs" />

Historical market prices typically come in the form of OHLC+V - open, high, low, close, volume. There may be additional fields returned by a provider, but those are the expected columns.

Granularity and amount of historical data will vary by provider and subscription status. Visit their websites to understand what your entitlements are.

:::info
These examples will assume that the OpenBB Platform is initialized in a Python session.

```python
from openbb import obb
import pandas as pd
```

:::

## Historical OHLC


<details>

The `historical` function is located under a submodule for each asset type. In the `openbb-equity` module.

```python
help(obb.equity.price.historical)
```

- This endpoint has the most number of providers out of any function. At the time of writing, choices are:

['alpha_vantage', 'cboe', 'fmp', 'intrinio', 'polygon', 'tiingo', 'tmx', 'tradier', 'yfinance']

- Common parameters have been standardized across all sources, `start_date`, `end_date`, `interval`.

- The default interval will be `1d`.

- The depth of historical data and choices for granularity will vary by provider and subscription status. Refer to the website and documentation of each source understand your specific entitlements.

- Despite being in the `equity` module, it's might be possible to get other asset types, like currencies or crypto, from the same endpoint.

- For demonstration purposes, we will use the `openbb-yfinance` data extension.

```python
df_daily = obb.equity.price.historical(symbol = "spy", provider="yfinance")
df_daily.to_df().head(1)
```

| date          |   open |   high |    low |   close |     volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|-------:|--------:|-----------:|------------:|---------------:|----------------:|
| 2022-11-22  | 396.63 | 400.07 | 395.15 |   399.9 | 60429000 |           0 |              0 |               0 |

To load the entire history available from a source, pick a starting date well beyond what it might be. For example, `1900-01-01`

```python
df_daily =(
  obb.equity.price.historical(symbol = "spy", start_date = "1990-01-01", provider="yfinance")
  .to_df()
)
df_daily.head(1)
```

| date          |   open |   high |   low |   close |     volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|------:|--------:|-----------:|------------:|---------------:|----------------:|
| 1993-01-29  |  43.97 |  43.97 | 43.75 |   43.94 | 1003200 |           0 |              0 |               0 |


<details>
<summary mdxType="summary">Intervals</summary>


The intervals are entered according to this pattern:

- `1m` = One Minute
- `1h` = One Hour
- `1d` = One Day
- `1W` = One Week
- `1M` = One Month

The date for monthly value is the first or last, depending on the provider. This can be easily resampled from daily data.

```python
df_monthly = (
  obb.equity.price.historical("spy", start_date="1990-01-01", interval="1M", provider="yfinance")
  .to_df()
)
df_monthly.tail(2)
```

| date          |   open |   high |    low |   close |      volume |   dividends |   stock splits |   capital gains |
|:--------------|-------:|-------:|-------:|--------:|------------:|------------:|---------------:|----------------:|
| 2023-10-01  | 426.62 | 438.14 | 409.21 |  418.2  | 1999149700 |           0 |              0 |               0 |
| 2023-11-01  | 419.2  | 456.38 | 418.65 |  455.02 | 1161239576 |           0 |              0 |               0 |


</details>


<details>
<summary mdxType="summary">Resample a Time Series</summary>

`yfinance` returns the monthly data for the first day of each month. Let's resample it to take from the last, using the daily information captured in the previous cells.

```python
(
    df_daily[["open", "high", "low", "close", "volume"]]
    .resample("M")
    .agg(
        {"open": "first", "high": "max", "low": "min", "close": "last", "volume": "sum"}
    ).tail(2)
)
```

| date          |   open |   high |    low |   close |      volume |
|:--------------|-------:|-------:|-------:|--------:|------------:|
| 2023-10-31  | 426.62 | 438.14 | 409.21 |  418.2  | 1999149700 |
| 2023-11-30  | 419.2  | 456.38 | 418.65 |  455.02 | 1210484176 |

We can see that the current month's total volume is higher when we resample the daily time series. It is difficult to know where the discrepancy lays, and it may just be a temporary glitch. However, we can verify that the total volume, according to YahooFinance, is the number we just sampled.

:::note
If you are following along, the results will not match exactly what is displayed here.
:::

```python
df_daily.loc["2023-11-01":].sum()["volume"]
```

```console
1210484176
```

</details>



<details>
<summary mdxType="summary">Differences Between Sources</summary>


To demonstrate the difference between sources, let's compare values for daily volume from several sources.

```python
# Collect the data

yahoo = obb.equity.price.historical("spy", provider="yfinance").to_df()
alphavantage = obb.equity.price.historical("spy", provider = "alpha_vantage").to_df()
intrinio = obb.equity.price.historical("spy", provider="intrinio").to_df()
fmp = obb.equity.price.historical("spy", provider="fmp").to_df()

# Make a new DataFrame with just the volume columns
compare = pd.DataFrame()
compare["AV Volume"] = alphavantage["volume"].tail(10)
compare["FMP Volume"] = fmp["volume"].tail(10)
compare["Intrinio Volume"] = intrinio["volume"].tail(10)
compare["Yahoo Volume"] = yahoo["volume"].tail(10)

compare
```

| date          |   AV Volume |   FMP Volume |   Intrinio Volume |   Yahoo Volume |
|:--------------|------------:|-------------:|------------------:|---------------:|
| 2023-11-09  | 83174417 |     83071417 |       83174417 |       83174400 |
| 2023-11-10  | 89558054 |     89558054 |       89558054 |       89462200 |
| 2023-11-13  | 52236068 |     52192568 |       52236068 |       52236100 |
| 2023-11-14  | 97176935 |     97130503 |      97176935 |       97176900 |
| 2023-11-15  | 77327573 |     77327573 |      77327573 |       77327600 |
| 2023-11-16  | 66665797 |     66654468 |       66665797 |       66665800 |
| 2023-11-17  | 83193902 |     83193902 |       83193902 |       83133200 |
| 2023-11-20  | 70055633 |     69614633 |       70055633 |       69936200 |
| 2023-11-21  | 49244639 |     49244639 |       49244639 |       49244600 |
| 2023-11-22  | 59446573 |     59313820 |       58205780 |       59394900 |

</details>

</details>

## Other Types of Symbols


<details>

Other types of assets and ticker symbols can be loaded from `obb.equity.price.historical()`, below are some examples but not an exhaustive list.

<details>
<summary mdxType="summary">Share Classes</summary>


Some sources use `-` as the distinction between a share class, e.g., `BRK-A` and `BRK-B`. Other formats include:

- A period: `BRK.A`
- A slash: `BRK/A`
- No separator, the share class becomes the fourth or fifth letter.

```python
obb.equity.price.historical("brk.b", provider="polygon")
```

```python
obb.equity.price.historical("brk-b", provider="fmp")
```

While some providers handle the different formats on their end, others do not.

This is something to consider when no results are returned from one source.

Some may even use a combination, or accept multiple variations. Sometimes there is no real logic behind the additional characters, `GOOGL` vs. `GOOG`.

These are known unknown variables of ticker symbology, what's good for one source may return errors from another.

</details>


<details>
<summary mdxType="summary">Regional Identifiers</summary>


With providers supporting market data from multiple jurisdictions, the most common method for requesting data outside of US-listings is to append a suffix to the ticker symbol (e.g., `RELIANCE.NS`).

Formats may be unique to a provider, so it is best to review the source's documentation for an overview of their specific conventions.

[This page](https://help.yahoo.com/kb/SLN2310.html) on Yahoo describes how they format symbols, which many others follow to some degree.

`openbb-tmx` follows the composite convention, "SPY:US". When the symbol is for its domestic Canadian market, "CNQ", no identifier is required.

</details>

<details>
<summary mdxType="summary">Indices</summary>

Sources will have their own treatment of these symbols, some examples are:

- YahooFinance/FMP/CBOE: ^RUT
- Polygon: I:NDX

```python
obb.equity.price.historical("^RUT", provider="cboe").to_df().tail(1)
```

| date          |    open |    high |     low |   close |   volume |
|:--------------|--------:|--------:|--------:|--------:|---------:|
| 2023-11-22  | 1796.37 | 1804.96 | 1785.93 | 1792.92 |        0 |

```python
obb.equity.price.historical("^RUT", provider="fmp").to_df().tail(1)
```

| date          |    open |    high |     low |   close |   volume |    vwap | label           |   adj_close |   unadjusted_volume |   change |   change_percent |   change_over_time |
|:--------------|--------:|--------:|--------:|--------:|---------:|--------:|:----------------|------------:|--------------------:|---------:|-----------------:|-------------------:|
| 2023-11-22  | 1792.51 | 1803.12 | 1789.88 | 1795.54 |        0 | 1796.18 | November 22, 23 |     1795.54 |                   0 |  3.02893 |          0.16898 |          0.0016898 |

:::info
**For an endpoint geared more specifically towards indices, try `obb.index.price.historical()`**
:::

</details>

<details>
<summary mdxType="summary">Currencies</summary>

FX symbols face the same dilemma as share classes, there are several variations of the same symbol.

- YahooFinance: `EURUSD=X`
- Polygon: `C:EURUSD`
- AlphaVantage/FMP: `EURUSD`

:::info
**The symbol prefixes are handled internally when `obb.currency.price.historical()` is used, enter as a pair with no extra characters.**
:::

```python
obb.equity.price.historical("EURUSD=X", provider="yfinance").to_df().tail(1)
```

| date          |   open |   high |    low |   close |   volume |   dividends |   stock splits |
|:--------------|-------:|-------:|-------:|--------:|---------:|------------:|---------------:|
| 2023-11-22  | 1.0918 | 1.0923 | 1.0855 |  1.0918 |        0 |           0 |              0 |

```python
obb.equity.price.historical("C:EURUSD", provider="polygon").to_df().tail(1)
```

| date          |    open |   high |    low |   close |   volume |   vwap |   transactions |
|:--------------|--------:|-------:|-------:|--------:|---------:|-------:|---------------:|
| 2023-11-21  | 1.09168 | 1.0923 | 1.0851 |  1.0888 |   155827 | 1.0893 |         155827 |

</details>


<details>
<summary mdxType="summary">Crypto</summary>


Similar, but different to FX tickers.

- YahooFinance: `BTC-USD`
- Polygon: `X:BTCUSD`
- AlphaVantage/FMP: `BTCUSD`

:::info
**The symbol prefixes are handled internally when `obb.crypto.price.historical()` is used, enter as a pair with no extra characters and placing the fiat currency second.**
:::

```python
obb.equity.price.historical("X:BTCUSD", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-21  |  35756 |  37900 | 35633 | 37433.8 |  30411.4 | 36841.5 |         464907 |

As noted above, `X:` or other prefixes are not required when using the `crypto` version of this same endpoint.

```python
obb.crypto.price.historical("BTCUSD", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-21  |  35756 |  37900 | 35633 | 37433.8 |  30411.4 | 36841.5 |         464907 |

</details>

<details>
<summary mdxType="summary">Futures</summary>


Historical prices for the continuation chart, can be fetched by the `fmp` or `yfinance` data extensions.  Individual active contracts are returned by `yfinance`.

- Continuous front-month: `CL=F`
- December 2023 contract: `CLZ24.NYM`
- March 2024 contract: `CLH24.NYM`

Individual contracts will require knowing which of the CME venues the future is listed on. `["NYM", "NYB", "CME", "CBT"]`.

```python
obb.equity.price.historical("CL=F", provider="fmp").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |   vwap | label           |   adj_close |   unadjusted_volume |   change |   change_percent |   change_over_time |
|:--------------|-------:|-------:|------:|--------:|---------:|-------:|:----------------|------------:|--------------------:|---------:|-----------------:|-------------------:|
| 2023-11-22 |  77.77 |  77.97 | 73.79 |   76.78 |   368686 |  76.18 | November 22, 23 |       76.78 |              368686 |    -0.99 |            -1.27 |            -0.0127 |

```python
obb.equity.price.historical("CLZ24.NYM", provider="yfinance").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |   dividends |   stock splits |
|:--------------|-------:|-------:|------:|--------:|---------:|------------:|---------------:|
| 2023-11-22  |  74.07 |  74.07 | 73.41 |   73.46 |      610 |           0 |              0 |

</details>

<details>
<summary mdxType="summary">Options</summary>

Individual options contracts are also loadable from `openbb.equity.price.historical()`.

- YahooFinance: `SPY241220P00400000`
- Polygon: `O:SPY241220P00400000`

```python
obb.equity.price.historical("SPY241220P00400000", provider="yfinance").to_df().tail(1)
```

| date                |   open |   high |   low |   close |   volume |   dividends |   stock splits |
|:--------------------|-------:|-------:|------:|--------:|---------:|------------:|---------------:|
| 2023-11-22 00:00:00 |   10.5 |  10.82 | 10.25 |   10.61 |       77 |           0 |              0 |

```python
obb.equity.price.historical("O:SPY241220P00400000", provider="polygon").to_df().tail(1)
```

| date          |   open |   high |   low |   close |   volume |    vwap |   transactions |
|:--------------|-------:|-------:|------:|--------:|---------:|--------:|---------------:|
| 2023-11-20  |   10.9 |  10.95 | 10.75 |   10.75 |       17 | 10.8376 |             10 |

</details>

</details>


---

---
title: Market Calendars
sidebar_position: 6
description: This page provides details on the market calendars available in the OpenBB Platform. Equity and economic calendars keep investors abreast of market activity and events. This guide provides examples for using the variety of calendars, and differences between sources.
keywords:
- stocks
- companies
- calendars
- earnings
- splits
- dividends
- ipo
- events
- economic calendar
- CPI report
- inflation
- expectations
- global
- central banks
- timezone
- tz-aware
- tz-unaware
- convert time
- ISM Manufacturing New Orders
- dividend yield
- analyst consensus
- EPS
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Market Calendars - Usage | OpenBB Platform Docs" />

Market calendars are an essential part of any analyst's daily rituals. Economic events and corporate actions provide near-term trading opportunities (or reasons to get out of the way) as expectations meet reality. The OpenBB Platform has a variety of calendars.

- Economic
- Earnings
- Dividends
- Splits
- IPO/SPOs

Let's take a look at some use-cases.

:::note
Examples on this page will assume that the OpenBB Platform is installed, the Python environment is active, and the Python interface has been imported into the active session.

```python
from openbb import obb
import pandas as pd
```

:::

## Economic Calendar

<details>


The economic calendar aggregates global central bank and macroeconomic releases, it is located within the `obb.economy` module.

:::tip
Do not rely on the economic calendar for real-time updates. Times posted are scheduled by publishers and are estimates which do not reflect the actual time data is released to the public.
:::

### Timezone Considerations

There are subtle differences between providers, the main consideration will be the timestamp. FMP and TradingEconomics both return the calendar as UTC-0, while Nasdaq posts events in US/Eastern time. Of the three, only TradingEconomics provides a TZ-aware timestamp. The differences can be reconciled with a few lines of code.

To identify the issue, let's look at one event. First, from FMP:

```python
fmp_df = obb.economy.calendar(provider="fmp", start_date="2023-11-19", end_date="2023-11-20").to_df()
fmp_df[fmp_df["event"].str.contains("20-Year Bond Auction")]
```

 date                | country   | event                |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------|:----------|:---------------------|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-11-20 18:00:00 | US        | 20-Year Bond Auction |      5.245 |         nan | Low          | USD        |      nan |                0 |

Then Nasdaq:

```python
nasdaq_df = obb.economy.calendar(provider="nasdaq", start_date="2023-11-19", end_date="2023-11-20").to_df()
nasdaq_df[nasdaq_df["event"].str.contains("20-Year Bond Auction")]
```

| date                | country       | event                | actual   | previous   | consensus   |  description   |
|:--------------------|:--------------|:---------------------|:---------|:-----------|:------------|:----------------|
| 2023-11-20 13:00:00 | United States | 20-Year Bond Auction | -        | 5.245%     | -       | The figures displayed in the calendar represent the yield on the Treasury Bond auctioned. |

Now let's convert the FMP timestamp to US/Eastern time.

```python
from datetime import time

fmp_df.index = fmp_df.index.map(
    lambda dt: dt.tz_localize("UTC")
    .tz_convert("America/New_York")
    if dt.time() != time(0, 0, 0)
    else dt.tz_localize("America/New_York")
)
fmp_df[fmp_df["event"].str.contains("20-Year Bond Auction")]
```

| date                      | country   | event                |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------------|:----------|:---------------------|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-11-20 13:00:00-05:00 | US        | 20-Year Bond Auction |      5.245 |         nan | Low          | USD        |      nan |                0 |

Timestamps can be a factor with start/end dates because the calendar day will roll over at midnight, moving the date. Converting the timestamp will overcome this, but be aware of when the time is `00:00:00`, signifying an all-day event like a holiday.

An exception was added in the code above to maintain the time where applicable, instead of rolling it back five hours.

For these reasons, among others, it is important for users to know and understand their data intimately.

### Filtering by Event

The providers do not have a pre-request filter for a specific event. TradingEconomics does have categories, like 'government', but that does not focus it on any particular release. To find something like PMI reports, search for it post-request.

FMP allows queries to this endpoint to be a maximum width of three months. To get the year-to-date events, requests will need to loop. The code below will do that, filter the results for ISM Manufacturing New Orders, and display the table of hits.

### ISM New Orders

```python

start_dates = ["2023-01-04", "2023-04-01", "2023-07-01", "2023-10-01"]
end_dates = ["2023-03-31", "2023-06-30", "2023-09-30", "2023-12-30"]
results = []

for i in range(0, len(start_dates)):
    _data = (
        obb.economy.calendar(provider="fmp", start_date=start_dates[i], end_date=end_dates[i])
        .model_dump()["results"]
    )
    results.extend(_data)
events = pd.DataFrame.from_records(results).set_index("date").sort_index()

events[events["event"].str.contains("ISM Manufacturing New Orders")]
```

| date                | country   | event                              |   actual |   previous |   consensus | importance   | currency   |   change |   change_percent |
|:--------------------|:----------|:-----------------------------------|---------:|-----------:|------------:|:-------------|:-----------|---------:|-----------------:|
| 2023-01-04 15:00:00 | US        | ISM Manufacturing New Orders (Dec) |     45.2 |       47.2 |         nan | Low          | USD        |     -2   |           -4.237 |
| 2023-02-01 15:00:00 | US        | ISM Manufacturing New Orders (Jan) |     42.5 |       45.1 |         nan | Low          | USD        |     -2.6 |           -5.765 |
| 2023-03-01 20:00:00 | US        | ISM Manufacturing New Orders (Feb) |     47   |       42.5 |         nan | Low          | USD        |      4.5 |           10.588 |
| 2023-04-03 18:00:00 | US        | ISM Manufacturing New Orders (Mar) |     44.3 |       47   |         nan | Low          | USD        |     -2.7 |           -5.745 |
| 2023-05-01 18:00:00 | US        | ISM Manufacturing New Orders (Apr) |     45.7 |       44.3 |         nan | Low          | USD        |      1.4 |            3.16  |
| 2023-06-01 14:00:00 | US        | ISM Manufacturing New Orders (May) |     42.6 |       45.7 |         nan | Low          | USD        |     -3.1 |           -6.783 |
| 2023-07-03 18:00:00 | US        | ISM Manufacturing New Orders (Jun) |     45.6 |       42.6 |         nan | Low          | USD        |      3   |            7.042 |
| 2023-08-01 18:00:00 | US        | ISM Manufacturing New Orders (Jul) |     47.3 |       45.6 |          44 | Low          | USD        |      1.7 |            3.728 |
| 2023-09-01 14:00:00 | US        | ISM Manufacturing New Orders (Aug) |     46.8 |       47.3 |         nan | Low          | USD        |     -0.5 |           -1.057 |
| 2023-10-02 14:00:00 | US        | ISM Manufacturing New Orders (Sep) |     49.2 |       46.8 |         nan | Low          | USD        |      2.4 |            5.128 |
| 2023-11-01 14:00:00 | US        | ISM Manufacturing New Orders (Oct) |     45.5 |       49.2 |         nan | Low          | USD        |     -3.7 |           -7.52  |
| 2023-12-01 15:00:00 | US        | ISM Manufacturing New Orders (Nov) |    nan   |       45.5 |         nan | Low          | USD        |    nan   |            0     |

</details>

## Earnings Calendar

<details>

The earnings calendar works in a similar way. For companies outside of the US, try the `openbb-fmp` provider.

```python
calendar = (
    obb.equity.calendar.earnings(
        provider="fmp",
        start_date="2023-11-20",
        end_date="2023-11-24"
    ).to_df()
)
```

This returned 1,234 results, but let's filter it down to those companies with analysts estimates, and display the top ten by EPS consensus.

```python
(
    calendar[calendar["eps_consensus"].notnull()
    & calendar["revenue_consensus"].notnull()]
    .sort_values(by="eps_consensus", ascending=False)
    .head(10)
)
```

| report_date   | symbol   |   eps_consensus |   actual_eps |   actual_revenue |   revenue_consensus | period_ending   | reporting_time   | updated_date   |
|:--------------|:---------|----------------:|-------------:|-----------------:|--------------------:|:----------------|:-----------------|:---------------|
| 2023-11-22    | CAP.SN   |          279.3  |          nan |              nan |         690955000000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-20    | ABDP.L   |           56.4  |          nan |              nan |         106000000    | 2023-09-29      | bmo              | 2023-11-19     |
| 2023-11-23    | 4206.T   |           56.3  |          nan |              nan |         62200000    | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-22    | DE       |            7.58 |          nan |              nan |         12909600000 | 2023-10-29      | bmo              | 2023-11-19     |
| 2023-11-21    | NVDA     |            3.34 |          nan |              nan |         15194600000 | 2023-10-29      | amc              | 2023-11-19     |
| 2023-11-21    | LOW      |            3.1  |          nan |              nan |         21059700000 | 2023-11-03      | bmo              | 2023-11-19     |
| 2023-11-20    | MOH.AT   |            2.48 |          nan |              nan |         3030480000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-20    | SJM      |            2.47 |          nan |              nan |        1947800000  | 2023-10-30      | bmo              | 2023-11-19     |
| 2023-11-21    | BIDU     |            2.45 |          nan |              nan |         4735580000 | 2023-09-30      | bmo              | 2023-11-19     |
| 2023-11-21    | DKS      |            2.42 |          nan |              nan |        2948570000 | 2023-10-28      | bmo              | 2023-11-19     |

:::tip
EPS values are reported in the currency of the exchange listing price, direct comparisons are not viable across domiciles without a conversion factor.
:::

</details>

## Dividend Calendar

<details>

The dividend calendar uses start/end dates that reflect the ex-dividend date - the date when it begins trading without dividend rights.

Aside from the notable dates, the information returned tells you only the amount paid. Calculating the yield requires more data.

:::note

- Nasdaq provides a field for 'annualized_amount', which makes it easier to calculate a dividend yield.

- The `openbb-nasdaq` provider has US-only data for this endpoint.

- The same markets covered by FMP's earnings calendar are included in their dividend calendar.

:::

### Calculate Dividend Yield

The ten highest-payments going ex-div between November 20-24 are shown below.

With T+2 settlement, a purchase needs to occur two days prior to the record date for payment eligibility. The dividend yield is the current payment annualized as a percent of the asset's price.

```python
dividends = (
    obb.equity.calendar.dividend(
        provider="nasdaq",
         start_date="2023-11-20",
         end_date="2023-11-24",
    ).to_df()
    .drop_duplicates(subset="symbol")
    .sort_values("amount", ascending=False)
    .reset_index()
    .set_index("symbol")
    .head(10)
)

symbols = dividends.index.tolist()
prices = (
    obb.equity.price.quote(symbols, provider="fmp").to_df()
    .reset_index()
    .set_index("symbol")["price"]
)
dividends["price"] = prices

dividends["yield"] = (
    round((dividends["annualized_amount"]/dividends["price"])*100, 4)
)

(
    dividends[["record_date", "payment_date", "amount", "annualized_amount", "price", "yield"]]
    .sort_values("yield", ascending=False)
)
```

| symbol   | record_date   | payment_date   |   amount |   annualized_amount |   price |   yield |
|:---------|:--------------|:---------------|---------:|--------------------:|--------:|--------:|
| USOI     | 2023-11-21    | 2023-11-27     |   1.8588 |             16.134  |   75.73 | 21.3046 |
| ATCD     | 2023-11-21    | 2023-12-26     |  60.14   |             60.14   | 1235    |  4.8696 |
| GLDI     | 2023-11-21    | 2023-11-27     |   1.5153 |              4.8216 |  141.8  |  3.4003 |
| CHTM     | 2023-11-21    | 2023-12-26     |  59.62   |             59.62   | 1856.95 |  3.2106 |
| CMI      | 2023-11-24    | 2023-12-07     |   1.68   |              6.72   |  225.5  |  2.98   |
| KLIB     | 2023-11-24    | 2023-12-15     |   2.1    |              4.2    |  144    |  2.9167 |
| SNA      | 2023-11-21    | 2023-12-11     |   1.86   |              7.44   |  277.76 |  2.6786 |
| NOC      | 2023-11-27    | 2023-12-13     |   1.87   |              7.48   |  464.17 |  1.6115 |
| CBCYB    | 2023-11-24    | 2023-12-01     |   3.75   |              8      |  647    |  1.2365 |
| CBCY     | 2023-11-24    | 2023-12-01     |   3.75   |              8      |  660    |  1.2121 |


</details>

## IPO Calendar

<details>

The IPO calendar shows events based on their status - `["upcoming", "priced", "withdrawn"]` - and Intrinio provides a filter for the min/max dollar amount offered.

:::note
The data from both Intrinio and Nasdaq is US-only, both relying on the SEC for filing information.
:::

Use the `status` parameter to find announcements in different stages of the cycle.

### Upcoming

The initial public offerings that are confirmed to be coming to market are categorized as 'upcoming'. The number of companies going public at any given time will depend on market cycles.

```python
obb.equity.calendar.ipo(provider="nasdaq", status="upcoming").to_df()
```

| symbol   | name         |   offer_amount |   share_count | expected_price_date   | id            | exchange       | share_price   |
|:---------|:-------------|---------------:|--------------:|:----------------------|:--------------|:---------------|:--------------|
| DOCO     | Docola, Inc. |      8235004 |       1060870 | 2023-11-21            | 995278-107909 | NASDAQ Capital | 5.75-6.75     |

### Withdrawn

A `withdrawn` status might be the result of a SPAC unwinding after failing to merge with a company.

```python
obb.equity.calendar.ipo(provider="nasdaq", status="withdrawn").to_df().tail(3)
```

| withdraw_date   | name                      |   offer_amount |   share_count | filed_date   | id             |
|:----------------|:--------------------------|---------------:|--------------:|:-------------|:---------------|
| 2023-11-09      | Arago Acquisition Corp.   |      86250000.0 |       7500000 | 2022-05-06   | 1214792-102968 |
| 2023-11-13      | CW Petroleum Corp         |      17249995.5  |       3157894 | 2022-06-02   | 1055531-103241 |
| 2023-11-13      | Tiga Acquisition Corp. II |     230000000.0   |      20000000 | 2021-02-26   | 1148285-96307  |

### SPO

SPOs, secondary public offerings, are shares being sold by investors after an IPO. The money does not go to the company, but directly to the investor selling shares into the market. The `openbb-nasdaq` provider has an additional boolean parameter, `is_spo`. By default, year-to-date data is returned.

```python
obb.equity.calendar.ipo(provider="nasdaq", is_spo=True).to_df().tail(1)
```

| symbol   | ipo_date   | name                                    |   offer_amount |   share_count | deal_status   | id            | exchange             |   share_price |
|:---------|:-----------|:----------------------------------------|---------------:|--------------:|:--------------|:--------------|:---------------------|--------------:|
| SKWD     | 2023-11-16 | Skyward Specialty Insurance Group, Inc. |      152500000.0 |       5000000 | Priced        | 854131-108262 | NASDAQ Global Select |          30.5 |


</details>


---

---
title: Data Extensions
sidebar_position: 2
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';


Data extensions will expand the breadth and coverage of the data available in the OpenBB Platform. Each source (provider) is its own independent extension, even if there is only one endpoint accessible. This allows every data source to be inserted or removed, at any time, without disturbing the operation of the Core components.

Functions will appear in the Python Interface and Fast API only if a supported provider, for that specific endpoint, is installed. Additional Python libraries will be installed, where required, by the extension.

## Provider Coverage

The total installed coverage can be determined through the Python interface, as a dictionary.

```python
from openbb import obb
obb.coverage.providers
```

## Installation

All data extensions are installed with similar syntax. Published data extensions will have names beginning with `openbb`. For example, yFinance.

```console
pip install openbb-yfinance
```

Additions and removals update the router automatically to reflect the changes when the Python interpreter is refreshed. Below is a list of data provider extensions.

Uninstall any extension with `pip uninstall`.

```console
pip uninstall openbb-yfinance
```

## Available Data Extensions

Many data providers require an API key for access, use the name under the "API Key Name" column in the tables below when configuring the user settings.

### Core Providers

These packages are what will be installed when `pip install openbb` is run

| Extension Name | Description | Installation Command | Minimum Subscription Type Required | API Key Name |
|----------------|-------------|----------------------|------------------------------------|-------------:|
| openbb-benzinga | [Benzinga](https://www.benzinga.com/apis/en-ca/) data connector | pip install openbb-benzinga | Paid | | benzinga_api_key |
| openbb-bls | [Bureau of Labor Statistics](https://www.bls.gov/developers/home.htm) data connector | pip install openbb-bls | Free | bls_api_key | 
| openbb-cftc | [Commodity Futures Trading Commission](https://publicreporting.cftc.gov/stories/s/r4w3-av2u) data connector | pip install openbb-cftc | Free | cftc_app_token|
| openbb-econdb | [EconDB](https://econdb.com) data connector | pip install openbb-econdb | None | econdb_api_key | 
| openbb-imf | [IMF](https://data.imf.org) data connector | pip install openbb-imf | None | - |
| openbb-fmp | [FMP](https://site.financialmodelingprep.com/developer/) data connector | pip install openbb-fmp | Free | fmp_api_key |
| openbb-fred | [FRED](https://fred.stlouisfed.org/) data connector | pip install openbb-fred | Free | fred_api_key | 
| openbb-intrinio | [Intrinio](https://intrinio.com/pricing) data connector | pip install openbb-intrinio | Paid | intrinio_api_key |
| openbb-oecd | [OECD](https://data.oecd.org/) data connector | pip install openbb-oecd | Free | - | 
| openbb-polygon | [Polygon](https://polygon.io/) data connector | pip install openbb-polygon | Free | polygon_api_key |
| openbb-sec | [SEC](https://www.sec.gov/edgar/sec-api-documentation) data connector | pip install openbb-sec | None | - |
| openbb-tiingo | [Tiingo](https://www.tiingo.com/about/pricing) data connector | pip install openbb-tiingo | Free | tiingo_token |
| openbb-tradingeconomics | [TradingEconomics](https://tradingeconomics.com/api) data connector | pip install openbb-tradingeconomics | Paid | tradingeconomics_api_key |
| openbb-us-eia | U.S. Energy Information Administration - [EIA](https://www.eia.gov/opendata/register.php) - data connector | pip install openbb-us-eia | Free | eia_api_key |
| openbb-yfinance | [Yahoo Finance](https://finance.yahoo.com/) data connector | pip install openbb-yfinance | None | - |

### Community Providers

These packages are not installed when `pip install openbb` is run.  They are available for installation separately or by running `pip install openbb[all]`

| Extension Name | Description | Installation Command | Minimum Subscription Type Required | API Key Name |
|----------------|-------------|----------------------|------------------------------------|-------------:|
| openbb-alpha-vantage | [Alpha Vantage](https://www.alphavantage.co/) data connector | pip install openbb-alpha-vantage | Free | alpha_vantage_api_key |
| openbb-biztoc | [Biztoc](https://api.biztoc.com/#biztoc-default) News data connector | pip install openbb-biztoc | Free | biztoc_api_key |
| openbb-cboe | [Cboe](https://www.cboe.com/delayed_quotes/) data connector | pip install openbb-cboe | None | - |
| openbb-deribit | [Deribit](https://docs.deribit.com/) data connector | pip install openbb-deribit | None | - |
| openbb-ecb | [ECB](https://data.ecb.europa.eu/) data connector | pip install openbb-ecb | None | - |
| openbb-federal-reserve | [Federal Reserve](https://www.federalreserve.gov/) data connector | pip install openbb-federal-reserve | None | - |
| openbb-finra | [FINRA](https://www.finra.org/finra-data) data connector | pip install openbb-finra | None / Free | - |
| openbb-finviz | [Finviz](https://finviz.com) data connector | pip install openbb-finviz | None | - |
| openbb-government-us | [US Government](https://data.gov) data connector | pip install openbb-us-government | None | - |
| openbb-nasdaq | [Nasdaq Data Link](https://data.nasdaq.com/) connector | pip install openbb-nasdaq | None / Free | nasdaq_api_key |
| openbb-seeking-alpha | [Seeking Alpha](https://seekingalpha.com/) data connector | pip install openbb-seeking-alpha | None | - |
| openbb-stockgrid | [Stockgrid](https://stockgrid.io) data connector | pip install openbb-stockgrid | None | - |
| openbb-tmx | [TMX](https://money.tmx.com) data connector | pip install openbb-tmx | None | - |
| openbb-tradier | [Tradier](https://tradier.com) data connector | pip install openbb-tradier | None | tradier_api_key; tradier_account_type ('sandbox' or 'live')
| openbb-wsj | [Wall Street Journal](https://www.wsj.com/) data connector | pip install openbb-wsj | None | - |


Have you published a data provider extension and want it featured on this list? Tell us about it! Open a pull request on [GitHub](https://github.com/OpenBB-finance/OpenBBTerminal/) to submit an extension for inclusion. Code contributions, for new and existing, data providers are always welcome.

Search [PyPI](https://pypi.org/search/?q=openbb-) to find more extensions.


---

---
title: Overview
sidebar_position: 1
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

The extension framework allows individual pieces to be installed and removed seamlessly within the environment, using only the desired data and toolkit extensions.

There are two primary types of extensions for the OpenBB Platform:

- Data
- Toolkits

The OpenBB Core installation does not include any toolkit extensions. Install the OpenBB Platform with all data and toolkit extensions from PyPI with:

```python
pip install openbb[all]
```

When installing from source, navigate into the `openbb_platform` folder from the root of the project and enter:

```console
python dev_install.py -e
```

This installs all extensions in editable mode, and the Python interface is compiled in, `/openbb_platform/openbb/package`, instead of the environment's `site-packages` folder. The tables in the next pages lists extensions as either, Core or Community. The Core extensions are installed by default.

A couple of notable differences between data and toolkit extension are:

- In the OpenBB GitHub repo, extensions are all located under:

    ```console
    ~/OpenBB/openbb_platform/extensions
    ```

- An additional folder housing integration tests, with the `tests` folder staying empty.
- There is a `router` file, and there can be sub-folders with additional routers.
- Utility functions don't need their own sub-folder.
- `__init__.py` files are all empty.

:::important When an extension is installed or uninstalled, the Python interface will need to rebuild the static assets for the app to fully reflect the changes.

To invoke the build process, enter the line below from the command line:

```sh
openbb-build
```

Or

```sh
python -c "import openbb;openbb.build()"
```

This is not necessary when using the API, changes will be reflected on the next run.
:::

## Coverage

The installed commands and data providers are found under, `obb.coverage`.

```python
obb.coverage
```

```console
/coverage

    providers
    commands
    command_model
    command_schemas
```

`obb.coverage.providers` is a dictionary of the installed provider extensions, each with its own list of available commands.

`obb.coverage.commands` is a dictionary of commands, each with its own list of available providers for the data.

`obb.coverage.command_model` is a dictionary where the keys are the command paths and the values is a nested dictionary of QueryParams and Data models associated with that function.


---

---
title: Toolkit Extensions
sidebar_position: 3
description: This page describes the toolkit extensions available for the OpenBB Platform.
keywords:
- OpenBB Platform
- Python client
- Fast API
- getting started
- extensions
- data providers
- data extensions
- toolkit extensions
- toolkits
- endpoints
- community
- technical analysis
- quantitative analysis
- charting libraries
- Plotly
- OpenBBFigure
- PyWry
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';


OpenBB Toolkit Extensions expand the Platform with functions for manipulating data and preparing it for display. The Core Platform installation does not install any toolkit extensions. The table below is the current list of toolkit extensions.

| Extension Name | Description | Installation Command | Core/Community | Router Path |
|:-----------------|:-----------:|:-------------------:|:------------------:|-------------:|
| openbb-charting | Rest API charting service and Plotly library. | pip install openbb-charting | Community | N/A |
| openbb-devtools | Aggregates dependencies that facilitate a nice development experience for OpenBB. | pip install openbb-devtools | N/A |
| openbb-econometrics | Econometrics models for the Python interface only. | pip install openbb-econometrics | Community | obb.econometrics |
| openbb-quantitative | Functions for performing quantitative analysis. | pip install openbb-quantitative | Community | obb.quantitative |
| openbb-technical | Functions for performing technical analysis. | pip install openbb-technical | Community | obb.technical |

The sections below outline any specific installation considerations for the extension.

## Charting

```console
pip install openbb-charting
```

The OpenBB Charting Extension supplies charting infrastructure and services to the OpenBB Platform. Figure objects are served via REST API or Python Client.  It utilizes [PyWry](https://github.com/OpenBB-finance/pywry) for handling the display of interactive charts and tables in a separate window, with a Plotly library.

Functions with dedicated views return figures to the `chart` attribute of the `OBBject` response object. They are displayed with the class method, `show()`.

:::tip
The `openbb-charting` is an [`OBBject` extension](/platform/developer_guide/tutorials/add_obbject_extension), which means the general functionality is exposed in every command result.
:::

The following packages are dependencies of the `openbb-charting` extension:

- scipy
- plotly
- statsmodels
- reportlab
- pywry
- svglib
- nbformat
- pandas-ta

For more information check the documentation of the openbb-charting extension.

## Devtools

```console
pip install openbb-devtools
```

Please refer to the following PyPI distributed [package](https://pypi.org/project/openbb-devtools/).

This Python package, `openbb-devtools`, is designed for OpenBB Platform Developers and contains a range of dependencies essential for robust and efficient software development.

These dependencies cater to various aspects like code formatting, security analysis, type checking, testing, and kernel management.

The inclusion of these packages ensures that the development process is streamlined, the code quality is maintained, and the software is secure and reliable.

Included dependencies:

- `ruff`: A fast Python linter focused on performance and simplicity.
- `pylint`: A tool that checks for errors in Python code, enforces a coding standard, and looks for code smells.
- `mypy`: A static type checker for Python, helping catch type errors during development.
- `pydocstyle`: A linter for Python docstrings to ensure they meet certain style requirements.
- `black`: An uncompromising Python code formatter, ensuring consistent code style.
- `bandit`: A tool designed to find common security issues in Python code.
- `pre-commit`: Manages and maintains pre-commit hooks that run checks before each commit, ensuring code quality.
- `nox`: A generic virtualenv management and test command line tool for running tests in isolated environments.
- `pytest`: A mature full-featured Python testing tool that helps in writing better programs.
- `pytest-cov`: A plugin for pytest that measures code coverage during testing.
- `ipykernel`: A package that provides the IPython kernel for Jupyter.
- `types-python-dateutil`: Type stubs for python-dateutil, aiding in static type checking.
- `types-toml`: Type stubs for TOML, useful for static type checking in TOML parsing.
- `poetry`: A tool for dependency management and packaging in Python.

Each dependency plays a critical role in ensuring the code is clean, efficient, and functional, ultimately leading to the development of high-quality software.

While developing code for the OpenBB Platform, one should always install the DevTools packages so that the above development tooling is available out-of-the-box.


:::info
When setting up the environment using the `openbb_platform/dev_install.py` script, the DevTools will also be installed.
:::

## Econometrics

```console
pip install openbb-econometrics
```

The `openbb-econometrics` extension installs a new router path (`obb.econometrics`) and additional Python libraries:

- scipy
- statsmodels
- arch
- linearmodels

:::note

Statsmodels requires a C compiler be present on the system. Follow the instructions [here](https://cython.readthedocs.io/en/latest/src/quickstart/install.html) for system-specific methods.

This extension is not accessible via REST API because `statsmodels` is not serializable.
:::


To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/econometrics`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.

## Quantitative

```console
pip install openbb-quantitative
```

The `openbb-quantitative` extension installs a new router path (`obb.quantitative`) and a few additional Python libraries:

- pandas-ta
- scipy
- statsmodels

To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/quantitative`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.

## Technical

```console
pip install openbb-technical
```

The `openbb-technical` extension is for performing technical analysis on time series data. It installs a new router path (`obb.technical`) and some additional Python libraries:

- pandas-ta
- scikit-learn
- scipy
- statsmodels

To install from source in editable mode, navigate into the folder, `~/openbb_platform/extensions/technical`, and enter:

```console
pip install -e .
```

After installation, the Python interface will automatically rebuild on initialization.


---

---
title: Quickstart
sidebar_position: 1
description: Get started with the OpenBB Platform by following this quickstart guide for the Python interface.
keywords:
- OpenBB Platform
- investment research infrastructure
- data connectors
- financial reports
- OpenBB team
- quickstart
- getting started
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Quickstart | OpenBB Platform Docs" />

To get started with the OpenBB Platform, all you need to do is to import `obb` and start querying away.

```python
from openbb import obb

# Get the price of a stock
quote_data = obb.equity.price.quote(symbol="AAPL", provider="yfinance")
quote_data
```

The output will look like this:

```console
OBBject

id: 06649f4e-896c-7b31-8000-52242b1605f2
results: [{'symbol': 'AAPL', 'asset_type': 'EQUITY', 'name': 'Apple Inc.', 'exchang...
provider: yfinance
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'yfinance'}, 's...
```

To view the output as a dataframe, you can use the `to_df()` method.

```python
quote_data.to_df()
```

Let's try another example. This time, we'll get the historical price of a stock.

```python
obb.equity.price.historical(symbol="AAPL", provider="yfinance").to_df()
```

To view all the available commands, routers and extensions, you can do:

```python
obb
```

You can also keep exploring by accessing each route like this:

```python
obb.equity
```

If you see a command you're interested in, to get help on how to use it, you can do:

```python
help(obb.equity.price.historical)
```

Visit our [reference](/platform/reference) documentation to see all the available commands and their parameters.

And that's it! You're now ready to start using the OpenBB Platform.

---

---
title: Workspace integration
sidebar_position: 2
description: Get started using the OpenBB Platform as a custom Workspace backend.
keywords:
- OpenBB Platform
- investment research infrastructure
- data connectors
- financial reports
- OpenBB team
- quickstart
- getting started
- Workspace
- custom backend
- backend
- FastAPI
---

import HeadTitle from '@site/src/components/General/HeadTitle.tsx';

<HeadTitle title="Quickstart - Workspace Custom Backend | OpenBB Platform Docs" />

The OpenBB Platform can be used as a [Workspace custom backend](/workspace/data-integration), both as a fully-loaded data source, or as the bare shell and launcher of a FastAPI application.

The sections below will outline a few scenarios.

## Launch Platform App

To include all installed OpenBB extensions as widgets in the custom backend connector:

:::info
Open a terminal, activate the environment where `openbb` was installed, then enter:

```sh
openbb-api
```
:::

- Next, open your browswer and login to [pro.openbb.co](https://pro.openbb.co).

- From the sidebar, click "Data Connectors".

- Then, click the "Add Data" button.

![Add Data](https://github.com/user-attachments/assets/770e6d6c-6cd7-4073-a874-af0850f404cc)

- Enter a name for the connection, and use the server address displayed in the console.

- Then, click the "Test" button.

:::tip
If a connection error displays after pressing the "Test" button, your browser might be blocking access because of "mixed content". Browsers such as Safari, and Brave, do not permit HTTP connections.

Try using Chrome, specifically, or start the server over HTTPS.

See the page [here](/workspace/faqs) for the steps to do it.
:::

- Finally, click the "Add" button.

All data endpoints are now configured to use and are available to the Search.

## Launch Custom Platform App

Let's say, you want to create a custom backend that presents data differently, and you don't want any of the built-in widgets to populate. You want complete control over the generated view.

In this scenario, use the `--exclude` argument to ignore the entire `/api/*` path.

Widgets will now only populate from endpoints added to the imported `app` instance.

```python
from openbb_platform_api.main import app

from openbb import obb


@app.get("/company_description")
async def company_description(symbol: str = "AAPL") -> str:
    """Reference data for the given company using yFinance."""
    response = obb.equity.profile(symbol, provider="yfinance")

    description = response.results[0].long_description

    md = f"""

# **{response.results[0].name}**
## **{response.results[0].sector}**
### **{response.results[0].industry_category}**

<details>
<summary mdxType="summary">Company Description</summary>
{description}
</details>

{response.results[0].company_url}
"""
    return md
```

Launch the backend by including the path to the Python file as the `--app` argument.

```sh
openbb-api --app /Users/path/to/some/folder/some_file.py --exclude '"/api/v1/*"' --reload
```

<img width="514" alt="Screenshot 2025-02-06 at 1 40 43 PM" src="https://github.com/user-attachments/assets/150b214e-468e-45bf-b28e-6fb1e1a7a5c2" />

## Launch Any FastAPI App

For this, the only requirements are:

- Python version between 3.9 and 3.12, inclusively.
- `openbb-platform-api` package, installable from PyPI.

Add the path to the Python file with the FastAPI instance to launch.

```sh
openbb-api --app /Users/path/to/some/folder/some_file.py
```

:::important
At this time, only "GET" methods are supported by custom backends.
:::


```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
async def hello() -> str:
    """Widget Description Generated By Docstring"""
    return "Hello, from OpenBB!"
```

Function arguments will populate as widget parameters.

### Parameters With Dropdown

Literal types of function parameters will automatically be recognized as choices in a dropdown menu.

```python
from typing import Literal, Optional

app = FastAPI()

@app.get("/hello")
async def hello(param1: Optional[str] = None, param2: Literal["Choice 1", "Choice 2"] = None, param3: bool = False) -> str:
    """Widget Description Generated By Docstring"""
    if not param1 and not param2 and not param3:
        return "Enter a parameter or make a choice!"
    if param3:
        return f"Param3 enabled!"
    if param2:
        return f"You selected: {param2}"
    if param1:
        return f"You entered: {param1}"

    return "Nothing to return!"
```

### Table Widget

Create a table widget by returning data shaped as a list of dictionaries (records)

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
async def hello() -> list:
    """Widget Description Generated By Docstring"""
    return [{"Column 1": "Hello", "Column 2": "from OpenBB!"}]
```

### Annotated Functions

Annotated parameters and responses will create column definitions and hover descriptions.

For data responses, return a list of Pydantic models to get the most bang-for-the-buck.


```python
from typing import Annotated
from fastapi import FastAPI, Query
from openbb_core.provider.abstract.data import Data  # Inherit this instead of pydantic.BaseModel to represent 1 row of data.
from pydantic import Field

app = FastAPI()

class MyData(Data):
    """MyData Response Model."""
    column_1: str = Field(title="Some Text", description="Hover text for Column 1")
    column_2: int = Field(title="Some Number", description="Hover text for Column 2")
    column_3: float = Field(
        title="Some Percent",
        description="Hover text for Column 3",
        json_schema_extra={"x-unit_measurement": "percent"},
    )
    column_4: float = Field(
        title="Some Normalized Percent",
        description="Hover text for Column 4",
        json_schema_extra={"x-unit_measurement": "percent", "x-frontend_multiply": 100},
    )


@app.get("/table")
async def table(
    param1: Annotated[str, Query(description="Hover text for param1")] = None,
    param2: Annotated[int, Query(description="Some Number")] = None,
    date: Annotated[str, Query(description="Date selector")] = None,
) -> list[MyData]:
    """Widget Description Generated By Docstring"""
    return [
        MyData.model_validate(
            {
                "column_1": "Hello",
                "column_2": 10,
                "column_3": 33.345,
                "column_4": -0.33345,
            }
        ),
    ]
```

<img width="836" alt="Screenshot 2025-02-06 at 8 00 30 PM" src="https://github.com/user-attachments/assets/78ab6191-50c6-4b76-a6ca-ea23575c6619" />

#### `openbb-api`

`openbb-api` is a command line executable, similar to `uvicorn`, for starting a FastAPI app instance, generating and serving the configuration files OpenBB Workspace requires.

It can be installed as standalone with:

```sh
pip install openbb-platform-api
```

See the package [readme](https://github.com/OpenBB-finance/OpenBB/blob/6b0ae943d9096e0683265ffc1233c71b4a9dad3b/openbb_platform/extensions/platform_api/README.md) for a detailed description of parameters and example snippets for creating various types of widgets.


---

---
title: Input Query Parameters
sidebar_position: 1
description: This page provides comprehensive information about standardized command syntax for an open-source platform. Topics discussed include the structure of command syntax, use of standardized parameters, usage of provider and symbol parameters, handling of date and limit parameters, and more. Also explored, are the methods for selecting data sources, handling different list and ticker symbol formats, and dealing with command responses and warnings.
keywords:
  - tutorial
  - command syntax
  - standardized parameters
  - date format
  - provider parameter
  - data source selection
  - symbol parameter
  - list formats
  - ticker symbols
  - date parameter
  - time series
  - limit parameter
  - keyword arguments
  - endpoint parameters
  - command response
  - data models
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Basic Syntax - Usage | OpenBB Platform Docs" />

The structure of command syntax is standardized across common fields. This ensures that a `date` is always a `date` and the format remains consistent throughout.

Standardized parameters include, but are not limited to: provider, symbol, start_date, end_date, date, limit.

When looking at a function's docstring, the standard parameters (shared across multiple providers) are positioned first. Provider-specific parameters positionally follow the `provider` argument.

The example below is from, `obb.equity.price.quote`:

```console
Parameters
----------
symbol : str
    Symbol to get data for. In this case, the comma separated list of symbols.
provider : Optional[Literal['fmp', 'intrinio']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
source : Literal['iex', 'bats', 'bats_delayed', 'utp_delayed', 'cta_a_delayed', 'cta_b_delayed', 'intrinio_mx', 'intrinio_mx_plus', 'delayed_sip']
    Source of the data. (provider: intrinio)
```

:::note
Examples below assume that the Python interface has been imported in the current session, and/or the Fast API has been started.

```python
from openbb import obb
```

or

```python
uvicorn openbb_core.api.rest_api:app
```

:::

## Provider

The `provider` parameter is the way to select the specific source of the data from the endpoint. If a [preference for the default provider](/platform/settings/environment_variables) has not been defined, the default will be the first, alphabetically, installed provider.

Provider values are entered in lower-case, with an underscore for multiple words - for example:

```python
historical_prices = obb.equity.price.historical("aapl", provider="alpha_vantage")
```

Provider coverage can be ascertained with the command below:

```python
obb.coverage.providers
```

Refer to, [Data Extensions](/platform/usage/extensions/overview), for instructions on installing data provider extensions.

## Symbol

Symbols are not case-sensitive, and where the function allows, can be entered as a `string`, `List[str]`, or a comma-separated `string`.

The exact format of the symbol may vary between providers - for example, share classes, exchange suffixes, and global composites. An example of this difference is shown below:

```python
obb.equity.price.historical("brk.b", provider="polygon")
```

```python
obb.equity.price.historical("brk-b", provider="fmp")
```

While some providers handle the different formats on their end, others do not. This is something to consider when no results are returned from one source.

With providers supporting market data from multiple jurisdictions, the most common method for requesting data outside of US-listings is to append a suffix to the ticker symbol (e.g., `RELIANCE.NS`). Formats may be unique to a provider, so it is best to review the source's documentation for an overview of their specific conventions. For example, [this page](https://help.yahoo.com/kb/SLN2310.html) on Yahoo describes how they format symbols, which many others follow to some degree.

Single symbol:

```python
quote = obb.equity.price.quote(symbol="td", provider="fmp")
```

### Multiple Symbols

The OpenBB Provider module enforces REST-compliant lists that can be entered in either format through the Python interface.

#### Comma-Separated String

This is the format required by the Fast API, when creating new data endpoints, it is important that the Python interface is able to accept both formats.

```python
quotes = obb.equity.price.quote("td,schw,jpm,ms", provider="fmp")
```

```python
import requests
r = requests.get("http://127.0.0.1:8000/api/v1/equity/price/quote?provider=fmp&symbol=td,schw,ms,jpm")
r.json()
```

#### Python List

Entering a list will provide the same outcome as above.

```python
quotes = obb.equity.price.quote(["td","schw","jpm","ms"], provider="fmp")
```

Lists of symbols can be generated from the results of other functions, and then passed to the input.

```python
symbol="spgi"
symbols = obb.equity.compare.peers(symbol).results.peers_list+[symbol]
quotes = obb.equity.price.quote(symbols)
```

:::note
To accomplish this same task through the Fast API, convert the list to a comma-separated string.
:::

```python
import requests
symbol="spgi"
r = requests.get(f"http://127.0.0.1:8000/api/v1/equity/compare/peers?provider=fmp&symbol={symbol}")
symbols_list = r.json()["results"]["peers_list"]+[symbol]
symbols = ",".join(symbols_list)
response = requests.get(f"http://127.0.0.1:8000/api/v1/equity/price/quote?provider=fmp&symbol={symbols}")
response.json()
```

## Dates

Dates are entered everywhere as a string, formatted as, "YYYY-MM-DD". If the function has only the `date` parameter, the data will be a snapshot instead of a time series.

```python
historical_prices = obb.equity.price.historical(symbol="qqq", start_date="2023-01-10", end_date="2023-01-31", provider="fmp")
```

For flexibility and programmatic purposes, a `datetime` object is also accepted.

```python
from datetime import datetime
symbol="qqq"
start = datetime.strptime("100123", "%d%m%y")
end = datetime.strptime("2023-01-31","%Y-%m-%d")
historical_prices = obb.equity.price.historical(symbol, start_date=start, end_date=end, provider="fmp")
```

```python
import requests
response = requests.get(f"http://127.0.0.1:8000/api/v1/equity/price/historical?provider=fmp&symbol={symbol}&start_date={start}&end_date={end}")
response.json()
```

## Limit

Where, optional, `limit` parameters are supplied, they are likely to have sensible default states that return N results starting from the most recent entry or the `start_date`. Enter these values as an integer.

```python
income = obb.equity.fa.income("AAPL", period="quarter", provider="fmp", limit=4)
```

## \*\*kwargs

All endpoints accept additional keyword arguments, but non-existent parameters will be ignored. Invalid parameters are communicated via the `warnings` field in the command response.

Parameters can be stored as a dictionary and fed to the command as `**kwargs`. If a provider, or function, has an undocumented parameter it can still be accessed by supplying the additional kwargs.

```python
kwargs = {"symbol":"msft","start_date":"2023-01-01","provider":"polygon"}
historical_prices = obb.equity.price.historical(**kwargs)
```

```python
data = obb.equity.price.quote("brk-b", provider="fmp", source="bats")
data.warnings
```

```console
[Warning_(category='OpenBBWarning', message="Parameter 'source' is not supported by fmp. Available for: intrinio.")]
```

## References

All functions, parameters, and responses are detailed under the [Reference pages](/platform/reference). The data models for each provider source are described within the [Data Models](/platform/data_models) pages.

These pages are a quick way to cross-reference differences between providers. The same information is provided in a function's signature and docstring.


---

---
title: Output Data
sidebar_position: 2
description: This page details the basic response and output that can be expected to be received from the the OpenBB Platform.
keywords:
  - tutorial
  - standardized output
  - OBBject
  - basic response
  - provider
  - results
  - warnings
  - chart
  - extra
  - command coverage
---

import HeadTitle from "@site/src/components/General/HeadTitle.tsx";

<HeadTitle title="Basic Response - Usage | OpenBB Platform Docs" />

## Python Interface

### OBBject

The output of every command is an object which contains the results of the request, along with additional information. It is a custom class, `OBBject`, and always returns with the fields listed below:

```console
id: ...                 # UUID Tag
results: ...            # Serializable results.
provider: ...           # Provider name.
warnings: ...           # List of warnings.
chart: ...              # Chart object.
extra: ...              # Extra info.
```

```python
from openbb import obb

data = obb.equity.price.historical("SPY", provider="polygon")

data
```

```console
OBBject

id: 06520558-d54a-7e53-8000-7aafc8a42694
results: [{'date': datetime.datetime(2022, 10, 5, 0, 0), 'open': 375.62, 'high': 37...
provider: polygon
warnings: None
chart: None
extra: {'metadata': {'arguments': {'provider_choices': {'provider': 'polygon'}, 'st...
```

Additional class methods are helpers for converting the results to a variety of formats.

- `to_dict()`: converts to a dictionary, accepting all standard "orientation" parameters, i.e., "records"
- `to_df()` / `to_dataframe()`: converts to a Pandas DataFrame.
- `to_numpy()`: converts to a Numpy array.
- `to_polars()`: converts to a Polars table.

:::info
The preferred output type can be set with a user preference.

```python
obb.user.preferences.output_type="dataframe"
```

:::

### Metadata

The OpenBB Platform returns metadata related to the command execution, as well as any returned from a Provider endpoint.
Both are stored in the `extra` attribute of the [OBBject](/platform/developer_guide/architecture_overview#obbject-class) response object.

It will always contain these elements:

- `arguments`: Any parameters supplied, and the selected provider source, to the function.
- `duration`: The number of nanoseconds the function took to complete.
- `route`: The command path.
- `timestamp`: Timestamp for when the command was run.

#### Execution Metadata

Metadata for the command execution is captured under the `metadata` key.

```python
from openbb import obb

data = obb.economy.calendar(provider="nasdaq")

data.extra
```

```console
{'metadata': Metadata

 arguments: {'provider_choices': {'provider': 'nasdaq'}, 'standard_params': {'start_date': None, 'end_date': None}, 'extra_params': {}}
 duration: 565256375
 route: /economy/calendar
 timestamp: 2024-05-22 11:28:57.149548}
```

#### Disabling

This content can be disabled as a setting in the [`user_settings.json`](/platform/settings/environment_variables) file.

```json
{
  "preferences": {
    "metadata": false
  }
}
```

:::note
Metadata included as part of the command results will not be disabled by this setting.
:::

#### Results Metadata

Where commands return metadata related to the requested data, it is keyable from the `extra` attribute with, `results_metadata`.

This dictionary contains contextual information and data for the `results` that is not included in the tables.
Results metadata will vary by command and provider, so it is worth exploring when it is included, below is a selection of samples.

<details>
<summary mdxType="summary">FRED</summary>

```python
data = obb.economy.fred_series("T10Y2Y")

data.extra["results_metadata"]
```

```console
{'T10Y2Y': {'title': '10-Year Treasury Constant Maturity Minus 2-Year Treasury Constant Maturity',
  'units': 'Percent',
  'frequency': 'Daily',
  'seasonal_adjustment': 'Not Seasonally Adjusted',
  'notes': 'Starting with the update on June 21, 2019, the Treasury bond data used in calculating interest rate spreads is obtained directly from the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).\r\nSeries is calculated as the spread between 10-Year Treasury Constant Maturity (BC_10YEAR) and 2-Year Treasury Constant Maturity (BC_2YEAR). Both underlying series are published at the U.S. Treasury Department (https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield).'}}
```

The information stored here is used by the `openbb-charting` extension for display.

![FRED Chart](https://github.com/OpenBB-finance/OpenBBTerminal/assets/85772166/67746ef0-7d61-4eed-b2e8-c32d001a8a00)

</details>

<details>
<summary mdxType="summary">EconDB</summary>

```python
data = obb.economy.indicators("PCOPP", provider="econdb")

data.extra
```

```console
{'results_metadata': {'PCOPP': {'title': 'World - Copper',
   'country': 'World',
   'frequency': 'M',
   'dataset': 'IMF_PCPS',
   'transform': None,
   'units': 'USD',
   'scale': 'Units',
   'multiplier': 1,
   'additional_info': {'FREQ:Frequency': 'M:Monthly',
    'REF_AREA:Reference Area': 'W00:All Countries, excluding the IO',
    'COMMODITY:Commodity': 'PCOPP:Primary Commodity Prices, Copper',
    'UNIT_MEASURE:Unit of Measure': 'USD:US Dollars',
    'UNIT_MULT:Scale': '0:Units'}}},
}
```

</details>

<details>
<summary mdxType="summary">Cboe</summary>

```python
data = obb.derivatives.options.chains("SPX", provider="cboe")

data.extra
```

```console
{'results_metadata': {'symbol': '^SPX',
  'security_type': 'index',
  'bid': 5293.0298,
  'bid_size': 1,
  'ask': 5295.2002,
  'ask_size': 1,
  'open': 5319.2798,
  'high': 5323.1802,
  'low': 5286.0098,
  'close': 5294.0898,
  'volume': 0,
  'current_price': 5294.0898,
  'prev_close': 5321.4102,
  'change': -27.3202,
  'change_percent': None,
  'iv30': 10.291,
  'iv30_change': 0.546,
  'iv30_change_percent': 0.056029,
  'last_tick': 'down',
  'last_trade_timestamp': '2024-05-22 14:50:36'},
}
```

</details>

<details>
<summary mdxType="summary">SEC</summary>

```python
data = obb.etf.holdings("BIL", provider="sec")

data.extra
```

```console
{'results_metadata': {'fund_name': 'SPDR(R) Bloomberg 1-3 Month T-Bill ETF',
  'series_id': 'S000017326',
  'lei': '549300GQCVCME1YJ6B50',
  'period_ending': '2023-12-31',
  'fiscal_year_end': '2024-06-30',
  'total_assets': 35015168619.91,
  'total_liabilities': 1638123692.3,
  'net_assets': 33377044927.61,
  'cash_and_equivalents': '0.00000000',
  'returns': {'2023-10-31': 0.0044,
   '2023-11-30': 0.0044,
   '2023-12-31': 0.0046},
  'flow': {'2023-10-31': {'creation': 6591274706.7,
    'redemption': 604472521.85},
   '2023-11-30': {'creation': 3244045301.3, 'redemption': 4478684406.9},
   '2023-12-31': {'creation': 639802303.2, 'redemption': 3018629744.0}},
  'gains': {'2023-10-31': {'realized': -65924.99, 'unrealized': -3793500.04},
   '2023-11-30': {'realized': 360345.39, 'unrealized': 292210.09},
   '2023-12-31': {'realized': 319796.93, 'unrealized': 3862704.46}},
  'borrowers': [{'name': 'BofA Securities, Inc.',
    'lei': '549300HN4UKV1E2R3U73',
    'value': 211562959.29},
   {'name': 'J.P. Morgan Securities LLC',
    'lei': 'ZBUT11V806EZRVTWT807',
    'value': 957576952.9},
   {'name': 'ING Financial Markets LLC',
    'lei': 'KBVRJ5K57JZ3E2AVWX40',
    'value': 247944722.5},
   {'name': 'Barclays Capital Inc.',
    'lei': 'AC28XWWI3WIBK2824319',
    'value': 248250000.0},
   {'name': 'Goldman Sachs & Co. LLC',
    'lei': 'FOR8UP27PHTHYVLBNG30',
    'value': 110741598.05},
   {'name': 'Bank of Montreal',
    'lei': 'NQQ6HPCNCCU6TUTQYE16',
    'value': 87276542.32},
   {'name': 'Nomura Securities International, Inc.',
    'lei': 'OXTKY6Q8X53C9ILVV871',
    'value': 469556172.09},
   {'name': 'Daiwa Capital Markets America Inc.',
    'lei': 'M67H5PRC0NQKM73ZAS82',
    'value': 198566750.0}]}
}
```

</details>

### LLM friendly mode

The OpenBB Platform provides a way to enable the Large Language Model (LLM) mode, which allows you to use LLM frameworks such as [Magentic](https://github.com/jackmpcollins/magentic), [Langchain](https://github.com/langchain-ai/langchain), [Haystack](https://github.com/deepset-ai/haystack), and more.

This guide outlines the steps to enable LLM mode in the OpenBB Platform.

We first start by importing the OpenBB Platform:

```python
from openbb import obb
```

The LLM mode is made possible by setting the system and user preferences to an LLM-compatible mode.

First, we set the user preference:

```python
obb.user.preferences.output_type="llm"
```

This line of code converts the `OBBject` response data results into a format that works good with LLM models. This is based on our own experience with building LLM agents for financial data. You can try other output types such as `dict`, or similar. You can also build your custom output type.

Next, we set the system preferences:

```python
obb.system.python_settings.docstring_sections=['description', 'examples']
```

This system preference trims the docstrings of the commands so that they can fit into the LLM model's context size and also avoid redundant information. The redundant information comes from the information inside the signature of the command that is also written in the docstring.

As our docstrings are modular we can easily choose which section of the docstrings to include. Available docstring sections are the following:

- description
- parameters
- returns
- examples

The next step is to limit the size of the docstrings:

```python
obb.system.python_settings.docstring_max_length=1024
```

We do this to ensure that the docstrings are not too long for the LLM model to process. The LLM model has a limit on the number of tokens it can process at once, and this setting ensures that the docstrings are within that limit.

Finally, we can import `openbb` and rebuild the Python static assets to apply these system changes:

```python
import openbb
openbb.build()
```

Now you have successfully enabled LLM mode in the OpenBB Platform. You can now use LLM frameworks to interact with the OpenBB Platform and build financial agents that can understand and respond to financial data.

For example:

```python
from magentic import prompt_chain, FunctionCall, OpenaiChatModel

@prompt_chain(
    "You are a helpful financial agent that can use function calling to retrieve data.\nUser Query: {query}",
    functions=[obb.equity.price.quote],
    model=OpenaiChatModel(model="gpt-4-turbo-preview")
)
def llm(query: str) -> FunctionCall | str: ...

r = llm(query="What is the current stock price of AAPL?")
r
```

## REST API

The OpenBB Platform comes with a FastAPI application that serves platform commands as REST API endpoints.

Activate the Python environment and then start the server from a Terminal command line with:

```console
uvicorn openbb_core.api.rest_api:app
```

:::info
See [System Settings](/platform/settings/system_settings) for details on configuring settings in `system_settings.json`
:::

You can add arguments that are supported by `uvicorn` to customize how the API is launched.
For example this command will be useful if you are developing. It will launch the API in a way it's reachable on your local network and reload every time the code changes:

```console
uvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload
```

To learn more about how you can run the API in different scenarios refer to [uvicorn's documentation](https://www.uvicorn.org/#command-line-options)

### API Documentation

The Fast API app comes with a swagger documentation page. When running the API locally, navigate to [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs).

The API Docs provide interactive descriptions of all available endpoints that you can call right from the documentation web page.

### Data API Keys

The API keys to your data providers are loaded from the `~/.openbb_platform/user_settings.json` file.

You can find more information about the structure of the file and environment variables in the [Local Environment](/platform/settings/user_settings/api_keys) section.

### API Authorization

By default, no authorization is required. Basic authorization can be enabled with environment variables. In the `~/.openbb_platform` folder, next to the `user_settings.json`, create a new file, `.env`, if it does not yet exist. Set your Basic Auth credentials.

```.env
OPENBB_API_AUTH="True"
OPENBB_API_USERNAME="my_email"
OPENBB_API_PASSWORD="my_password"
```

The application will expect a header that contains username and password in the form of `Basic <username:password>`, where "username:password" is encoded in Base64. Pass this in every request to the API inside the headers "Authorization" field.

Here is an example of calling the API that has Basic Authorization enabled from python.

```python
import base64
import requests

msg = "some_user:some_pass"
msg_bytes = msg.encode('ascii')
base64_bytes = base64.b64encode(msg_bytes)
base64_msg = base64_bytes.decode('ascii')


symbol="SPY"
url = f"http://127.0.0.1:8000/api/v1/equity/price/quote?provider=intrinio&symbol={symbol}&source=intrinio_mx"
headers = {"accept": "application/json", "Authorization": f"Basic {base64_msg}"}

response = requests.get(url=url, headers=headers)

response.json()
```

### Advanced API Settings

:::info
See [System Settings](/platform/settings/system_settings) for details on configuring settings in `system_settings.json`
:::

When deploying the API to the public internet, it's crucial to configure it in a way you ensure the application functions correctly and securely. Two critical aspects to consider are Cross-Origin Resource Sharing (CORS) and the configuration of the "servers" list.

The configuration for these settings is managed through the `system_settings.json` file, which should be located in the same directory as your `user_settings.json`. This JSON file allows you to specify various settings that affect the behavior of the API. Here's an example structure of the `system_settings.json` file:

```json
{
  "api_settings": {
    "version": "1",
    "title": "OpenBB Platform API",
    "description": "This is the OpenBB Platform API.",
    "terms_of_service": "http://example.com/terms/",
    "contact_name": "OpenBB Team",
    "contact_url": "https://openbb.co",
    "contact_email": "hello@openbb.co",
    "license_name": "AGPLv3",
    "license_url": "https://github.com/OpenBB-finance/OpenBB/blob/develop/LICENSE",
    "servers": [
      {
        "url": "",
        "description": "Local OpenBB development server"
      }
    ],
    "cors": {
      "allow_origins": ["*"],
      "allow_methods": ["*"],
      "allow_headers": ["*"]
    },
    "prefix": "/api/v1"
  }
}
```

### CORS Configuration

The cors section within the api_settings is particularly important for web applications. It defines the rules for which external domains are allowed to access your API.

In the example above, the settings are permissive ("\*" for origins, methods, and headers), which means any external domain can request resources from your API. This setting might be suitable for development, but when deploying to public internet, you should specify the exact domains, methods, and headers to tighten security.

### Servers List

The servers array is used to specify the different environments where your API can be accessed.

In the example, there is only one server defined, which is the local development server. For deployment to public internet, you would add an entry for the public server URL and any other environments where your API is accessible.
